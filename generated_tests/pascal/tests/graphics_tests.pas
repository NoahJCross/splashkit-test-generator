uses SplashKit, TestFramework, ../Helpers;
type
    TTestGraphics = class(TTestCase)
    protected
        procedure Setup; override;
    end;
begin
    inherited;
    SetResourcesPath('/mnt/c/Users/Noahc/Documents/aYear_2_semester_2/TeamProject/GitHubRepo/splashkit_test_generator/resources');
end;
procedure TestDrawCircleRecordIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    testCircle := CircleAt(400.0, 300.0, 50.0);
    DrawCircle(ColorBlack(), testCircle);
    AssertEquals(ColorBlack(), GetPixel(testWindow, 450.0, 300.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 400.0, 300.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 460.0, 300.0));
end;
procedure TestDrawCircleRecordWithOptionsIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    testCircle := CircleAt(400.0, 300.0, 50.0);
    DrawCircle(ColorBlack(), testCircle, OptionDefaults());
    AssertEquals(ColorBlack(), GetPixel(testWindow, 450.0, 300.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 400.0, 300.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 460.0, 300.0));
end;
procedure TestDrawCircleIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    DrawCircle(ColorBlack(), 400.0, 300.0, 50.0);
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 450.0, 300.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 425.0, 300.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 460.0, 300.0));
end;
procedure TestDrawCircleWithOptionsIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    DrawCircle(ColorBlack(), 400.0, 300.0, 50.0, OptionDefaults());
    AssertEquals(ColorBlack(), GetPixel(testWindow, 450.0, 300.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 400.0, 300.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 460.0, 300.0));
end;
procedure TestDrawCircleOnBitmapIntegration;
begin
    testBitmap := CreateBitmap('test_bitmap', 200, 200);
    CleanupBitmap := TBitmapCleanup.Create;
    ClearBitmap(testBitmap, ColorWhite());
    DrawCircleOnBitmap(testBitmap, ColorBlack(), 100.0, 100.0, 50.0);
    AssertEquals(ColorBlack(), GetPixel(testBitmap, 150.0, 100.0));
    AssertEquals(ColorWhite(), GetPixel(testBitmap, 100.0, 100.0));
    AssertEquals(ColorWhite(), GetPixel(testBitmap, 160.0, 100.0));
end;
procedure TestDrawCircleOnBitmapWithOptionsIntegration;
begin
    testBitmap := CreateBitmap('test_bitmap', 200, 200);
    CleanupBitmap := TBitmapCleanup.Create;
    ClearBitmap(testBitmap, ColorWhite());
    DrawCircleOnBitmap(testBitmap, ColorBlack(), 100.0, 100.0, 50.0, OptionDefaults());
    AssertEquals(ColorBlack(), GetPixel(testBitmap, 150.0, 100.0));
    AssertEquals(ColorWhite(), GetPixel(testBitmap, 100.0, 100.0));
    AssertEquals(ColorWhite(), GetPixel(testBitmap, 160.0, 100.0));
end;
procedure TestDrawCircleOnWindowIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    DrawCircleOnWindow(testWindow, ColorBlack(), 400.0, 300.0, 50.0);
    AssertEquals(ColorBlack(), GetPixel(testWindow, 450.0, 300.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 400.0, 300.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 460.0, 300.0));
end;
procedure TestDrawCircleOnWindowWithOptionsIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    DrawCircleOnWindow(testWindow, ColorBlack(), 400.0, 300.0, 50.0, OptionDefaults());
    AssertEquals(ColorBlack(), GetPixel(testWindow, 450.0, 300.0));
    AssertEquals(ColorBlack(), GetPixel(testWindow, 350.0, 300.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 400.0, 400.0));
end;
procedure TestFillCircleRecordIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    testCircle := CircleAt(400.0, 300.0, 50.0);
    FillCircle(ColorBlack(), testCircle);
    AssertEquals(ColorBlack(), GetPixel(testWindow, 400.0, 300.0));
    AssertEquals(ColorBlack(), GetPixel(testWindow, 425.0, 300.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 460.0, 300.0));
end;
procedure TestFillCircleRecordWithOptionsIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    testCircle := CircleAt(400.0, 300.0, 50.0);
    FillCircle(ColorBlack(), testCircle, OptionDefaults());
    AssertEquals(ColorBlack(), GetPixel(testWindow, 400.0, 300.0));
    AssertEquals(ColorBlack(), GetPixel(testWindow, 425.0, 300.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 460.0, 300.0));
end;
procedure TestFillCircleIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    FillCircle(ColorBlack(), 400.0, 300.0, 50.0);
    AssertEquals(ColorBlack(), GetPixel(testWindow, 400.0, 300.0));
    AssertEquals(ColorBlack(), GetPixel(testWindow, 425.0, 300.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 460.0, 300.0));
end;
procedure TestFillCircleWithOptionsIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    FillCircle(ColorBlack(), 400.0, 300.0, 50.0, OptionDefaults());
    AssertEquals(ColorBlack(), GetPixel(testWindow, 400.0, 300.0));
    AssertEquals(ColorBlack(), GetPixel(testWindow, 425.0, 300.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 460.0, 300.0));
end;
procedure TestFillCircleOnBitmapIntegration;
begin
    testBitmap := CreateBitmap('test_bitmap', 200, 200);
    CleanupBitmap := TBitmapCleanup.Create;
    ClearBitmap(testBitmap, ColorWhite());
    FillCircleOnBitmap(testBitmap, ColorRed(), 100.0, 100.0, 50.0);
    AssertEquals(ColorRed(), GetPixel(testBitmap, 100.0, 100.0));
    AssertEquals(ColorRed(), GetPixel(testBitmap, 125.0, 100.0));
    AssertEquals(ColorWhite(), GetPixel(testBitmap, 160.0, 100.0));
end;
procedure TestFillCircleOnBitmapWithOptionsIntegration;
begin
    testBitmap := CreateBitmap('test_bitmap', 200, 200);
    CleanupBitmap := TBitmapCleanup.Create;
    ClearBitmap(testBitmap, ColorWhite());
    FillCircleOnBitmap(testBitmap, ColorBlack(), 100.0, 100.0, 50.0, OptionDefaults());
    AssertEquals(ColorBlack(), GetPixel(testBitmap, 100.0, 100.0));
    AssertEquals(ColorBlack(), GetPixel(testBitmap, 125.0, 100.0));
    AssertEquals(ColorWhite(), GetPixel(testBitmap, 160.0, 100.0));
end;
procedure TestFillCircleOnWindowIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    FillCircleOnWindow(testWindow, ColorBlack(), 400.0, 300.0, 50.0);
    AssertEquals(ColorBlack(), GetPixel(testWindow, 400.0, 300.0));
    AssertEquals(ColorBlack(), GetPixel(testWindow, 425.0, 300.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 460.0, 300.0));
end;
procedure TestFillCircleOnWindowWithOptionsIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    FillCircleOnWindow(testWindow, ColorBlack(), 400.0, 300.0, 50.0, OptionDefaults());
    AssertEquals(ColorBlack(), GetPixel(testWindow, 400.0, 300.0));
    AssertEquals(ColorBlack(), GetPixel(testWindow, 425.0, 300.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 460.0, 300.0));
end;
procedure TestCurrentClipIntegration;
begin
    OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    testClip := CurrentClip();
    AssertEquals(0.0, RectangleLeft(testClip));
    AssertEquals(0.0, RectangleTop(testClip));
    AssertEquals(800.0, testClip.width);
    AssertEquals(600.0, testClip.height);
end;
procedure TestCurrentClipForBitmapIntegration;
begin
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    testRectangle := RectangleFrom(10.0, 10.0, 50.0, 50.0);
    PushClip(testBitmap, testRectangle);
    testClip := CurrentClip(testBitmap);
    AssertEquals(10.0, RectangleLeft(testClip));
    AssertEquals(10.0, RectangleTop(testClip));
    AssertEquals(50.0, testClip.width);
    AssertEquals(50.0, testClip.height);
end;
procedure TestCurrentClipForWindowIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    testClip := CurrentClip(testWindow);
    AssertEquals(0.0, RectangleLeft(testClip));
    AssertEquals(0.0, RectangleTop(testClip));
    AssertEquals(800.0, testClip.width);
    AssertEquals(600.0, testClip.height);
end;
procedure TestPopClipForWindowIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    testRectangle := RectangleFrom(0.0, 0.0, 250.0, 250.0);
    PushClip(testWindow, testRectangle);
    testCurrentClip := CurrentClip(testWindow);
    AssertEquals(0.0, RectangleLeft(testCurrentClip));
    AssertEquals(0.0, RectangleTop(testCurrentClip));
    AssertEquals(250.0, testCurrentClip.width);
    AssertEquals(250.0, testCurrentClip.height);
    PopClip(testWindow);
    testCurrentClipAfterPop := CurrentClip(testWindow);
    AssertEquals(0.0, RectangleLeft(testCurrentClipAfterPop));
    AssertEquals(0.0, RectangleTop(testCurrentClipAfterPop));
    AssertEquals(800.0, testCurrentClipAfterPop.width);
    AssertEquals(600.0, testCurrentClipAfterPop.height);
end;
procedure TestPopClipIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    PushClip(RectangleFrom(0.0, 0.0, 250.0, 250.0));
    FillRectangle(ColorRed(), 0.0, 0.0, 300.0, 300.0);
    RefreshScreen();
    AssertEquals(ColorRed(), GetPixel(testWindow, 125.0, 125.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 275.0, 275.0));
    PopClip();
    FillRectangle(ColorGreen(), 300.0, 300.0, 100.0, 100.0);
    RefreshScreen();
    AssertEquals(ColorRed(), GetPixel(testWindow, 125.0, 125.0));
    testColor := ColorGreen();
    testPixel := GetPixel(testWindow, 350.0, 350.0);
    AssertEquals(RedOf(testColor), RedOf(testPixel));
    AssertEquals(GreenOf(testColor), GreenOf(testPixel));
    AssertEquals(BlueOf(testColor), BlueOf(testPixel));
    AssertEquals(AlphaOf(testColor), AlphaOf(testPixel));
end;
procedure TestPopClipForBitmapIntegration;
begin
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    ClearBitmap(testBitmap, ColorWhite());
    PushClip(testBitmap, RectangleFrom(0.0, 0.0, 50.0, 50.0));
    FillCircle(ColorBlack(), 25.0, 25.0, 20.0, OptionDrawTo(testBitmap));
    AssertEquals(ColorBlack(), GetPixel(testBitmap, 25.0, 25.0));
    AssertEquals(ColorWhite(), GetPixel(testBitmap, 75.0, 75.0));
    PopClip(testBitmap);
    testClip := CurrentClip(testBitmap);
    AssertEquals(0.0, RectangleLeft(testClip));
    AssertEquals(0.0, RectangleTop(testClip));
    AssertEquals(100.0, testClip.width);
    AssertEquals(100.0, testClip.height);
end;
procedure TestPushClipForWindowIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    testRectangle := RectangleFrom(100.0, 100.0, 200.0, 200.0);
    PushClip(testWindow, testRectangle);
    testCurrentClip := CurrentClip(testWindow);
    AssertEquals(100.0, RectangleLeft(testCurrentClip));
    AssertEquals(100.0, RectangleTop(testCurrentClip));
    AssertEquals(200.0, testCurrentClip.width);
    AssertEquals(200.0, testCurrentClip.height);
    RefreshScreen();
end;
procedure TestPushClipForBitmapIntegration;
begin
    testBitmap := CreateBitmap('test_bitmap', 200, 200);
    CleanupBitmap := TBitmapCleanup.Create;
    testRectangle := RectangleFrom(50.0, 50.0, 100.0, 100.0);
    PushClip(testBitmap, testRectangle);
    testCurrentClip := CurrentClip(testBitmap);
    AssertEquals(50.0, RectangleLeft(testCurrentClip));
    AssertEquals(50.0, RectangleTop(testCurrentClip));
    AssertEquals(100.0, testCurrentClip.width);
    AssertEquals(100.0, testCurrentClip.height);
end;
procedure TestPushClipIntegration;
begin
    OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    testRectangle := RectangleFrom(100.0, 100.0, 200.0, 200.0);
    PushClip(testRectangle);
    testCurrentClip := CurrentClip();
    AssertEquals(100.0, RectangleLeft(testCurrentClip));
    AssertEquals(100.0, RectangleTop(testCurrentClip));
    AssertEquals(200.0, testCurrentClip.width);
    AssertEquals(200.0, testCurrentClip.height);
end;
procedure TestResetClipForBitmapIntegration;
begin
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    PushClip(testBitmap, RectangleFrom(10.0, 10.0, 50.0, 50.0));
    ResetClip(testBitmap);
    testClip := CurrentClip(testBitmap);
    AssertEquals(0.0, RectangleLeft(testClip));
    AssertEquals(0.0, RectangleTop(testClip));
    AssertEquals(100.0, testClip.width);
    AssertEquals(100.0, testClip.height);
end;
procedure TestResetClipIntegration;
begin
    OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    PushClip(RectangleFrom(100.0, 100.0, 200.0, 200.0));
    ResetClip();
    testClip := CurrentClip();
    AssertEquals(0.0, RectangleLeft(testClip));
    AssertEquals(0.0, RectangleTop(testClip));
    AssertEquals(800.0, testClip.width);
    AssertEquals(600.0, testClip.height);
end;
procedure TestResetClipForWindowIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    PushClip(testWindow, RectangleFrom(100.0, 100.0, 200.0, 200.0));
    ResetClip(testWindow);
    testClip := CurrentClip(testWindow);
    AssertEquals(0.0, RectangleLeft(testClip));
    AssertEquals(0.0, RectangleTop(testClip));
    AssertEquals(800.0, testClip.width);
    AssertEquals(600.0, testClip.height);
end;
procedure TestSetClipIntegration;
begin
    OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    testRectangle := RectangleFrom(100.0, 100.0, 200.0, 200.0);
    SetClip(testRectangle);
    testCurrentClip := CurrentClip();
    AssertEquals(100.0, RectangleLeft(testCurrentClip));
    AssertEquals(100.0, RectangleTop(testCurrentClip));
    AssertEquals(200.0, testCurrentClip.width);
    AssertEquals(200.0, testCurrentClip.height);
end;
procedure TestSetClipForBitmapIntegration;
begin
    testBitmap := CreateBitmap('test_bitmap', 200, 200);
    CleanupBitmap := TBitmapCleanup.Create;
    testRectangle := RectangleFrom(50.0, 50.0, 100.0, 100.0);
    SetClip(testBitmap, testRectangle);
    testCurrentClip := CurrentClip(testBitmap);
    AssertEquals(50.0, RectangleLeft(testCurrentClip));
    AssertEquals(50.0, RectangleTop(testCurrentClip));
    AssertEquals(100.0, testCurrentClip.width);
    AssertEquals(100.0, testCurrentClip.height);
end;
procedure TestSetClipForWindowIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    testRectangle := RectangleFrom(100.0, 100.0, 200.0, 200.0);
    SetClip(testWindow, testRectangle);
    testCurrentClip := CurrentClip(testWindow);
    AssertEquals(100.0, RectangleLeft(testCurrentClip));
    AssertEquals(100.0, RectangleTop(testCurrentClip));
    AssertEquals(200.0, testCurrentClip.width);
    AssertEquals(200.0, testCurrentClip.height);
end;
procedure TestOptionDefaultsIntegration;
begin
    testOptions := OptionDefaults();
    AssertNotNull(testOptions);
end;
procedure TestOptionDrawToBitmapIntegration;
begin
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    ClearBitmap(testBitmap, ColorWhite());
    testOptions := OptionDrawTo(testBitmap);
    DrawCircle(ColorBlack(), CircleAt(50.0, 50.0, 25.0), testOptions);
    AssertEquals(ColorBlack(), GetPixel(testBitmap, 75.0, 50.0));
    AssertEquals(ColorWhite(), GetPixel(testBitmap, 90.0, 90.0));
end;
procedure TestOptionDrawToBitmapWithOptionsIntegration;
begin
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    ClearBitmap(testBitmap, ColorWhite());
    testOptions := OptionDefaults();
    testDrawingOptions := OptionDrawTo(testBitmap, testOptions);
    DrawCircle(ColorBlack(), CircleAt(50.0, 50.0, 25.0), testDrawingOptions);
    AssertEquals(ColorBlack(), GetPixel(testBitmap, 75.0, 50.0));
    AssertEquals(ColorWhite(), GetPixel(testBitmap, 90.0, 90.0));
end;
procedure TestOptionDrawToWindowIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    DrawCircle(ColorBlack(), CircleAt(400.0, 300.0, 50.0), OptionDrawTo(testWindow));
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 450.0, 300.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 460.0, 300.0));
end;
procedure TestOptionDrawToWindowWithOptionsIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    testOptions := OptionDefaults();
    DrawCircle(ColorBlack(), CircleAt(400.0, 300.0, 50.0), OptionDrawTo(testWindow, testOptions));
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 450.0, 300.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 460.0, 300.0));
end;
procedure TestOptionFlipXIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    ClearBitmap(testBitmap, ColorWhite());
    FillRectangleOnBitmap(testBitmap, ColorBlack(), 0.0, 0.0, 50.0, 100.0);
    DrawBitmap(testBitmap, 100.0, 100.0, OptionFlipX());
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 125.0, 100.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 75.0, 100.0));
    FreeBitmap(testBitmap);
end;
procedure TestOptionFlipXWithOptionsIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    ClearBitmap(testBitmap, ColorWhite());
    FillRectangleOnBitmap(testBitmap, ColorBlack(), 0.0, 0.0, 50.0, 100.0);
    DrawBitmap(testBitmap, 400.0, 300.0, OptionFlipX(OptionDefaults()));
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 425.0, 300.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 375.0, 300.0));
    FreeBitmap(testBitmap);
end;
procedure TestOptionFlipXyIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    ClearBitmap(testBitmap, ColorWhite());
    FillRectangleOnBitmap(testBitmap, ColorBlack(), 0.0, 0.0, 50.0, 50.0);
    DrawBitmap(testBitmap, 400.0, 300.0, OptionFlipXy());
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 450.0, 350.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 450.0, 250.0));
    FreeBitmap(testBitmap);
end;
procedure TestOptionFlipXyWithOptionsIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    ClearBitmap(testBitmap, ColorWhite());
    FillRectangleOnBitmap(testBitmap, ColorBlack(), 0.0, 0.0, 50.0, 50.0);
    DrawBitmap(testBitmap, 400.0, 300.0, OptionFlipXy(OptionDefaults()));
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 450.0, 350.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 450.0, 250.0));
    FreeBitmap(testBitmap);
end;
procedure TestOptionFlipYIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    ClearBitmap(testBitmap, ColorWhite());
    FillRectangleOnBitmap(testBitmap, ColorBlack(), 0.0, 0.0, 100.0, 50.0);
    DrawBitmap(testBitmap, 400.0, 300.0, OptionFlipY());
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 400.0, 325.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 400.0, 275.0));
    FreeBitmap(testBitmap);
end;
procedure TestOptionFlipYWithOptionsIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    ClearBitmap(testBitmap, ColorWhite());
    FillRectangleOnBitmap(testBitmap, ColorBlack(), 0.0, 0.0, 100.0, 50.0);
    DrawBitmap(testBitmap, 400.0, 300.0, OptionFlipY(OptionDefaults()));
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 400.0, 325.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 400.0, 275.0));
    FreeBitmap(testBitmap);
end;
procedure TestOptionLineWidthIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    DrawLine(ColorBlack(), 100.0, 100.0, 200.0, 200.0, OptionLineWidth(5));
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 150.0, 150.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 140.0, 150.0));
end;
procedure TestOptionLineWidthWithOptionsIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    DrawLine(ColorBlack(), 100.0, 100.0, 200.0, 200.0, OptionLineWidth(5, OptionDefaults()));
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 150.0, 150.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 145.0, 150.0));
end;
procedure TestOptionPartBmpIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    ClearBitmap(testBitmap, ColorBlack());
    DrawBitmap(testBitmap, 100.0, 100.0, OptionPartBmp(0.0, 0.0, 50.0, 50.0));
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 125.0, 125.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 175.0, 175.0));
    FreeBitmap(testBitmap);
end;
procedure TestOptionPartBmpWithOptionsIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    ClearBitmap(testBitmap, ColorBlack());
    DrawBitmap(testBitmap, 100.0, 100.0, OptionPartBmp(0.0, 0.0, 50.0, 50.0, OptionDefaults()));
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 125.0, 125.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 175.0, 175.0));
    FreeBitmap(testBitmap);
end;
procedure TestOptionPartBmpFromRectangleIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    ClearBitmap(testBitmap, ColorBlack());
    DrawBitmap(testBitmap, 0.0, 0.0, OptionPartBmp(RectangleFrom(0.0, 0.0, 50.0, 50.0)));
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 25.0, 25.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 75.0, 75.0));
    FreeBitmap(testBitmap);
end;
procedure TestOptionPartBmpFromRectangleWithOptionsIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    ClearBitmap(testBitmap, ColorBlack());
    DrawBitmap(testBitmap, 0.0, 0.0, OptionPartBmp(RectangleFrom(0.0, 0.0, 50.0, 50.0), OptionDefaults()));
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 25.0, 25.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 75.0, 75.0));
    FreeBitmap(testBitmap);
end;
procedure TestOptionRotateBmpIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    ClearBitmap(testBitmap, ColorWhite());
    FillRectangleOnBitmap(testBitmap, ColorBlack(), 0.0, 0.0, 50.0, 100.0);
    DrawBitmap(testBitmap, 400.0, 300.0, OptionRotateBmp(90.0));
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 400.0, 300.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 400.0, 350.0));
    FreeBitmap(testBitmap);
end;
procedure TestOptionRotateBmpWithAnchorIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    ClearBitmap(testBitmap, ColorWhite());
    FillRectangleOnBitmap(testBitmap, ColorBlack(), 0.0, 0.0, 50.0, 100.0);
    DrawBitmap(testBitmap, 400.0, 300.0, OptionRotateBmp(90.0, 50.0, 50.0));
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 500.0, 300.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 450.0, 300.0));
    FreeBitmap(testBitmap);
end;
procedure TestOptionRotateBmpWithAnchorAndOptionsIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    ClearBitmap(testBitmap, ColorWhite());
    FillRectangleOnBitmap(testBitmap, ColorBlack(), 0.0, 0.0, 50.0, 100.0);
    DrawBitmap(testBitmap, 400.0, 300.0, OptionRotateBmp(90.0, 50.0, 50.0, OptionDefaults()));
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 500.0, 300.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 400.0, 300.0));
    FreeBitmap(testBitmap);
end;
procedure TestOptionRotateBmpWithOptionsIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    ClearBitmap(testBitmap, ColorWhite());
    FillRectangleOnBitmap(testBitmap, ColorBlack(), 0.0, 0.0, 50.0, 100.0);
    DrawBitmap(testBitmap, 400.0, 300.0, OptionRotateBmp(90.0, OptionDefaults()));
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 400.0, 300.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 400.0, 350.0));
    FreeBitmap(testBitmap);
end;
procedure TestOptionScaleBmpIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    testBitmap := CreateBitmap('test_bitmap', 50, 50);
    CleanupBitmap := TBitmapCleanup.Create;
    ClearBitmap(testBitmap, ColorBlack());
    DrawBitmap(testBitmap, 400.0, 300.0, OptionScaleBmp(2.0, 2.0));
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 451.0, 300.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 500.0, 300.0));
    FreeBitmap(testBitmap);
end;
procedure TestOptionScaleBmpWithOptionsIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    testBitmap := CreateBitmap('test_bitmap', 50, 50);
    CleanupBitmap := TBitmapCleanup.Create;
    ClearBitmap(testBitmap, ColorBlack());
    DrawBitmap(testBitmap, 400.0, 300.0, OptionScaleBmp(2.0, 2.0, OptionDefaults()));
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 451.0, 300.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 500.0, 300.0));
    FreeBitmap(testBitmap);
end;
procedure TestOptionToScreenIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    DrawCircle(ColorBlack(), CircleAt(400.0, 300.0, 50.0), OptionToScreen());
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 450.0, 300.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 451.0, 300.0));
end;
procedure TestOptionToScreenWithOptionsIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    DrawCircle(ColorBlack(), CircleAt(400.0, 300.0, 50.0), OptionToScreen(OptionDefaults()));
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 400.0, 250.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 400.0, 300.0));
end;
procedure TestOptionToWorldIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    MoveCameraTo(100.0, 100.0);
    DrawCircle(ColorBlack(), CircleAt(400.0, 300.0, 50.0), OptionToWorld());
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 350.0, 200.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 375.0, 200.0));
end;
procedure TestOptionToWorldWithOptionsIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    MoveCameraTo(100.0, 100.0);
    DrawCircle(ColorBlack(), CircleAt(400.0, 300.0, 50.0), OptionToWorld(OptionDefaults()));
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 350.0, 200.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 375.0, 200.0));
end;
procedure TestOptionWithAnimationIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    kermitScript := LoadAnimationScript('kermit', 'kermit.txt');
    CleanupAnimationScript := TAnimationScriptCleanup.Create;
    testAnimation := CreateAnimation(kermitScript, 'moonwalkback');
    CleanupAnimation := TAnimationCleanup.Create(testAnimation)
    testBitmap := LoadBitmap('frog', 'frog.png');
    CleanupBitmap := TBitmapCleanup.Create;
    BitmapSetCellDetails(testBitmap, 73, 105, 4, 4, 16);
    while WindowCloseRequested(testWindow) = false do
        ClearScreen();
        DrawBitmap(testBitmap, 100.0, 100.0, OptionWithAnimation(testAnimation));
        DrawText('Test: option_with_animation. Should be moving. Close when done.', ColorBlack(), 10.0, 10.0);
        UpdateAnimation(testAnimation);
        Delay(100);
        RefreshScreen();
    end;
end;
procedure TestOptionWithAnimationWithOptionsIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    kermitScript := LoadAnimationScript('kermit', 'kermit.txt');
    CleanupAnimationScript := TAnimationScriptCleanup.Create;
    testAnimation := CreateAnimation(kermitScript, 'moonwalkback');
    CleanupAnimation := TAnimationCleanup.Create(testAnimation)
    testBitmap := LoadBitmap('frog', 'frog.png');
    CleanupBitmap := TBitmapCleanup.Create;
    BitmapSetCellDetails(testBitmap, 73, 105, 4, 4, 16);
    while WindowCloseRequested(testWindow) = false do
        ClearScreen();
        DrawBitmap(testBitmap, 100.0, 100.0, OptionWithAnimation(testAnimation, OptionDefaults()));
        DrawText('Test: option_with_animation_with_options. Should be moving. Close when done.', ColorBlack(), 10.0, 10.0);
        UpdateAnimation(testAnimation);
        Delay(100);
        RefreshScreen();
    end;
end;
procedure TestOptionWithBitmapCellIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    testBitmap := CreateBitmap('test_bitmap', 64, 64);
    CleanupBitmap := TBitmapCleanup.Create;
    ClearBitmap(testBitmap, ColorBlack());
    BitmapSetCellDetails(testBitmap, 32, 32, 2, 2, 4);
    DrawBitmap(testBitmap, 100.0, 100.0, OptionWithBitmapCell(1));
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 116.0, 116.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 84.0, 84.0));
    FreeBitmap(testBitmap);
end;
procedure TestOptionWithBitmapCellWithOptionsIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    testBitmap := CreateBitmap('test_bitmap', 64, 64);
    CleanupBitmap := TBitmapCleanup.Create;
    ClearBitmap(testBitmap, ColorBlack());
    BitmapSetCellDetails(testBitmap, 32, 32, 2, 2, 4);
    DrawBitmap(testBitmap, 100.0, 100.0, OptionWithBitmapCell(1, OptionDefaults()));
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 116.0, 116.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 84.0, 84.0));
    FreeBitmap(testBitmap);
end;
procedure TestDrawEllipseWithinRectangleIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    DrawEllipse(ColorBlack(), RectangleFrom(100.0, 100.0, 200.0, 150.0));
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 300.0, 175.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 200.0, 175.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 350.0, 175.0));
end;
procedure TestDrawEllipseWithinRectangleWithOptionsIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    DrawEllipse(ColorBlack(), RectangleFrom(100.0, 100.0, 200.0, 100.0), OptionDefaults());
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 300.0, 150.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 200.0, 150.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 350.0, 150.0));
end;
procedure TestDrawEllipseIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    DrawEllipse(ColorBlack(), 400.0, 300.0, 100.0, 50.0);
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 450.0, 300.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 400.0, 300.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 500.0, 300.0));
end;
procedure TestDrawEllipseWithOptionsIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    DrawEllipse(ColorBlack(), 400.0, 300.0, 100.0, 50.0, OptionDefaults());
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 450.0, 300.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 400.0, 300.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 500.0, 300.0));
end;
procedure TestDrawEllipseOnBitmapWithinRectangleIntegration;
begin
    testBitmap := CreateBitmap('test_bitmap', 200, 200);
    CleanupBitmap := TBitmapCleanup.Create;
    ClearBitmap(testBitmap, ColorWhite());
    rect := RectangleFrom(50.0, 50.0, 100.0, 100.0);
    DrawEllipseOnBitmap(testBitmap, ColorBlack(), rect);
    AssertEquals(ColorBlack(), GetPixel(testBitmap, 150.0, 100.0));
    AssertEquals(ColorWhite(), GetPixel(testBitmap, 125.0, 100.0));
    AssertEquals(ColorWhite(), GetPixel(testBitmap, 175.0, 100.0));
end;
procedure TestDrawEllipseOnBitmapWithinRectangleWithOptionsIntegration;
begin
    testBitmap := CreateBitmap('test_bitmap', 200, 200);
    CleanupBitmap := TBitmapCleanup.Create;
    ClearBitmap(testBitmap, ColorWhite());
    DrawEllipseOnBitmap(testBitmap, ColorBlack(), RectangleFrom(50.0, 50.0, 100.0, 100.0), OptionDefaults());
    AssertEquals(ColorBlack(), GetPixel(testBitmap, 150.0, 100.0));
    AssertEquals(ColorWhite(), GetPixel(testBitmap, 125.0, 100.0));
    AssertEquals(ColorWhite(), GetPixel(testBitmap, 175.0, 100.0));
end;
procedure TestDrawEllipseOnBitmapIntegration;
begin
    testBitmap := CreateBitmap('test_bitmap', 200, 200);
    CleanupBitmap := TBitmapCleanup.Create;
    ClearBitmap(testBitmap, ColorWhite());
    DrawEllipseOnBitmap(testBitmap, ColorBlack(), 100.0, 100.0, 50.0, 30.0);
    AssertEquals(ColorBlack(), GetPixel(testBitmap, 125.0, 100.0));
    AssertEquals(ColorWhite(), GetPixel(testBitmap, 100.0, 100.0));
    AssertEquals(ColorWhite(), GetPixel(testBitmap, 160.0, 100.0));
end;
procedure TestDrawEllipseOnBitmapWithOptionsIntegration;
begin
    testBitmap := CreateBitmap('test_bitmap', 200, 200);
    CleanupBitmap := TBitmapCleanup.Create;
    ClearBitmap(testBitmap, ColorWhite());
    DrawEllipseOnBitmap(testBitmap, ColorBlack(), 100.0, 100.0, 50.0, 30.0, OptionDefaults());
    AssertEquals(ColorBlack(), GetPixel(testBitmap, 125.0, 100.0));
    AssertEquals(ColorWhite(), GetPixel(testBitmap, 100.0, 100.0));
    AssertEquals(ColorWhite(), GetPixel(testBitmap, 160.0, 100.0));
end;
procedure TestDrawEllipseOnWindowWithinRectangleIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    rect := RectangleFrom(100.0, 100.0, 200.0, 100.0);
    DrawEllipseOnWindow(testWindow, ColorBlack(), rect);
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 300.0, 150.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 250.0, 150.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 350.0, 150.0));
end;
procedure TestDrawEllipseOnWindowWithinRectangleWithOptionsIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    rect := RectangleFrom(100.0, 100.0, 200.0, 100.0);
    DrawEllipseOnWindow(testWindow, ColorBlack(), rect, OptionDefaults());
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 300.0, 150.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 250.0, 150.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 350.0, 150.0));
end;
procedure TestDrawEllipseOnWindowIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    DrawEllipseOnWindow(testWindow, ColorBlack(), 400.0, 300.0, 100.0, 50.0);
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 450.0, 300.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 400.0, 300.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 500.0, 300.0));
end;
procedure TestDrawEllipseOnWindowWithOptionsIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    DrawEllipseOnWindow(testWindow, ColorBlack(), 400.0, 300.0, 100.0, 50.0, OptionDefaults());
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 450.0, 300.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 450.0, 325.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 500.0, 300.0));
end;
procedure TestFillEllipseWithinRectangleIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    FillEllipse(ColorBlack(), RectangleFrom(100.0, 100.0, 200.0, 100.0));
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 200.0, 100.0));
    AssertEquals(ColorBlack(), GetPixel(testWindow, 150.0, 150.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 50.0, 50.0));
end;
procedure TestFillEllipseWithinRectangleWithOptionsIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    FillEllipse(ColorBlack(), RectangleFrom(100.0, 100.0, 200.0, 100.0), OptionDefaults());
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 200.0, 100.0));
    AssertEquals(ColorBlack(), GetPixel(testWindow, 150.0, 150.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 50.0, 50.0));
end;
procedure TestFillEllipseIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    FillEllipse(ColorBlack(), 400.0, 300.0, 100.0, 50.0);
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 450.0, 300.0));
    AssertEquals(ColorBlack(), GetPixel(testWindow, 450.0, 325.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 500.0, 300.0));
end;
procedure TestFillEllipseWithOptionsIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    FillEllipse(ColorBlack(), 400.0, 300.0, 100.0, 50.0, OptionDefaults());
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 450.0, 300.0));
    AssertEquals(ColorBlack(), GetPixel(testWindow, 450.0, 325.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 300.0, 300.0));
end;
procedure TestFillEllipseOnBitmapWithinRectangleIntegration;
begin
    testBitmap := CreateBitmap('test_bitmap', 200, 200);
    CleanupBitmap := TBitmapCleanup.Create;
    ClearBitmap(testBitmap, ColorWhite());
    FillEllipseOnBitmap(testBitmap, ColorBlack(), RectangleFrom(50.0, 50.0, 100.0, 100.0));
    AssertEquals(ColorBlack(), GetPixel(testBitmap, 100.0, 100.0));
    AssertEquals(ColorBlack(), GetPixel(testBitmap, 75.0, 75.0));
    AssertEquals(ColorWhite(), GetPixel(testBitmap, 175.0, 175.0));
end;
procedure TestFillEllipseOnBitmapWithinRectangleWithOptionsIntegration;
begin
    testBitmap := CreateBitmap('test_bitmap', 200, 200);
    CleanupBitmap := TBitmapCleanup.Create;
    ClearBitmap(testBitmap, ColorWhite());
    FillEllipseOnBitmap(testBitmap, ColorBlack(), RectangleFrom(50.0, 50.0, 100.0, 100.0), OptionDefaults());
    AssertEquals(ColorBlack(), GetPixel(testBitmap, 100.0, 100.0));
    AssertEquals(ColorBlack(), GetPixel(testBitmap, 75.0, 75.0));
    AssertEquals(ColorWhite(), GetPixel(testBitmap, 175.0, 175.0));
end;
procedure TestFillEllipseOnBitmapIntegration;
begin
    testBitmap := CreateBitmap('test_bitmap', 200, 200);
    CleanupBitmap := TBitmapCleanup.Create;
    ClearBitmap(testBitmap, ColorWhite());
    FillEllipseOnBitmap(testBitmap, ColorBlack(), 100.0, 100.0, 50.0, 30.0);
    AssertEquals(ColorBlack(), GetPixel(testBitmap, 125.0, 100.0));
    AssertEquals(ColorBlack(), GetPixel(testBitmap, 125.0, 125.0));
    AssertEquals(ColorWhite(), GetPixel(testBitmap, 150.0, 100.0));
end;
procedure TestFillEllipseOnBitmapWithOptionsIntegration;
begin
    testBitmap := CreateBitmap('test_bitmap', 200, 200);
    CleanupBitmap := TBitmapCleanup.Create;
    ClearBitmap(testBitmap, ColorWhite());
    FillEllipseOnBitmap(testBitmap, ColorBlack(), 50.0, 50.0, 100.0, 50.0, OptionDefaults());
    AssertEquals(ColorBlack(), GetPixel(testBitmap, 100.0, 50.0));
    AssertEquals(ColorBlack(), GetPixel(testBitmap, 100.0, 75.0));
    AssertEquals(ColorWhite(), GetPixel(testBitmap, 150.0, 50.0));
end;
procedure TestFillEllipseOnWindowWithinRectangleIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    FillEllipseOnWindow(testWindow, ColorBlack(), RectangleFrom(100.0, 100.0, 200.0, 150.0));
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 200.0, 175.0));
    AssertEquals(ColorBlack(), GetPixel(testWindow, 150.0, 175.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 350.0, 175.0));
end;
procedure TestFillEllipseOnWindowWithinRectangleWithOptionsIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    FillEllipseOnWindow(testWindow, ColorBlack(), RectangleFrom(100.0, 100.0, 200.0, 150.0), OptionDefaults());
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 200.0, 175.0));
    AssertEquals(ColorBlack(), GetPixel(testWindow, 150.0, 175.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 350.0, 175.0));
end;
procedure TestFillEllipseOnWindowIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    FillEllipseOnWindow(testWindow, ColorBlack(), 400.0, 300.0, 100.0, 50.0);
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 450.0, 300.0));
    AssertEquals(ColorBlack(), GetPixel(testWindow, 450.0, 325.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 500.0, 300.0));
end;
procedure TestFillEllipseOnWindowWithOptionsIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    FillEllipseOnWindow(testWindow, ColorBlack(), 400.0, 300.0, 100.0, 50.0, OptionDefaults());
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 450.0, 300.0));
    AssertEquals(ColorBlack(), GetPixel(testWindow, 450.0, 325.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 500.0, 300.0));
end;
procedure TestClearScreenToWhiteIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    DrawPixel(ColorBlack(), 100.0, 100.0);
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 100.0, 100.0));
    ClearScreen();
    RefreshScreen();
    AssertEquals(ColorWhite(), GetPixel(testWindow, 100.0, 100.0));
end;
procedure TestClearScreenIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    DrawPixel(ColorBlack(), 100.0, 100.0);
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 100.0, 100.0));
    ClearScreen(ColorWhite());
    RefreshScreen();
    AssertEquals(ColorWhite(), GetPixel(testWindow, 100.0, 100.0));
end;
procedure TestDisplayDetailsIntegration;
begin
    displays := NumberOfDisplays();
    AssertTrue(displays > 0);
    display := DisplayDetails(Cardinal(0));
    AssertNotNull(display);
    AssertTrue(DisplayWidth(display) > 0);
    AssertTrue(DisplayHeight(display) > 0);
    AssertTrue(Length(DisplayName(display)) > 0);
end;
procedure TestDisplayHeightIntegration;
begin
    display := DisplayDetails(Cardinal(0));
    AssertTrue(DisplayHeight(display) > 0);
end;
procedure TestDisplayNameIntegration;
begin
    display := DisplayDetails(Cardinal(0));
    AssertTrue(Length(DisplayName(display)) > 0);
    AssertTrue(Length(DisplayName(display)) > 0);
end;
procedure TestDisplayWidthIntegration;
begin
    display := DisplayDetails(Cardinal(0));
    AssertTrue(DisplayWidth(display) > 0);
end;
procedure TestDisplayXIntegration;
begin
    display := DisplayDetails(Cardinal(0));
    AssertEquals(0, DisplayX(display));
end;
procedure TestDisplayYIntegration;
begin
    display := DisplayDetails(Cardinal(0));
    AssertEquals(0, DisplayY(display));
end;
procedure TestNumberOfDisplaysIntegration;
begin
    AssertTrue(NumberOfDisplays() > 0);
end;
procedure TestRefreshScreenIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    DrawCircle(ColorBlack(), CircleAt(400.0, 300.0, 50.0));
    RefreshScreen();
end;
procedure TestRefreshScreenWithTargetFpsIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    DrawCircle(ColorBlack(), CircleAt(400.0, 300.0, 50.0));
    RefreshScreen(Cardinal(60));
end;
procedure TestSaveBitmapIntegration;
begin
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    ClearBitmap(testBitmap, ColorWhite());
    DrawPixelOnBitmap(testBitmap, ColorBlack(), 50.0, 50.0);
    SaveBitmap(testBitmap, 'test_bitmap');
end;
procedure TestScreenHeightIntegration;
begin
    OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    AssertEquals(600, ScreenHeight());
end;
procedure TestScreenWidthIntegration;
begin
    OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    AssertEquals(800, ScreenWidth());
end;
procedure TestTakeScreenshotIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    DrawCircle(ColorBlack(), CircleAt(400.0, 300.0, 50.0));
    RefreshScreen();
    TakeScreenshot('test_screenshot');
end;
procedure TestTakeScreenshotOfWindowIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    DrawCircle(ColorBlack(), CircleAt(400.0, 300.0, 50.0));
    RefreshScreen();
    TakeScreenshot(testWindow, 'test_screenshot');
end;
procedure TestBitmapBoundingCircleIntegration;
begin
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    testPoint := PointAt(50.0, 50.0);
    boundingCircle := BitmapBoundingCircle(testBitmap, testPoint);
    AssertEquals(testPoint, CenterPoint(boundingCircle));
    AssertEquals(100.0, CircleRadius(boundingCircle));
end;
procedure TestBitmapBoundingRectangleIntegration;
begin
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    boundingRect := BitmapBoundingRectangle(testBitmap);
    AssertEquals(0.0, boundingRect.x);
    AssertEquals(0.0, boundingRect.y);
    AssertEquals(100.0, boundingRect.width);
    AssertEquals(100.0, boundingRect.height);
end;
procedure TestBitmapBoundingRectangleAtLocationIntegration;
begin
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    boundingRect := BitmapBoundingRectangle(testBitmap, 50.0, 50.0);
    AssertEquals(50.0, boundingRect.x);
    AssertEquals(50.0, boundingRect.y);
    AssertEquals(100.0, boundingRect.width);
    AssertEquals(100.0, boundingRect.height);
end;
procedure TestBitmapCellCenterIntegration;
begin
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    center := BitmapCellCenter(testBitmap);
    AssertEquals(50.0, center.x);
    AssertEquals(50.0, center.y);
end;
procedure TestBitmapCellCircleIntegration;
begin
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    BitmapSetCellDetails(testBitmap, 50, 50, 2, 2, 4);
    circle := BitmapCellCircle(testBitmap, 50.0, 50.0);
    AssertEquals(50.0, circle.center.x);
    AssertEquals(50.0, circle.center.x);
    AssertEquals(25.0, circle.radius);
end;
procedure TestBitmapCellCircleAtPointIntegration;
begin
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    BitmapSetCellDetails(testBitmap, 50, 50, 2, 2, 4);
    circle := BitmapCellCircle(testBitmap, PointAt(100.0, 100.0));
    AssertEquals(100.0, circle.center.x);
    AssertEquals(100.0, circle.center.x);
    AssertEquals(25.0, circle.radius);
end;
procedure TestBitmapCellCircleAtPointWithScaleIntegration;
begin
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    BitmapSetCellDetails(testBitmap, 50, 50, 2, 2, 4);
    circle := BitmapCellCircle(testBitmap, PointAt(100.0, 100.0), 2.0);
    AssertEquals(100.0, circle.center.x);
    AssertEquals(100.0, circle.center.x);
    AssertEquals(50.0, circle.radius);
end;
procedure TestBitmapCellColumnsIntegration;
begin
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    BitmapSetCellDetails(testBitmap, 20, 20, 5, 5, 25);
    AssertEquals(5, BitmapCellColumns(testBitmap));
end;
procedure TestBitmapCellCountIntegration;
begin
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    BitmapSetCellDetails(testBitmap, 20, 20, 5, 5, 25);
    AssertEquals(25, BitmapCellCount(testBitmap));
end;
procedure TestBitmapCellHeightIntegration;
begin
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    BitmapSetCellDetails(testBitmap, 20, 20, 5, 5, 25);
    AssertEquals(20, BitmapCellHeight(testBitmap));
end;
procedure TestBitmapCellOffsetIntegration;
begin
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    BitmapSetCellDetails(testBitmap, 25, 25, 4, 4, 16);
    offset := BitmapCellOffset(testBitmap, 5);
    AssertEquals(25.0, offset.x);
    AssertEquals(25.0, offset.y);
end;
procedure TestBitmapCellRectangleIntegration;
begin
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    BitmapSetCellDetails(testBitmap, 25, 25, 4, 4, 16);
    rect := BitmapCellRectangle(testBitmap);
    AssertEquals(0.0, rect.x);
    AssertEquals(0.0, rect.y);
    AssertEquals(25.0, rect.width);
    AssertEquals(25.0, rect.height);
end;
procedure TestBitmapCellRectangleAtPointIntegration;
begin
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    BitmapSetCellDetails(testBitmap, 25, 25, 4, 4, 16);
    rect := BitmapCellRectangle(testBitmap, PointAt(50.0, 50.0));
    AssertEquals(50.0, rect.x);
    AssertEquals(50.0, rect.y);
    AssertEquals(25.0, rect.width);
    AssertEquals(25.0, rect.height);
end;
procedure TestBitmapCellRowsIntegration;
begin
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    BitmapSetCellDetails(testBitmap, 20, 20, 5, 5, 25);
    AssertEquals(5, BitmapCellRows(testBitmap));
end;
procedure TestBitmapCellWidthIntegration;
begin
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    BitmapSetCellDetails(testBitmap, 25, 25, 4, 4, 16);
    AssertEquals(25, BitmapCellWidth(testBitmap));
end;
procedure TestBitmapCenterIntegration;
begin
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    testCenter := BitmapCenter(testBitmap);
    AssertEquals(50.0, testCenter.x);
    AssertEquals(50.0, testCenter.y);
end;
procedure TestBitmapFilenameIntegration;
begin
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    AssertEquals('', BitmapFilename(testBitmap));
end;
procedure TestBitmapHeightIntegration;
begin
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    AssertEquals(100, BitmapHeight(testBitmap));
end;
procedure TestBitmapHeightOfBitmapNamedIntegration;
begin
    CreateBitmap('bitmap_height', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    AssertEquals(100, BitmapHeight('bitmap_height'));
end;
procedure TestBitmapNameIntegration;
begin
    testBitmap := CreateBitmap('bitmap_name', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    AssertEquals('bitmap_name', BitmapName(testBitmap));
end;
procedure TestBitmapNamedIntegration;
begin
    CreateBitmap('test_bitmap', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    AssertNotNull(BitmapNamed('test_bitmap'));
    AssertNull(BitmapNamed('nonexistent_bitmap'));
end;
procedure TestBitmapRectangleOfCellIntegration;
begin
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    BitmapSetCellDetails(testBitmap, 25, 25, 4, 4, 16);
    rect := BitmapRectangleOfCell(testBitmap, 5);
    AssertEquals(25.0, rect.x);
    AssertEquals(25.0, rect.y);
    AssertEquals(25.0, rect.width);
    AssertEquals(25.0, rect.height);
end;
procedure TestBitmapSetCellDetailsIntegration;
begin
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    BitmapSetCellDetails(testBitmap, 20, 20, 5, 5, 25);
    AssertEquals(20, BitmapCellWidth(testBitmap));
    AssertEquals(20, BitmapCellHeight(testBitmap));
    AssertEquals(5, BitmapCellColumns(testBitmap));
    AssertEquals(5, BitmapCellRows(testBitmap));
    AssertEquals(25, BitmapCellCount(testBitmap));
end;
procedure TestBitmapValidIntegration;
begin
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    AssertTrue(BitmapValid(testBitmap));
    FreeBitmap(testBitmap);
    AssertFalse(BitmapValid(testBitmap));
end;
procedure TestBitmapWidthIntegration;
begin
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    AssertEquals(100, BitmapWidth(testBitmap));
end;
procedure TestBitmapWidthOfBitmapNamedIntegration;
begin
    CreateBitmap('bitmap_width', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    AssertEquals(100, BitmapWidth('bitmap_width'));
end;
procedure TestClearBitmapIntegration;
begin
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    DrawPixelOnBitmap(testBitmap, ColorBlack(), 50.0, 50.0);
    AssertEquals(ColorBlack(), GetPixel(testBitmap, 50.0, 50.0));
    ClearBitmap(testBitmap, ColorWhite());
    AssertEquals(ColorWhite(), GetPixel(testBitmap, 50.0, 50.0));
end;
procedure TestClearBitmapNamedIntegration;
begin
    testBitmap := CreateBitmap('bitmap_named', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    FillRectangleOnBitmap(testBitmap, ColorRed(), 0.0, 0.0, 100.0, 100.0);
    AssertEquals(ColorRed(), GetPixel(testBitmap, 50.0, 50.0));
    ClearBitmap('bitmap_named', ColorWhite());
    AssertEquals(ColorWhite(), GetPixel(testBitmap, 50.0, 50.0));
end;
procedure TestCreateBitmapIntegration;
begin
    testBitmap := CreateBitmap('bitmap_name1', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    AssertNotNull(testBitmap);
    AssertEquals(100, BitmapWidth(testBitmap));
    AssertEquals(100, BitmapHeight(testBitmap));
    AssertEquals('bitmap_name1', BitmapName(testBitmap));
end;
procedure TestDrawBitmapIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    FillRectangleOnBitmap(testBitmap, ColorRed(), 0.0, 0.0, 50.0, 50.0);
    DrawBitmap(testBitmap, 100.0, 100.0);
    RefreshScreen();
    AssertEquals(ColorRed(), GetPixel(testWindow, 125.0, 125.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 175.0, 175.0));
    FreeBitmap(testBitmap);
end;
procedure TestDrawBitmapWithOptionsIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    FillRectangleOnBitmap(testBitmap, ColorRed(), 0.0, 0.0, 100.0, 100.0);
    DrawBitmap(testBitmap, 100.0, 100.0, OptionDefaults());
    RefreshScreen();
    AssertEquals(ColorRed(), GetPixel(testWindow, 125.0, 125.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 50.0, 50.0));
    FreeBitmap(testBitmap);
end;
procedure TestDrawBitmapNamedIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    FillRectangleOnBitmap(testBitmap, ColorRed(), 0.0, 0.0, 100.0, 100.0);
    DrawBitmap('test_bitmap', 100.0, 100.0);
    RefreshScreen();
    AssertEquals(ColorRed(), GetPixel(testWindow, 125.0, 125.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 50.0, 50.0));
    FreeBitmap(testBitmap);
end;
procedure TestDrawBitmapNamedWithOptionsIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    FillRectangleOnBitmap(testBitmap, ColorRed(), 0.0, 0.0, 100.0, 100.0);
    DrawBitmap('test_bitmap', 100.0, 100.0, OptionDefaults());
    RefreshScreen();
    AssertEquals(ColorRed(), GetPixel(testWindow, 125.0, 125.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 50.0, 50.0));
    FreeBitmap(testBitmap);
end;
procedure TestDrawBitmapOnBitmapOnBitmapIntegration;
begin
    destBitmap := CreateBitmap('test_destination', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    sourceBitmap := CreateBitmap('test_source', 50, 50);
    ClearBitmap(destBitmap, ColorWhite());
    FillRectangleOnBitmap(sourceBitmap, ColorRed(), 0.0, 0.0, 50.0, 50.0);
    DrawBitmapOnBitmap(destBitmap, sourceBitmap, 25.0, 25.0);
    AssertEquals(ColorRed(), GetPixel(destBitmap, 50.0, 50.0));
    AssertEquals(ColorWhite(), GetPixel(destBitmap, 10.0, 10.0));
end;
procedure TestDrawBitmapOnBitmapOnBitmapWithOptionsIntegration;
begin
    destBitmap := CreateBitmap('test_destination', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    sourceBitmap := CreateBitmap('test_source', 50, 50);
    ClearBitmap(destBitmap, ColorWhite());
    FillRectangleOnBitmap(sourceBitmap, ColorRed(), 0.0, 0.0, 50.0, 50.0);
    DrawBitmapOnBitmap(destBitmap, sourceBitmap, 25.0, 25.0, OptionDefaults());
    AssertEquals(ColorRed(), GetPixel(destBitmap, 50.0, 50.0));
    AssertEquals(ColorWhite(), GetPixel(destBitmap, 10.0, 10.0));
end;
procedure TestDrawBitmapOnWindowIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    FillRectangleOnBitmap(testBitmap, ColorRed(), 0.0, 0.0, 100.0, 100.0);
    DrawBitmapOnWindow(testWindow, testBitmap, 100.0, 100.0);
    RefreshScreen();
    AssertEquals(ColorRed(), GetPixel(testWindow, 125.0, 125.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 50.0, 50.0));
    FreeBitmap(testBitmap);
end;
procedure TestDrawBitmapOnWindowWithOptionsIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    FillRectangleOnBitmap(testBitmap, ColorRed(), 0.0, 0.0, 100.0, 100.0);
    DrawBitmapOnWindow(testWindow, testBitmap, 100.0, 100.0, OptionDefaults());
    RefreshScreen();
    AssertEquals(ColorRed(), GetPixel(testWindow, 125.0, 125.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 50.0, 50.0));
    FreeBitmap(testBitmap);
end;
procedure TestFreeAllBitmapsIntegration;
begin
    bitmap1 := CreateBitmap('test_bitmap_1', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    bitmap2 := CreateBitmap('test_bitmap_2', 100, 100);
    AssertTrue(BitmapValid(bitmap1));
    AssertTrue(BitmapValid(bitmap2));
    FreeAllBitmaps();
    AssertFalse(BitmapValid(bitmap1));
    AssertFalse(BitmapValid(bitmap2));
end;
procedure TestFreeBitmapIntegration;
begin
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    AssertTrue(BitmapValid(testBitmap));
    FreeBitmap(testBitmap);
    AssertFalse(BitmapValid(testBitmap));
end;
procedure TestHasBitmapIntegration;
begin
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    AssertTrue(HasBitmap('test_bitmap'));
    FreeBitmap(testBitmap);
    AssertFalse(HasBitmap('test_bitmap'));
end;
procedure TestLoadBitmapIntegration;
begin
    loadedBitmap := LoadBitmap('loaded_bitmap', 'frog.png');
    CleanupBitmap := TBitmapCleanup.Create;
    AssertNotEquals(ColorWhite(), GetPixel(loadedBitmap, 50.0, 50.0));
end;
procedure TestPixelDrawnAtPointPtIntegration;
begin
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    ClearBitmap(testBitmap, ColorWhite());
    DrawPixelOnBitmap(testBitmap, ColorBlack(), PointAt(50.0, 50.0));
    AssertEquals(ColorBlack(), GetPixel(testBitmap, 50.0, 50.0));
    AssertEquals(ColorWhite(), GetPixel(testBitmap, 75.0, 75.0));
end;
procedure TestPixelDrawnAtPointIntegration;
begin
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    ClearBitmap(testBitmap, ColorWhite());
    DrawPixelOnBitmap(testBitmap, ColorBlack(), 50.0, 50.0);
    AssertEquals(ColorBlack(), GetPixel(testBitmap, 50.0, 50.0));
    AssertEquals(ColorWhite(), GetPixel(testBitmap, 75.0, 75.0));
end;
procedure TestPixelDrawnAtPointInCellPtIntegration;
begin
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    ClearBitmap(testBitmap, ColorWhite());
    DrawPixelOnBitmap(testBitmap, ColorBlack(), PointAt(50.0, 50.0));
    BitmapSetCellDetails(testBitmap, 100, 100, 1, 1, 1);
    AssertEquals(ColorBlack(), GetPixel(testBitmap, 50.0, 50.0));
    AssertEquals(ColorWhite(), GetPixel(testBitmap, 75.0, 50.0));
end;
procedure TestPixelDrawnAtPointInCellIntegration;
begin
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    ClearBitmap(testBitmap, ColorWhite());
    DrawPixelOnBitmap(testBitmap, ColorBlack(), PointAt(50.0, 50.0));
    BitmapSetCellDetails(testBitmap, 100, 100, 1, 1, 1);
    AssertEquals(ColorBlack(), GetPixel(testBitmap, 50.0, 50.0));
    AssertEquals(ColorWhite(), GetPixel(testBitmap, 75.0, 75.0));
end;
procedure TestSetupCollisionMaskIntegration;
begin
    OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    ClearBitmap(testBitmap, ColorBlack());
    testCircle := CircleAt(120.0, 120.0, 30.0);
    collisionBeforeMask := BitmapCircleCollision(testBitmap, 100.0, 100.0, testCircle);
    SetupCollisionMask(testBitmap);
    collisionAfterMask := BitmapCircleCollision(testBitmap, 100.0, 100.0, testCircle);
    AssertFalse(collisionBeforeMask);
    AssertTrue(collisionAfterMask);
end;
procedure TestDrawLineRecordIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    DrawLine(ColorBlack(), LineFrom(PointAt(100.0, 100.0), PointAt(200.0, 200.0)));
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 100.0, 100.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 99.0, 99.0));
end;
procedure TestDrawLineRecordWithOptionsIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    DrawLine(ColorBlack(), LineFrom(PointAt(100.0, 100.0), PointAt(200.0, 200.0)), OptionLineWidth(3, OptionDefaults()));
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 100.0, 100.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 99.0, 99.0));
end;
procedure TestDrawLinePointToPointIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    DrawLine(ColorBlack(), PointAt(100.0, 100.0), PointAt(200.0, 200.0));
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 100.0, 100.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 99.0, 99.0));
end;
procedure TestDrawLinePointToPointWithOptionsIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    DrawLine(ColorBlack(), PointAt(100.0, 100.0), PointAt(200.0, 200.0), OptionDefaults());
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 100.0, 100.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 99.0, 99.0));
end;
procedure TestDrawLineIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    DrawLine(ColorBlack(), 100.0, 100.0, 200.0, 200.0);
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 100.0, 100.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 99.0, 99.0));
end;
procedure TestDrawLineWithOptionsIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    DrawLine(ColorBlack(), 100.0, 100.0, 200.0, 200.0, OptionDefaults());
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 100.0, 100.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 99.0, 99.0));
end;
procedure TestDrawLineOnBitmapRecordIntegration;
begin
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    ClearBitmap(testBitmap, ColorWhite());
    DrawLineOnBitmap(testBitmap, ColorBlack(), LineFrom(PointAt(10.0, 10.0), PointAt(90.0, 90.0)));
    AssertEquals(ColorBlack(), GetPixel(testBitmap, 50.0, 50.0));
    AssertEquals(ColorWhite(), GetPixel(testBitmap, 95.0, 95.0));
end;
procedure TestDrawLineOnBitmapRecordWithOptionsIntegration;
begin
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    ClearBitmap(testBitmap, ColorWhite());
    DrawLineOnBitmap(testBitmap, ColorBlack(), LineFrom(PointAt(10.0, 10.0), PointAt(90.0, 90.0)), OptionDefaults());
    AssertEquals(ColorBlack(), GetPixel(testBitmap, 50.0, 50.0));
    AssertEquals(ColorWhite(), GetPixel(testBitmap, 95.0, 50.0));
end;
procedure TestDrawLineOnBitmapPointToPointIntegration;
begin
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    ClearBitmap(testBitmap, ColorWhite());
    DrawLineOnBitmap(testBitmap, ColorBlack(), PointAt(10.0, 10.0), PointAt(90.0, 90.0));
    AssertEquals(ColorBlack(), GetPixel(testBitmap, 50.0, 50.0));
    AssertEquals(ColorWhite(), GetPixel(testBitmap, 0.0, 0.0));
end;
procedure TestDrawLineOnBitmapPointToPointWithOptionsIntegration;
begin
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    ClearBitmap(testBitmap, ColorWhite());
    DrawLineOnBitmap(testBitmap, ColorBlack(), PointAt(10.0, 10.0), PointAt(90.0, 90.0), OptionDefaults());
    AssertEquals(ColorBlack(), GetPixel(testBitmap, 10.0, 10.0));
    AssertEquals(ColorBlack(), GetPixel(testBitmap, 90.0, 90.0));
    AssertEquals(ColorWhite(), GetPixel(testBitmap, 5.0, 5.0));
end;
procedure TestDrawLineOnBitmapIntegration;
begin
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    ClearBitmap(testBitmap, ColorWhite());
    DrawLineOnBitmap(testBitmap, ColorBlack(), 10.0, 10.0, 90.0, 90.0);
    AssertEquals(ColorBlack(), GetPixel(testBitmap, 50.0, 50.0));
    AssertEquals(ColorWhite(), GetPixel(testBitmap, 95.0, 50.0));
end;
procedure TestDrawLineOnBitmapWithOptionsIntegration;
begin
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    ClearBitmap(testBitmap, ColorWhite());
    DrawLineOnBitmap(testBitmap, ColorBlack(), 10.0, 10.0, 90.0, 90.0, OptionDefaults());
    AssertEquals(ColorBlack(), GetPixel(testBitmap, 50.0, 50.0));
    AssertEquals(ColorWhite(), GetPixel(testBitmap, 5.0, 5.0));
end;
procedure TestDrawLineOnWindowRecordIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    testLine := LineFrom(PointAt(100.0, 100.0), PointAt(150.0, 150.0));
    DrawLineOnWindow(testWindow, ColorBlack(), testLine);
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 100.0, 100.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 99.0, 99.0));
end;
procedure TestDrawLineOnWindowRecordWithOptionsIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    testLine := LineFrom(PointAt(100.0, 100.0), PointAt(150.0, 150.0));
    DrawLineOnWindow(testWindow, ColorBlack(), testLine, OptionDefaults());
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 100.0, 100.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 99.0, 99.0));
end;
procedure TestDrawLineOnWindowPointToPointIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    DrawLineOnWindow(testWindow, ColorBlack(), PointAt(100.0, 100.0), PointAt(200.0, 200.0));
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 100.0, 100.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 99.0, 99.0));
end;
procedure TestDrawLineOnWindowPointToPointWithOptionsIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    DrawLineOnWindow(testWindow, ColorBlack(), PointAt(100.0, 100.0), PointAt(200.0, 200.0), OptionDefaults());
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 100.0, 100.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 99.0, 99.0));
end;
procedure TestDrawLineOnWindowIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    DrawLineOnWindow(testWindow, ColorBlack(), 100.0, 100.0, 200.0, 200.0);
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 100.0, 100.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 99.0, 99.0));
end;
procedure TestDrawLineOnWindowWithOptionsIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    DrawLineOnWindow(testWindow, ColorBlack(), 100.0, 100.0, 200.0, 200.0, OptionDefaults());
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 100.0, 100.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 99.0, 99.0));
end;
procedure TestDrawPixelAtPointIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    DrawPixel(ColorBlack(), PointAt(100.0, 100.0));
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 100.0, 100.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 99.0, 99.0));
end;
procedure TestDrawPixelAtPointWithOptionsIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    DrawPixel(ColorBlack(), PointAt(100.0, 100.0), OptionDefaults());
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 100.0, 100.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 99.0, 99.0));
end;
procedure TestDrawPixelIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    DrawPixel(ColorBlack(), 100.0, 100.0);
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 100.0, 100.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 99.0, 99.0));
end;
procedure TestDrawPixelWithOptionsIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    DrawPixel(ColorBlack(), 100.0, 100.0, OptionDefaults());
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 100.0, 100.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 99.0, 99.0));
end;
procedure TestDrawPixelOnBitmapAtPointIntegration;
begin
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    ClearBitmap(testBitmap, ColorWhite());
    DrawPixelOnBitmap(testBitmap, ColorBlack(), PointAt(50.0, 50.0));
    AssertEquals(ColorBlack(), GetPixel(testBitmap, 50.0, 50.0));
    AssertEquals(ColorWhite(), GetPixel(testBitmap, 0.0, 0.0));
end;
procedure TestDrawPixelOnBitmapAtPointWithOptionsIntegration;
begin
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    ClearBitmap(testBitmap, ColorWhite());
    DrawPixelOnBitmap(testBitmap, ColorBlack(), PointAt(50.0, 50.0), OptionDefaults());
    AssertEquals(ColorBlack(), GetPixel(testBitmap, 50.0, 50.0));
    AssertEquals(ColorWhite(), GetPixel(testBitmap, 0.0, 0.0));
end;
procedure TestDrawPixelOnBitmapIntegration;
begin
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    ClearBitmap(testBitmap, ColorWhite());
    DrawPixelOnBitmap(testBitmap, ColorBlack(), 50.0, 50.0);
    AssertEquals(ColorBlack(), GetPixel(testBitmap, 50.0, 50.0));
    AssertEquals(ColorWhite(), GetPixel(testBitmap, 51.0, 50.0));
end;
procedure TestDrawPixelOnBitmapWithOptionsIntegration;
begin
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    ClearBitmap(testBitmap, ColorWhite());
    DrawPixelOnBitmap(testBitmap, ColorBlack(), 50.0, 50.0, OptionDefaults());
    AssertEquals(ColorBlack(), GetPixel(testBitmap, 50.0, 50.0));
    AssertEquals(ColorWhite(), GetPixel(testBitmap, 51.0, 50.0));
end;
procedure TestDrawPixelOnWindowAtPointIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    DrawPixelOnWindow(testWindow, ColorBlack(), PointAt(100.0, 100.0));
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 100.0, 100.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 99.0, 99.0));
end;
procedure TestDrawPixelOnWindowAtPointWithOptionsIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    DrawPixelOnWindow(testWindow, ColorBlack(), PointAt(100.0, 100.0), OptionDefaults());
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 100.0, 100.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 99.0, 99.0));
end;
procedure TestDrawPixelOnWindowIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    DrawPixelOnWindow(testWindow, ColorBlack(), 100.0, 100.0);
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 100.0, 100.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 99.0, 99.0));
end;
procedure TestDrawPixelOnWindowWithOptionsIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    DrawPixelOnWindow(testWindow, ColorBlack(), 100.0, 100.0, OptionDefaults());
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 100.0, 100.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 99.0, 99.0));
end;
procedure TestGetPixelFromBitmapAtPointIntegration;
begin
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    ClearBitmap(testBitmap, ColorWhite());
    DrawPixelOnBitmap(testBitmap, ColorBlack(), PointAt(50.0, 50.0));
    AssertEquals(ColorBlack(), GetPixel(testBitmap, PointAt(50.0, 50.0)));
    AssertEquals(ColorWhite(), GetPixel(testBitmap, PointAt(49.0, 49.0)));
end;
procedure TestGetPixelFromBitmapIntegration;
begin
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    ClearBitmap(testBitmap, ColorWhite());
    DrawPixelOnBitmap(testBitmap, ColorBlack(), 50.0, 50.0);
    AssertEquals(ColorBlack(), GetPixel(testBitmap, 50.0, 50.0));
    AssertEquals(ColorWhite(), GetPixel(testBitmap, 49.0, 49.0));
end;
procedure TestGetPixelAtPointIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    DrawPixel(ColorBlack(), PointAt(100.0, 100.0));
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 100.0, 100.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 99.0, 99.0));
end;
procedure TestGetPixelIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    DrawPixel(ColorBlack(), 100.0, 100.0);
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 100.0, 100.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 99.0, 99.0));
end;
procedure TestGetPixelFromWindowAtPointIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    DrawPixel(ColorBlack(), PointAt(100.0, 100.0));
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, PointAt(100.0, 100.0)));
    AssertEquals(ColorWhite(), GetPixel(testWindow, PointAt(99.0, 99.0)));
end;
procedure TestGetPixelFromWindowIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    DrawPixel(ColorBlack(), 100.0, 100.0);
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 100.0, 100.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 99.0, 99.0));
end;
procedure TestGetPixelFromWindowAtPointFromWindowIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    DrawPixel(ColorBlack(), PointAt(100.0, 100.0));
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixelFromWindow(testWindow, PointAt(100.0, 100.0)));
    AssertEquals(ColorWhite(), GetPixelFromWindow(testWindow, PointAt(99.0, 99.0)));
end;
procedure TestGetPixelFromWindowFromWindowIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    DrawPixel(ColorBlack(), 100.0, 100.0);
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixelFromWindow(testWindow, 100.0, 100.0));
    AssertEquals(ColorWhite(), GetPixelFromWindow(testWindow, 99.0, 99.0));
end;
procedure TestDrawQuadIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    quad := QuadFrom(PointAt(100.0, 100.0), PointAt(200.0, 100.0), PointAt(100.0, 200.0), PointAt(200.0, 200.0));
    DrawQuad(ColorBlack(), quad);
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 100.0, 100.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 150.0, 150.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 250.0, 250.0));
end;
procedure TestDrawQuadWithOptionsIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    quad := QuadFrom(PointAt(100.0, 100.0), PointAt(200.0, 100.0), PointAt(100.0, 200.0), PointAt(200.0, 200.0));
    DrawQuad(ColorBlack(), quad, OptionDefaults());
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 100.0, 100.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 150.0, 150.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 250.0, 250.0));
end;
procedure TestDrawQuadOnBitmapIntegration;
begin
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    ClearBitmap(testBitmap, ColorWhite());
    quad := QuadFrom(PointAt(10.0, 10.0), PointAt(90.0, 10.0), PointAt(10.0, 90.0), PointAt(90.0, 90.0));
    DrawQuadOnBitmap(testBitmap, ColorBlack(), quad);
    AssertEquals(ColorBlack(), GetPixel(testBitmap, 10.0, 10.0));
    AssertEquals(ColorWhite(), GetPixel(testBitmap, 50.0, 50.0));
    AssertEquals(ColorWhite(), GetPixel(testBitmap, 5.0, 5.0));
end;
procedure TestDrawQuadOnBitmapWithOptionsIntegration;
begin
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    ClearBitmap(testBitmap, ColorWhite());
    quad := QuadFrom(PointAt(10.0, 10.0), PointAt(90.0, 10.0), PointAt(90.0, 90.0), PointAt(10.0, 90.0));
    DrawQuadOnBitmap(testBitmap, ColorBlack(), quad, OptionDefaults());
    AssertEquals(ColorBlack(), GetPixel(testBitmap, 10.0, 10.0));
    AssertEquals(ColorBlack(), GetPixel(testBitmap, 50.0, 50.0));
    AssertEquals(ColorWhite(), GetPixel(testBitmap, 5.0, 5.0));
end;
procedure TestDrawQuadOnWindowIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    quad := QuadFrom(PointAt(100.0, 100.0), PointAt(200.0, 100.0), PointAt(100.0, 200.0), PointAt(200.0, 200.0));
    DrawQuadOnWindow(testWindow, ColorBlack(), quad);
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 100.0, 100.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 150.0, 150.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 250.0, 250.0));
end;
procedure TestDrawQuadOnWindowWithOptionsIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    quad := QuadFrom(PointAt(100.0, 100.0), PointAt(200.0, 100.0), PointAt(100.0, 200.0), PointAt(200.0, 200.0));
    DrawQuadOnWindow(testWindow, ColorBlack(), quad, OptionDefaults());
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 100.0, 100.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 150.0, 150.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 250.0, 250.0));
end;
procedure TestDrawRectangleRecordIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    rectangle := RectangleFrom(100.0, 100.0, 200.0, 150.0);
    DrawRectangle(ColorBlack(), rectangle);
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 100.0, 100.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 150.0, 125.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 301.0, 251.0));
end;
procedure TestDrawRectangleRecordWithOptionsIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    rectangle := RectangleFrom(100.0, 100.0, 200.0, 150.0);
    DrawRectangle(ColorBlack(), rectangle, OptionDefaults());
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 100.0, 100.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 150.0, 125.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 350.0, 300.0));
end;
procedure TestDrawRectangleIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    DrawRectangle(ColorBlack(), 100.0, 100.0, 200.0, 150.0);
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 100.0, 100.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 301.0, 251.0));
end;
procedure TestDrawRectangleWithOptionsIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    DrawRectangle(ColorBlack(), 100.0, 100.0, 200.0, 150.0, OptionLineWidth(3, OptionDefaults()));
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 100.0, 100.0));
    AssertEquals(ColorBlack(), GetPixel(testWindow, 101.0, 100.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 150.0, 125.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 301.0, 251.0));
end;
procedure TestDrawRectangleOnBitmapRecordIntegration;
begin
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    ClearBitmap(testBitmap, ColorWhite());
    rectangle := RectangleFrom(50.0, 50.0, 20.0, 30.0);
    DrawRectangleOnBitmap(testBitmap, ColorBlack(), rectangle);
    AssertEquals(ColorBlack(), GetPixel(testBitmap, 50.0, 50.0));
    AssertEquals(ColorWhite(), GetPixel(testBitmap, 80.0, 90.0));
end;
procedure TestDrawRectangleOnBitmapRecordWithOptionsIntegration;
begin
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    ClearBitmap(testBitmap, ColorWhite());
    rectangle := RectangleFrom(50.0, 50.0, 20.0, 20.0);
    DrawRectangleOnBitmap(testBitmap, ColorBlack(), rectangle, OptionDefaults());
    AssertEquals(ColorBlack(), GetPixel(testBitmap, 50.0, 50.0));
    AssertEquals(ColorWhite(), GetPixel(testBitmap, 75.0, 75.0));
end;
procedure TestDrawRectangleOnBitmapIntegration;
begin
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    ClearBitmap(testBitmap, ColorWhite());
    DrawRectangleOnBitmap(testBitmap, ColorBlack(), 50.0, 50.0, 20.0, 20.0);
    AssertEquals(ColorBlack(), GetPixel(testBitmap, 50.0, 50.0));
    AssertEquals(ColorWhite(), GetPixel(testBitmap, 75.0, 75.0));
end;
procedure TestDrawRectangleOnBitmapWithOptionsIntegration;
begin
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    ClearBitmap(testBitmap, ColorWhite());
    DrawRectangleOnBitmap(testBitmap, ColorBlack(), 50.0, 50.0, 20.0, 20.0, OptionDefaults());
    AssertEquals(ColorBlack(), GetPixel(testBitmap, 50.0, 50.0));
    AssertEquals(ColorWhite(), GetPixel(testBitmap, 75.0, 75.0));
end;
procedure TestDrawRectangleOnWindowRecordIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    rectangle := RectangleFrom(100.0, 100.0, 50.0, 50.0);
    DrawRectangleOnWindow(testWindow, ColorBlack(), rectangle);
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 100.0, 100.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 125.0, 125.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 200.0, 200.0));
end;
procedure TestDrawRectangleOnWindowRecordWithOptionsIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    rectangle := RectangleFrom(100.0, 100.0, 50.0, 50.0);
    DrawRectangleOnWindow(testWindow, ColorBlack(), rectangle, OptionDefaults());
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 100.0, 100.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 125.0, 125.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 175.0, 175.0));
end;
procedure TestDrawRectangleOnWindowIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    DrawRectangleOnWindow(testWindow, ColorBlack(), 100.0, 100.0, 50.0, 50.0);
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 100.0, 100.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 200.0, 200.0));
end;
procedure TestDrawRectangleOnWindowWithOptionsIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    DrawRectangleOnWindow(testWindow, ColorBlack(), 100.0, 100.0, 50.0, 50.0, OptionDefaults());
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 100.0, 100.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 200.0, 200.0));
end;
procedure TestFillQuadIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    quad := QuadFrom(PointAt(100.0, 100.0), PointAt(300.0, 100.0), PointAt(100.0, 300.0), PointAt(300.0, 300.0));
    FillQuad(ColorBlack(), quad);
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 200.0, 200.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 400.0, 400.0));
end;
procedure TestFillQuadWithOptionsIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    quad := QuadFrom(PointAt(100.0, 100.0), PointAt(300.0, 100.0), PointAt(100.0, 300.0), PointAt(300.0, 300.0));
    FillQuad(ColorBlack(), quad, OptionDefaults());
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 200.0, 200.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 400.0, 400.0));
end;
procedure TestFillQuadOnBitmapIntegration;
begin
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    ClearBitmap(testBitmap, ColorWhite());
    quad := QuadFrom(PointAt(10.0, 10.0), PointAt(90.0, 10.0), PointAt(10.0, 90.0), PointAt(90.0, 90.0));
    FillQuadOnBitmap(testBitmap, ColorBlack(), quad);
    AssertEquals(ColorBlack(), GetPixel(testBitmap, 50.0, 50.0));
    AssertEquals(ColorWhite(), GetPixel(testBitmap, 0.0, 0.0));
end;
procedure TestFillQuadOnBitmapWithOptionsIntegration;
begin
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    ClearBitmap(testBitmap, ColorWhite());
    quad := QuadFrom(PointAt(10.0, 10.0), PointAt(90.0, 10.0), PointAt(90.0, 90.0), PointAt(10.0, 90.0));
    FillQuadOnBitmap(testBitmap, ColorBlack(), quad, OptionDefaults());
    AssertEquals(ColorBlack(), GetPixel(testBitmap, 50.0, 50.0));
    AssertEquals(ColorWhite(), GetPixel(testBitmap, 95.0, 50.0));
end;
procedure TestFillQuadOnWindowIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    quad := QuadFrom(PointAt(100.0, 100.0), PointAt(200.0, 100.0), PointAt(100.0, 200.0), PointAt(200.0, 200.0));
    FillQuadOnWindow(testWindow, ColorBlack(), quad);
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 150.0, 150.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 250.0, 250.0));
end;
procedure TestFillQuadOnWindowWithOptionsIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    quad := QuadFrom(PointAt(100.0, 100.0), PointAt(200.0, 100.0), PointAt(200.0, 200.0), PointAt(100.0, 200.0));
    FillQuadOnWindow(testWindow, ColorBlack(), quad, OptionDefaults());
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 150.0, 150.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 250.0, 150.0));
end;
procedure TestFillRectangleRecordIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    rectangle := RectangleFrom(100.0, 100.0, 200.0, 150.0);
    FillRectangle(ColorBlack(), rectangle);
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 150.0, 125.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 350.0, 275.0));
end;
procedure TestFillRectangleRecordWithOptionsIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    rectangle := RectangleFrom(100.0, 100.0, 200.0, 150.0);
    FillRectangle(ColorBlack(), rectangle, OptionDefaults());
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 150.0, 125.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 350.0, 275.0));
end;
procedure TestFillRectangleIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    FillRectangle(ColorBlack(), 100.0, 100.0, 200.0, 150.0);
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 150.0, 125.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 301.0, 251.0));
end;
procedure TestFillRectangleWithOptionsIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    FillRectangle(ColorBlack(), 100.0, 100.0, 200.0, 150.0, OptionDefaults());
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 150.0, 125.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 301.0, 251.0));
end;
procedure TestFillRectangleOnBitmapRecordIntegration;
begin
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    ClearBitmap(testBitmap, ColorWhite());
    rectangle := RectangleFrom(25.0, 25.0, 50.0, 50.0);
    FillRectangleOnBitmap(testBitmap, ColorBlack(), rectangle);
    AssertEquals(ColorBlack(), GetPixel(testBitmap, 50.0, 50.0));
    AssertEquals(ColorWhite(), GetPixel(testBitmap, 10.0, 10.0));
end;
procedure TestFillRectangleOnBitmapRecordWithOptionsIntegration;
begin
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    ClearBitmap(testBitmap, ColorWhite());
    rectangle := RectangleFrom(25.0, 25.0, 50.0, 50.0);
    FillRectangleOnBitmap(testBitmap, ColorBlack(), rectangle, OptionDefaults());
    AssertEquals(ColorBlack(), GetPixel(testBitmap, 50.0, 50.0));
    AssertEquals(ColorWhite(), GetPixel(testBitmap, 10.0, 10.0));
end;
procedure TestFillRectangleOnBitmapIntegration;
begin
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    ClearBitmap(testBitmap, ColorWhite());
    FillRectangleOnBitmap(testBitmap, ColorBlack(), 25.0, 25.0, 50.0, 50.0);
    AssertEquals(ColorBlack(), GetPixel(testBitmap, 50.0, 50.0));
    AssertEquals(ColorWhite(), GetPixel(testBitmap, 75.0, 75.0));
end;
procedure TestFillRectangleOnBitmapWithOptionsIntegration;
begin
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    ClearBitmap(testBitmap, ColorWhite());
    FillRectangleOnBitmap(testBitmap, ColorBlack(), 25.0, 25.0, 50.0, 50.0, OptionDefaults());
    AssertEquals(ColorBlack(), GetPixel(testBitmap, 50.0, 50.0));
    AssertEquals(ColorWhite(), GetPixel(testBitmap, 10.0, 10.0));
end;
procedure TestFillRectangleOnWindowRecordIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    rectangle := RectangleFrom(100.0, 100.0, 200.0, 150.0);
    FillRectangleOnWindow(testWindow, ColorBlack(), rectangle);
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 150.0, 125.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 350.0, 275.0));
end;
procedure TestFillRectangleOnWindowRecordWithOptionsIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    rectangle := RectangleFrom(100.0, 100.0, 200.0, 150.0);
    FillRectangleOnWindow(testWindow, ColorBlack(), rectangle, OptionDefaults());
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 150.0, 125.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 350.0, 275.0));
end;
procedure TestFillRectangleOnWindowIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    FillRectangleOnWindow(testWindow, ColorBlack(), 100.0, 100.0, 50.0, 50.0);
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 125.0, 125.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 175.0, 175.0));
end;
procedure TestFillRectangleOnWindowWithOptionsIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    FillRectangleOnWindow(testWindow, ColorBlack(), 100.0, 100.0, 50.0, 50.0, OptionDefaults());
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 125.0, 125.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 175.0, 175.0));
end;
procedure TestDrawTextFontAsStringIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    RefreshScreen();
    LoadFont('hara', 'hara.ttf');
    CleanupFont := TFontCleanup.Create;
    DrawText('Test Text', ColorBlack(), 'hara', 24, 100.0, 100.0);
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 120.0, 110.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 90.0, 90.0));
end;
procedure TestDrawTextWithOptionsFontAsStringIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    LoadFont('hara', 'hara.ttf');
    CleanupFont := TFontCleanup.Create;
    DrawText('Test Text', ColorBlack(), 'hara', 24, 100.0, 100.0, OptionDefaults());
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 120.0, 110.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 90.0, 90.0));
end;
procedure TestDrawTextNoFontNoSizeIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    DrawText('Test Text', ColorBlack(), 100.0, 100.0);
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 105.0, 100.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 90.0, 90.0));
end;
procedure TestDrawTextNoFontNoSizeWithOptionsIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    DrawText('Test Text', ColorBlack(), 100.0, 100.0, OptionDefaults());
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 105.0, 100.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 90.0, 90.0));
end;
procedure TestDrawTextIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    LoadFont('hara', 'hara.ttf');
    CleanupFont := TFontCleanup.Create;
    DrawText('Test Text', ColorBlack(), FontNamed('hara'), 24, 100.0, 100.0);
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 120.0, 110.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 90.0, 90.0));
end;
procedure TestDrawTextWithOptionsIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    LoadFont('hara', 'hara.ttf');
    CleanupFont := TFontCleanup.Create;
    DrawText('Test Text', ColorBlack(), FontNamed('hara'), 24, 100.0, 100.0, OptionDefaults());
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 120.0, 110.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 90.0, 90.0));
end;
procedure TestDrawTextOnBitmapFontAsStringIntegration;
begin
    testBitmap := CreateBitmap('test_bitmap', 200, 200);
    CleanupBitmap := TBitmapCleanup.Create;
    ClearBitmap(testBitmap, ColorWhite());
    LoadFont('hara', 'hara.ttf');
    CleanupFont := TFontCleanup.Create;
    DrawTextOnBitmap(testBitmap, 'Test Text', ColorBlack(), 'hara', 24, 100.0, 100.0);
    AssertEquals(ColorBlack(), GetPixel(testBitmap, 120.0, 110.0));
    AssertEquals(ColorWhite(), GetPixel(testBitmap, 90.0, 90.0));
end;
procedure TestDrawTextOnBitmapWithOptionsFontAsStringIntegration;
begin
    testBitmap := CreateBitmap('test_bitmap', 200, 200);
    CleanupBitmap := TBitmapCleanup.Create;
    ClearBitmap(testBitmap, ColorWhite());
    LoadFont('hara', 'hara.ttf');
    CleanupFont := TFontCleanup.Create;
    DrawTextOnBitmap(testBitmap, 'Test Text', ColorBlack(), 'hara', 24, 100.0, 100.0, OptionDefaults());
    AssertEquals(ColorBlack(), GetPixel(testBitmap, 120.0, 110.0));
    AssertEquals(ColorWhite(), GetPixel(testBitmap, 90.0, 90.0));
end;
procedure TestDrawTextOnBitmapNoFontNoSizeIntegration;
begin
    testBitmap := CreateBitmap('test_bitmap', 200, 200);
    CleanupBitmap := TBitmapCleanup.Create;
    ClearBitmap(testBitmap, ColorWhite());
    DrawTextOnBitmap(testBitmap, 'Test Text', ColorBlack(), 100.0, 100.0);
    AssertEquals(ColorBlack(), GetPixel(testBitmap, 105.0, 100.0));
    AssertEquals(ColorWhite(), GetPixel(testBitmap, 90.0, 90.0));
end;
procedure TestDrawTextOnBitmapNoFontNoSizeWithOptionsIntegration;
begin
    testBitmap := CreateBitmap('test_bitmap', 200, 200);
    CleanupBitmap := TBitmapCleanup.Create;
    ClearBitmap(testBitmap, ColorWhite());
    DrawTextOnBitmap(testBitmap, 'Test Text', ColorBlack(), 100.0, 100.0, OptionDefaults());
    AssertEquals(ColorBlack(), GetPixel(testBitmap, 105.0, 100.0));
    AssertEquals(ColorWhite(), GetPixel(testBitmap, 90.0, 90.0));
end;
procedure TestDrawTextOnBitmapIntegration;
begin
    testBitmap := CreateBitmap('test_bitmap', 200, 200);
    CleanupBitmap := TBitmapCleanup.Create;
    ClearBitmap(testBitmap, ColorWhite());
    LoadFont('hara', 'hara.ttf');
    CleanupFont := TFontCleanup.Create;
    DrawTextOnBitmap(testBitmap, 'Test Text', ColorBlack(), FontNamed('hara'), 24, 100.0, 100.0);
    AssertEquals(ColorBlack(), GetPixel(testBitmap, 120.0, 110.0));
    AssertEquals(ColorWhite(), GetPixel(testBitmap, 90.0, 90.0));
end;
procedure TestDrawTextOnBitmapWithOptionsIntegration;
begin
    testBitmap := CreateBitmap('test_bitmap', 200, 200);
    CleanupBitmap := TBitmapCleanup.Create;
    ClearBitmap(testBitmap, ColorWhite());
    LoadFont('hara', 'hara.ttf');
    CleanupFont := TFontCleanup.Create;
    DrawTextOnBitmap(testBitmap, 'Test Text', ColorBlack(), FontNamed('hara'), 24, 100.0, 100.0, OptionDefaults());
    AssertEquals(ColorBlack(), GetPixel(testBitmap, 120.0, 110.0));
    AssertEquals(ColorWhite(), GetPixel(testBitmap, 90.0, 90.0));
end;
procedure TestDrawTextOnWindowFontAsStringIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    LoadFont('hara', 'hara.ttf');
    CleanupFont := TFontCleanup.Create;
    DrawTextOnWindow(testWindow, 'Test Text', ColorBlack(), 'hara', 24, 100.0, 100.0);
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 120.0, 110.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 90.0, 90.0));
end;
procedure TestDrawTextOnWindowWithOptionsFontAsStringIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    LoadFont('hara', 'hara.ttf');
    CleanupFont := TFontCleanup.Create;
    DrawTextOnWindow(testWindow, 'Test Text', ColorBlack(), 'hara', 24, 100.0, 100.0, OptionDefaults());
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 120.0, 110.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 90.0, 90.0));
end;
procedure TestDrawTextOnWindowNoFontNoSizeIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    DrawTextOnWindow(testWindow, 'Test Text', ColorBlack(), 100.0, 100.0);
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 105.0, 100.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 90.0, 90.0));
end;
procedure TestDrawTextOnWindowNoFontNoSizeWithOptionsIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    DrawTextOnWindow(testWindow, 'Test Text', ColorBlack(), 100.0, 100.0, OptionDefaults());
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 105.0, 100.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 90.0, 90.0));
end;
procedure TestDrawTextOnWindowIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    LoadFont('hara', 'hara.ttf');
    CleanupFont := TFontCleanup.Create;
    testFont := FontNamed('hara');
    FontLoadSize(testFont, 24);
    DrawTextOnWindow(testWindow, 'Test Text', ColorBlack(), testFont, 24, 100.0, 100.0);
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 120.0, 110.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 90.0, 90.0));
end;
procedure TestDrawTextOnWindowWithOptionsIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    testFont := LoadFont('test_font', 'hara.ttf');
    CleanupFont := TFontCleanup.Create;
    DrawTextOnWindow(testWindow, 'Test Text', ColorBlack(), testFont, 24, 100.0, 100.0, OptionDefaults());
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 120.0, 110.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 90.0, 90.0));
end;
procedure TestFontHasSizeNameAsStringIntegration;
begin
    LoadFont('hara', 'hara.ttf');
    CleanupFont := TFontCleanup.Create;
    FontLoadSize('hara', 12);
    AssertTrue(FontHasSize('hara', 12));
    AssertFalse(FontHasSize('nonexistent_font', 12));
end;
procedure TestFontHasSizeIntegration;
begin
    testFont := LoadFont('test_font', 'hara.ttf');
    CleanupFont := TFontCleanup.Create;
    FontLoadSize(testFont, 12);
    AssertTrue(FontHasSize(testFont, 12));
    AssertFalse(FontHasSize(testFont, 999));
end;
procedure TestFontLoadSizeNameAsStringIntegration;
begin
    LoadFont('test_font', 'hara.ttf');
    CleanupFont := TFontCleanup.Create;
    FontLoadSize('test_font', 12);
    AssertTrue(FontHasSize('test_font', 12));
end;
procedure TestFontLoadSizeIntegration;
begin
    testFont := LoadFont('test_font', 'hara.ttf');
    CleanupFont := TFontCleanup.Create;
    FontLoadSize(testFont, 12);
    AssertTrue(FontHasSize(testFont, 12));
end;
procedure TestFontNamedIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    LoadFont('hara', 'hara.ttf');
    CleanupFont := TFontCleanup.Create;
    testFont := FontNamed('hara');
    DrawText('Test Text', ColorBlack(), testFont, 24, 100.0, 100.0);
    RefreshScreen();
    AssertNotNull(testFont);
    AssertEquals(ColorBlack(), GetPixel(testWindow, 120.0, 110.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 90.0, 90.0));
end;
procedure TestFreeAllFontsIntegration;
begin
    LoadFont('test_font', 'hara.ttf');
    CleanupFont := TFontCleanup.Create;
    AssertTrue(HasFont('test_font'));
    FreeAllFonts();
    AssertFalse(HasFont('test_font'));
end;
procedure TestFreeFontIntegration;
begin
    testFont := LoadFont('test_font', 'hara.ttf');
    CleanupFont := TFontCleanup.Create;
    AssertTrue(HasFont(testFont));
    FreeFont(testFont);
    AssertFalse(HasFont(testFont));
end;
procedure TestGetFontStyleNameAsStringIntegration;
begin
    LoadFont('test_font', 'hara.ttf');
    CleanupFont := TFontCleanup.Create;
    style := GetFontStyle('test_font');
    AssertEquals(FontStyle.BOLD_FONT, style);
end;
procedure TestGetFontStyleIntegration;
begin
    testFont := LoadFont('test_font', 'hara.ttf');
    CleanupFont := TFontCleanup.Create;
    style := GetFontStyle(testFont);
    AssertEquals(FontStyle.BOLD_FONT, style);
end;
procedure TestGetSystemFontIntegration;
begin
    systemFont := GetSystemFont();
    AssertNotNull(systemFont);
end;
procedure TestHasFontIntegration;
begin
    testFont := LoadFont('test_font', 'hara.ttf');
    CleanupFont := TFontCleanup.Create;
    AssertTrue(HasFont(testFont));
    FreeFont(testFont);
    AssertFalse(HasFont(testFont));
end;
procedure TestHasFontNameAsStringIntegration;
begin
    LoadFont('test_font', 'hara.ttf');
    CleanupFont := TFontCleanup.Create;
    AssertTrue(HasFont('test_font'));
    AssertFalse(HasFont('nonexistent_font'));
end;
procedure TestLoadFontIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    testFont := LoadFont('test_font', 'hara.ttf');
    CleanupFont := TFontCleanup.Create;
    DrawText('Test Text', ColorBlack(), testFont, 24, 100.0, 100.0, OptionDefaults());
    RefreshScreen();
    AssertTrue(HasFont('test_font'));
    AssertEquals(ColorBlack(), GetPixel(testWindow, 105.0, 105.0));
end;
procedure TestSetFontStyleNameAsStringIntegration;
begin
    LoadFont('test_font', 'hara.ttf');
    CleanupFont := TFontCleanup.Create;
    SetFontStyle('test_font', FontStyle.BOLD_FONT);
    AssertEquals(FontStyle.BOLD_FONT, GetFontStyle('test_font'));
end;
procedure TestSetFontStyleIntegration;
begin
    testFont := LoadFont('test_font', 'hara.ttf');
    CleanupFont := TFontCleanup.Create;
    SetFontStyle(testFont, FontStyle.BOLD_FONT);
    AssertEquals(FontStyle.BOLD_FONT, GetFontStyle(testFont));
end;
procedure TestTextHeightFontNamedIntegration;
begin
    LoadFont('test_font', 'hara.ttf');
    CleanupFont := TFontCleanup.Create;
    FontLoadSize('test_font', 24);
    height := TextHeight('Test Text', 'test_font', 24);
    AssertTrue(height > 0);
    AssertTrue(height >= 24);
end;
procedure TestTextHeightIntegration;
begin
    testFont := LoadFont('test_font', 'hara.ttf');
    CleanupFont := TFontCleanup.Create;
    FontLoadSize(testFont, 24);
    height := TextHeight('Test Text', testFont, 24);
    AssertTrue(height > 0);
    AssertTrue(height >= 24);
end;
procedure TestTextWidthFontNamedIntegration;
begin
    testFont := LoadFont('hara', 'hara.ttf');
    CleanupFont := TFontCleanup.Create;
    FontLoadSize(testFont, 12);
    width := TextWidth('Test Text', 'hara', 24);
    AssertTrue(width > 0);
    AssertTrue(width >= TextHeight('Test Text', 'hara', 24));
end;
procedure TestTextWidthIntegration;
begin
    testFont := LoadFont('test_font', 'hara.ttf');
    CleanupFont := TFontCleanup.Create;
    FontLoadSize(testFont, 12);
    width := TextWidth('Test Text', testFont, 24);
    AssertTrue(width > 0);
    AssertTrue(width >= TextHeight('Text Height', testFont, 24));
end;
procedure TestDrawTriangleRecordIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    triangle := TriangleFrom(PointAt(100.0, 100.0), PointAt(200.0, 200.0), PointAt(150.0, 300.0));
    DrawTriangle(ColorBlack(), triangle);
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 100.0, 100.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 150.0, 200.0));
end;
procedure TestDrawTriangleRecordWithOptionsIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    triangle := TriangleFrom(PointAt(100.0, 100.0), PointAt(200.0, 200.0), PointAt(150.0, 300.0));
    DrawTriangle(ColorBlack(), triangle, OptionDefaults());
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 100.0, 100.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 150.0, 200.0));
end;
procedure TestDrawTriangleIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    DrawTriangle(ColorBlack(), 100.0, 100.0, 200.0, 300.0, 300.0, 100.0);
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 100.0, 100.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 200.0, 150.0));
end;
procedure TestDrawTriangleWithOptionsIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    DrawTriangle(ColorBlack(), 100.0, 100.0, 200.0, 200.0, 150.0, 300.0, OptionDefaults());
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 100.0, 100.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 150.0, 200.0));
end;
procedure TestDrawTriangleOnBitmapRecordIntegration;
begin
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    ClearBitmap(testBitmap, ColorWhite());
    triangle := TriangleFrom(PointAt(25.0, 25.0), PointAt(75.0, 25.0), PointAt(50.0, 75.0));
    DrawTriangleOnBitmap(testBitmap, ColorBlack(), triangle);
    AssertEquals(ColorBlack(), GetPixel(testBitmap, 25.0, 25.0));
    AssertEquals(ColorWhite(), GetPixel(testBitmap, 50.0, 50.0));
end;
procedure TestDrawTriangleOnBitmapRecordWithOptionsIntegration;
begin
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    ClearBitmap(testBitmap, ColorWhite());
    triangle := TriangleFrom(PointAt(25.0, 25.0), PointAt(75.0, 25.0), PointAt(50.0, 75.0));
    DrawTriangleOnBitmap(testBitmap, ColorBlack(), triangle, OptionDefaults());
    AssertEquals(ColorBlack(), GetPixel(testBitmap, 25.0, 25.0));
    AssertEquals(ColorWhite(), GetPixel(testBitmap, 50.0, 50.0));
end;
procedure TestDrawTriangleOnBitmapIntegration;
begin
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    ClearBitmap(testBitmap, ColorWhite());
    DrawTriangleOnBitmap(testBitmap, ColorBlack(), 25.0, 25.0, 75.0, 25.0, 50.0, 75.0);
    AssertEquals(ColorBlack(), GetPixel(testBitmap, 25.0, 25.0));
    AssertEquals(ColorWhite(), GetPixel(testBitmap, 50.0, 50.0));
end;
procedure TestDrawTriangleOnBitmapWithOptionsIntegration;
begin
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    ClearBitmap(testBitmap, ColorWhite());
    DrawTriangleOnBitmap(testBitmap, ColorBlack(), 25.0, 25.0, 75.0, 25.0, 50.0, 75.0, OptionDefaults());
    AssertEquals(ColorBlack(), GetPixel(testBitmap, 25.0, 25.0));
    AssertEquals(ColorWhite(), GetPixel(testBitmap, 50.0, 50.0));
end;
procedure TestDrawTriangleOnWindowRecordIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    triangle := TriangleFrom(PointAt(100.0, 100.0), PointAt(200.0, 200.0), PointAt(150.0, 300.0));
    DrawTriangleOnWindow(testWindow, ColorBlack(), triangle);
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 100.0, 100.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 50.0, 50.0));
end;
procedure TestDrawTriangleOnWindowRecordWithOptionsIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    triangle := TriangleFrom(PointAt(100.0, 100.0), PointAt(200.0, 200.0), PointAt(150.0, 250.0));
    DrawTriangleOnWindow(testWindow, ColorBlack(), triangle, OptionDefaults());
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 150.0, 150.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 50.0, 50.0));
end;
procedure TestDrawTriangleOnWindowIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    DrawTriangleOnWindow(testWindow, ColorBlack(), 100.0, 100.0, 200.0, 300.0, 300.0, 100.0);
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 100.0, 100.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 50.0, 50.0));
end;
procedure TestDrawTriangleOnWindowWithOptionsIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    DrawTriangleOnWindow(testWindow, ColorBlack(), 100.0, 100.0, 200.0, 200.0, 150.0, 300.0, OptionDefaults());
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 100.0, 100.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 50.0, 50.0));
end;
procedure TestFillTriangleRecordIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    triangle := TriangleFrom(PointAt(100.0, 100.0), PointAt(200.0, 300.0), PointAt(300.0, 100.0));
    FillTriangle(ColorBlack(), triangle);
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 200.0, 150.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 50.0, 50.0));
end;
procedure TestFillTriangleRecordWithOptionsIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    triangle := TriangleFrom(PointAt(100.0, 100.0), PointAt(200.0, 300.0), PointAt(300.0, 100.0));
    FillTriangle(ColorBlack(), triangle, OptionDefaults());
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 200.0, 150.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 50.0, 50.0));
end;
procedure TestFillTriangleIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    FillTriangle(ColorBlack(), 100.0, 100.0, 200.0, 300.0, 300.0, 100.0);
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 200.0, 150.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 50.0, 50.0));
end;
procedure TestFillTriangleWithOptionsIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    FillTriangle(ColorRed(), 100.0, 100.0, 200.0, 300.0, 300.0, 100.0, OptionDefaults());
    RefreshScreen();
    AssertEquals(ColorRed(), GetPixel(testWindow, 150.0, 150.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 350.0, 150.0));
end;
procedure TestFillTriangleOnBitmapRecordIntegration;
begin
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    ClearBitmap(testBitmap, ColorWhite());
    triangle := TriangleFrom(PointAt(25.0, 25.0), PointAt(75.0, 25.0), PointAt(50.0, 75.0));
    FillTriangleOnBitmap(testBitmap, ColorBlack(), triangle);
    AssertEquals(ColorBlack(), GetPixel(testBitmap, 50.0, 50.0));
    AssertEquals(ColorWhite(), GetPixel(testBitmap, 0.0, 0.0));
end;
procedure TestFillTriangleOnBitmapRecordWithOptionsIntegration;
begin
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    ClearBitmap(testBitmap, ColorWhite());
    triangle := TriangleFrom(PointAt(25.0, 25.0), PointAt(75.0, 25.0), PointAt(50.0, 75.0));
    FillTriangleOnBitmap(testBitmap, ColorBlack(), triangle, OptionDefaults());
    AssertEquals(ColorBlack(), GetPixel(testBitmap, 50.0, 50.0));
    AssertEquals(ColorWhite(), GetPixel(testBitmap, 10.0, 10.0));
end;
procedure TestFillTriangleOnBitmapIntegration;
begin
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    ClearBitmap(testBitmap, ColorWhite());
    FillTriangleOnBitmap(testBitmap, ColorBlack(), 25.0, 25.0, 75.0, 25.0, 50.0, 75.0);
    AssertEquals(ColorBlack(), GetPixel(testBitmap, 50.0, 50.0));
    AssertEquals(ColorWhite(), GetPixel(testBitmap, 0.0, 0.0));
end;
procedure TestFillTriangleOnBitmapWithOptionsIntegration;
begin
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    CleanupBitmap := TBitmapCleanup.Create;
    ClearBitmap(testBitmap, ColorWhite());
    FillTriangleOnBitmap(testBitmap, ColorBlack(), 25.0, 25.0, 75.0, 25.0, 50.0, 75.0, OptionDefaults());
    AssertEquals(ColorBlack(), GetPixel(testBitmap, 50.0, 50.0));
    AssertEquals(ColorWhite(), GetPixel(testBitmap, 0.0, 0.0));
end;
procedure TestFillTriangleOnWindowRecordIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    triangle := TriangleFrom(PointAt(100.0, 100.0), PointAt(200.0, 300.0), PointAt(300.0, 100.0));
    FillTriangleOnWindow(testWindow, ColorBlack(), triangle);
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 200.0, 200.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 50.0, 50.0));
end;
procedure TestFillTriangleOnWindowRecordWithOptionsIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    triangle := TriangleFrom(PointAt(100.0, 100.0), PointAt(200.0, 300.0), PointAt(300.0, 100.0));
    FillTriangleOnWindow(testWindow, ColorBlack(), triangle, OptionDefaults());
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 200.0, 200.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 50.0, 50.0));
end;
procedure TestFillTriangleOnWindowIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    FillTriangleOnWindow(testWindow, ColorBlack(), 100.0, 100.0, 200.0, 300.0, 300.0, 100.0);
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 200.0, 200.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 50.0, 50.0));
end;
procedure TestFillTriangleOnWindowWithOptionsIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CleanupWindow := TWindowCleanup.Create;
    ClearWindow(testWindow, ColorWhite());
    FillTriangleOnWindow(testWindow, ColorBlack(), 100.0, 100.0, 200.0, 300.0, 300.0, 100.0, OptionDefaults());
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 150.0, 150.0));
    AssertEquals(ColorWhite(), GetPixel(testWindow, 350.0, 150.0));
end;
end;

procedure RegisterTests;
begin
    #<Proc:0x00007fbbcab52da8 /mnt/c/Users/Noahc/Documents/aYear_2_semester_2/TeamProject/GitHubRepo/splashkit_test_generator/test_generator/config/languages/pascal_config.rb:138 (lambda)>
end;
