uses SplashKit, TestFramework

type
TTestSprites = class(TTestCase)
protected
procedure TIntegrationTests.TestCallForAllSpritesWithValueIntegration;
begin
    helper := Helper.Create();
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite1 := CreateSprite(testBitmap);
    testSprite2 := CreateSprite(testBitmap);
    SpriteSetX(testSprite1, 100);
    SpriteSetX(testSprite2, 200);
    CallForAllSprites(helper.SpriteFloatFunction, 300);
    AssertEquals(300.0, SpriteX(testSprite1));
    AssertEquals(300.0, SpriteX(testSprite2));
    FreeAllSprites();
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestCallForAllSpritesIntegration;
begin
    helper := Helper.Create();
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite1 := CreateSprite(testBitmap);
    testSprite2 := CreateSprite(testBitmap);
    SpriteSetPosition(testSprite1, PointAt(100.0, 100.0));
    SpriteSetPosition(testSprite2, PointAt(200.0, 200.0));
    CallForAllSprites(helper.SpriteFunction);
    AssertEquals(300.0, SpriteX(testSprite1));
    AssertEquals(300.0, SpriteX(testSprite2));
    FreeAllSprites();
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestCallOnSpriteEventIntegration;
begin
    helper := Helper.Create();
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    CallOnSpriteEvent(helper.sprite_event_handler);
    SpriteStartAnimation(testSprite, 'test');
    UpdateSprite(testSprite);
    AssertTrue(helper.event_called);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestCenterPointOfSpriteIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite(testBitmap);
    SpriteSetPosition(testSprite, PointAt(100.0, 100.0));
    centerPoint := CenterPoint(testSprite);
    AssertEquals(150.0, centerPoint.x);
    AssertEquals(150.0, centerPoint.y);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestCreateSpriteIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite(testBitmap);
    AssertNotNull(testSprite);
    AssertTrue(HasSprite(SpriteName(testSprite)));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestCreateSpriteWithAnimationIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testAnimation := LoadAnimationScript('test_animation', 'kermit.txt');
    testSprite := CreateSprite(testBitmap, testAnimation);
    AssertNotNull(testSprite);
    AssertTrue(HasSprite(SpriteName(testSprite)));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    FreeAnimationScript(testAnimation);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestCreateSpriteWithBitmapNamedIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_bitmap');
    AssertNotNull(testSprite);
    AssertTrue(HasSprite(SpriteName(testSprite)));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestCreateSpriteNamedIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    AssertNotNull(testSprite);
    AssertEquals('test_sprite', SpriteName(testSprite));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestCreateSpriteNamedWithAnimationIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testAnimation := LoadAnimationScript('test_animation', 'kermit.txt');
    testSprite := CreateSprite('test_sprite', testBitmap, testAnimation);
    AssertNotNull(testSprite);
    AssertEquals('test_sprite', SpriteName(testSprite));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    FreeAnimationScript(testAnimation);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestCreateSpriteWithBitmapAndAnimationNamedIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testAnimation := LoadAnimationScript('test_animation', 'kermit.txt');
    testSprite := CreateSprite('test_bitmap', 'test_animation');
    AssertNotNull(testSprite);
    AssertTrue(HasSprite(SpriteName(testSprite)));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    FreeAnimationScript(testAnimation);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestCreateSpritePackIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    AssertFalse(HasSpritePack('test_pack'));
    CreateSpritePack('test_pack');
    AssertTrue(HasSpritePack('test_pack'));
    FreeSpritePack('test_pack');
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestCurrentSpritePackIntegration;
begin
    AssertEquals('default', CurrentSpritePack());
    CreateSpritePack('test_pack');
    SelectSpritePack('test_pack');
    AssertEquals('test_pack', CurrentSpritePack());
    SelectSpritePack('default');
    AssertEquals('default', CurrentSpritePack());
    FreeSpritePack('test_pack');
end;
procedure TIntegrationTests.TestDrawAllSpritesIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    ClearBitmap(testBitmap, ColorBlack());
    testSprite1 := CreateSprite(testBitmap);
    testSprite2 := CreateSprite(testBitmap);
    SpriteSetPosition(testSprite1, PointAt(100.0, 100.0));
    SpriteSetPosition(testSprite2, PointAt(200.0, 200.0));
    ClearScreen(ColorWhite());
    DrawAllSprites();
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 100.0, 100.0));
    AssertEquals(ColorBlack(), GetPixel(testWindow, 200.0, 200.0));
    FreeAllSprites();
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestDrawSpriteOffsetByIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    ClearBitmap(testBitmap, ColorBlack());
    testSprite := CreateSprite(testBitmap);
    SpriteSetPosition(testSprite, PointAt(400.0, 300.0));
    ClearScreen(ColorWhite());
    DrawSprite(testSprite, VectorFromAngle(50.0, 50.0));
    RefreshScreen();
    AssertNotEquals(ColorWhite(), GetPixel(testWindow, 450.0, 350.0));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestDrawSpriteIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    ClearBitmap(testBitmap, ColorBlack());
    testSprite := CreateSprite('test_sprite', testBitmap);
    SpriteSetPosition(testSprite, PointAt(400.0, 300.0));
    ClearScreen(ColorWhite());
    DrawSprite(testSprite);
    RefreshScreen();
    AssertEquals(ColorBlack(), GetPixel(testWindow, 400.0, 300.0));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestDrawSpriteOffsetXYIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    ClearBitmap(testBitmap, ColorBlack());
    testSprite := CreateSprite(testBitmap);
    SpriteSetPosition(testSprite, PointAt(400.0, 300.0));
    ClearScreen(ColorWhite());
    DrawSprite(testSprite, 50.0, 50.0);
    RefreshScreen();
    AssertNotEquals(ColorWhite(), GetPixel(testWindow, 450.0, 350.0));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestFreeAllSpritesIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    CreateSprite('test_sprite1', testBitmap);
    CreateSprite('test_sprite2', testBitmap);
    AssertTrue(HasSprite('test_sprite1'));
    AssertTrue(HasSprite('test_sprite2'));
    FreeAllSprites();
    AssertFalse(HasSprite('test_sprite1'));
    AssertFalse(HasSprite('test_sprite2'));
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestFreeSpriteIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    AssertTrue(HasSprite('test_sprite'));
    FreeSprite(testSprite);
    AssertFalse(HasSprite('test_sprite'));
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestFreeSpritePackIntegration;
begin
    AssertTrue(HasSpritePack('default'));
    CreateSpritePack('test_pack');
    AssertTrue(HasSpritePack('test_pack'));
    FreeSpritePack('test_pack');
    AssertFalse(HasSpritePack('test_pack'));
    AssertTrue(HasSpritePack('default'));
end;
procedure TIntegrationTests.TestHasSpriteIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    AssertFalse(HasSprite('test_sprite'));
    testSprite := CreateSprite('test_sprite', testBitmap);
    AssertTrue(HasSprite('test_sprite'));
    FreeSprite(testSprite);
    AssertFalse(HasSprite('test_sprite'));
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestHasSpritePackIntegration;
begin
    AssertFalse(HasSpritePack('test_pack'));
    CreateSpritePack('test_pack');
    AssertTrue(HasSpritePack('test_pack'));
    FreeSpritePack('test_pack');
    AssertFalse(HasSpritePack('test_pack'));
end;
procedure TIntegrationTests.TestMoveSpriteIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    startPosition := PointAt(100.0, 100.0);
    SpriteSetPosition(testSprite, startPosition);
    SpriteSetVelocity(testSprite, VectorTo(10.0, 10.0));
    MoveSprite(testSprite);
    AssertEquals(110.0, SpriteX(testSprite));
    AssertEquals(110.0, SpriteY(testSprite));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestMoveSpriteByVectorIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    SpriteSetPosition(testSprite, PointAt(100.0, 100.0));
    MoveSprite(testSprite, VectorTo(50.0, 50.0));
    AssertEquals(150.0, SpriteX(testSprite));
    AssertEquals(150, SpriteY(testSprite));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestMoveSpriteByVectorPercentIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    SpriteSetPosition(testSprite, PointAt(100.0, 100.0));
    MoveSprite(testSprite, VectorTo(50.0, 50.0), 0.5);
    AssertEquals(125.0, SpriteX(testSprite));
    AssertEquals(125.0, SpriteY(testSprite));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestMoveSpritePercentIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    SpriteSetPosition(testSprite, PointAt(100.0, 100.0));
    SpriteSetVelocity(testSprite, VectorTo(10.0, 10.0));
    MoveSprite(testSprite, 0.5);
    AssertEquals(105.0, SpriteX(testSprite));
    AssertEquals(105.0, SpriteY(testSprite));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestMoveSpriteToIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    MoveSpriteTo(testSprite, 400.0, 300.0);
    AssertEquals(400.0, SpriteX(testSprite));
    AssertEquals(300.0, SpriteY(testSprite));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSelectSpritePackIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    CreateSpritePack('test_pack');
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    AssertEquals('default', CurrentSpritePack());
    SelectSpritePack('test_pack');
    AssertEquals('test_pack', CurrentSpritePack());
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    FreeSpritePack('test_pack');
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteAddLayerIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    newLayerBitmap := CreateBitmap('new_layer', 50, 50);
    layerIndex := SpriteAddLayer(testSprite, newLayerBitmap, 'new_layer');
    AssertEquals(1, layerIndex);
    AssertEquals(2, SpriteLayerCount(testSprite));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    FreeBitmap(newLayerBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteAddToVelocityIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    SpriteSetVelocity(testSprite, VectorTo(0.0, 0.0));
    SpriteAddToVelocity(testSprite, VectorTo(10.0, 10.0));
    velocity := SpriteVelocity(testSprite);
    AssertEquals(10.0, velocity.x);
    AssertEquals(10.0, velocity.y);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteAddValueIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    SpriteAddValue(testSprite, 'health', 100.0);
    AssertTrue(SpriteHasValue(testSprite, 'health'));
    AssertEquals(100.0, SpriteValue(testSprite, 'health'));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteAddValueWithDefaultIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    SpriteAddValue(testSprite, 'health', 100.0);
    AssertTrue(SpriteHasValue(testSprite, 'health'));
    AssertEquals(100.0, SpriteValue(testSprite, 'health'));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteAnchorPointIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    anchorPoint := SpriteAnchorPoint(testSprite);
    AssertEquals(50.0, anchorPoint.x);
    AssertEquals(50.0, anchorPoint.y);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteAnchorPositionIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    SpriteSetPosition(testSprite, PointAt(100.0, 100.0));
    anchorPosition := SpriteAnchorPosition(testSprite);
    AssertEquals(150.0, anchorPosition.x);
    AssertEquals(150.0, anchorPosition.y);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteAnimationHasEndedIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testAnimation := LoadAnimationScript('test_animation', 'kermit.txt');
    testSprite := CreateSprite('test_sprite', testBitmap, testAnimation);
    SpriteStartAnimation(testSprite, 'walkfront');
    AssertFalse(SpriteAnimationHasEnded(testSprite));
    UpdateSpriteAnimation(testSprite, 100.0);
    AssertTrue(SpriteAnimationHasEnded(testSprite));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    FreeAnimationScript(testAnimation);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteAnimationNameIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testAnimation := LoadAnimationScript('test_animation', 'kermit.txt');
    testSprite := CreateSprite('test_sprite', testBitmap, testAnimation);
    SpriteStartAnimation(testSprite, 'walkfront');
    AssertEquals('walkfront', SpriteAnimationName(testSprite));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    FreeAnimationScript(testAnimation);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteAtIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    ClearBitmap(testBitmap, ColorRed());
    testSprite := CreateSprite('test_sprite', testBitmap);
    SpriteSetX(testSprite, 400);
    SpriteSetY(testSprite, 300);
    DrawSprite(testSprite);
    AssertTrue(SpriteAt(testSprite, PointAt(400.0, 300.0)));
    AssertFalse(SpriteAt(testSprite, PointAt(600.0, 500.0)));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteBringLayerForwardIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    layerIndex := SpriteAddLayer(testSprite, testBitmap, 'layer2');
    SpriteShowLayer(testSprite, layerIndex);
    visibleIndex := SpriteVisibleIndexOfLayer(testSprite, layerIndex);
    SpriteBringLayerForward(testSprite, visibleIndex);
    AssertEquals(0, SpriteVisibleIndexOfLayer(testSprite, layerIndex));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteBringLayerToFrontIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    layerIndex := SpriteAddLayer(testSprite, testBitmap, 'layer2');
    SpriteShowLayer(testSprite, layerIndex);
    visibleIndex := SpriteVisibleIndexOfLayer(testSprite, layerIndex);
    SpriteBringLayerToFront(testSprite, visibleIndex);
    AssertEquals(0, SpriteVisibleIndexOfLayer(testSprite, 'layer2'));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteCallOnEventIntegration;
begin
    helper := Helper.Create();
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    SpriteCallOnEvent(testSprite, helper.sprite_event_handler);
    SpriteStartAnimation(testSprite, 'test');
    UpdateSprite(testSprite);
    AssertTrue(helper.event_called);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteCircleIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    circle := SpriteCircle(testSprite);
    AssertEquals(50.0, circle.center.x);
    AssertEquals(50.0, circle.center.y);
    AssertEquals(50.0, circle.radius);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteCollisionBitmapIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    collisionBitmap := SpriteCollisionBitmap(testSprite);
    AssertEquals(testBitmap, collisionBitmap);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteCollisionCircleIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    circle := SpriteCollisionCircle(testSprite);
    AssertEquals(50.0, circle.center.x);
    AssertEquals(50.0, circle.center.y);
    AssertEquals(50.0, circle.radius);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteCollisionKindIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    AssertEquals(CollisionTestKind.PIXEL_COLLISIONS, SpriteCollisionKind(testSprite));
    SpriteSetCollisionKind(testSprite, CollisionTestKind.AABB_COLLISIONS);
    AssertEquals(CollisionTestKind.AABB_COLLISIONS, SpriteCollisionKind(testSprite));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteCollisionRectangleIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    rect := SpriteCollisionRectangle(testSprite);
    AssertEquals(0.0, rect.x);
    AssertEquals(0.0, rect.y);
    AssertEquals(100.0, rect.width);
    AssertEquals(100.0, rect.height);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteCurrentCellIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testAnimation := LoadAnimationScript('test_animation', 'kermit.txt');
    testSprite := CreateSprite('test_sprite', testBitmap, testAnimation);
    SpriteStartAnimation(testSprite, 'test_animation');
    AssertEquals(0, SpriteCurrentCell(testSprite));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    FreeAnimationScript(testAnimation);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteCurrentCellRectangleIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    rect := SpriteCurrentCellRectangle(testSprite);
    AssertEquals(0.0, rect.x);
    AssertEquals(0.0, rect.y);
    AssertEquals(100.0, rect.width);
    AssertEquals(100.0, rect.height);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteDxIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    AssertEquals(0.0, SpriteDx(testSprite));
    SpriteSetDx(testSprite, 5.0);
    AssertEquals(5.0, SpriteDx(testSprite));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteDyIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    AssertEquals(0.0, SpriteDy(testSprite));
    SpriteSetDy(testSprite, 5.0);
    AssertEquals(5.0, SpriteDy(testSprite));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteHasValueIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    AssertFalse(SpriteHasValue(testSprite, 'health'));
    SpriteAddValue(testSprite, 'health', 100.0);
    AssertTrue(SpriteHasValue(testSprite, 'health'));
    AssertFalse(SpriteHasValue(testSprite, 'mana'));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteHeadingIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    AssertEquals(90.0, SpriteHeading(testSprite));
    SpriteSetVelocity(testSprite, VectorTo(1.0, 1.0));
    AssertEquals(45.0, SpriteHeading(testSprite));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteHeightIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    AssertEquals(100, SpriteHeight(testSprite));
    SpriteSetScale(testSprite, 2.0);
    AssertEquals(100, SpriteHeight(testSprite));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteHideLayerNamedIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    SpriteAddLayer(testSprite, testBitmap, 'layer2');
    SpriteShowLayer(testSprite, 'layer2');
    AssertEquals(2, SpriteVisibleLayerCount(testSprite));
    SpriteHideLayer(testSprite, 'layer2');
    AssertEquals(1, SpriteVisibleLayerCount(testSprite));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteHideLayerIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    layerIdx := SpriteAddLayer(testSprite, testBitmap, 'layer2');
    SpriteShowLayer(testSprite, layerIdx);
    AssertEquals(2, SpriteVisibleLayerCount(testSprite));
    SpriteHideLayer(testSprite, layerIdx);
    AssertEquals(1, SpriteVisibleLayerCount(testSprite));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteLayerNamedIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    SpriteAddLayer(testSprite, testBitmap, 'layer2');
    AssertEquals(testBitmap, SpriteLayer(testSprite, 'layer2'));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteLayerAtIndexIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    layerIdx := SpriteAddLayer(testSprite, testBitmap, 'layer2');
    AssertEquals(testBitmap, SpriteLayer(testSprite, layerIdx));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteLayerCircleNamedIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    circle := SpriteLayerCircle(testSprite, 'base_layer');
    AssertEquals(50.0, circle.center.x);
    AssertEquals(50.0, circle.center.y);
    AssertEquals(50.0, circle.radius);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteLayerCircleAtIndexIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    circle := SpriteLayerCircle(testSprite, 0);
    AssertEquals(50.0, circle.center.x);
    AssertEquals(50.0, circle.center.y);
    AssertEquals(50.0, circle.radius);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteLayerCountIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    AssertEquals(1, SpriteLayerCount(testSprite));
    layerIdx := SpriteAddLayer(testSprite, testBitmap, 'layer2');
    AssertEquals(2, SpriteLayerCount(testSprite));
    AssertEquals(1, layerIdx);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteLayerHeightNamedIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    AssertEquals(100, SpriteLayerHeight(testSprite, 'base_layer'));
    SpriteAddLayer(testSprite, testBitmap, 'layer2');
    AssertEquals(100, SpriteLayerHeight(testSprite, 'layer2'));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteLayerHeightIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    AssertEquals(100, SpriteLayerHeight(testSprite, 0));
    layerIdx := SpriteAddLayer(testSprite, testBitmap, 'layer2');
    AssertEquals(100, SpriteLayerHeight(testSprite, layerIdx));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteLayerIndexIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    AssertEquals(0, SpriteLayerIndex(testSprite, 'base_layer'));
    layerIdx := SpriteAddLayer(testSprite, testBitmap, 'layer2');
    AssertEquals(layerIdx, SpriteLayerIndex(testSprite, 'layer2'));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteLayerNameIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    layerIdx := SpriteAddLayer(testSprite, testBitmap, 'layer2');
    AssertEquals('', SpriteLayerName(testSprite, layerIdx));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteLayerOffsetNamedIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    AssertEquals(VectorTo(0.0, 0.0), SpriteLayerOffset(testSprite, 'base_layer'));
    SpriteSetLayerOffset(testSprite, 'base_layer', VectorTo(10.0, 10.0));
    AssertEquals(VectorTo(10.0, 10.0), SpriteLayerOffset(testSprite, 'base_layer'));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteLayerOffsetIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    AssertEquals(VectorTo(0.0, 0.0), SpriteLayerOffset(testSprite, 0));
    layerIdx := SpriteAddLayer(testSprite, testBitmap, 'layer2');
    SpriteSetLayerOffset(testSprite, layerIdx, VectorTo(10.0, 10.0));
    AssertEquals(VectorTo(10.0, 10.0), SpriteLayerOffset(testSprite, layerIdx));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteLayerRectangleNamedIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    rect := SpriteLayerRectangle(testSprite, 'base_layer');
    AssertEquals(0.0, rect.x);
    AssertEquals(0.0, rect.y);
    AssertEquals(100.0, rect.width);
    AssertEquals(100.0, rect.height);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteLayerRectangleAtIndexIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    rect := SpriteLayerRectangle(testSprite, 0);
    AssertEquals(0.0, rect.x);
    AssertEquals(0.0, rect.y);
    AssertEquals(100.0, rect.width);
    AssertEquals(100.0, rect.height);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteLayerWidthNamedIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    AssertEquals(100, SpriteLayerWidth(testSprite, 'base_layer'));
    SpriteAddLayer(testSprite, testBitmap, 'layer2');
    AssertEquals(100, SpriteLayerWidth(testSprite, 'layer2'));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteLayerWidthIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    AssertEquals(100, SpriteLayerWidth(testSprite, 0));
    layerIdx := SpriteAddLayer(testSprite, testBitmap, 'layer2');
    AssertEquals(100, SpriteLayerWidth(testSprite, layerIdx));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteLocationMatrixIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    SpriteSetPosition(testSprite, PointAt(100.0, 100.0));
    SpriteSetRotation(testSprite, 45);
    matrix := SpriteLocationMatrix(testSprite);
    AssertEquals(150.0, matrix.elements[0, 2]);
    AssertEquals(1.0, matrix.elements[2, 2]);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteMassIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    AssertEquals(1.0, SpriteMass(testSprite));
    SpriteSetMass(testSprite, 10.0);
    AssertEquals(10.0, SpriteMass(testSprite));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteMoveFromAnchorPointIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    AssertFalse(SpriteMoveFromAnchorPoint(testSprite));
    SpriteSetMoveFromAnchorPoint(testSprite, true);
    AssertTrue(SpriteMoveFromAnchorPoint(testSprite));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteMoveToTakingSecondsIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    SpriteSetPosition(testSprite, PointAt(100.0, 100.0));
    SpriteMoveTo(testSprite, PointAt(200.0, 200.0), 1.0);
    UpdateSprite(testSprite);
    position := SpritePosition(testSprite);
    AssertEquals(200.0, position.x);
    AssertEquals(200.0, position.y);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteNameIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    AssertEquals('test_sprite', SpriteName(testSprite));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteNamedIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    AssertEquals(testSprite, SpriteNamed('test_sprite'));
    AssertNull(SpriteNamed('non_existent_sprite'));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteOffscreenIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    SpriteSetPosition(testSprite, PointAt(400.0, 300.0));
    AssertFalse(SpriteOffscreen(testSprite));
    SpriteSetPosition(testSprite, PointAt(-200.0, -200.0));
    AssertTrue(SpriteOffscreen(testSprite));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteOnScreenAtPointIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    SpriteSetPosition(testSprite, PointAt(400.0, 300.0));
    AssertTrue(SpriteOnScreenAt(testSprite, PointAt(400.0, 300.0)));
    AssertFalse(SpriteOnScreenAt(testSprite, PointAt(0.0, 0.0)));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteOnScreenAtIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    SpriteSetPosition(testSprite, PointAt(400.0, 300.0));
    AssertTrue(SpriteOnScreenAt(testSprite, 400.0, 300.0));
    AssertFalse(SpriteOnScreenAt(testSprite, 0.0, 0.0));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpritePositionIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    AssertEquals(PointAt(0.0, 0.0), SpritePosition(testSprite));
    SpriteSetPosition(testSprite, PointAt(400.0, 300.0));
    AssertEquals(PointAt(400.0, 300.0), SpritePosition(testSprite));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteReplayAnimationIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testAnimation := LoadAnimationScript('test_animation', 'kermit.txt');
    testSprite := CreateSprite(testBitmap, testAnimation);
    SpriteStartAnimation(testSprite, 'walkfront');
    AssertFalse(SpriteAnimationHasEnded(testSprite));
    UpdateSprite(testSprite, 100.0);
    SpriteReplayAnimation(testSprite);
    AssertFalse(SpriteAnimationHasEnded(testSprite));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteReplayAnimationWithSoundIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testAnimation := LoadAnimationScript('test_animation', 'kermit.txt');
    testSprite := CreateSprite(testBitmap, testAnimation);
    SpriteStartAnimation(testSprite, 'walkfront');
    AssertFalse(SpriteAnimationHasEnded(testSprite));
    UpdateSprite(testSprite, 100.0);
    SpriteReplayAnimation(testSprite, true);
    AssertFalse(SpriteAnimationHasEnded(testSprite));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteRotationIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    AssertEquals(0.0, SpriteRotation(testSprite));
    SpriteSetRotation(testSprite, 45.0);
    AssertEquals(45.0, SpriteRotation(testSprite));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteScaleIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    AssertEquals(1.0, SpriteScale(testSprite));
    SpriteSetScale(testSprite, 2.0);
    AssertEquals(2.0, SpriteScale(testSprite));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteScreenRectangleIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testAnimation := LoadAnimationScript('test_animation', 'kermit.txt');
    ClearBitmap(testBitmap, ColorWhite());
    testSprite := CreateSprite(testBitmap, testAnimation);
    SpriteStartAnimation(testSprite, 'walkfront');
    SpriteSetPosition(testSprite, PointAt(0.0, 0.0));
    rect := SpriteScreenRectangle(testSprite);
    AssertEquals(0.0, rect.x);
    AssertEquals(0.0, rect.y);
    AssertEquals(100.0, rect.width);
    AssertEquals(100.0, rect.height);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteSendLayerBackwardIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    layer1 := SpriteAddLayer(testSprite, testBitmap, 'layer1');
    SpriteShowLayer(testSprite, layer1);
    layer2 := SpriteAddLayer(testSprite, testBitmap, 'layer2');
    SpriteShowLayer(testSprite, layer2);
    visibleIndex := SpriteVisibleIndexOfLayer(testSprite, layer2);
    SpriteSendLayerBackward(testSprite, visibleIndex);
    AssertEquals(2, SpriteVisibleIndexOfLayer(testSprite, layer2));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteSendLayerToBackIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    layer1 := SpriteAddLayer(testSprite, testBitmap, 'layer1');
    SpriteShowLayer(testSprite, layer1);
    layer2 := SpriteAddLayer(testSprite, testBitmap, 'layer2');
    SpriteShowLayer(testSprite, layer2);
    visibleIndex := SpriteVisibleIndexOfLayer(testSprite, layer2);
    SpriteSendLayerToBack(testSprite, visibleIndex);
    AssertEquals(2, SpriteVisibleIndexOfLayer(testSprite, layer2));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteSetAnchorPointIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    AssertEquals(PointAt(50.0, 50.0), SpriteAnchorPoint(testSprite));
    SpriteSetAnchorPoint(testSprite, PointAt(25.0, 25.0));
    AssertEquals(PointAt(25.0, 25.0), SpriteAnchorPoint(testSprite));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteSetCollisionBitmapIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    AssertEquals(testBitmap, SpriteCollisionBitmap(testSprite));
    newBitmap := CreateBitmap('new_bitmap', 200, 200);
    SpriteSetCollisionBitmap(testSprite, newBitmap);
    AssertEquals(newBitmap, SpriteCollisionBitmap(testSprite));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    FreeBitmap(newBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteSetCollisionKindIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    AssertEquals(CollisionTestKind.PIXEL_COLLISIONS, SpriteCollisionKind(testSprite));
    SpriteSetCollisionKind(testSprite, CollisionTestKind.AABB_COLLISIONS);
    AssertEquals(CollisionTestKind.AABB_COLLISIONS, SpriteCollisionKind(testSprite));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteSetDxIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    AssertEquals(0.0, SpriteDx(testSprite));
    SpriteSetDx(testSprite, 5.0);
    AssertEquals(5.0, SpriteDx(testSprite));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteSetDyIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    AssertEquals(0.0, SpriteDy(testSprite));
    SpriteSetDy(testSprite, 5.0);
    AssertEquals(5.0, SpriteDy(testSprite));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteSetHeadingIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    SpriteSetVelocity(testSprite, VectorFromAngle(90.0, 1.0));
    AssertEquals(90.0, SpriteHeading(testSprite));
    SpriteSetHeading(testSprite, 45.0);
    AssertEquals(45.0, SpriteHeading(testSprite));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteSetLayerOffsetNamedIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    AssertEquals(VectorTo(0.0, 0.0), SpriteLayerOffset(testSprite, 'base_layer'));
    SpriteSetLayerOffset(testSprite, 'base_layer', VectorTo(10.0, 10.0));
    AssertEquals(VectorTo(10.0, 10.0), SpriteLayerOffset(testSprite, 'base_layer'));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteSetLayerOffsetAtIndexIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    AssertEquals(VectorTo(0.0, 0.0), SpriteLayerOffset(testSprite, 0));
    SpriteSetLayerOffset(testSprite, 0, VectorTo(10.0, 10.0));
    AssertEquals(VectorTo(10.0, 10.0), SpriteLayerOffset(testSprite, 0));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteSetMassIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    AssertEquals(1.0, SpriteMass(testSprite));
    SpriteSetMass(testSprite, 10.0);
    AssertEquals(10.0, SpriteMass(testSprite));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteSetMoveFromAnchorPointIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    AssertFalse(SpriteMoveFromAnchorPoint(testSprite));
    SpriteSetMoveFromAnchorPoint(testSprite, true);
    AssertTrue(SpriteMoveFromAnchorPoint(testSprite));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteSetPositionIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    AssertEquals(PointAt(0.0, 0.0), SpritePosition(testSprite));
    SpriteSetPosition(testSprite, PointAt(100.0, 100.0));
    AssertEquals(PointAt(100.0, 100.0), SpritePosition(testSprite));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteSetRotationIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    AssertEquals(0.0, SpriteRotation(testSprite));
    SpriteSetRotation(testSprite, 45.0);
    AssertEquals(45.0, SpriteRotation(testSprite));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteSetScaleIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    AssertEquals(1.0, SpriteScale(testSprite));
    SpriteSetScale(testSprite, 2.0);
    AssertEquals(2.0, SpriteScale(testSprite));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteSetSpeedIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    SpriteSetVelocity(testSprite, VectorFromAngle(0.0, 1.0));
    SpriteSetSpeed(testSprite, 5.0);
    AssertEquals(5.0, SpriteSpeed(testSprite));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteSetValueNamedIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    AssertFalse(SpriteHasValue(testSprite, 'test_value'));
    SpriteAddValue(testSprite, 'test_value', 0.0);
    SpriteSetValue(testSprite, 'test_value', 10.5);
    AssertEquals(10.5, SpriteValue(testSprite, 'test_value'));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteSetVelocityIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    AssertEquals(VectorTo(0.0, 0.0), SpriteVelocity(testSprite));
    SpriteSetVelocity(testSprite, VectorTo(5.0, 5.0));
    AssertEquals(VectorTo(5.0, 5.0), SpriteVelocity(testSprite));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteSetXIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    AssertEquals(0.0, SpriteX(testSprite));
    SpriteSetX(testSprite, 150.0);
    AssertEquals(150.0, SpriteX(testSprite));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteSetYIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    AssertEquals(0.0, SpriteY(testSprite));
    SpriteSetY(testSprite, 300.0);
    AssertEquals(300.0, SpriteY(testSprite));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteShowLayerNamedIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    layerIdx := SpriteAddLayer(testSprite, testBitmap, 'layer2');
    SpriteHideLayer(testSprite, 'layer2');
    AssertEquals(1, SpriteVisibleLayerCount(testSprite));
    AssertEquals(layerIdx, SpriteShowLayer(testSprite, 'layer2'));
    AssertEquals(2, SpriteVisibleLayerCount(testSprite));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteShowLayerIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    layerIdx := SpriteAddLayer(testSprite, testBitmap, 'layer2');
    SpriteHideLayer(testSprite, layerIdx);
    AssertEquals(1, SpriteVisibleLayerCount(testSprite));
    AssertEquals(layerIdx, SpriteShowLayer(testSprite, layerIdx));
    AssertEquals(2, SpriteVisibleLayerCount(testSprite));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteSpeedIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    AssertEquals(0.0, SpriteSpeed(testSprite));
    SpriteSetVelocity(testSprite, VectorTo(3.0, 4.0));
    AssertEquals(5.0, SpriteSpeed(testSprite));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteStartAnimationNamedIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testAnimation := LoadAnimationScript('test_animation', 'kermit.txt');
    testSprite := CreateSprite(testBitmap, testAnimation);
    SpriteStartAnimation(testSprite, 'walkfront');
    AssertFalse(SpriteAnimationHasEnded(testSprite));
    UpdateSpriteAnimation(testSprite, 100.0);
    AssertTrue(SpriteAnimationHasEnded(testSprite));
    AssertEquals('walkfront', SpriteAnimationName(testSprite));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteStartAnimationNamedWithSoundIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testAnimation := LoadAnimationScript('test_animation', 'kermit.txt');
    testSprite := CreateSprite(testBitmap, testAnimation);
    SpriteStartAnimation(testSprite, 'walkfront', true);
    AssertFalse(SpriteAnimationHasEnded(testSprite));
    UpdateSpriteAnimation(testSprite, 100.0);
    AssertTrue(SpriteAnimationHasEnded(testSprite));
    AssertEquals('walkfront', SpriteAnimationName(testSprite));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteStartAnimationIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testAnimation := LoadAnimationScript('test_animation', 'kermit.txt');
    testSprite := CreateSprite(testBitmap, testAnimation);
    SpriteStartAnimation(testSprite, '0');
    AssertFalse(SpriteAnimationHasEnded(testSprite));
    UpdateSpriteAnimation(testSprite, 100.0);
    AssertTrue(SpriteAnimationHasEnded(testSprite));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteStartAnimationWithSoundIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testAnimation := LoadAnimationScript('test_animation', 'kermit.txt');
    testSprite := CreateSprite(testBitmap, testAnimation);
    SpriteStartAnimation(testSprite, 0, true);
    AssertFalse(SpriteAnimationHasEnded(testSprite));
    UpdateSpriteAnimation(testSprite, 100.0);
    UpdateSpriteAnimation(testSprite, true);
    AssertTrue(SpriteAnimationHasEnded(testSprite));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteStopCallingOnEventIntegration;
begin
    helper := Helper.Create();
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    SpriteSetX(testSprite, 100);
    SpriteCallOnEvent(testSprite, helper.sprite_event_handler);
    UpdateSprite(testSprite);
    AssertEquals(200, SpriteX(testSprite));
    SpriteSetX(testSprite, 100);
    SpriteStopCallingOnEvent(testSprite, helper.sprite_event_handler);
    UpdateSprite(testSprite);
    AssertEquals(100.0, SpriteX(testSprite));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteToggleLayerVisibleNamedIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    SpriteAddLayer(testSprite, testBitmap, 'layer2');
    SpriteShowLayer(testSprite, 'layer2');
    AssertEquals(2, SpriteVisibleLayerCount(testSprite));
    SpriteToggleLayerVisible(testSprite, 'layer2');
    AssertEquals(1, SpriteVisibleLayerCount(testSprite));
    SpriteToggleLayerVisible(testSprite, 'layer2');
    AssertEquals(2, SpriteVisibleLayerCount(testSprite));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteToggleLayerVisibleIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    layerIdx := SpriteAddLayer(testSprite, testBitmap, 'layer2');
    SpriteShowLayer(testSprite, layerIdx);
    AssertEquals(2, SpriteVisibleLayerCount(testSprite));
    SpriteToggleLayerVisible(testSprite, layerIdx);
    AssertEquals(1, SpriteVisibleLayerCount(testSprite));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteValueIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    AssertEquals(3, SpriteValueCount(testSprite));
    SpriteAddValue(testSprite, 'test_value', 0.0);
    AssertEquals(10.0, SpriteValue(testSprite, 'test_value'));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteValueCountIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    AssertEquals(3, SpriteValueCount(testSprite));
    SpriteAddValue(testSprite, 'health', 0.0);
    SpriteAddValue(testSprite, 'speed', 0.0);
    AssertEquals(5, SpriteValueCount(testSprite));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteVelocityIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    AssertEquals(VectorTo(0.0, 0.0), SpriteVelocity(testSprite));
    SpriteSetVelocity(testSprite, VectorTo(5.0, 5.0));
    AssertEquals(VectorTo(5.0, 5.0), SpriteVelocity(testSprite));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteVisibleIndexOfLayerNamedIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    AssertEquals(0, SpriteVisibleIndexOfLayer(testSprite, 'base_layer'));
    SpriteAddLayer(testSprite, testBitmap, 'layer2');
    SpriteShowLayer(testSprite, 'layer2');
    AssertEquals(1, SpriteVisibleIndexOfLayer(testSprite, 'layer2'));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteVisibleIndexOfLayerIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    AssertEquals(0, SpriteVisibleIndexOfLayer(testSprite, 0));
    layerIdx := SpriteAddLayer(testSprite, testBitmap, 'layer2');
    SpriteShowLayer(testSprite, layerIdx);
    AssertEquals(1, SpriteVisibleIndexOfLayer(testSprite, layerIdx));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteVisibleLayerIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    AssertEquals(0, SpriteVisibleLayer(testSprite, 0));
    SpriteAddLayer(testSprite, testBitmap, 'layer2');
    SpriteShowLayer(testSprite, 'layer2');
    AssertEquals(1, SpriteVisibleLayer(testSprite, 1));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteVisibleLayerCountIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    AssertEquals(1, SpriteVisibleLayerCount(testSprite));
    SpriteAddLayer(testSprite, testBitmap, 'layer2');
    SpriteShowLayer(testSprite, 'layer2');
    AssertEquals(2, SpriteVisibleLayerCount(testSprite));
    SpriteHideLayer(testSprite, 'layer2');
    AssertEquals(1, SpriteVisibleLayerCount(testSprite));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteVisibleLayerIdIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    AssertEquals(0, SpriteVisibleLayerId(testSprite, 0));
    SpriteAddLayer(testSprite, testBitmap, 'layer2');
    SpriteShowLayer(testSprite, 'layer2');
    AssertEquals(1, SpriteVisibleLayerId(testSprite, 1));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteWidthIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    AssertEquals(1.0, SpriteScale(testSprite));
    SpriteSetScale(testSprite, 2.0);
    AssertEquals(2.0, SpriteScale(testSprite));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteXIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    AssertEquals(0.0, SpriteX(testSprite));
    SpriteSetX(testSprite, 150.0);
    AssertEquals(150.0, SpriteX(testSprite));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteYIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    AssertEquals(0.0, SpriteY(testSprite));
    SpriteSetY(testSprite, 200.0);
    AssertEquals(200.0, SpriteY(testSprite));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestStopCallingOnSpriteEventIntegration;
begin
    helper := Helper.Create();
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    CallOnSpriteEvent(helper.sprite_event_handler);
    SpriteStartAnimation(testSprite, 'test');
    UpdateSprite(testSprite);
    AssertTrue(helper.event_called);
    StopCallingOnSpriteEvent(helper.sprite_event_handler);
    UpdateSprite(testSprite);
    AssertFalse(helper.event_called);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestUpdateAllSpritesIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite1 := CreateSprite('test_sprite1', testBitmap);
    testSprite2 := CreateSprite('test_sprite2', testBitmap);
    SpriteSetVelocity(testSprite1, VectorTo(10.0, 10.0));
    SpriteSetVelocity(testSprite2, VectorTo(-10.0, -10.0));
    UpdateAllSprites();
    AssertEquals(VectorTo(10.0, 10.0), SpriteVelocity(testSprite1));
    AssertEquals(VectorTo(-10.0, -10.0), SpriteVelocity(testSprite2));
    FreeAllSprites();
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestUpdateAllSpritesPercentIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite1 := CreateSprite('test_sprite1', testBitmap);
    testSprite2 := CreateSprite('test_sprite2', testBitmap);
    SpriteSetVelocity(testSprite1, VectorTo(100.0, 100.0));
    SpriteSetVelocity(testSprite2, VectorTo(-100.0, -100.0));
    UpdateAllSprites(0.5);
    AssertEquals(50.0, SpriteX(testSprite1));
    AssertEquals(50.0, SpriteY(testSprite1));
    AssertEquals(-50.0, SpriteX(testSprite2));
    AssertEquals(-50.0, SpriteY(testSprite2));
    FreeAllSprites();
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestUpdateSpriteIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    SpriteSetVelocity(testSprite, VectorTo(10.0, 10.0));
    initialPos := SpritePosition(testSprite);
    UpdateSprite(testSprite);
    AssertNotEquals(initialPos, SpritePosition(testSprite));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestUpdateSpriteWithSoundIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testAnimation := LoadAnimationScript('test_animation', 'kermit.txt');
    testSprite := CreateSprite(testBitmap, testAnimation);
    SpriteStartAnimation(testSprite, 'default', true);
    UpdateSprite(testSprite, true);
    AssertTrue(SpriteAnimationHasEnded(testSprite));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestUpdateSpritePercentIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    SpriteSetVelocity(testSprite, VectorTo(100.0, 100.0));
    UpdateSprite(testSprite, 0.5);
    AssertEquals(50.0, SpriteX(testSprite));
    AssertEquals(50.0, SpriteY(testSprite));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestUpdateSpritePercentWithSoundIntegration;
begin
    helper := Helper.Create();
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite(testBitmap);
    SpriteSetVelocity(testSprite, VectorTo(100.0, 100.0));
    UpdateSprite(testSprite, 0.5, true);
    AssertEquals(50.0, SpriteX(testSprite));
    AssertEquals(50.0, SpriteY(testSprite));
    AssertTrue(SoundEffectPlaying('test_sound.wav'));
    UpdateSprite(testSprite, 0.5, false);
    AssertFalse(SoundEffectPlaying('test_sound.wav'));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestUpdateSpriteAnimationIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testAnimation := LoadAnimationScript('test_animation', 'kermit.txt');
    testSprite := CreateSprite('test_sprite', testBitmap, testAnimation);
    SpriteStartAnimation(testSprite, 'walkfront');
    AssertFalse(SpriteAnimationHasEnded(testSprite));
    UpdateSpriteAnimation(testSprite);
    AssertTrue(SpriteAnimationHasEnded(testSprite));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestUpdateSpriteAnimationWithSoundIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    SpriteStartAnimation(testSprite, 'default');
    UpdateSpriteAnimation(testSprite, true);
    AssertTrue(SpriteAnimationHasEnded(testSprite));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestUpdateSpriteAnimationPercentIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testAnimation := LoadAnimationScript('test_animation', 'kermit.txt');
    testSprite := CreateSprite('test_sprite', testBitmap, testAnimation);
    SpriteStartAnimation(testSprite, 'walkfront');
    AssertFalse(SpriteAnimationHasEnded(testSprite));
    UpdateSpriteAnimation(testSprite, 100.0);
    AssertTrue(SpriteAnimationHasEnded(testSprite));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestUpdateSpriteAnimationPercentWithSoundIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testAnimation := LoadAnimationScript('test_animation', 'kermit.txt');
    testSprite := CreateSprite('test_sprite', testBitmap, testAnimation);
    SpriteStartAnimation(testSprite, 'walkfront');
    AssertFalse(SpriteAnimationHasEnded(testSprite));
    UpdateSpriteAnimation(testSprite, 100.0, true);
    AssertTrue(SpriteAnimationHasEnded(testSprite));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestVectorFromCenterSpriteToPointPointIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    testSprite := CreateSprite('test_sprite', testBitmap);
    SpriteSetPosition(testSprite, PointAt(0.0, 0.0));
    targetPoint := PointAt(150.0, 150.0);
    vector := VectorFromCenterSpriteToPoint(testSprite, targetPoint);
    AssertEquals(100.0, vector.x);
    AssertEquals(100.0, vector.y);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestVectorFromToIntegration;
begin
    testWindow := OpenWindow('Test Window', 800, 600);
    testBitmap := CreateBitmap('test_bitmap', 100, 100);
    sprite1 := CreateSprite('sprite1', testBitmap);
    sprite2 := CreateSprite('sprite2', testBitmap);
    SpriteSetPosition(sprite1, PointAt(0.0, 0.0));
    SpriteSetPosition(sprite2, PointAt(100.0, 100.0));
    vector := VectorFromTo(sprite1, sprite2);
    AssertEquals(100.0, vector.x);
    AssertEquals(100.0, vector.y);
    FreeSprite(sprite1);
    FreeSprite(sprite2);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
end;

procedure RegisterTests;
begin
#<Proc:0x00007f20a9d04780 /mnt/c/Users/Noahc/Documents/.Year 2 Semester 3/Team Project (A)/Github Repo/splashkit_test_generator/test_generator/config/languages/pascal_config.rb:128 (lambda)>
end;
