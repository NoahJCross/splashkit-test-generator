uses SplashKit, TestFramework

type
TIntegrationTests = class(TTestCase)
published
procedure TIntegrationTests.TestCallForAllSpritesWithValueIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite1 := create_sprite(testBitmap);
    testSprite2 := create_sprite(testBitmap);
    sprite_set_x(testSprite1, 100);
    sprite_set_x(testSprite2, 200);
    call_for_all_sprites(sprite_set_x(testSprite1, 300), 300);
    AssertEquals(sprite_x(testSprite1), 300);
    AssertEquals(sprite_x(testSprite2), 300);
    free_all_sprites();
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestCallForAllSpritesIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite1 := create_sprite(testBitmap);
    testSprite2 := create_sprite(testBitmap);
    sprite_set_x(testSprite1, 100);
    sprite_set_y(testSprite1, 100);
    sprite_set_x(testSprite2, 200);
    sprite_set_y(testSprite2, 200);
    call_for_all_sprites(_test_sprite_function());
    AssertTrue(sprite_at(testSprite1, point_at(100, 100)));
    AssertTrue(sprite_at(testSprite2, point_at(200, 200)));
    free_all_sprites();
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestCallOnSpriteEventIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    call_on_sprite_event(_on_sprite_event());
    process_events();
    simulate_mouse_click(Mousebutton.LEFT);
    process_events();
    AssertTrue(mouse_clicked(Mousebutton.LEFT));
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestCenterPointIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    sprite_set_position(testSprite, point_at(100, 100));
    testCenterPoint := center_point(testSprite);
    AssertEquals(testCenterPoint.x, 150);
    AssertEquals(testCenterPoint.y, 150);
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestCreateSpriteIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    AssertNotNull(testSprite);
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestCreateSpriteWithAnimationIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testAnimation := load_animation_script("test_animation", "kermit.txt");
    testSprite := create_sprite(testBitmap, testAnimation);
    AssertNotNull(testSprite);
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    free_animation_script(testAnimation);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestCreateSpriteWithBitmapNamedIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite("test_bitmap");
    AssertNotNull(testSprite);
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestCreateSpriteNamedIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite("test_sprite", testBitmap);
    AssertNotNull(testSprite);
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestCreateSpriteNamedWithAnimationIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testAnimation := load_animation_script("test_animation", "kermit.txt");
    testSprite := create_sprite("test_sprite", testBitmap, testAnimation);
    AssertNotNull(testSprite);
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    free_animation_script(testAnimation);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestCreateSpriteWithBitmapAndAnimationNamedIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite("test_bitmap", "test_animation");
    AssertNotNull(testSprite);
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestCreateSpritePackIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    create_sprite_pack("test_pack");
    AssertTrue(has_sprite_pack("test_pack"));
    free_sprite_pack("test_pack");
    close_window(testWindow);
end;
procedure TIntegrationTests.TestCurrentSpritePackIntegration;
begin
    create_sprite_pack("test_pack");
    select_sprite_pack("test_pack");
    currentPack := current_sprite_pack();
    AssertEquals(currentPack, "test_pack");
    free_sprite_pack("test_pack");
end;
procedure TIntegrationTests.TestDrawAllSpritesIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite1 := create_sprite(testBitmap);
    testSprite2 := create_sprite(testBitmap);
    sprite_set_x(testSprite1, 100);
    sprite_set_y(testSprite1, 100);
    sprite_set_x(testSprite2, 200);
    sprite_set_y(testSprite2, 200);
    draw_all_sprites();
    refresh_screen();
    AssertNotEquals(get_pixel(100, 100), color_white());
    AssertNotEquals(get_pixel(200, 200), color_white());
    free_all_sprites();
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestDrawSpriteOffsetByIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    sprite_set_position(testSprite, point_at(400, 300));
    draw_sprite(testSprite, vector_to(50, 50));
    refresh_screen();
    AssertNotEquals(get_pixel(point_at(450, 350)), color_white());
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestDrawSpriteIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    sprite_set_position(testSprite, point_at(400, 300));
    draw_sprite(testSprite);
    refresh_screen();
    AssertTrue(sprite_on_screen_at(testSprite, point_at(400, 300)));
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestDrawSpriteOffsetXYIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    sprite_set_position(testSprite, point_at(400, 300));
    draw_sprite(testSprite, 50, 50);
    refresh_screen();
    AssertTrue(point_in_circle(point_at(450, 350), sprite_collision_circle(testSprite)));
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestFreeAllSpritesIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    free_all_sprites();
    AssertFalse(has_sprite("test_sprite"));
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestFreeSpriteIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestFreeSpritePackIntegration;
begin
    create_sprite_pack("test_pack");
    testHasPack := has_sprite_pack("test_pack");
    AssertTrue(testHasPack);
    free_sprite_pack("test_pack");
    testHasPack := has_sprite_pack("test_pack");
    AssertFalse(testHasPack);
end;
procedure TIntegrationTests.TestHasSpriteIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    AssertTrue(has_sprite("test_sprite"));
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestHasSpritePackIntegration;
begin
    create_sprite_pack("test_pack");
    AssertTrue(has_sprite_pack("test_pack"));
    AssertFalse(has_sprite_pack("non_existent_pack"));
    free_sprite_pack("test_pack");
end;
procedure TIntegrationTests.TestMoveSpriteIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    sprite_set_velocity(testSprite, vector_to(10.0, 10.0));
    sprite_set_position(testSprite, point_at(100.0, 100.0));
    move_sprite(testSprite);
    process_events();
    AssertNotEquals(sprite_position(testSprite), point_at(100.0, 100.0));
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestMoveSpriteByVectorIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    sprite_set_position(testSprite, point_at(100, 100));
    move_sprite(testSprite, vector_to(50, 50));
    process_events();
    AssertEquals(sprite_x(testSprite), 150);
    AssertEquals(sprite_y(testSprite), 150);
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestMoveSpriteByVectorPercentIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    sprite_set_position(testSprite, point_at(100.0, 100.0));
    move_sprite(testSprite, vector_to(50.0, 50.0), 0.5);
    AssertEquals(sprite_x(testSprite), 125.0);
    AssertEquals(sprite_y(testSprite), 125.0);
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestMoveSpritePercentIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    sprite_set_position(testSprite, point_at(100.0, 100.0));
    sprite_set_velocity(testSprite, vector_to(10.0, 10.0));
    move_sprite(testSprite, 0.5);
    process_events();
    AssertTrue(point_in_circle(point_at(105.0, 105.0), sprite_circle(testSprite)));
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestMoveSpriteToIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    move_sprite_to(testSprite, 400.0, 300.0);
    AssertEquals(sprite_x(testSprite), 400.0);
    AssertEquals(sprite_y(testSprite), 300.0);
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSelectSpritePackIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    create_sprite_pack("test_pack");
    testSprite := create_sprite("rocket_sprt.png");
    select_sprite_pack("test_pack");
    draw_all_sprites();
    AssertTrue(sprite_on_screen_at(testSprite, point_at(400, 300)));
    free_all_sprites();
    free_sprite_pack("test_pack");
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteAddLayerIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    newLayerBitmap := create_bitmap("new_layer_bitmap", 50, 50);
    layerIndex := sprite_add_layer(testSprite, newLayerBitmap, "new_layer");
    AssertTrue(layerIndex > -1);
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    free_bitmap(newLayerBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteAddToVelocityIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    sprite_set_position(testSprite, point_at(400, 300));
    sprite_add_to_velocity(testSprite, vector_to(10, 10));
    update_sprite(testSprite);
    AssertEquals(sprite_x(testSprite), 410);
    AssertEquals(sprite_y(testSprite), 310);
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteAddValueIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    sprite_add_value(testSprite, "health");
    AssertTrue(sprite_has_value(testSprite, "health"));
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteAddValueWithDefaultIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    sprite_add_value(testSprite, "health", 100.0);
    AssertTrue(sprite_has_value(testSprite, "health"));
    AssertEquals(sprite_value(testSprite, "health"), 100.0);
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteAnchorPointIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    testAnchorPoint := sprite_anchor_point(testSprite);
    AssertEquals(testAnchorPoint.x, 50);
    AssertEquals(testAnchorPoint.y, 50);
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteAnchorPositionIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    sprite_set_position(testSprite, point_at(100, 100));
    testAnchorPosition := sprite_anchor_position(testSprite);
    AssertEquals(testAnchorPosition.x, 100);
    AssertEquals(testAnchorPosition.y, 100);
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteAnimationHasEndedIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    sprite_start_animation(testSprite, "default");
    update_sprite_animation(testSprite);
    AssertFalse(sprite_animation_has_ended(testSprite));
    update_sprite_animation(testSprite);
    AssertTrue(sprite_animation_has_ended(testSprite));
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteAnimationNameIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    sprite_start_animation(testSprite, "default");
    testAnimationName := sprite_animation_name(testSprite);
    AssertEquals(testAnimationName, "default");
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteAtIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    sprite_set_position(testSprite, point_at(400, 300));
    process_events();
    AssertTrue(sprite_at(testSprite, point_at(400, 300)));
    AssertFalse(sprite_at(testSprite, point_at(500, 400)));
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteBringLayerForwardIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    layerIndex := sprite_add_layer(testSprite, testBitmap, "layer2");
    initialLayerPosition := sprite_visible_index_of_layer(testSprite, layerIndex);
    sprite_bring_layer_forward(testSprite, layerIndex);
    newLayerPosition := sprite_visible_index_of_layer(testSprite, layerIndex);
    AssertTrue(newLayerPosition > initialLayerPosition);
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteBringLayerToFrontIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    layerIndex := sprite_add_layer(testSprite, testBitmap, "layer2");
    sprite_bring_layer_to_front(testSprite, layerIndex);
    AssertEquals(sprite_visible_index_of_layer(testSprite, layerIndex), sprite_visible_layer_count(testSprite));
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteCallOnEventIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    sprite_call_on_event(testSprite, _on_sprite_event());
    process_events();
    simulate_mouse_click(Mousebutton.LEFT);
    process_events();
    AssertTrue(sprite_event_occurred(testSprite));
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteCircleIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    testCircle := sprite_circle(testSprite);
    AssertTrue(point_in_circle(point_at(50, 50), testCircle));
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteCollisionBitmapIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    collisionBitmap := sprite_collision_bitmap(testSprite);
    AssertEquals(bitmap_width(collisionBitmap), 100);
    AssertEquals(bitmap_height(collisionBitmap), 100);
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteCollisionCircleIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    testCircle := sprite_collision_circle(testSprite);
    AssertTrue(point_in_circle(point_at(50, 50), testCircle));
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteCollisionKindIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    sprite_set_collision_kind(testSprite, CollisionTestKind.PIXEL_COLLISIONS);
    AssertEquals(sprite_collision_kind(testSprite), CollisionTestKind.PIXEL_COLLISIONS);
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteCollisionRectangleIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    testRectangle := sprite_collision_rectangle(testSprite);
    AssertEquals(testRectangle.width, 100);
    AssertEquals(testRectangle.height, 100);
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteCurrentCellIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    sprite_start_animation(testSprite, 0);
    update_sprite(testSprite);
    AssertEquals(sprite_current_cell(testSprite), 0);
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteCurrentCellRectangleIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    testRectangle := sprite_current_cell_rectangle(testSprite);
    AssertEquals(rectangle_left(testRectangle), 0);
    AssertEquals(rectangle_top(testRectangle), 0);
    AssertEquals(rectangle_right(testRectangle), bitmap_width(testBitmap));
    AssertEquals(rectangle_bottom(testRectangle), bitmap_height(testBitmap));
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteDxIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    sprite_set_dx(testSprite, 5.0);
    AssertEquals(sprite_dx(testSprite), 5.0);
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteDyIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    sprite_set_dy(testSprite, 5.0);
    AssertEquals(sprite_dy(testSprite), 5.0);
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteHasValueIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    sprite_add_value(testSprite, "health");
    AssertTrue(sprite_has_value(testSprite, "health"));
    AssertFalse(sprite_has_value(testSprite, "mana"));
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteHeadingIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    sprite_set_velocity(testSprite, vector_to(1.0, 1.0));
    testHeading := sprite_heading(testSprite);
    AssertTrue((testHeading >= 45.0) and (testHeading <= 45.01));
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteHeightIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    AssertEquals(sprite_height(testSprite), 100);
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteHideLayerNamedIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    layerIndex := sprite_add_layer(testSprite, testBitmap, "layer2");
    sprite_hide_layer(testSprite, "layer2");
    AssertFalse(sprite_layer_visible(testSprite, layerIndex));
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteHideLayerIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    layerIndex := sprite_add_layer(testSprite, testBitmap, "layer2");
    sprite_show_layer(testSprite, layerIndex);
    sprite_hide_layer(testSprite, layerIndex);
    AssertFalse(sprite_layer_visible(testSprite, layerIndex));
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteLayerNamedIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    sprite_add_layer(testSprite, testBitmap, "layer2");
    testLayerBitmap := sprite_layer(testSprite, "layer2");
    AssertNotNull(testLayerBitmap);
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteLayerAtIndexIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    layerIndex := sprite_add_layer(testSprite, testBitmap, "layer2");
    testLayerBitmap := sprite_layer(testSprite, layerIndex);
    AssertNotNull(testLayerBitmap);
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteLayerCircleNamedIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    testCircle := sprite_layer_circle(testSprite, "layer1");
    AssertTrue(point_in_circle(point_at(50, 50), testCircle));
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteLayerCircleAtIndexIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    testCircle := sprite_layer_circle(testSprite, 0);
    AssertTrue(point_in_circle(point_at(50, 50), testCircle));
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteLayerCountIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    AssertEquals(sprite_layer_count(testSprite), 1);
    sprite_add_layer(testSprite, testBitmap, "layer2");
    AssertEquals(sprite_layer_count(testSprite), 2);
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteLayerHeightNamedIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    sprite_add_layer(testSprite, testBitmap, "layer2");
    AssertEquals(sprite_layer_height(testSprite, "layer2"), 100);
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteLayerHeightIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    layerHeight := sprite_layer_height(testSprite, 0);
    AssertEquals(layerHeight, 100);
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteLayerIndexIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    layerIndex := sprite_add_layer(testSprite, testBitmap, "layer2");
    AssertEquals(sprite_layer_index(testSprite, "layer2"), layerIndex);
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteLayerNameIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    layerIndex := sprite_add_layer(testSprite, testBitmap, "layer2");
    AssertEquals(sprite_layer_name(testSprite, layerIndex), "layer2");
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteLayerOffsetNamedIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    sprite_set_layer_offset(testSprite, "layer1", vector_to(10, 10));
    layerOffset := sprite_layer_offset(testSprite, "layer1");
    AssertEquals(layerOffset.x, 10);
    AssertEquals(layerOffset.y, 10);
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteLayerOffsetIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    layerIndex := sprite_add_layer(testSprite, testBitmap, "layer2");
    sprite_set_layer_offset(testSprite, layerIndex, vector_to(10, 10));
    AssertEquals(sprite_layer_offset(testSprite, layerIndex), vector_to(10, 10));
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteLayerRectangleNamedIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    testRectangle := sprite_layer_rectangle(testSprite, "layer1");
    AssertEquals(rectangle_left(testRectangle), 0);
    AssertEquals(rectangle_top(testRectangle), 0);
    AssertEquals(rectangle_right(testRectangle), 100);
    AssertEquals(rectangle_bottom(testRectangle), 100);
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteLayerRectangleAtIndexIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    testRectangle := sprite_layer_rectangle(testSprite, 0);
    AssertEquals(testRectangle.width, bitmap_width(testBitmap));
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteLayerWidthNamedIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    sprite_add_layer(testSprite, testBitmap, "layer2");
    AssertEquals(sprite_layer_width(testSprite, "layer2"), 100);
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteLayerWidthIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    AssertEquals(sprite_layer_width(testSprite, 0), 100);
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteLocationMatrixIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    sprite_set_position(testSprite, point_at(100.0, 100.0));
    sprite_set_rotation(testSprite, 45.0);
    testMatrix := sprite_location_matrix(testSprite);
    testPoint := point_at(50.0, 50.0);
    resultPoint := matrix_multiply(testMatrix, testPoint);
    AssertTrue((resultPoint.x >= 149.0) and (resultPoint.x <= 150.0));
    AssertTrue((resultPoint.y >= 149.0) and (resultPoint.y <= 150.0));
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteMassIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    sprite_set_mass(testSprite, 10.0);
    AssertEquals(sprite_mass(testSprite), 10.0);
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteMoveFromAnchorPointIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    sprite_set_move_from_anchor_point(testSprite, true);
    AssertTrue(sprite_move_from_anchor_point(testSprite));
    sprite_set_move_from_anchor_point(testSprite, false);
    AssertFalse(sprite_move_from_anchor_point(testSprite));
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteMoveToTakingSecondsIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    sprite_set_position(testSprite, point_at(100, 100));
    sprite_move_to(testSprite, point_at(400, 300), 2.0);
    process_events();
    AssertTrue(point_in_circle(point_at(400, 300), sprite_collision_circle(testSprite)));
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteNameIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    AssertEquals(sprite_name(testSprite), "test_sprite");
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteNamedIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    namedSprite := sprite_named("test_sprite");
    AssertNotNull(namedSprite);
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteOffscreenIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    sprite_set_position(testSprite, point_at(0, 0));
    AssertFalse(sprite_offscreen(testSprite));
    sprite_set_position(testSprite, point_at(-100, -100));
    AssertTrue(sprite_offscreen(testSprite));
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteOnScreenAtPointIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    sprite_set_position(testSprite, point_at(100, 100));
    draw_sprite(testSprite);
    refresh_screen();
    AssertTrue(sprite_on_screen_at(testSprite, point_at(100, 100)));
    AssertFalse(sprite_on_screen_at(testSprite, point_at(1000, 1000)));
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteOnScreenAtIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    sprite_set_position(testSprite, point_at(100, 100));
    AssertTrue(sprite_on_screen_at(testSprite, 100, 100));
    AssertFalse(sprite_on_screen_at(testSprite, 1000, 1000));
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpritePositionIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    sprite_set_position(testSprite, point_at(100.0, 100.0));
    testPosition := sprite_position(testSprite);
    AssertEquals(testPosition.x, 100.0);
    AssertEquals(testPosition.y, 100.0);
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteReplayAnimationIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    sprite_start_animation(testSprite, 0);
    sprite_replay_animation(testSprite);
    AssertTrue(sprite_animation_has_ended(testSprite));
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteReplayAnimationWithSoundIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    sprite_replay_animation(testSprite, true);
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteRotationIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    sprite_set_rotation(testSprite, 45.0);
    AssertEquals(sprite_rotation(testSprite), 45.0);
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteScaleIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    sprite_set_scale(testSprite, 2.0);
    AssertEquals(sprite_scale(testSprite), 2.0);
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteScreenRectangleIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    sprite_set_position(testSprite, point_at(100, 100));
    testRectangle := sprite_screen_rectangle(testSprite);
    AssertEquals(rectangle_left(testRectangle), 100);
    AssertEquals(rectangle_top(testRectangle), 100);
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteSendLayerBackwardIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    layerIndex := sprite_add_layer(testSprite, testBitmap, "layer2");
    sprite_send_layer_backward(testSprite, layerIndex);
    AssertTrue(sprite_visible_index_of_layer(testSprite, layerIndex) < 1);
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteSendLayerToBackIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    layerIndex := sprite_add_layer(testSprite, testBitmap, "layer2");
    sprite_send_layer_to_back(testSprite, layerIndex);
    AssertEquals(sprite_visible_index_of_layer(testSprite, layerIndex), 0);
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteSetAnchorPointIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    sprite_set_anchor_point(testSprite, point_at(50, 50));
    testAnchorPoint := sprite_anchor_point(testSprite);
    AssertEquals(testAnchorPoint.x, 50);
    AssertEquals(testAnchorPoint.y, 50);
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteSetCollisionBitmapIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    sprite_set_collision_bitmap(testSprite, testBitmap);
    AssertEquals(sprite_collision_bitmap(testSprite), testBitmap);
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteSetCollisionKindIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    sprite_set_collision_kind(testSprite, CollisionTestKind.PIXEL_COLLISIONS);
    AssertEquals(sprite_collision_kind(testSprite), CollisionTestKind.PIXEL_COLLISIONS);
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteSetDxIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    sprite_set_dx(testSprite, 5.0);
    AssertEquals(sprite_dx(testSprite), 5.0);
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteSetDyIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    sprite_set_dy(testSprite, 5.0);
    AssertEquals(sprite_dy(testSprite), 5.0);
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteSetHeadingIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    sprite_set_heading(testSprite, 45.0);
    AssertEquals(sprite_heading(testSprite), 45.0);
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteSetLayerOffsetNamedIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    sprite_set_layer_offset(testSprite, "layer1", vector_to(10.0, 10.0));
    testOffset := sprite_layer_offset(testSprite, "layer1");
    AssertEquals(testOffset.x, 10.0);
    AssertEquals(testOffset.y, 10.0);
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteSetLayerOffsetAtIndexIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    sprite_set_layer_offset(testSprite, 0, vector_to(10.0, 10.0));
    AssertEquals(sprite_layer_offset(testSprite, 0), vector_to(10.0, 10.0));
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteSetMassIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    sprite_set_mass(testSprite, 10.0);
    AssertEquals(sprite_mass(testSprite), 10.0);
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteSetMoveFromAnchorPointIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    sprite_set_move_from_anchor_point(testSprite, true);
    AssertTrue(sprite_move_from_anchor_point(testSprite));
    sprite_set_move_from_anchor_point(testSprite, false);
    AssertFalse(sprite_move_from_anchor_point(testSprite));
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteSetPositionIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    sprite_set_position(testSprite, point_at(100, 100));
    AssertEquals(sprite_x(testSprite), 100);
    AssertEquals(sprite_y(testSprite), 100);
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteSetRotationIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    sprite_set_rotation(testSprite, 45.0);
    AssertEquals(sprite_rotation(testSprite), 45.0);
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteSetScaleIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    sprite_set_scale(testSprite, 2.0);
    AssertEquals(sprite_scale(testSprite), 2.0);
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteSetSpeedIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    sprite_set_speed(testSprite, 5.0);
    AssertEquals(sprite_speed(testSprite), 5.0);
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteSetValueNamedIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    sprite_add_value(testSprite, "test_value");
    sprite_set_value(testSprite, "test_value", 10.5);
    AssertEquals(sprite_value(testSprite, "test_value"), 10.5);
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteSetVelocityIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    sprite_set_velocity(testSprite, vector_to(5.0, 5.0));
    update_sprite(testSprite);
    AssertTrue(sprite_at(testSprite, point_at(5.0, 5.0)));
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteSetXIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    sprite_set_x(testSprite, 150.0);
    AssertEquals(sprite_x(testSprite), 150.0);
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteSetYIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    sprite_set_y(testSprite, 300.0);
    AssertEquals(sprite_y(testSprite), 300.0);
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteShowLayerNamedIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    layerIndex := sprite_add_layer(testSprite, testBitmap, "layer2");
    result := sprite_show_layer(testSprite, "layer2");
    AssertEquals(result, 1);
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteShowLayerIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    layerIndex := sprite_add_layer(testSprite, testBitmap, "layer2");
    sprite_hide_layer(testSprite, 1);
    result := sprite_show_layer(testSprite, 1);
    AssertEquals(result, 1);
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteSpeedIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    sprite_set_velocity(testSprite, vector_to(5.0, 5.0));
    testSpeed := sprite_speed(testSprite);
    AssertEquals(testSpeed, 7.0710678118654755);
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteStartAnimationNamedIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    sprite_start_animation(testSprite, "test_animation");
    AssertTrue(sprite_animation_name(testSprite));
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteStartAnimationNamedWithSoundIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    sprite_start_animation(testSprite, "test_animation", true);
    update_sprite(testSprite);
    AssertTrue(sprite_animation_has_ended(testSprite));
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteStartAnimationIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    sprite_start_animation(testSprite, 0);
    update_sprite(testSprite);
    AssertTrue(sprite_animation_has_ended(testSprite));
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteStartAnimationWithSoundIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    sprite_start_animation(testSprite, 0, true);
    update_sprite(testSprite);
    AssertTrue(sprite_animation_has_ended(testSprite));
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteStopCallingOnEventIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    sprite_call_on_event(testSprite, _on_sprite_event());
    process_events();
    simulate_sprite_event(testSprite);
    process_events();
    AssertTrue(_on_sprite_event_called());
    sprite_stop_calling_on_event(testSprite, _on_sprite_event());
    process_events();
    simulate_sprite_event(testSprite);
    process_events();
    AssertFalse(_on_sprite_event_called());
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteToggleLayerVisibleNamedIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    sprite_add_layer(testSprite, testBitmap, "layer2");
    sprite_toggle_layer_visible(testSprite, "layer2");
    AssertFalse(sprite_visible_layer_count(testSprite));
    sprite_toggle_layer_visible(testSprite, "layer2");
    AssertEquals(sprite_visible_layer_count(testSprite), 2);
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteToggleLayerVisibleIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    layerIndex := sprite_add_layer(testSprite, testBitmap, "layer2");
    sprite_hide_layer(testSprite, layerIndex);
    sprite_toggle_layer_visible(testSprite, layerIndex);
    AssertTrue(sprite_visible_layer_count(testSprite));
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteValueIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    sprite_add_value(testSprite, "test_value", 10.0);
    spriteValueResult := sprite_value(testSprite, "test_value");
    AssertEquals(spriteValueResult, 10.0);
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteValueCountIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    sprite_add_value(testSprite, "health");
    sprite_add_value(testSprite, "speed");
    AssertEquals(sprite_value_count(testSprite), 2);
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteVelocityIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    sprite_set_velocity(testSprite, vector_to(5.0, 5.0));
    testVelocity := sprite_velocity(testSprite);
    AssertEquals(testVelocity.x, 5.0);
    AssertEquals(testVelocity.y, 5.0);
    free_all_sprites();
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteVisibleIndexOfLayerNamedIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    sprite_add_layer(testSprite, testBitmap, "layer2");
    layerIndex := sprite_visible_index_of_layer(testSprite, "layer2");
    AssertEquals(layerIndex, 1);
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteVisibleIndexOfLayerIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    layerIndex := sprite_add_layer(testSprite, testBitmap, "layer2");
    sprite_show_layer(testSprite, layerIndex);
    AssertEquals(sprite_visible_index_of_layer(testSprite, layerIndex), 1);
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteVisibleLayerIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    sprite_add_layer(testSprite, testBitmap, "layer2");
    sprite_show_layer(testSprite, "layer2");
    AssertEquals(sprite_visible_layer(testSprite, 1), 1);
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteVisibleLayerCountIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    AssertEquals(sprite_visible_layer_count(testSprite), 1);
    sprite_add_layer(testSprite, testBitmap, "layer2");
    sprite_show_layer(testSprite, "layer2");
    AssertEquals(sprite_visible_layer_count(testSprite), 2);
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteVisibleLayerIdIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    sprite_add_layer(testSprite, testBitmap, "layer2");
    sprite_show_layer(testSprite, "layer2");
    AssertEquals(sprite_visible_layer_id(testSprite, 1), 1);
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteWidthIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    AssertEquals(sprite_width(testSprite), 100);
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteXIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    sprite_set_x(testSprite, 150.0);
    AssertEquals(sprite_x(testSprite), 150.0);
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestSpriteYIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    sprite_set_y(testSprite, 200.0);
    AssertEquals(sprite_y(testSprite), 200.0);
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestStopCallingOnSpriteEventIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    call_on_sprite_event(_on_sprite_event());
    process_events();
    simulate_sprite_event(testSprite);
    process_events();
    AssertTrue(sprite_event_occurred(testSprite));
    stop_calling_on_sprite_event(_on_sprite_event());
    process_events();
    simulate_sprite_event(testSprite);
    process_events();
    AssertFalse(sprite_event_occurred(testSprite));
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestUpdateAllSpritesIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite1 := create_sprite(testBitmap);
    testSprite2 := create_sprite(testBitmap);
    sprite_set_position(testSprite1, point_at(100, 100));
    sprite_set_position(testSprite2, point_at(200, 200));
    sprite_set_velocity(testSprite1, vector_to(1, 1));
    sprite_set_velocity(testSprite2, vector_to(-1, -1));
    update_all_sprites();
    AssertNotEquals(sprite_position(testSprite1), point_at(100, 100));
    AssertNotEquals(sprite_position(testSprite2), point_at(200, 200));
    free_all_sprites();
    close_window(testWindow);
end;
procedure TIntegrationTests.TestUpdateAllSpritesPercentIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite1 := create_sprite(testBitmap);
    testSprite2 := create_sprite(testBitmap);
    sprite_set_velocity(testSprite1, vector_to(1.0, 1.0));
    sprite_set_velocity(testSprite2, vector_to(-1.0, -1.0));
    update_all_sprites(0.5);
    AssertTrue(sprite_at(testSprite1, point_at(50.0, 50.0)));
    AssertTrue(sprite_at(testSprite2, point_at(50.0, 50.0)));
    free_all_sprites();
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestUpdateSpriteIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    sprite_set_velocity(testSprite, vector_to(1.0, 1.0));
    update_sprite(testSprite);
    AssertNotEquals(sprite_x(testSprite), 0.0);
    AssertNotEquals(sprite_y(testSprite), 0.0);
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestUpdateSpriteWithSoundIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    sprite_set_velocity(testSprite, vector_to(1.0, 1.0));
    sprite_start_animation(testSprite, 0, true);
    update_sprite(testSprite, true);
    AssertNotEquals(sprite_x(testSprite), 0.0);
    AssertNotEquals(sprite_y(testSprite), 0.0);
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestUpdateSpritePercentIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    sprite_set_position(testSprite, point_at(100.0, 100.0));
    sprite_set_velocity(testSprite, vector_to(1.0, 1.0));
    update_sprite(testSprite, 0.5);
    AssertTrue(point_in_circle(point_at(100.5, 100.5), sprite_collision_circle(testSprite)));
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestUpdateSpritePercentWithSoundIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    sprite_set_position(testSprite, point_at(400, 300));
    update_sprite(testSprite, 0.5, true);
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestUpdateSpriteAnimationIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    sprite_start_animation(testSprite, 0);
    update_sprite_animation(testSprite);
    AssertTrue(sprite_current_cell(testSprite) > 0);
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestUpdateSpriteAnimationWithSoundIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    update_sprite_animation(testSprite, true);
    AssertTrue(sprite_animation_has_ended(testSprite));
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestUpdateSpriteAnimationPercentIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    update_sprite_animation(testSprite, 0.5);
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestUpdateSpriteAnimationPercentWithSoundIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    update_sprite_animation(testSprite, 0.5, true);
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestVectorFromCenterSpriteToPointPointIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite := create_sprite(testBitmap);
    sprite_set_position(testSprite, point_at(400, 300));
    testVector := vector_from_center_sprite_to_point(testSprite, point_at(500, 400));
    AssertEquals(testVector.x, 100);
    AssertEquals(testVector.y, 100);
    free_sprite(testSprite);
    free_bitmap(testBitmap);
    close_window(testWindow);
end;
procedure TIntegrationTests.TestVectorFromToIntegration;
begin
    testWindow := open_window("Test Window", 800, 600);
    testBitmap := create_bitmap("test_bitmap", 100, 100);
    testSprite1 := create_sprite(testBitmap);
    testSprite2 := create_sprite(testBitmap);
    sprite_set_position(testSprite1, point_at(100, 100));
    sprite_set_position(testSprite2, point_at(200, 200));
    testVector := vector_from_to(testSprite1, testSprite2);
    AssertEquals(testVector.x, 100);
    AssertEquals(testVector.y, 100);
    free_all_sprites();
    close_window(testWindow);
end;
end;

procedure RegisterTests;
begin
TestFramework.RegisterTest(TIntegrationTests.Suite);
end;
