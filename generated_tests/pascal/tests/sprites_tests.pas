uses SplashKit, TestFramework

type
TIntegrationTests = class(TTestCase)
published
procedure TIntegrationTests.TestCallForAllSpritesWithValueIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite1 := CreateSprite(testBitmap);
    testSprite2 := CreateSprite(testBitmap);
    SpriteSetX(testSprite1, 100);
    SpriteSetX(testSprite2, 200);
    CallForAllSprites(SpriteSetX(testSprite1, 300), 300);
    AssertEquals(SpriteX(testSprite1), 300);
    AssertEquals(SpriteX(testSprite2), 300);
    FreeAllSprites();
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestCallForAllSpritesIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite1 := CreateSprite(testBitmap);
    testSprite2 := CreateSprite(testBitmap);
    SpriteSetX(testSprite1, 100);
    SpriteSetY(testSprite1, 100);
    SpriteSetX(testSprite2, 200);
    SpriteSetY(testSprite2, 200);
    CallForAllSprites(TestSpriteFunction());
    AssertTrue(SpriteAt(testSprite1, PointAt(100, 100)));
    AssertTrue(SpriteAt(testSprite2, PointAt(200, 200)));
    FreeAllSprites();
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestCallOnSpriteEventIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    CallOnSpriteEvent(OnSpriteEvent());
    ProcessEvents();
    SimulateMouseClick(MouseButton.LEFT);
    ProcessEvents();
    AssertTrue(MouseClicked(MouseButton.LEFT));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestCenterPointIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    SpriteSetPosition(testSprite, PointAt(100, 100));
    testCenterPoint := CenterPoint(testSprite);
    AssertEquals(testCenterPoint.x, 150);
    AssertEquals(testCenterPoint.y, 150);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestCreateSpriteIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    AssertNotNull(testSprite);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestCreateSpriteWithAnimationIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testAnimation := LoadAnimationScript("test_animation", "kermit.txt");
    testSprite := CreateSprite(testBitmap, testAnimation);
    AssertNotNull(testSprite);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    FreeAnimationScript(testAnimation);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestCreateSpriteWithBitmapNamedIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite("test_bitmap");
    AssertNotNull(testSprite);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestCreateSpriteNamedIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite("test_sprite", testBitmap);
    AssertNotNull(testSprite);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestCreateSpriteNamedWithAnimationIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testAnimation := LoadAnimationScript("test_animation", "kermit.txt");
    testSprite := CreateSprite("test_sprite", testBitmap, testAnimation);
    AssertNotNull(testSprite);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    FreeAnimationScript(testAnimation);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestCreateSpriteWithBitmapAndAnimationNamedIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite("test_bitmap", "test_animation");
    AssertNotNull(testSprite);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestCreateSpritePackIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    CreateSpritePack("test_pack");
    AssertTrue(HasSpritePack("test_pack"));
    FreeSpritePack("test_pack");
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestCurrentSpritePackIntegration;
begin
    CreateSpritePack("test_pack");
    SelectSpritePack("test_pack");
    currentPack := CurrentSpritePack();
    AssertEquals(currentPack, "test_pack");
    FreeSpritePack("test_pack");
end;
procedure TIntegrationTests.TestDrawAllSpritesIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite1 := CreateSprite(testBitmap);
    testSprite2 := CreateSprite(testBitmap);
    SpriteSetX(testSprite1, 100);
    SpriteSetY(testSprite1, 100);
    SpriteSetX(testSprite2, 200);
    SpriteSetY(testSprite2, 200);
    DrawAllSprites();
    RefreshScreen();
    AssertNotEquals(GetPixel(100, 100), ColorWhite());
    AssertNotEquals(GetPixel(200, 200), ColorWhite());
    FreeAllSprites();
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestDrawSpriteOffsetByIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    SpriteSetPosition(testSprite, PointAt(400, 300));
    DrawSprite(testSprite, VectorTo(50, 50));
    RefreshScreen();
    AssertNotEquals(GetPixel(PointAt(450, 350)), ColorWhite());
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestDrawSpriteIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    SpriteSetPosition(testSprite, PointAt(400, 300));
    DrawSprite(testSprite);
    RefreshScreen();
    AssertTrue(SpriteOnScreenAt(testSprite, PointAt(400, 300)));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestDrawSpriteOffsetXYIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    SpriteSetPosition(testSprite, PointAt(400, 300));
    DrawSprite(testSprite, 50, 50);
    RefreshScreen();
    AssertTrue(PointInCircle(PointAt(450, 350), SpriteCollisionCircle(testSprite)));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestFreeAllSpritesIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    FreeAllSprites();
    AssertFalse(HasSprite("test_sprite"));
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestFreeSpriteIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestFreeSpritePackIntegration;
begin
    CreateSpritePack("test_pack");
    testHasPack := HasSpritePack("test_pack");
    AssertTrue(testHasPack);
    FreeSpritePack("test_pack");
    testHasPack := HasSpritePack("test_pack");
    AssertFalse(testHasPack);
end;
procedure TIntegrationTests.TestHasSpriteIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    AssertTrue(HasSprite("test_sprite"));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestHasSpritePackIntegration;
begin
    CreateSpritePack("test_pack");
    AssertTrue(HasSpritePack("test_pack"));
    AssertFalse(HasSpritePack("non_existent_pack"));
    FreeSpritePack("test_pack");
end;
procedure TIntegrationTests.TestMoveSpriteIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    SpriteSetVelocity(testSprite, VectorTo(10.0, 10.0));
    SpriteSetPosition(testSprite, PointAt(100.0, 100.0));
    MoveSprite(testSprite);
    ProcessEvents();
    AssertNotEquals(SpritePosition(testSprite), PointAt(100.0, 100.0));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestMoveSpriteByVectorIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    SpriteSetPosition(testSprite, PointAt(100, 100));
    MoveSprite(testSprite, VectorTo(50, 50));
    ProcessEvents();
    AssertEquals(SpriteX(testSprite), 150);
    AssertEquals(SpriteY(testSprite), 150);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestMoveSpriteByVectorPercentIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    SpriteSetPosition(testSprite, PointAt(100.0, 100.0));
    MoveSprite(testSprite, VectorTo(50.0, 50.0), 0.5);
    AssertEquals(SpriteX(testSprite), 125.0);
    AssertEquals(SpriteY(testSprite), 125.0);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestMoveSpritePercentIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    SpriteSetPosition(testSprite, PointAt(100.0, 100.0));
    SpriteSetVelocity(testSprite, VectorTo(10.0, 10.0));
    MoveSprite(testSprite, 0.5);
    ProcessEvents();
    AssertTrue(PointInCircle(PointAt(105.0, 105.0), SpriteCircle(testSprite)));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestMoveSpriteToIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    MoveSpriteTo(testSprite, 400.0, 300.0);
    AssertEquals(SpriteX(testSprite), 400.0);
    AssertEquals(SpriteY(testSprite), 300.0);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSelectSpritePackIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    CreateSpritePack("test_pack");
    testSprite := CreateSprite("rocket_sprt.png");
    SelectSpritePack("test_pack");
    DrawAllSprites();
    AssertTrue(SpriteOnScreenAt(testSprite, PointAt(400, 300)));
    FreeAllSprites();
    FreeSpritePack("test_pack");
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteAddLayerIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    newLayerBitmap := CreateBitmap("new_layer_bitmap", 50, 50);
    layerIndex := SpriteAddLayer(testSprite, newLayerBitmap, "new_layer");
    AssertTrue(layerIndex > -1);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    FreeBitmap(newLayerBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteAddToVelocityIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    SpriteSetPosition(testSprite, PointAt(400, 300));
    SpriteAddToVelocity(testSprite, VectorTo(10, 10));
    UpdateSprite(testSprite);
    AssertEquals(SpriteX(testSprite), 410);
    AssertEquals(SpriteY(testSprite), 310);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteAddValueIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    SpriteAddValue(testSprite, "health");
    AssertTrue(SpriteHasValue(testSprite, "health"));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteAddValueWithDefaultIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    SpriteAddValue(testSprite, "health", 100.0);
    AssertTrue(SpriteHasValue(testSprite, "health"));
    AssertEquals(SpriteValue(testSprite, "health"), 100.0);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteAnchorPointIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    testAnchorPoint := SpriteAnchorPoint(testSprite);
    AssertEquals(testAnchorPoint.x, 50);
    AssertEquals(testAnchorPoint.y, 50);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteAnchorPositionIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    SpriteSetPosition(testSprite, PointAt(100, 100));
    testAnchorPosition := SpriteAnchorPosition(testSprite);
    AssertEquals(testAnchorPosition.x, 100);
    AssertEquals(testAnchorPosition.y, 100);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteAnimationHasEndedIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    SpriteStartAnimation(testSprite, "default");
    UpdateSpriteAnimation(testSprite);
    AssertFalse(SpriteAnimationHasEnded(testSprite));
    UpdateSpriteAnimation(testSprite);
    AssertTrue(SpriteAnimationHasEnded(testSprite));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteAnimationNameIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    SpriteStartAnimation(testSprite, "default");
    testAnimationName := SpriteAnimationName(testSprite);
    AssertEquals(testAnimationName, "default");
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteAtIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    SpriteSetPosition(testSprite, PointAt(400, 300));
    ProcessEvents();
    AssertTrue(SpriteAt(testSprite, PointAt(400, 300)));
    AssertFalse(SpriteAt(testSprite, PointAt(500, 400)));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteBringLayerForwardIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    layerIndex := SpriteAddLayer(testSprite, testBitmap, "layer2");
    initialLayerPosition := SpriteVisibleIndexOfLayer(testSprite, layerIndex);
    SpriteBringLayerForward(testSprite, layerIndex);
    newLayerPosition := SpriteVisibleIndexOfLayer(testSprite, layerIndex);
    AssertTrue(newLayerPosition > initialLayerPosition);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteBringLayerToFrontIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    layerIndex := SpriteAddLayer(testSprite, testBitmap, "layer2");
    SpriteBringLayerToFront(testSprite, layerIndex);
    AssertEquals(SpriteVisibleIndexOfLayer(testSprite, layerIndex), SpriteVisibleLayerCount(testSprite));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteCallOnEventIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    SpriteCallOnEvent(testSprite, OnSpriteEvent());
    ProcessEvents();
    SimulateMouseClick(MouseButton.LEFT);
    ProcessEvents();
    AssertTrue(SpriteEventOccurred(testSprite));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteCircleIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    testCircle := SpriteCircle(testSprite);
    AssertTrue(PointInCircle(PointAt(50, 50), testCircle));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteCollisionBitmapIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    collisionBitmap := SpriteCollisionBitmap(testSprite);
    AssertEquals(BitmapWidth(collisionBitmap), 100);
    AssertEquals(BitmapHeight(collisionBitmap), 100);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteCollisionCircleIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    testCircle := SpriteCollisionCircle(testSprite);
    AssertTrue(PointInCircle(PointAt(50, 50), testCircle));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteCollisionKindIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    SpriteSetCollisionKind(testSprite, CollisionTestKind.PIXEL_COLLISIONS);
    AssertEquals(SpriteCollisionKind(testSprite), CollisionTestKind.PIXEL_COLLISIONS);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteCollisionRectangleIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    testRectangle := SpriteCollisionRectangle(testSprite);
    AssertEquals(testRectangle.width, 100);
    AssertEquals(testRectangle.height, 100);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteCurrentCellIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    SpriteStartAnimation(testSprite, 0);
    UpdateSprite(testSprite);
    AssertEquals(SpriteCurrentCell(testSprite), 0);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteCurrentCellRectangleIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    testRectangle := SpriteCurrentCellRectangle(testSprite);
    AssertEquals(RectangleLeft(testRectangle), 0);
    AssertEquals(RectangleTop(testRectangle), 0);
    AssertEquals(RectangleRight(testRectangle), BitmapWidth(testBitmap));
    AssertEquals(RectangleBottom(testRectangle), BitmapHeight(testBitmap));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteDxIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    SpriteSetDx(testSprite, 5.0);
    AssertEquals(SpriteDx(testSprite), 5.0);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteDyIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    SpriteSetDy(testSprite, 5.0);
    AssertEquals(SpriteDy(testSprite), 5.0);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteHasValueIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    SpriteAddValue(testSprite, "health");
    AssertTrue(SpriteHasValue(testSprite, "health"));
    AssertFalse(SpriteHasValue(testSprite, "mana"));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteHeadingIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    SpriteSetVelocity(testSprite, VectorTo(1.0, 1.0));
    testHeading := SpriteHeading(testSprite);
    AssertTrue((testHeading >= 45.0) and (testHeading <= 45.01));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteHeightIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    AssertEquals(SpriteHeight(testSprite), 100);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteHideLayerNamedIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    layerIndex := SpriteAddLayer(testSprite, testBitmap, "layer2");
    SpriteHideLayer(testSprite, "layer2");
    AssertFalse(SpriteLayerVisible(testSprite, layerIndex));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteHideLayerIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    layerIndex := SpriteAddLayer(testSprite, testBitmap, "layer2");
    SpriteShowLayer(testSprite, layerIndex);
    SpriteHideLayer(testSprite, layerIndex);
    AssertFalse(SpriteLayerVisible(testSprite, layerIndex));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteLayerNamedIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    SpriteAddLayer(testSprite, testBitmap, "layer2");
    testLayerBitmap := SpriteLayer(testSprite, "layer2");
    AssertNotNull(testLayerBitmap);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteLayerAtIndexIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    layerIndex := SpriteAddLayer(testSprite, testBitmap, "layer2");
    testLayerBitmap := SpriteLayer(testSprite, layerIndex);
    AssertNotNull(testLayerBitmap);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteLayerCircleNamedIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    testCircle := SpriteLayerCircle(testSprite, "layer1");
    AssertTrue(PointInCircle(PointAt(50, 50), testCircle));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteLayerCircleAtIndexIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    testCircle := SpriteLayerCircle(testSprite, 0);
    AssertTrue(PointInCircle(PointAt(50, 50), testCircle));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteLayerCountIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    AssertEquals(SpriteLayerCount(testSprite), 1);
    SpriteAddLayer(testSprite, testBitmap, "layer2");
    AssertEquals(SpriteLayerCount(testSprite), 2);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteLayerHeightNamedIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    SpriteAddLayer(testSprite, testBitmap, "layer2");
    AssertEquals(SpriteLayerHeight(testSprite, "layer2"), 100);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteLayerHeightIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    layerHeight := SpriteLayerHeight(testSprite, 0);
    AssertEquals(layerHeight, 100);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteLayerIndexIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    layerIndex := SpriteAddLayer(testSprite, testBitmap, "layer2");
    AssertEquals(SpriteLayerIndex(testSprite, "layer2"), layerIndex);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteLayerNameIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    layerIndex := SpriteAddLayer(testSprite, testBitmap, "layer2");
    AssertEquals(SpriteLayerName(testSprite, layerIndex), "layer2");
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteLayerOffsetNamedIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    SpriteSetLayerOffset(testSprite, "layer1", VectorTo(10, 10));
    layerOffset := SpriteLayerOffset(testSprite, "layer1");
    AssertEquals(layerOffset.x, 10);
    AssertEquals(layerOffset.y, 10);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteLayerOffsetIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    layerIndex := SpriteAddLayer(testSprite, testBitmap, "layer2");
    SpriteSetLayerOffset(testSprite, layerIndex, VectorTo(10, 10));
    AssertEquals(SpriteLayerOffset(testSprite, layerIndex), VectorTo(10, 10));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteLayerRectangleNamedIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    testRectangle := SpriteLayerRectangle(testSprite, "layer1");
    AssertEquals(RectangleLeft(testRectangle), 0);
    AssertEquals(RectangleTop(testRectangle), 0);
    AssertEquals(RectangleRight(testRectangle), 100);
    AssertEquals(RectangleBottom(testRectangle), 100);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteLayerRectangleAtIndexIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    testRectangle := SpriteLayerRectangle(testSprite, 0);
    AssertEquals(testRectangle.width, BitmapWidth(testBitmap));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteLayerWidthNamedIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    SpriteAddLayer(testSprite, testBitmap, "layer2");
    AssertEquals(SpriteLayerWidth(testSprite, "layer2"), 100);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteLayerWidthIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    AssertEquals(SpriteLayerWidth(testSprite, 0), 100);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteLocationMatrixIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    SpriteSetPosition(testSprite, PointAt(100.0, 100.0));
    SpriteSetRotation(testSprite, 45.0);
    testMatrix := SpriteLocationMatrix(testSprite);
    testPoint := PointAt(50.0, 50.0);
    resultPoint := MatrixMultiply(testMatrix, testPoint);
    AssertTrue((resultPoint.x >= 149.0) and (resultPoint.x <= 150.0));
    AssertTrue((resultPoint.y >= 149.0) and (resultPoint.y <= 150.0));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteMassIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    SpriteSetMass(testSprite, 10.0);
    AssertEquals(SpriteMass(testSprite), 10.0);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteMoveFromAnchorPointIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    SpriteSetMoveFromAnchorPoint(testSprite, true);
    AssertTrue(SpriteMoveFromAnchorPoint(testSprite));
    SpriteSetMoveFromAnchorPoint(testSprite, false);
    AssertFalse(SpriteMoveFromAnchorPoint(testSprite));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteMoveToTakingSecondsIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    SpriteSetPosition(testSprite, PointAt(100, 100));
    SpriteMoveTo(testSprite, PointAt(400, 300), 2.0);
    ProcessEvents();
    AssertTrue(PointInCircle(PointAt(400, 300), SpriteCollisionCircle(testSprite)));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteNameIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    AssertEquals(SpriteName(testSprite), "test_sprite");
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteNamedIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    namedSprite := SpriteNamed("test_sprite");
    AssertNotNull(namedSprite);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteOffscreenIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    SpriteSetPosition(testSprite, PointAt(0, 0));
    AssertFalse(SpriteOffscreen(testSprite));
    SpriteSetPosition(testSprite, PointAt(-100, -100));
    AssertTrue(SpriteOffscreen(testSprite));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteOnScreenAtPointIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    SpriteSetPosition(testSprite, PointAt(100, 100));
    DrawSprite(testSprite);
    RefreshScreen();
    AssertTrue(SpriteOnScreenAt(testSprite, PointAt(100, 100)));
    AssertFalse(SpriteOnScreenAt(testSprite, PointAt(1000, 1000)));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteOnScreenAtIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    SpriteSetPosition(testSprite, PointAt(100, 100));
    AssertTrue(SpriteOnScreenAt(testSprite, 100, 100));
    AssertFalse(SpriteOnScreenAt(testSprite, 1000, 1000));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpritePositionIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    SpriteSetPosition(testSprite, PointAt(100.0, 100.0));
    testPosition := SpritePosition(testSprite);
    AssertEquals(testPosition.x, 100.0);
    AssertEquals(testPosition.y, 100.0);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteReplayAnimationIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    SpriteStartAnimation(testSprite, 0);
    SpriteReplayAnimation(testSprite);
    AssertTrue(SpriteAnimationHasEnded(testSprite));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteReplayAnimationWithSoundIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    SpriteReplayAnimation(testSprite, true);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteRotationIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    SpriteSetRotation(testSprite, 45.0);
    AssertEquals(SpriteRotation(testSprite), 45.0);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteScaleIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    SpriteSetScale(testSprite, 2.0);
    AssertEquals(SpriteScale(testSprite), 2.0);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteScreenRectangleIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    SpriteSetPosition(testSprite, PointAt(100, 100));
    testRectangle := SpriteScreenRectangle(testSprite);
    AssertEquals(RectangleLeft(testRectangle), 100);
    AssertEquals(RectangleTop(testRectangle), 100);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteSendLayerBackwardIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    layerIndex := SpriteAddLayer(testSprite, testBitmap, "layer2");
    SpriteSendLayerBackward(testSprite, layerIndex);
    AssertTrue(SpriteVisibleIndexOfLayer(testSprite, layerIndex) < 1);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteSendLayerToBackIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    layerIndex := SpriteAddLayer(testSprite, testBitmap, "layer2");
    SpriteSendLayerToBack(testSprite, layerIndex);
    AssertEquals(SpriteVisibleIndexOfLayer(testSprite, layerIndex), 0);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteSetAnchorPointIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    SpriteSetAnchorPoint(testSprite, PointAt(50, 50));
    testAnchorPoint := SpriteAnchorPoint(testSprite);
    AssertEquals(testAnchorPoint.x, 50);
    AssertEquals(testAnchorPoint.y, 50);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteSetCollisionBitmapIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    SpriteSetCollisionBitmap(testSprite, testBitmap);
    AssertEquals(SpriteCollisionBitmap(testSprite), testBitmap);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteSetCollisionKindIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    SpriteSetCollisionKind(testSprite, CollisionTestKind.PIXEL_COLLISIONS);
    AssertEquals(SpriteCollisionKind(testSprite), CollisionTestKind.PIXEL_COLLISIONS);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteSetDxIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    SpriteSetDx(testSprite, 5.0);
    AssertEquals(SpriteDx(testSprite), 5.0);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteSetDyIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    SpriteSetDy(testSprite, 5.0);
    AssertEquals(SpriteDy(testSprite), 5.0);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteSetHeadingIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    SpriteSetHeading(testSprite, 45.0);
    AssertEquals(SpriteHeading(testSprite), 45.0);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteSetLayerOffsetNamedIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    SpriteSetLayerOffset(testSprite, "layer1", VectorTo(10.0, 10.0));
    testOffset := SpriteLayerOffset(testSprite, "layer1");
    AssertEquals(testOffset.x, 10.0);
    AssertEquals(testOffset.y, 10.0);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteSetLayerOffsetAtIndexIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    SpriteSetLayerOffset(testSprite, 0, VectorTo(10.0, 10.0));
    AssertEquals(SpriteLayerOffset(testSprite, 0), VectorTo(10.0, 10.0));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteSetMassIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    SpriteSetMass(testSprite, 10.0);
    AssertEquals(SpriteMass(testSprite), 10.0);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteSetMoveFromAnchorPointIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    SpriteSetMoveFromAnchorPoint(testSprite, true);
    AssertTrue(SpriteMoveFromAnchorPoint(testSprite));
    SpriteSetMoveFromAnchorPoint(testSprite, false);
    AssertFalse(SpriteMoveFromAnchorPoint(testSprite));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteSetPositionIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    SpriteSetPosition(testSprite, PointAt(100, 100));
    AssertEquals(SpriteX(testSprite), 100);
    AssertEquals(SpriteY(testSprite), 100);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteSetRotationIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    SpriteSetRotation(testSprite, 45.0);
    AssertEquals(SpriteRotation(testSprite), 45.0);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteSetScaleIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    SpriteSetScale(testSprite, 2.0);
    AssertEquals(SpriteScale(testSprite), 2.0);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteSetSpeedIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    SpriteSetSpeed(testSprite, 5.0);
    AssertEquals(SpriteSpeed(testSprite), 5.0);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteSetValueNamedIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    SpriteAddValue(testSprite, "test_value");
    SpriteSetValue(testSprite, "test_value", 10.5);
    AssertEquals(SpriteValue(testSprite, "test_value"), 10.5);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteSetVelocityIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    SpriteSetVelocity(testSprite, VectorTo(5.0, 5.0));
    UpdateSprite(testSprite);
    AssertTrue(SpriteAt(testSprite, PointAt(5.0, 5.0)));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteSetXIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    SpriteSetX(testSprite, 150.0);
    AssertEquals(SpriteX(testSprite), 150.0);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteSetYIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    SpriteSetY(testSprite, 300.0);
    AssertEquals(SpriteY(testSprite), 300.0);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteShowLayerNamedIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    layerIndex := SpriteAddLayer(testSprite, testBitmap, "layer2");
    result := SpriteShowLayer(testSprite, "layer2");
    AssertEquals(result, 1);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteShowLayerIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    layerIndex := SpriteAddLayer(testSprite, testBitmap, "layer2");
    SpriteHideLayer(testSprite, 1);
    result := SpriteShowLayer(testSprite, 1);
    AssertEquals(result, 1);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteSpeedIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    SpriteSetVelocity(testSprite, VectorTo(5.0, 5.0));
    testSpeed := SpriteSpeed(testSprite);
    AssertEquals(testSpeed, 7.0710678118654755);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteStartAnimationNamedIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    SpriteStartAnimation(testSprite, "test_animation");
    AssertTrue(SpriteAnimationName(testSprite));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteStartAnimationNamedWithSoundIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    SpriteStartAnimation(testSprite, "test_animation", true);
    UpdateSprite(testSprite);
    AssertTrue(SpriteAnimationHasEnded(testSprite));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteStartAnimationIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    SpriteStartAnimation(testSprite, 0);
    UpdateSprite(testSprite);
    AssertTrue(SpriteAnimationHasEnded(testSprite));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteStartAnimationWithSoundIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    SpriteStartAnimation(testSprite, 0, true);
    UpdateSprite(testSprite);
    AssertTrue(SpriteAnimationHasEnded(testSprite));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteStopCallingOnEventIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    SpriteCallOnEvent(testSprite, OnSpriteEvent());
    ProcessEvents();
    SimulateSpriteEvent(testSprite);
    ProcessEvents();
    AssertTrue(OnSpriteEventCalled());
    SpriteStopCallingOnEvent(testSprite, OnSpriteEvent());
    ProcessEvents();
    SimulateSpriteEvent(testSprite);
    ProcessEvents();
    AssertFalse(OnSpriteEventCalled());
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteToggleLayerVisibleNamedIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    SpriteAddLayer(testSprite, testBitmap, "layer2");
    SpriteToggleLayerVisible(testSprite, "layer2");
    AssertFalse(SpriteVisibleLayerCount(testSprite));
    SpriteToggleLayerVisible(testSprite, "layer2");
    AssertEquals(SpriteVisibleLayerCount(testSprite), 2);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteToggleLayerVisibleIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    layerIndex := SpriteAddLayer(testSprite, testBitmap, "layer2");
    SpriteHideLayer(testSprite, layerIndex);
    SpriteToggleLayerVisible(testSprite, layerIndex);
    AssertTrue(SpriteVisibleLayerCount(testSprite));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteValueIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    SpriteAddValue(testSprite, "test_value", 10.0);
    spriteValueResult := SpriteValue(testSprite, "test_value");
    AssertEquals(spriteValueResult, 10.0);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteValueCountIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    SpriteAddValue(testSprite, "health");
    SpriteAddValue(testSprite, "speed");
    AssertEquals(SpriteValueCount(testSprite), 2);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteVelocityIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    SpriteSetVelocity(testSprite, VectorTo(5.0, 5.0));
    testVelocity := SpriteVelocity(testSprite);
    AssertEquals(testVelocity.x, 5.0);
    AssertEquals(testVelocity.y, 5.0);
    FreeAllSprites();
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteVisibleIndexOfLayerNamedIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    SpriteAddLayer(testSprite, testBitmap, "layer2");
    layerIndex := SpriteVisibleIndexOfLayer(testSprite, "layer2");
    AssertEquals(layerIndex, 1);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteVisibleIndexOfLayerIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    layerIndex := SpriteAddLayer(testSprite, testBitmap, "layer2");
    SpriteShowLayer(testSprite, layerIndex);
    AssertEquals(SpriteVisibleIndexOfLayer(testSprite, layerIndex), 1);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteVisibleLayerIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    SpriteAddLayer(testSprite, testBitmap, "layer2");
    SpriteShowLayer(testSprite, "layer2");
    AssertEquals(SpriteVisibleLayer(testSprite, 1), 1);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteVisibleLayerCountIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    AssertEquals(SpriteVisibleLayerCount(testSprite), 1);
    SpriteAddLayer(testSprite, testBitmap, "layer2");
    SpriteShowLayer(testSprite, "layer2");
    AssertEquals(SpriteVisibleLayerCount(testSprite), 2);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteVisibleLayerIdIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    SpriteAddLayer(testSprite, testBitmap, "layer2");
    SpriteShowLayer(testSprite, "layer2");
    AssertEquals(SpriteVisibleLayerId(testSprite, 1), 1);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteWidthIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    AssertEquals(SpriteWidth(testSprite), 100);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteXIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    SpriteSetX(testSprite, 150.0);
    AssertEquals(SpriteX(testSprite), 150.0);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestSpriteYIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    SpriteSetY(testSprite, 200.0);
    AssertEquals(SpriteY(testSprite), 200.0);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestStopCallingOnSpriteEventIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    CallOnSpriteEvent(OnSpriteEvent());
    ProcessEvents();
    SimulateSpriteEvent(testSprite);
    ProcessEvents();
    AssertTrue(SpriteEventOccurred(testSprite));
    StopCallingOnSpriteEvent(OnSpriteEvent());
    ProcessEvents();
    SimulateSpriteEvent(testSprite);
    ProcessEvents();
    AssertFalse(SpriteEventOccurred(testSprite));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestUpdateAllSpritesIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite1 := CreateSprite(testBitmap);
    testSprite2 := CreateSprite(testBitmap);
    SpriteSetPosition(testSprite1, PointAt(100, 100));
    SpriteSetPosition(testSprite2, PointAt(200, 200));
    SpriteSetVelocity(testSprite1, VectorTo(1, 1));
    SpriteSetVelocity(testSprite2, VectorTo(-1, -1));
    UpdateAllSprites();
    AssertNotEquals(SpritePosition(testSprite1), PointAt(100, 100));
    AssertNotEquals(SpritePosition(testSprite2), PointAt(200, 200));
    FreeAllSprites();
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestUpdateAllSpritesPercentIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite1 := CreateSprite(testBitmap);
    testSprite2 := CreateSprite(testBitmap);
    SpriteSetVelocity(testSprite1, VectorTo(1.0, 1.0));
    SpriteSetVelocity(testSprite2, VectorTo(-1.0, -1.0));
    UpdateAllSprites(0.5);
    AssertTrue(SpriteAt(testSprite1, PointAt(50.0, 50.0)));
    AssertTrue(SpriteAt(testSprite2, PointAt(50.0, 50.0)));
    FreeAllSprites();
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestUpdateSpriteIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    SpriteSetVelocity(testSprite, VectorTo(1.0, 1.0));
    UpdateSprite(testSprite);
    AssertNotEquals(SpriteX(testSprite), 0.0);
    AssertNotEquals(SpriteY(testSprite), 0.0);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestUpdateSpriteWithSoundIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    SpriteSetVelocity(testSprite, VectorTo(1.0, 1.0));
    SpriteStartAnimation(testSprite, 0, true);
    UpdateSprite(testSprite, true);
    AssertNotEquals(SpriteX(testSprite), 0.0);
    AssertNotEquals(SpriteY(testSprite), 0.0);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestUpdateSpritePercentIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    SpriteSetPosition(testSprite, PointAt(100.0, 100.0));
    SpriteSetVelocity(testSprite, VectorTo(1.0, 1.0));
    UpdateSprite(testSprite, 0.5);
    AssertTrue(PointInCircle(PointAt(100.5, 100.5), SpriteCollisionCircle(testSprite)));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestUpdateSpritePercentWithSoundIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    SpriteSetPosition(testSprite, PointAt(400, 300));
    UpdateSprite(testSprite, 0.5, true);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestUpdateSpriteAnimationIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    SpriteStartAnimation(testSprite, 0);
    UpdateSpriteAnimation(testSprite);
    AssertTrue(SpriteCurrentCell(testSprite) > 0);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestUpdateSpriteAnimationWithSoundIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    UpdateSpriteAnimation(testSprite, true);
    AssertTrue(SpriteAnimationHasEnded(testSprite));
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestUpdateSpriteAnimationPercentIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    UpdateSpriteAnimation(testSprite, 0.5);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestUpdateSpriteAnimationPercentWithSoundIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    UpdateSpriteAnimation(testSprite, 0.5, true);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestVectorFromCenterSpriteToPointPointIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite := CreateSprite(testBitmap);
    SpriteSetPosition(testSprite, PointAt(400, 300));
    testVector := VectorFromCenterSpriteToPoint(testSprite, PointAt(500, 400));
    AssertEquals(testVector.x, 100);
    AssertEquals(testVector.y, 100);
    FreeSprite(testSprite);
    FreeBitmap(testBitmap);
    CloseWindow(testWindow);
end;
procedure TIntegrationTests.TestVectorFromToIntegration;
begin
    testWindow := OpenWindow("Test Window", 800, 600);
    testBitmap := CreateBitmap("test_bitmap", 100, 100);
    testSprite1 := CreateSprite(testBitmap);
    testSprite2 := CreateSprite(testBitmap);
    SpriteSetPosition(testSprite1, PointAt(100, 100));
    SpriteSetPosition(testSprite2, PointAt(200, 200));
    testVector := VectorFromTo(testSprite1, testSprite2);
    AssertEquals(testVector.x, 100);
    AssertEquals(testVector.y, 100);
    FreeAllSprites();
    CloseWindow(testWindow);
end;
end;

procedure RegisterTests;
begin
TestFramework.RegisterTest(TIntegrationTests.Suite);
end;
