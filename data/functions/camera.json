{
  "functions": [
    {
      "signature": "point_2d camera_position();",
      "name": "camera_position",
      "method_name": null,
      "unique_global_name": "camera_position",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the position of the camera in game coordinates. This will be the\ncoordinate of the upper left corner of the screen.",
      "brief": null,
      "return": {
        "type": "point_2d",
        "description": "The position of the camera as a point_2d.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "getter": "position",
        "group": "camera",
        "static": "camera"
      },
      "signatures": {
        "cpp": [
          "point_2d camera_position()"
        ],
        "rust": [
          "pub fn camera_position() -> point_2d"
        ],
        "python": [
          "def camera_position():"
        ],
        "pascal": [
          "function CameraPosition(): Point2D"
        ],
        "csharp": [
          "public static Point2D Camera.Position { get }",
          "public static Point2D SplashKit.CameraPosition();"
        ]
      }
    },
    {
      "signature": "double camera_x();",
      "name": "camera_x",
      "method_name": null,
      "unique_global_name": "camera_x",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the x location of the camera in game coordinates. This represents\nthe left most x value shown on the screen, with the right of the screen\nbeing at camera x + screen width.",
      "brief": null,
      "return": {
        "type": "double",
        "description": "The x location of the camera in game coordinates.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "getter": "x",
        "group": "camera",
        "static": "camera"
      },
      "signatures": {
        "cpp": [
          "double camera_x()"
        ],
        "rust": [
          "pub fn camera_x() -> f64"
        ],
        "python": [
          "def camera_x():"
        ],
        "pascal": [
          "function CameraX(): Double"
        ],
        "csharp": [
          "public static double Camera.X { get }",
          "public static double SplashKit.CameraX();"
        ]
      }
    },
    {
      "signature": "double camera_y();",
      "name": "camera_y",
      "method_name": null,
      "unique_global_name": "camera_y",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the y location of the camera in game coordinates. This represents\nthe stop most y value shown on the screen, with bottom of screen being\nat camera y + screen height.",
      "brief": null,
      "return": {
        "type": "double",
        "description": "The y location of the camera in game coordinates.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "getter": "y",
        "group": "camera",
        "static": "camera"
      },
      "signatures": {
        "cpp": [
          "double camera_y()"
        ],
        "rust": [
          "pub fn camera_y() -> f64"
        ],
        "python": [
          "def camera_y():"
        ],
        "pascal": [
          "function CameraY(): Double"
        ],
        "csharp": [
          "public static double Camera.Y { get }",
          "public static double SplashKit.CameraY();"
        ]
      }
    },
    {
      "signature": "void center_camera_on(sprite s,const vector_2d &offset);",
      "name": "center_camera_on",
      "method_name": "center_on",
      "unique_global_name": "center_camera_on_vector",
      "unique_method_name": ".center_on_vector",
      "suffix_name": null,
      "description": "Set the camera view to be centered over the specific sprite. The offset\nvector allows you to move the sprite from the direct center of the screen.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to track.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "offset": {
          "type": "vector_2d",
          "description": "The amount to offset the camera, allowing you to position\nthe sprite away from the center of the screen.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "method": "center_on",
        "suffix": "vector",
        "group": "camera",
        "static": "camera"
      },
      "signatures": {
        "cpp": [
          "void center_camera_on(sprite s, const vector_2d &offset)"
        ],
        "rust": [
          "pub fn center_camera_on(s: sprite, offset: &vector_2d)"
        ],
        "python": [
          "def center_camera_on_vector(s, offset):"
        ],
        "pascal": [
          "procedure CenterCameraOn(s: Sprite; const offset: Vector2D)"
        ],
        "csharp": [
          "public static void Camera.CenterCameraOn(Sprite s, Vector2D offset);",
          "public static void SplashKit.CenterCameraOn(Sprite s, Vector2D offset);"
        ]
      }
    },
    {
      "signature": "void center_camera_on(sprite s,double offset_x,double offset_y);",
      "name": "center_camera_on",
      "method_name": "center_on",
      "unique_global_name": "center_camera_on",
      "unique_method_name": ".center_on",
      "suffix_name": null,
      "description": "Set the camera view to be centered over the specific sprite. The offset\nvector allows you to move the sprite from the direct center of the screen.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to track.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "offset_x": {
          "type": "double",
          "description": "An additional offset added to the camera, allowing you to\nposition the sprite offset from the center of the screen.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "offset_y": {
          "type": "double",
          "description": "An additional offset added to the camera, allowing you to\nposition the sprite offset from the center of the screen.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "method": "center_on",
        "group": "camera",
        "static": "camera"
      },
      "signatures": {
        "cpp": [
          "void center_camera_on(sprite s, double offset_x, double offset_y)"
        ],
        "rust": [
          "pub fn center_camera_on(s: sprite, offset_x: f64, offset_y: f64)"
        ],
        "python": [
          "def center_camera_on(s, offset_x, offset_y):"
        ],
        "pascal": [
          "procedure CenterCameraOn(s: Sprite; offsetX: Double; offsetY: Double)"
        ],
        "csharp": [
          "public static void Camera.CenterCameraOn(Sprite s, double offsetX, double offsetY);",
          "public static void SplashKit.CenterCameraOn(Sprite s, double offsetX, double offsetY);"
        ]
      }
    },
    {
      "signature": "void move_camera_by(const vector_2d &offset);",
      "name": "move_camera_by",
      "method_name": "move_by",
      "unique_global_name": "move_camera_by_vector",
      "unique_method_name": ".move_by_vector",
      "suffix_name": null,
      "description": "Move the camera (offset its world x and y values) using the specified\nvector. For example, if you move the camera by the same speed vector of\na sprite the camera will \"track\" (be locked on to) the sprite as it moves.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "offset": {
          "type": "vector_2d",
          "description": "The amount to move the camera.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "method": "move_by",
        "suffix": "vector",
        "group": "camera",
        "static": "camera"
      },
      "signatures": {
        "cpp": [
          "void move_camera_by(const vector_2d &offset)"
        ],
        "rust": [
          "pub fn move_camera_by(offset: &vector_2d)"
        ],
        "python": [
          "def move_camera_by_vector(offset):"
        ],
        "pascal": [
          "procedure MoveCameraBy(const offset: Vector2D)"
        ],
        "csharp": [
          "public static void Camera.MoveCameraBy(Vector2D offset);",
          "public static void SplashKit.MoveCameraBy(Vector2D offset);"
        ]
      }
    },
    {
      "signature": "void move_camera_by(double dx,double dy);",
      "name": "move_camera_by",
      "method_name": "move_by",
      "unique_global_name": "move_camera_by",
      "unique_method_name": ".move_by",
      "suffix_name": null,
      "description": "Move the camera (offset its world x and y values) using the specified\ndx (change in x) and dy (change in x) values.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "dx": {
          "type": "double",
          "description": "The amount to move the camera along the x axis.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "dy": {
          "type": "double",
          "description": "The amount to move the camera along the y axis.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "method": "move_by",
        "group": "camera",
        "static": "camera"
      },
      "signatures": {
        "cpp": [
          "void move_camera_by(double dx, double dy)"
        ],
        "rust": [
          "pub fn move_camera_by(dx: f64, dy: f64)"
        ],
        "python": [
          "def move_camera_by(dx, dy):"
        ],
        "pascal": [
          "procedure MoveCameraBy(dx: Double; dy: Double)"
        ],
        "csharp": [
          "public static void Camera.MoveCameraBy(double dx, double dy);",
          "public static void SplashKit.MoveCameraBy(double dx, double dy);"
        ]
      }
    },
    {
      "signature": "void move_camera_to(const point_2d &pt);",
      "name": "move_camera_to",
      "method_name": "move_to",
      "unique_global_name": "move_camera_to_point",
      "unique_method_name": ".move_to_point",
      "suffix_name": null,
      "description": "Move the camera view (screen top left) to a specified point in the world.\nThis will be the new top left corner of the screen.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "pt": {
          "type": "point_2d",
          "description": "The new camera location",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "method": "move_to",
        "suffix": "point",
        "group": "camera",
        "static": "camera"
      },
      "signatures": {
        "cpp": [
          "void move_camera_to(const point_2d &pt)"
        ],
        "rust": [
          "pub fn move_camera_to(pt: &point_2d)"
        ],
        "python": [
          "def move_camera_to_point(pt):"
        ],
        "pascal": [
          "procedure MoveCameraTo(const pt: Point2D)"
        ],
        "csharp": [
          "public static void Camera.MoveCameraTo(Point2D pt);",
          "public static void SplashKit.MoveCameraTo(Point2D pt);"
        ]
      }
    },
    {
      "signature": "void move_camera_to(double x,double y);",
      "name": "move_camera_to",
      "method_name": "move_to",
      "unique_global_name": "move_camera_to",
      "unique_method_name": ".move_to",
      "suffix_name": null,
      "description": "Move the camera view to a world location specified by the x and y values.\nThis will be the new top left corner of the screen.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "x": {
          "type": "double",
          "description": "The new camera x location",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y": {
          "type": "double",
          "description": "The new camera y location",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "method": "move_to",
        "group": "camera",
        "static": "camera"
      },
      "signatures": {
        "cpp": [
          "void move_camera_to(double x, double y)"
        ],
        "rust": [
          "pub fn move_camera_to(x: f64, y: f64)"
        ],
        "python": [
          "def move_camera_to(x, y):"
        ],
        "pascal": [
          "procedure MoveCameraTo(x: Double; y: Double)"
        ],
        "csharp": [
          "public static void Camera.MoveCameraTo(double x, double y);",
          "public static void SplashKit.MoveCameraTo(double x, double y);"
        ]
      }
    },
    {
      "signature": "bool point_in_window(window wind,const point_2d &pt);",
      "name": "point_in_window",
      "method_name": "point_in_window",
      "unique_global_name": "point_in_window",
      "unique_method_name": ".point_in_window",
      "suffix_name": null,
      "description": "Tests if the point is in the window.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True if the point is on the screen.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "wind": {
          "type": "window",
          "description": "The window to check",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "pt": {
          "type": "point_2d",
          "description": "The point to check.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "method": "point_in_window",
        "group": "camera",
        "static": "camera"
      },
      "signatures": {
        "cpp": [
          "bool point_in_window(window wind, const point_2d &pt)"
        ],
        "rust": [
          "pub fn point_in_window(wind: window, pt: &point_2d) -> bool"
        ],
        "python": [
          "def point_in_window(wind, pt):"
        ],
        "pascal": [
          "function PointInWindow(wind: Window; const pt: Point2D): Boolean"
        ],
        "csharp": [
          "public static bool Camera.PointInWindow(Window wind, Point2D pt);",
          "public static bool SplashKit.PointInWindow(Window wind, Point2D pt);"
        ]
      }
    },
    {
      "signature": "bool point_on_screen(const point_2d &pt);",
      "name": "point_on_screen",
      "method_name": "point_on_screen",
      "unique_global_name": "point_on_screen",
      "unique_method_name": ".point_on_screen",
      "suffix_name": null,
      "description": "Tests if the point is on the screen.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True if the point is on the screen.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "pt": {
          "type": "point_2d",
          "description": "The point to check.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "method": "point_on_screen",
        "group": "camera",
        "static": "camera"
      },
      "signatures": {
        "cpp": [
          "bool point_on_screen(const point_2d &pt)"
        ],
        "rust": [
          "pub fn point_on_screen(pt: &point_2d) -> bool"
        ],
        "python": [
          "def point_on_screen(pt):"
        ],
        "pascal": [
          "function PointOnScreen(const pt: Point2D): Boolean"
        ],
        "csharp": [
          "public static bool Camera.PointOnScreen(Point2D pt);",
          "public static bool SplashKit.PointOnScreen(Point2D pt);"
        ]
      }
    },
    {
      "signature": "bool rect_in_window(window wind,const rectangle &rect);",
      "name": "rect_in_window",
      "method_name": "rect_in_window",
      "unique_global_name": "rect_in_window",
      "unique_method_name": ".rect_in_window",
      "suffix_name": null,
      "description": "Tests if the rectangle is within the bounds of the window.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True if any part of the rectangle is in the window.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "wind": {
          "type": "window",
          "description": "The window to check",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "rect": {
          "type": "rectangle",
          "description": "The rectangle to check.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "method": "rect_in_window",
        "group": "camera",
        "static": "camera"
      },
      "signatures": {
        "cpp": [
          "bool rect_in_window(window wind, const rectangle &rect)"
        ],
        "rust": [
          "pub fn rect_in_window(wind: window, rect: &rectangle) -> bool"
        ],
        "python": [
          "def rect_in_window(wind, rect):"
        ],
        "pascal": [
          "function RectInWindow(wind: Window; const rect: Rectangle): Boolean"
        ],
        "csharp": [
          "public static bool Camera.RectInWindow(Window wind, Rectangle rect);",
          "public static bool SplashKit.RectInWindow(Window wind, Rectangle rect);"
        ]
      }
    },
    {
      "signature": "bool rect_on_screen(const rectangle &rect);",
      "name": "rect_on_screen",
      "method_name": "rect_on_screen",
      "unique_global_name": "rect_on_screen",
      "unique_method_name": ".rect_on_screen",
      "suffix_name": null,
      "description": "Tests if the rectangle is on the screen.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True if any part of the rectangle is on the screen.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "rect": {
          "type": "rectangle",
          "description": "The rectangle to check.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "method": "rect_on_screen",
        "group": "camera",
        "static": "camera"
      },
      "signatures": {
        "cpp": [
          "bool rect_on_screen(const rectangle &rect)"
        ],
        "rust": [
          "pub fn rect_on_screen(rect: &rectangle) -> bool"
        ],
        "python": [
          "def rect_on_screen(rect):"
        ],
        "pascal": [
          "function RectOnScreen(const rect: Rectangle): Boolean"
        ],
        "csharp": [
          "public static bool Camera.RectOnScreen(Rectangle rect);",
          "public static bool SplashKit.RectOnScreen(Rectangle rect);"
        ]
      }
    },
    {
      "signature": "point_2d screen_center();",
      "name": "screen_center",
      "method_name": null,
      "unique_global_name": "screen_center",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the center of the screen in world coordinates.",
      "brief": null,
      "return": {
        "type": "point_2d",
        "description": "The center of the screen in world coordinates.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "getter": "screen_center",
        "group": "camera",
        "static": "camera"
      },
      "signatures": {
        "cpp": [
          "point_2d screen_center()"
        ],
        "rust": [
          "pub fn screen_center() -> point_2d"
        ],
        "python": [
          "def screen_center():"
        ],
        "pascal": [
          "function ScreenCenter(): Point2D"
        ],
        "csharp": [
          "public static Point2D Camera.ScreenCenter { get }",
          "public static Point2D SplashKit.ScreenCenter();"
        ]
      }
    },
    {
      "signature": "rectangle screen_rectangle();",
      "name": "screen_rectangle",
      "method_name": null,
      "unique_global_name": "screen_rectangle",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns a rectangle that represents the dimensions of the window.",
      "brief": null,
      "return": {
        "type": "rectangle",
        "description": "A rectangle representing the dimensions of the current window.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "getter": "screen_rectangle",
        "group": "camera",
        "static": "camera"
      },
      "signatures": {
        "cpp": [
          "rectangle screen_rectangle()"
        ],
        "rust": [
          "pub fn screen_rectangle() -> rectangle"
        ],
        "python": [
          "def screen_rectangle():"
        ],
        "pascal": [
          "function ScreenRectangle(): Rectangle"
        ],
        "csharp": [
          "public static Rectangle Camera.ScreenRectangle { get }",
          "public static Rectangle SplashKit.ScreenRectangle();"
        ]
      }
    },
    {
      "signature": "void set_camera_position(point_2d pos);",
      "name": "set_camera_position",
      "method_name": null,
      "unique_global_name": "set_camera_position",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Change the position of the camera to a specified world coordinate. This\nwill then be the new top left most position of the screen within the world.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "pos": {
          "type": "point_2d",
          "description": "The new location of the camera.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "setter": "position",
        "group": "camera",
        "static": "camera"
      },
      "signatures": {
        "cpp": [
          "void set_camera_position(point_2d pos)"
        ],
        "rust": [
          "pub fn set_camera_position(pos: point_2d)"
        ],
        "python": [
          "def set_camera_position(pos):"
        ],
        "pascal": [
          "procedure SetCameraPosition(pos: Point2D)"
        ],
        "csharp": [
          "public static void Camera.Position { set }",
          "public static void SplashKit.SetCameraPosition(Point2D pos);"
        ]
      }
    },
    {
      "signature": "void set_camera_x(double x);",
      "name": "set_camera_x",
      "method_name": null,
      "unique_global_name": "set_camera_x",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Change the X position of the camera to a specified world coordinate. This\nwill then be the new left most position of the screen within the world.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "x": {
          "type": "double",
          "description": "The new x coordinate for the camera",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "setter": "x",
        "group": "camera",
        "static": "camera"
      },
      "signatures": {
        "cpp": [
          "void set_camera_x(double x)"
        ],
        "rust": [
          "pub fn set_camera_x(x: f64)"
        ],
        "python": [
          "def set_camera_x(x):"
        ],
        "pascal": [
          "procedure SetCameraX(x: Double)"
        ],
        "csharp": [
          "public static void Camera.X { set }",
          "public static void SplashKit.SetCameraX(double x);"
        ]
      }
    },
    {
      "signature": "void set_camera_y(double y);",
      "name": "set_camera_y",
      "method_name": null,
      "unique_global_name": "set_camera_y",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Change the Y position of the camera to a specified world coordinate. This\nwill then be the new top most position of the screen within the world.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "y": {
          "type": "double",
          "description": "The new y coordinate for the camera",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "setter": "y",
        "group": "camera",
        "static": "camera"
      },
      "signatures": {
        "cpp": [
          "void set_camera_y(double y)"
        ],
        "rust": [
          "pub fn set_camera_y(y: f64)"
        ],
        "python": [
          "def set_camera_y(y):"
        ],
        "pascal": [
          "procedure SetCameraY(y: Double)"
        ],
        "csharp": [
          "public static void Camera.Y { set }",
          "public static void SplashKit.SetCameraY(double y);"
        ]
      }
    },
    {
      "signature": "point_2d to_screen(const point_2d &pt);",
      "name": "to_screen",
      "method_name": "to_screen",
      "unique_global_name": "to_screen_point",
      "unique_method_name": ".to_screen_point",
      "suffix_name": null,
      "description": "Convert the passed in world coordinates to screen coordinates.",
      "brief": null,
      "return": {
        "type": "point_2d",
        "description": "A point that represents pt in screen coordinates.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "pt": {
          "type": "point_2d",
          "description": "The point to convert - this should be in world coordinates.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "method": "to_screen",
        "suffix": "point",
        "group": "camera",
        "static": "camera"
      },
      "signatures": {
        "cpp": [
          "point_2d to_screen(const point_2d &pt)"
        ],
        "rust": [
          "pub fn to_screen(pt: &point_2d) -> point_2d"
        ],
        "python": [
          "def to_screen_point(pt):"
        ],
        "pascal": [
          "function ToScreen(const pt: Point2D): Point2D"
        ],
        "csharp": [
          "public static Point2D Camera.ToScreen(Point2D pt);",
          "public static Point2D SplashKit.ToScreen(Point2D pt);"
        ]
      }
    },
    {
      "signature": "rectangle to_screen(const rectangle &rect);",
      "name": "to_screen",
      "method_name": "to_screen",
      "unique_global_name": "to_screen_rectangle",
      "unique_method_name": ".to_screen_rectangle",
      "suffix_name": null,
      "description": "Convert the rectangle in world coordinates to screen coordinates.",
      "brief": null,
      "return": {
        "type": "rectangle",
        "description": "A rectangle that represents rect in screen coordinates.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "rect": {
          "type": "rectangle",
          "description": "The rectangle to convert - this should be in world coordinates.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "method": "to_screen",
        "suffix": "rectangle",
        "group": "camera",
        "static": "camera"
      },
      "signatures": {
        "cpp": [
          "rectangle to_screen(const rectangle &rect)"
        ],
        "rust": [
          "pub fn to_screen(rect: &rectangle) -> rectangle"
        ],
        "python": [
          "def to_screen_rectangle(rect):"
        ],
        "pascal": [
          "function ToScreen(const rect: Rectangle): Rectangle"
        ],
        "csharp": [
          "public static Rectangle Camera.ToScreen(Rectangle rect);",
          "public static Rectangle SplashKit.ToScreen(Rectangle rect);"
        ]
      }
    },
    {
      "signature": "double to_screen_x(double world_x);",
      "name": "to_screen_x",
      "method_name": "to_screen_x",
      "unique_global_name": "to_screen_x",
      "unique_method_name": ".to_screen_x",
      "suffix_name": null,
      "description": "Translate a world x value to the current screen x value which is based on\nthe camera position.",
      "brief": null,
      "return": {
        "type": "double",
        "description": "The x location of the world coordinate on the screen.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "world_x": {
          "type": "double",
          "description": "The value of the x coordinate to translate to screen.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "method": "to_screen_x",
        "group": "camera",
        "static": "camera"
      },
      "signatures": {
        "cpp": [
          "double to_screen_x(double world_x)"
        ],
        "rust": [
          "pub fn to_screen_x(world_x: f64) -> f64"
        ],
        "python": [
          "def to_screen_x(world_x):"
        ],
        "pascal": [
          "function ToScreenX(worldX: Double): Double"
        ],
        "csharp": [
          "public static double Camera.ToScreenX(double worldX);",
          "public static double SplashKit.ToScreenX(double worldX);"
        ]
      }
    },
    {
      "signature": "double to_screen_y(double world_y);",
      "name": "to_screen_y",
      "method_name": "to_screen_y",
      "unique_global_name": "to_screen_y",
      "unique_method_name": ".to_screen_y",
      "suffix_name": null,
      "description": "Translate a world y value to the current screen y value set by the camera.",
      "brief": null,
      "return": {
        "type": "double",
        "description": "The y location of the world coordinate on the screen.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "world_y": {
          "type": "double",
          "description": "The value of the y coordinate to translate to screen.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "method": "to_screen_y",
        "group": "camera",
        "static": "camera"
      },
      "signatures": {
        "cpp": [
          "double to_screen_y(double world_y)"
        ],
        "rust": [
          "pub fn to_screen_y(world_y: f64) -> f64"
        ],
        "python": [
          "def to_screen_y(world_y):"
        ],
        "pascal": [
          "function ToScreenY(worldY: Double): Double"
        ],
        "csharp": [
          "public static double Camera.ToScreenY(double worldY);",
          "public static double SplashKit.ToScreenY(double worldY);"
        ]
      }
    },
    {
      "signature": "point_2d to_world(const point_2d &pt);",
      "name": "to_world",
      "method_name": "to_world",
      "unique_global_name": "to_world",
      "unique_method_name": ".to_world",
      "suffix_name": null,
      "description": "Converts the passed in point from screen coordinates to world coordinates.",
      "brief": null,
      "return": {
        "type": "point_2d",
        "description": "The same point in world coordinates.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "pt": {
          "type": "point_2d",
          "description": "The point in screen coordinates.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "method": "to_world",
        "group": "camera",
        "static": "camera"
      },
      "signatures": {
        "cpp": [
          "point_2d to_world(const point_2d &pt)"
        ],
        "rust": [
          "pub fn to_world(pt: &point_2d) -> point_2d"
        ],
        "python": [
          "def to_world(pt):"
        ],
        "pascal": [
          "function ToWorld(const pt: Point2D): Point2D"
        ],
        "csharp": [
          "public static Point2D Camera.ToWorld(Point2D pt);",
          "public static Point2D SplashKit.ToWorld(Point2D pt);"
        ]
      }
    },
    {
      "signature": "double to_world_x(double screen_x);",
      "name": "to_world_x",
      "method_name": "to_world_x",
      "unique_global_name": "to_world_x",
      "unique_method_name": ".to_world_x",
      "suffix_name": null,
      "description": "Translate a screen x value (based on the camera) to a world x value",
      "brief": null,
      "return": {
        "type": "double",
        "description": "The x location of the screen coordinate in the world.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "screen_x": {
          "type": "double",
          "description": "The value of the x coordinate on screen to translate to\nthe world.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "method": "to_world_x",
        "group": "camera",
        "static": "camera"
      },
      "signatures": {
        "cpp": [
          "double to_world_x(double screen_x)"
        ],
        "rust": [
          "pub fn to_world_x(screen_x: f64) -> f64"
        ],
        "python": [
          "def to_world_x(screen_x):"
        ],
        "pascal": [
          "function ToWorldX(screenX: Double): Double"
        ],
        "csharp": [
          "public static double Camera.ToWorldX(double screenX);",
          "public static double SplashKit.ToWorldX(double screenX);"
        ]
      }
    },
    {
      "signature": "double to_world_y(double screen_y);",
      "name": "to_world_y",
      "method_name": "to_world_y",
      "unique_global_name": "to_world_y",
      "unique_method_name": ".to_world_y",
      "suffix_name": null,
      "description": "Translate a screen y value (based on the camera) to a world y value",
      "brief": null,
      "return": {
        "type": "double",
        "description": "The y location of the screen coordinate in the world.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "screen_y": {
          "type": "double",
          "description": "The value of the y coordinate on screen to translate to\nthe world.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "method": "to_world_y",
        "group": "camera",
        "static": "camera"
      },
      "signatures": {
        "cpp": [
          "double to_world_y(double screen_y)"
        ],
        "rust": [
          "pub fn to_world_y(screen_y: f64) -> f64"
        ],
        "python": [
          "def to_world_y(screen_y):"
        ],
        "pascal": [
          "function ToWorldY(screenY: Double): Double"
        ],
        "csharp": [
          "public static double Camera.ToWorldY(double screenY);",
          "public static double SplashKit.ToWorldY(double screenY);"
        ]
      }
    },
    {
      "signature": "vector_2d vector_world_to_screen();",
      "name": "vector_world_to_screen",
      "method_name": null,
      "unique_global_name": "vector_world_to_screen",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns a vector that can transform points from world to screen coordinates.",
      "brief": null,
      "return": {
        "type": "vector_2d",
        "description": "A vector representing the distance and direction points need\nto move to map from world to screen coordinates.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "getter": "vector_world_to_screen",
        "group": "camera",
        "static": "camera"
      },
      "signatures": {
        "cpp": [
          "vector_2d vector_world_to_screen()"
        ],
        "rust": [
          "pub fn vector_world_to_screen() -> vector_2d"
        ],
        "python": [
          "def vector_world_to_screen():"
        ],
        "pascal": [
          "function VectorWorldToScreen(): Vector2D"
        ],
        "csharp": [
          "public static Vector2D Camera.VectorWorldToScreen { get }",
          "public static Vector2D SplashKit.VectorWorldToScreen();"
        ]
      }
    },
    {
      "signature": "rectangle window_area(window wind);",
      "name": "window_area",
      "method_name": null,
      "unique_global_name": "window_area",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns a rectangle that represents the dimensions of the window based\non the camera.",
      "brief": null,
      "return": {
        "type": "rectangle",
        "description": "A rectangle representing the dimensions of the current window.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "wind": {
          "type": "window",
          "description": "The window",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "window",
        "getter": "area",
        "group": "camera",
        "static": "camera",
        "self": "wind"
      },
      "signatures": {
        "cpp": [
          "rectangle window_area(window wind)"
        ],
        "rust": [
          "pub fn window_area(wind: window) -> rectangle"
        ],
        "python": [
          "def window_area(wind):"
        ],
        "pascal": [
          "function WindowArea(wind: Window): Rectangle"
        ],
        "csharp": [
          "public Rectangle Window.Area { get }",
          "public static Rectangle SplashKit.WindowArea(Window wind);"
        ]
      }
    }
  ]
}