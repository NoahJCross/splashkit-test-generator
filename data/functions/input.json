{
  "functions": [
    {
      "signature": "void process_events();",
      "name": "process_events",
      "method_name": null,
      "unique_global_name": "process_events",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "ProcessEvents allows SplashKit to react to user interactions. This\nprocedure checks the current keyboard and mouse states and should be\ncalled once within your game loop to check user interaction.\n\nSide Effects\n- Reads user interaction events\n- Updates keys down, text input, etc.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "group": "input",
        "static": "input"
      },
      "signatures": {
        "cpp": [
          "void process_events()"
        ],
        "rust": [
          "pub fn process_events()"
        ],
        "python": [
          "def process_events():"
        ],
        "pascal": [
          "procedure ProcessEvents()"
        ],
        "csharp": [
          "public static void Input.ProcessEvents();",
          "public static void SplashKit.ProcessEvents();"
        ]
      }
    },
    {
      "signature": "bool quit_requested();",
      "name": "quit_requested",
      "method_name": null,
      "unique_global_name": "quit_requested",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Checks to see if the user has asked for the application to quit. This\nvalue is updated by the `process_events` routine. Also see\n`window_close_requested`.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True if the application has been requested to close.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "group": "input",
        "static": "input"
      },
      "signatures": {
        "cpp": [
          "bool quit_requested()"
        ],
        "rust": [
          "pub fn quit_requested() -> bool"
        ],
        "python": [
          "def quit_requested():"
        ],
        "pascal": [
          "function QuitRequested(): Boolean"
        ],
        "csharp": [
          "public static bool Input.QuitRequested();",
          "public static bool SplashKit.QuitRequested();"
        ]
      }
    },
    {
      "signature": "void reset_quit();",
      "name": "reset_quit",
      "method_name": null,
      "unique_global_name": "reset_quit",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Cancels a quit request, ensuring the quit requested will return false.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "group": "input",
        "static": "input"
      },
      "signatures": {
        "cpp": [
          "void reset_quit()"
        ],
        "rust": [
          "pub fn reset_quit()"
        ],
        "python": [
          "def reset_quit():"
        ],
        "pascal": [
          "procedure ResetQuit()"
        ],
        "csharp": [
          "public static void Input.ResetQuit();",
          "public static void SplashKit.ResetQuit();"
        ]
      }
    },
    {
      "signature": "bool any_key_pressed();",
      "name": "any_key_pressed",
      "method_name": null,
      "unique_global_name": "any_key_pressed",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Checks to see if any key has been pressed since the last time\n`process_events` was called.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True if any key was pressed.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "group": "input"
      },
      "signatures": {
        "cpp": [
          "bool any_key_pressed()"
        ],
        "rust": [
          "pub fn any_key_pressed() -> bool"
        ],
        "python": [
          "def any_key_pressed():"
        ],
        "pascal": [
          "function AnyKeyPressed(): Boolean"
        ],
        "csharp": [
          "public static bool SplashKit.AnyKeyPressed();"
        ]
      }
    },
    {
      "signature": "void deregister_callback_on_key_down(key_callback *callback);",
      "name": "deregister_callback_on_key_down",
      "method_name": null,
      "unique_global_name": "deregister_callback_on_key_down",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Remove the registered callback from receiving events related to key down actions.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "callback": {
          "type": "key_callback",
          "description": "The function to from from key down events",
          "is_pointer": true,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "input"
      },
      "signatures": {
        "cpp": [
          "void deregister_callback_on_key_down(key_callback *callback)"
        ],
        "rust": [
          "pub fn deregister_callback_on_key_down(callback: key_callback)"
        ],
        "python": [
          "def deregister_callback_on_key_down(callback):"
        ],
        "pascal": [
          "procedure DeregisterCallbackOnKeyDown(callback: KeyCallback)"
        ],
        "csharp": [
          "public static void SplashKit.DeregisterCallbackOnKeyDown(KeyCallback callback);"
        ]
      }
    },
    {
      "signature": "void deregister_callback_on_key_typed(key_callback *callback);",
      "name": "deregister_callback_on_key_typed",
      "method_name": null,
      "unique_global_name": "deregister_callback_on_key_typed",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Remove the registered callback from receiving events related to key typed actions.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "callback": {
          "type": "key_callback",
          "description": "The function to from from key typed events",
          "is_pointer": true,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "input"
      },
      "signatures": {
        "cpp": [
          "void deregister_callback_on_key_typed(key_callback *callback)"
        ],
        "rust": [
          "pub fn deregister_callback_on_key_typed(callback: key_callback)"
        ],
        "python": [
          "def deregister_callback_on_key_typed(callback):"
        ],
        "pascal": [
          "procedure DeregisterCallbackOnKeyTyped(callback: KeyCallback)"
        ],
        "csharp": [
          "public static void SplashKit.DeregisterCallbackOnKeyTyped(KeyCallback callback);"
        ]
      }
    },
    {
      "signature": "void deregister_callback_on_key_up(key_callback *callback);",
      "name": "deregister_callback_on_key_up",
      "method_name": null,
      "unique_global_name": "deregister_callback_on_key_up",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Remove the registered callback from receiving events related to key up actions.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "callback": {
          "type": "key_callback",
          "description": "The function to from from key up events",
          "is_pointer": true,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "input"
      },
      "signatures": {
        "cpp": [
          "void deregister_callback_on_key_up(key_callback *callback)"
        ],
        "rust": [
          "pub fn deregister_callback_on_key_up(callback: key_callback)"
        ],
        "python": [
          "def deregister_callback_on_key_up(callback):"
        ],
        "pascal": [
          "procedure DeregisterCallbackOnKeyUp(callback: KeyCallback)"
        ],
        "csharp": [
          "public static void SplashKit.DeregisterCallbackOnKeyUp(KeyCallback callback);"
        ]
      }
    },
    {
      "signature": "bool key_down(key_code key);",
      "name": "key_down",
      "method_name": null,
      "unique_global_name": "key_down",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns true when the key requested is being held down. This is updated\nas part of the `process_events` call. Use the key codes from `key_code`\nto specify the key to be checked.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True if the key is currently held down",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "key": {
          "type": "key_code",
          "description": "The key to check if it is down",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "input"
      },
      "signatures": {
        "cpp": [
          "bool key_down(key_code key)"
        ],
        "rust": [
          "pub fn key_down(key: key_code) -> bool"
        ],
        "python": [
          "def key_down(key):"
        ],
        "pascal": [
          "function KeyDown(key: KeyCode): Boolean"
        ],
        "csharp": [
          "public static bool SplashKit.KeyDown(KeyCode key);"
        ]
      }
    },
    {
      "signature": "string key_name(key_code key);",
      "name": "key_name",
      "method_name": null,
      "unique_global_name": "key_name",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "The `key_name` function returns a string name for a given `key_code`. For\nexample, `COMMA_KEY` returns the string 'Comma'. This function could be used\nto display more meaningful key names for configuring game controls, etc.",
      "brief": null,
      "return": {
        "type": "string",
        "description": "The name of the key",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "key": {
          "type": "key_code",
          "description": "The key to get the name of",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "input"
      },
      "signatures": {
        "cpp": [
          "string key_name(key_code key)"
        ],
        "rust": [
          "pub fn key_name(key: key_code) -> String"
        ],
        "python": [
          "def key_name(key):"
        ],
        "pascal": [
          "function KeyName(key: KeyCode): String"
        ],
        "csharp": [
          "public static string SplashKit.KeyName(KeyCode key);"
        ]
      }
    },
    {
      "signature": "bool key_released(key_code key);",
      "name": "key_released",
      "method_name": null,
      "unique_global_name": "key_released",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns true if the specified key was released since the last time\n`process_events` was called. This occurs only once for the key that is\nreleased and will not return true again until the key is pressed down and\nreleased again.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True if the key was just released",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "key": {
          "type": "key_code",
          "description": "The key to check if it was released",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "input"
      },
      "signatures": {
        "cpp": [
          "bool key_released(key_code key)"
        ],
        "rust": [
          "pub fn key_released(key: key_code) -> bool"
        ],
        "python": [
          "def key_released(key):"
        ],
        "pascal": [
          "function KeyReleased(key: KeyCode): Boolean"
        ],
        "csharp": [
          "public static bool SplashKit.KeyReleased(KeyCode key);"
        ]
      }
    },
    {
      "signature": "bool key_typed(key_code key);",
      "name": "key_typed",
      "method_name": null,
      "unique_global_name": "key_typed",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns true when the key requested is just pressed down. This is updated\nas part of the `process_events` call. Use the key codes from `key_code`\nto specify the key to be checked. this will only occur once for that key that is\npressed and will not return true again until the key is released and presssed down again",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True if the key was just pressed down",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "key": {
          "type": "key_code",
          "description": "The key to check if it was typed",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "input"
      },
      "signatures": {
        "cpp": [
          "bool key_typed(key_code key)"
        ],
        "rust": [
          "pub fn key_typed(key: key_code) -> bool"
        ],
        "python": [
          "def key_typed(key):"
        ],
        "pascal": [
          "function KeyTyped(key: KeyCode): Boolean"
        ],
        "csharp": [
          "public static bool SplashKit.KeyTyped(KeyCode key);"
        ]
      }
    },
    {
      "signature": "bool key_up(key_code key);",
      "name": "key_up",
      "method_name": null,
      "unique_global_name": "key_up",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns false when the key requested is being held down. This is updated\nas part of the `process_events` call. Use the key codes from `key_code`\nto specify the key to be checked.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True if the key is currently up",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "key": {
          "type": "key_code",
          "description": "The key to check if it is up",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "input"
      },
      "signatures": {
        "cpp": [
          "bool key_up(key_code key)"
        ],
        "rust": [
          "pub fn key_up(key: key_code) -> bool"
        ],
        "python": [
          "def key_up(key):"
        ],
        "pascal": [
          "function KeyUp(key: KeyCode): Boolean"
        ],
        "csharp": [
          "public static bool SplashKit.KeyUp(KeyCode key);"
        ]
      }
    },
    {
      "signature": "void register_callback_on_key_down(key_callback *callback);",
      "name": "register_callback_on_key_down",
      "method_name": null,
      "unique_global_name": "register_callback_on_key_down",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Register the passed in callback function to receive notification of key down\ncalls. This will be called in response to `process_events`, for each key that\nthe user presses down.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "callback": {
          "type": "key_callback",
          "description": "The function to be called when a key is first pressed",
          "is_pointer": true,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "input"
      },
      "signatures": {
        "cpp": [
          "void register_callback_on_key_down(key_callback *callback)"
        ],
        "rust": [
          "pub fn register_callback_on_key_down(callback: key_callback)"
        ],
        "python": [
          "def register_callback_on_key_down(callback):"
        ],
        "pascal": [
          "procedure RegisterCallbackOnKeyDown(callback: KeyCallback)"
        ],
        "csharp": [
          "public static void SplashKit.RegisterCallbackOnKeyDown(KeyCallback callback);"
        ]
      }
    },
    {
      "signature": "void register_callback_on_key_typed(key_callback *callback);",
      "name": "register_callback_on_key_typed",
      "method_name": null,
      "unique_global_name": "register_callback_on_key_typed",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Register the passed in callback function to receive notification of key typed\ncalls. This will be called in response to `process_events`, when the user initially\npresses a key down.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "callback": {
          "type": "key_callback",
          "description": "The function to be called when a key is typed",
          "is_pointer": true,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "input"
      },
      "signatures": {
        "cpp": [
          "void register_callback_on_key_typed(key_callback *callback)"
        ],
        "rust": [
          "pub fn register_callback_on_key_typed(callback: key_callback)"
        ],
        "python": [
          "def register_callback_on_key_typed(callback):"
        ],
        "pascal": [
          "procedure RegisterCallbackOnKeyTyped(callback: KeyCallback)"
        ],
        "csharp": [
          "public static void SplashKit.RegisterCallbackOnKeyTyped(KeyCallback callback);"
        ]
      }
    },
    {
      "signature": "void register_callback_on_key_up(key_callback *callback);",
      "name": "register_callback_on_key_up",
      "method_name": null,
      "unique_global_name": "register_callback_on_key_up",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Register the passed in callback function to receive notification of key up\ncalls. This will be called in response to `process_events`, for each key that\nthe user releases.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "callback": {
          "type": "key_callback",
          "description": "The function to be called when a key is released",
          "is_pointer": true,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "input"
      },
      "signatures": {
        "cpp": [
          "void register_callback_on_key_up(key_callback *callback)"
        ],
        "rust": [
          "pub fn register_callback_on_key_up(callback: key_callback)"
        ],
        "python": [
          "def register_callback_on_key_up(callback):"
        ],
        "pascal": [
          "procedure RegisterCallbackOnKeyUp(callback: KeyCallback)"
        ],
        "csharp": [
          "public static void SplashKit.RegisterCallbackOnKeyUp(KeyCallback callback);"
        ]
      }
    },
    {
      "signature": "void hide_mouse();",
      "name": "hide_mouse",
      "method_name": null,
      "unique_global_name": "hide_mouse",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Tells the mouse cursor to hide (no longer visible) if it is currently\nshowing. Use `ShowMouse` to make the mouse cursor visible again.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "group": "input"
      },
      "signatures": {
        "cpp": [
          "void hide_mouse()"
        ],
        "rust": [
          "pub fn hide_mouse()"
        ],
        "python": [
          "def hide_mouse():"
        ],
        "pascal": [
          "procedure HideMouse()"
        ],
        "csharp": [
          "public static void SplashKit.HideMouse();"
        ]
      }
    },
    {
      "signature": "bool mouse_clicked(mouse_button button);",
      "name": "mouse_clicked",
      "method_name": null,
      "unique_global_name": "mouse_clicked",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns true if the specified button was clicked since the last time\n`process_events` was called.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True if the mouse button was clicked",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "button": {
          "type": "mouse_button",
          "description": "The mouse button to check",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "input"
      },
      "signatures": {
        "cpp": [
          "bool mouse_clicked(mouse_button button)"
        ],
        "rust": [
          "pub fn mouse_clicked(button: mouse_button) -> bool"
        ],
        "python": [
          "def mouse_clicked(button):"
        ],
        "pascal": [
          "function MouseClicked(button: MouseButton): Boolean"
        ],
        "csharp": [
          "public static bool SplashKit.MouseClicked(MouseButton button);"
        ]
      }
    },
    {
      "signature": "bool mouse_down(mouse_button button);",
      "name": "mouse_down",
      "method_name": null,
      "unique_global_name": "mouse_down",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns `true` if the specified button is currently pressed down.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True if the mouse button is down",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "button": {
          "type": "mouse_button",
          "description": "The mouse button to check",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "input"
      },
      "signatures": {
        "cpp": [
          "bool mouse_down(mouse_button button)"
        ],
        "rust": [
          "pub fn mouse_down(button: mouse_button) -> bool"
        ],
        "python": [
          "def mouse_down(button):"
        ],
        "pascal": [
          "function MouseDown(button: MouseButton): Boolean"
        ],
        "csharp": [
          "public static bool SplashKit.MouseDown(MouseButton button);"
        ]
      }
    },
    {
      "signature": "vector_2d mouse_movement();",
      "name": "mouse_movement",
      "method_name": null,
      "unique_global_name": "mouse_movement",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the amount of accumulated mouse movement, since the last time\n`process_events` was called, as a `vector_2d`.",
      "brief": null,
      "return": {
        "type": "vector_2d",
        "description": "The movement of the mouse since the last process events",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "group": "input"
      },
      "signatures": {
        "cpp": [
          "vector_2d mouse_movement()"
        ],
        "rust": [
          "pub fn mouse_movement() -> vector_2d"
        ],
        "python": [
          "def mouse_movement():"
        ],
        "pascal": [
          "function MouseMovement(): Vector2D"
        ],
        "csharp": [
          "public static Vector2D SplashKit.MouseMovement();"
        ]
      }
    },
    {
      "signature": "point_2d mouse_position();",
      "name": "mouse_position",
      "method_name": null,
      "unique_global_name": "mouse_position",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the current window position of the mouse as a `Point2D`",
      "brief": null,
      "return": {
        "type": "point_2d",
        "description": "The position of the mouse in the current window.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "group": "input"
      },
      "signatures": {
        "cpp": [
          "point_2d mouse_position()"
        ],
        "rust": [
          "pub fn mouse_position() -> point_2d"
        ],
        "python": [
          "def mouse_position():"
        ],
        "pascal": [
          "function MousePosition(): Point2D"
        ],
        "csharp": [
          "public static Point2D SplashKit.MousePosition();"
        ]
      }
    },
    {
      "signature": "vector_2d mouse_position_vector();",
      "name": "mouse_position_vector",
      "method_name": null,
      "unique_global_name": "mouse_position_vector",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns The current window position of the mouse as a `Vector`",
      "brief": null,
      "return": {
        "type": "vector_2d",
        "description": "The offset from the window origin to the mouse.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "group": "input"
      },
      "signatures": {
        "cpp": [
          "vector_2d mouse_position_vector()"
        ],
        "rust": [
          "pub fn mouse_position_vector() -> vector_2d"
        ],
        "python": [
          "def mouse_position_vector():"
        ],
        "pascal": [
          "function MousePositionVector(): Vector2D"
        ],
        "csharp": [
          "public static Vector2D SplashKit.MousePositionVector();"
        ]
      }
    },
    {
      "signature": "bool mouse_shown();",
      "name": "mouse_shown",
      "method_name": null,
      "unique_global_name": "mouse_shown",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns `true` if the mouse is currently visible, `false` if not.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True if the mouse is shown.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "group": "input"
      },
      "signatures": {
        "cpp": [
          "bool mouse_shown()"
        ],
        "rust": [
          "pub fn mouse_shown() -> bool"
        ],
        "python": [
          "def mouse_shown():"
        ],
        "pascal": [
          "function MouseShown(): Boolean"
        ],
        "csharp": [
          "public static bool SplashKit.MouseShown();"
        ]
      }
    },
    {
      "signature": "bool mouse_up(mouse_button button);",
      "name": "mouse_up",
      "method_name": null,
      "unique_global_name": "mouse_up",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns `true` if the specified button is currently up.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True if the mouse button is up (i.e. not down)",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "button": {
          "type": "mouse_button",
          "description": "The mouse button to check",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "input"
      },
      "signatures": {
        "cpp": [
          "bool mouse_up(mouse_button button)"
        ],
        "rust": [
          "pub fn mouse_up(button: mouse_button) -> bool"
        ],
        "python": [
          "def mouse_up(button):"
        ],
        "pascal": [
          "function MouseUp(button: MouseButton): Boolean"
        ],
        "csharp": [
          "public static bool SplashKit.MouseUp(MouseButton button);"
        ]
      }
    },
    {
      "signature": "vector_2d mouse_wheel_scroll();",
      "name": "mouse_wheel_scroll",
      "method_name": null,
      "unique_global_name": "mouse_wheel_scroll",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the amount the mouse wheel was scrolled since the last call\nto `process_events`. The result is a vector containing the x and y\namounts scrolled. Scroll left generates a negative x, scroll right a\npositive x. Scroll backward is negative y, scroll forward positive y.\nNote that on MacOS the directions may be inverted by OS settings.",
      "brief": null,
      "return": {
        "type": "vector_2d",
        "description": "The distance and direction of the mouse scroll since the last\n`process_events`",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "group": "input"
      },
      "signatures": {
        "cpp": [
          "vector_2d mouse_wheel_scroll()"
        ],
        "rust": [
          "pub fn mouse_wheel_scroll() -> vector_2d"
        ],
        "python": [
          "def mouse_wheel_scroll():"
        ],
        "pascal": [
          "function MouseWheelScroll(): Vector2D"
        ],
        "csharp": [
          "public static Vector2D SplashKit.MouseWheelScroll();"
        ]
      }
    },
    {
      "signature": "float mouse_x();",
      "name": "mouse_x",
      "method_name": null,
      "unique_global_name": "mouse_x",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the current x value of the mouse's position.",
      "brief": null,
      "return": {
        "type": "float",
        "description": "The distance of the mouse from the left edge of the current\nwindow location",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "group": "input"
      },
      "signatures": {
        "cpp": [
          "float mouse_x()"
        ],
        "rust": [
          "pub fn mouse_x() -> f32"
        ],
        "python": [
          "def mouse_x():"
        ],
        "pascal": [
          "function MouseX(): Single"
        ],
        "csharp": [
          "public static float SplashKit.MouseX();"
        ]
      }
    },
    {
      "signature": "float mouse_y();",
      "name": "mouse_y",
      "method_name": null,
      "unique_global_name": "mouse_y",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the current y value of the mouse's position.",
      "brief": null,
      "return": {
        "type": "float",
        "description": "The distance of the mouse from the top edge of the current\nwindow location",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "group": "input"
      },
      "signatures": {
        "cpp": [
          "float mouse_y()"
        ],
        "rust": [
          "pub fn mouse_y() -> f32"
        ],
        "python": [
          "def mouse_y():"
        ],
        "pascal": [
          "function MouseY(): Single"
        ],
        "csharp": [
          "public static float SplashKit.MouseY();"
        ]
      }
    },
    {
      "signature": "void move_mouse(double x,double y);",
      "name": "move_mouse",
      "method_name": null,
      "unique_global_name": "move_mouse",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Moves the mouse cursor to the specified screen location.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "x": {
          "type": "double",
          "description": "The new x location of the mouse",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y": {
          "type": "double",
          "description": "The new y location of the mouse",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "input"
      },
      "signatures": {
        "cpp": [
          "void move_mouse(double x, double y)"
        ],
        "rust": [
          "pub fn move_mouse(x: f64, y: f64)"
        ],
        "python": [
          "def move_mouse(x, y):"
        ],
        "pascal": [
          "procedure MoveMouse(x: Double; y: Double)"
        ],
        "csharp": [
          "public static void SplashKit.MoveMouse(double x, double y);"
        ]
      }
    },
    {
      "signature": "void move_mouse(point_2d point);",
      "name": "move_mouse",
      "method_name": null,
      "unique_global_name": "move_mouse_to_point",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Moves the mouse cursor to the specified screen location.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "point": {
          "type": "point_2d",
          "description": "The new location of the mouse",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "to_point",
        "group": "input"
      },
      "signatures": {
        "cpp": [
          "void move_mouse(point_2d point)"
        ],
        "rust": [
          "pub fn move_mouse(point: point_2d)"
        ],
        "python": [
          "def move_mouse_to_point(point):"
        ],
        "pascal": [
          "procedure MoveMouse(point: Point2D)"
        ],
        "csharp": [
          "public static void SplashKit.MoveMouse(Point2D point);"
        ]
      }
    },
    {
      "signature": "void show_mouse();",
      "name": "show_mouse",
      "method_name": null,
      "unique_global_name": "show_mouse",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Tells the mouse cursor to be visible if it was previously hidden with\nby a `HideMouse` or `SetMouseVisible`(False) call.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "group": "input"
      },
      "signatures": {
        "cpp": [
          "void show_mouse()"
        ],
        "rust": [
          "pub fn show_mouse()"
        ],
        "python": [
          "def show_mouse():"
        ],
        "pascal": [
          "procedure ShowMouse()"
        ],
        "csharp": [
          "public static void SplashKit.ShowMouse();"
        ]
      }
    },
    {
      "signature": "void show_mouse(bool show);",
      "name": "show_mouse",
      "method_name": null,
      "unique_global_name": "show_mouse_with_boolean",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Used to explicitly set the mouse cursors visible state (if it is showing\nin the window or not) based on the show parameter.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "show": {
          "type": "bool",
          "description": "When true the mouse is shown, when false it is hidden",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "with_boolean",
        "group": "input"
      },
      "signatures": {
        "cpp": [
          "void show_mouse(bool show)"
        ],
        "rust": [
          "pub fn show_mouse(show: bool)"
        ],
        "python": [
          "def show_mouse_with_boolean(show):"
        ],
        "pascal": [
          "procedure ShowMouse(show: Boolean)"
        ],
        "csharp": [
          "public static void SplashKit.ShowMouse(bool show);"
        ]
      }
    },
    {
      "signature": "void draw_collected_text(color clr,font fnt,int font_size,const drawing_options &opts);",
      "name": "draw_collected_text",
      "method_name": null,
      "unique_global_name": "draw_collected_text",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Draw the text that the user is currently enterring on the current window.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "clr": {
          "type": "color",
          "description": "The color for the text",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "fnt": {
          "type": "font",
          "description": "The font to use",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "font_size": {
          "type": "int",
          "description": "The size of the font",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "Any drawing options",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "input"
      },
      "signatures": {
        "cpp": [
          "void draw_collected_text(color clr, font fnt, int font_size, const drawing_options &opts)"
        ],
        "rust": [
          "pub fn draw_collected_text(clr: color, fnt: font, font_size: i32, opts: &drawing_options)"
        ],
        "python": [
          "def draw_collected_text(clr, fnt, font_size, opts):"
        ],
        "pascal": [
          "procedure DrawCollectedText(clr: Color; fnt: Font; fontSize: Integer; const opts: DrawingOptions)"
        ],
        "csharp": [
          "public static void SplashKit.DrawCollectedText(Color clr, Font fnt, int fontSize, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "void end_reading_text();",
      "name": "end_reading_text",
      "method_name": null,
      "unique_global_name": "end_reading_text",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Ends reading text in for the current window.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "group": "input"
      },
      "signatures": {
        "cpp": [
          "void end_reading_text()"
        ],
        "rust": [
          "pub fn end_reading_text()"
        ],
        "python": [
          "def end_reading_text():"
        ],
        "pascal": [
          "procedure EndReadingText()"
        ],
        "csharp": [
          "public static void SplashKit.EndReadingText();"
        ]
      }
    },
    {
      "signature": "void end_reading_text(window wind);",
      "name": "end_reading_text",
      "method_name": null,
      "unique_global_name": "end_reading_text_in_window",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Ends reading text for the passed in window.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "wind": {
          "type": "window",
          "description": "The window to end reading text",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "in_window",
        "group": "input"
      },
      "signatures": {
        "cpp": [
          "void end_reading_text(window wind)"
        ],
        "rust": [
          "pub fn end_reading_text(wind: window)"
        ],
        "python": [
          "def end_reading_text_in_window(wind):"
        ],
        "pascal": [
          "procedure EndReadingText(wind: Window)"
        ],
        "csharp": [
          "public static void SplashKit.EndReadingText(Window wind);"
        ]
      }
    },
    {
      "signature": "bool reading_text();",
      "name": "reading_text",
      "method_name": null,
      "unique_global_name": "reading_text",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns true when the current window is reading text.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True when window is setup to read input from the user.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "group": "input"
      },
      "signatures": {
        "cpp": [
          "bool reading_text()"
        ],
        "rust": [
          "pub fn reading_text() -> bool"
        ],
        "python": [
          "def reading_text():"
        ],
        "pascal": [
          "function ReadingText(): Boolean"
        ],
        "csharp": [
          "public static bool SplashKit.ReadingText();"
        ]
      }
    },
    {
      "signature": "bool reading_text(window wind);",
      "name": "reading_text",
      "method_name": null,
      "unique_global_name": "reading_text_in_window",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns true when the window is reading text.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True when window is setup to read input from the user.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "wind": {
          "type": "window",
          "description": "The window to check",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "in_window",
        "group": "input"
      },
      "signatures": {
        "cpp": [
          "bool reading_text(window wind)"
        ],
        "rust": [
          "pub fn reading_text(wind: window) -> bool"
        ],
        "python": [
          "def reading_text_in_window(wind):"
        ],
        "pascal": [
          "function ReadingText(wind: Window): Boolean"
        ],
        "csharp": [
          "public static bool SplashKit.ReadingText(Window wind);"
        ]
      }
    },
    {
      "signature": "void start_reading_text(rectangle rect);",
      "name": "start_reading_text",
      "method_name": null,
      "unique_global_name": "start_reading_text",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Start reading text in the current window within the bounds of the\nsupplied rectangle.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "rect": {
          "type": "rectangle",
          "description": "The area where the text will be entered.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "input"
      },
      "signatures": {
        "cpp": [
          "void start_reading_text(rectangle rect)"
        ],
        "rust": [
          "pub fn start_reading_text(rect: rectangle)"
        ],
        "python": [
          "def start_reading_text(rect):"
        ],
        "pascal": [
          "procedure StartReadingText(rect: Rectangle)"
        ],
        "csharp": [
          "public static void SplashKit.StartReadingText(Rectangle rect);"
        ]
      }
    },
    {
      "signature": "void start_reading_text(rectangle rect,string initial_text);",
      "name": "start_reading_text",
      "method_name": null,
      "unique_global_name": "start_reading_text_with_initial_text",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Start reading text in the current window within the bounds of the\nsupplied rectangle. The text will start with an initial value.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "rect": {
          "type": "rectangle",
          "description": "The area where the text will be entered.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "initial_text": {
          "type": "string",
          "description": "The initial text, which may be edited by the user.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "with_initial_text",
        "group": "input"
      },
      "signatures": {
        "cpp": [
          "void start_reading_text(rectangle rect, string initial_text)"
        ],
        "rust": [
          "pub fn start_reading_text(rect: rectangle, initial_text: String)"
        ],
        "python": [
          "def start_reading_text_with_initial_text(rect, initial_text):"
        ],
        "pascal": [
          "procedure StartReadingText(rect: Rectangle; initialText: String)"
        ],
        "csharp": [
          "public static void SplashKit.StartReadingText(Rectangle rect, string initialText);"
        ]
      }
    },
    {
      "signature": "void start_reading_text(window wind,rectangle rect);",
      "name": "start_reading_text",
      "method_name": null,
      "unique_global_name": "start_reading_text_in_window",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Start reading text in the window within the bounds of the\nsupplied rectangle.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "wind": {
          "type": "window",
          "description": "The window where the text will be entered",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "rect": {
          "type": "rectangle",
          "description": "The area where the text will be entered.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "in_window",
        "group": "input"
      },
      "signatures": {
        "cpp": [
          "void start_reading_text(window wind, rectangle rect)"
        ],
        "rust": [
          "pub fn start_reading_text(wind: window, rect: rectangle)"
        ],
        "python": [
          "def start_reading_text_in_window(wind, rect):"
        ],
        "pascal": [
          "procedure StartReadingText(wind: Window; rect: Rectangle)"
        ],
        "csharp": [
          "public static void SplashKit.StartReadingText(Window wind, Rectangle rect);"
        ]
      }
    },
    {
      "signature": "void start_reading_text(window wind,rectangle rect,string initial_text);",
      "name": "start_reading_text",
      "method_name": null,
      "unique_global_name": "start_reading_text_in_window_with_initial_text",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Start reading text in the window within the bounds of the\nsupplied rectangle. The text will start with an initial value.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "wind": {
          "type": "window",
          "description": "The window where the text will be entered",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "rect": {
          "type": "rectangle",
          "description": "The area where the text will be entered.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "initial_text": {
          "type": "string",
          "description": "The initial text, which may be edited by the user.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "in_window_with_initial_text",
        "group": "input"
      },
      "signatures": {
        "cpp": [
          "void start_reading_text(window wind, rectangle rect, string initial_text)"
        ],
        "rust": [
          "pub fn start_reading_text(wind: window, rect: rectangle, initial_text: String)"
        ],
        "python": [
          "def start_reading_text_in_window_with_initial_text(wind, rect, initial_text):"
        ],
        "pascal": [
          "procedure StartReadingText(wind: Window; rect: Rectangle; initialText: String)"
        ],
        "csharp": [
          "public static void SplashKit.StartReadingText(Window wind, Rectangle rect, string initialText);"
        ]
      }
    },
    {
      "signature": "bool text_entry_cancelled();",
      "name": "text_entry_cancelled",
      "method_name": null,
      "unique_global_name": "text_entry_cancelled",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Did the user press escape and cancel the enterring of text?",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True when the use has cancelled text entry",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "group": "input"
      },
      "signatures": {
        "cpp": [
          "bool text_entry_cancelled()"
        ],
        "rust": [
          "pub fn text_entry_cancelled() -> bool"
        ],
        "python": [
          "def text_entry_cancelled():"
        ],
        "pascal": [
          "function TextEntryCancelled(): Boolean"
        ],
        "csharp": [
          "public static bool SplashKit.TextEntryCancelled();"
        ]
      }
    },
    {
      "signature": "bool text_entry_cancelled(window wind);",
      "name": "text_entry_cancelled",
      "method_name": null,
      "unique_global_name": "text_entry_cancelled_in_window",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Did the user press escape and cancel the enterring of text?",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True when the use has cancelled text entry",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "wind": {
          "type": "window",
          "description": "The window to check",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "in_window",
        "group": "input"
      },
      "signatures": {
        "cpp": [
          "bool text_entry_cancelled(window wind)"
        ],
        "rust": [
          "pub fn text_entry_cancelled(wind: window) -> bool"
        ],
        "python": [
          "def text_entry_cancelled_in_window(wind):"
        ],
        "pascal": [
          "function TextEntryCancelled(wind: Window): Boolean"
        ],
        "csharp": [
          "public static bool SplashKit.TextEntryCancelled(Window wind);"
        ]
      }
    },
    {
      "signature": "string text_input();",
      "name": "text_input",
      "method_name": null,
      "unique_global_name": "text_input",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "The text the user has currently enterred on the current window.",
      "brief": null,
      "return": {
        "type": "string",
        "description": "The user's text entry",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "group": "input"
      },
      "signatures": {
        "cpp": [
          "string text_input()"
        ],
        "rust": [
          "pub fn text_input() -> String"
        ],
        "python": [
          "def text_input():"
        ],
        "pascal": [
          "function TextInput(): String"
        ],
        "csharp": [
          "public static string SplashKit.TextInput();"
        ]
      }
    },
    {
      "signature": "string text_input(window wind);",
      "name": "text_input",
      "method_name": null,
      "unique_global_name": "text_input_in_window",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "The text the user has currently enterred on the current window.",
      "brief": null,
      "return": {
        "type": "string",
        "description": "The user's text entry",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "wind": {
          "type": "window",
          "description": "The window to check",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "in_window",
        "group": "input"
      },
      "signatures": {
        "cpp": [
          "string text_input(window wind)"
        ],
        "rust": [
          "pub fn text_input(wind: window) -> String"
        ],
        "python": [
          "def text_input_in_window(wind):"
        ],
        "pascal": [
          "function TextInput(wind: Window): String"
        ],
        "csharp": [
          "public static string SplashKit.TextInput(Window wind);"
        ]
      }
    }
  ]
}