{
  "functions": [
    {
      "signature": "point_2d center_point(const circle &c);",
      "name": "center_point",
      "method_name": null,
      "unique_global_name": "center_point",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the center point of the circle.",
      "brief": null,
      "return": {
        "type": "point_2d",
        "description": "The center point of the circle",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "c": {
          "type": "circle",
          "description": "The circle to get the center point",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "point_2d center_point(const circle &c)"
        ],
        "rust": [
          "pub fn center_point(c: &circle) -> point_2d"
        ],
        "python": [
          "def center_point(c):"
        ],
        "pascal": [
          "function CenterPoint(const c: Circle): Point2D"
        ],
        "csharp": [
          "public static Point2D Geometry.CenterPoint(Circle c);",
          "public static Point2D SplashKit.CenterPoint(Circle c);"
        ]
      }
    },
    {
      "signature": "circle circle_at(const point_2d &pt,double radius);",
      "name": "circle_at",
      "method_name": null,
      "unique_global_name": "circle_at",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns a circle at the indicated point and radius.",
      "brief": null,
      "return": {
        "type": "circle",
        "description": "A circle at the indicatd point and radius",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "pt": {
          "type": "point_2d",
          "description": "The location of the center of the circle",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "radius": {
          "type": "double",
          "description": "The radius of the circle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "circle circle_at(const point_2d &pt, double radius)"
        ],
        "rust": [
          "pub fn circle_at(pt: &point_2d, radius: f64) -> circle"
        ],
        "python": [
          "def circle_at(pt, radius):"
        ],
        "pascal": [
          "function CircleAt(const pt: Point2D; radius: Double): Circle"
        ],
        "csharp": [
          "public static Circle Geometry.CircleAt(Point2D pt, double radius);",
          "public static Circle SplashKit.CircleAt(Point2D pt, double radius);"
        ]
      }
    },
    {
      "signature": "circle circle_at(double x,double y,double radius);",
      "name": "circle_at",
      "method_name": null,
      "unique_global_name": "circle_at_from_points",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns a circle at the indicated point and radius.",
      "brief": null,
      "return": {
        "type": "circle",
        "description": "A circle at the indicatd point and radius",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "x": {
          "type": "double",
          "description": "The x location of the circle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y": {
          "type": "double",
          "description": "The y location of the circle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "radius": {
          "type": "double",
          "description": "The radius of the circle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "from_points",
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "circle circle_at(double x, double y, double radius)"
        ],
        "rust": [
          "pub fn circle_at(x: f64, y: f64, radius: f64) -> circle"
        ],
        "python": [
          "def circle_at_from_points(x, y, radius):"
        ],
        "pascal": [
          "function CircleAt(x: Double; y: Double; radius: Double): Circle"
        ],
        "csharp": [
          "public static Circle Geometry.CircleAt(double x, double y, double radius);",
          "public static Circle SplashKit.CircleAt(double x, double y, double radius);"
        ]
      }
    },
    {
      "signature": "float circle_radius(const circle c);",
      "name": "circle_radius",
      "method_name": null,
      "unique_global_name": "circle_radius",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the circle radius.",
      "brief": null,
      "return": {
        "type": "float",
        "description": "The radius of the circle",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "c": {
          "type": "circle",
          "description": "The circle",
          "is_pointer": false,
          "is_const": true,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "float circle_radius(const circle c)"
        ],
        "rust": [
          "pub fn circle_radius(c: circle) -> f32"
        ],
        "python": [
          "def circle_radius(c):"
        ],
        "pascal": [
          "function CircleRadius(c: Circle): Single"
        ],
        "csharp": [
          "public static float Geometry.CircleRadius(Circle c);",
          "public static float SplashKit.CircleRadius(Circle c);"
        ]
      }
    },
    {
      "signature": "bool circle_triangle_intersect(const circle &c,const triangle &tri);",
      "name": "circle_triangle_intersect",
      "method_name": null,
      "unique_global_name": "circle_triangle_intersect",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Detects if a circle intersects with a triangle.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True if the circle and triangle intersect",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "c": {
          "type": "circle",
          "description": "The circle to test",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "tri": {
          "type": "triangle",
          "description": "The triangle to test",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "bool circle_triangle_intersect(const circle &c, const triangle &tri)"
        ],
        "rust": [
          "pub fn circle_triangle_intersect(c: &circle, tri: &triangle) -> bool"
        ],
        "python": [
          "def circle_triangle_intersect(c, tri):"
        ],
        "pascal": [
          "function CircleTriangleIntersect(const c: Circle; const tri: Triangle): Boolean"
        ],
        "csharp": [
          "public static bool Geometry.CircleTriangleIntersect(Circle c, Triangle tri);",
          "public static bool SplashKit.CircleTriangleIntersect(Circle c, Triangle tri);"
        ]
      }
    },
    {
      "signature": "bool circle_triangle_intersect(const circle &c,const triangle &tri,point_2d &p);",
      "name": "circle_triangle_intersect",
      "method_name": null,
      "unique_global_name": "circle_triangle_intersect_get_closest_point",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Detects if a circle intersects with a triangle. The closest point on the\ntriangle to the circle is assigned to p, even if the circle and triangle do not\nintersect. If the centre of the circle is inside the triangle,\nthe point assigned to p is the centre of the circle.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True if the circle and triangle intersect",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "c": {
          "type": "circle",
          "description": "The circle to test",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "tri": {
          "type": "triangle",
          "description": "The triangle to test",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "p": {
          "type": "point_2d",
          "description": "The point to set to the closest point on the triangle to the circle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "get_closest_point",
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "bool circle_triangle_intersect(const circle &c, const triangle &tri, point_2d &p)"
        ],
        "rust": [
          "pub fn circle_triangle_intersect(c: &circle, tri: &triangle, p: &mut point_2d) -> bool"
        ],
        "python": [
          "def circle_triangle_intersect_get_closest_point(c, tri, p):"
        ],
        "pascal": [
          "function CircleTriangleIntersect(const c: Circle; const tri: Triangle; var p: Point2D): Boolean"
        ],
        "csharp": [
          "public static bool Geometry.CircleTriangleIntersect(Circle c, Triangle tri, ref Point2D p);",
          "public static bool SplashKit.CircleTriangleIntersect(Circle c, Triangle tri, ref Point2D p);"
        ]
      }
    },
    {
      "signature": "float circle_x(const circle &c);",
      "name": "circle_x",
      "method_name": null,
      "unique_global_name": "circle_x",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the circle x value.",
      "brief": null,
      "return": {
        "type": "float",
        "description": "The x location of the center of the circle",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "c": {
          "type": "circle",
          "description": "The circle",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "float circle_x(const circle &c)"
        ],
        "rust": [
          "pub fn circle_x(c: &circle) -> f32"
        ],
        "python": [
          "def circle_x(c):"
        ],
        "pascal": [
          "function CircleX(const c: Circle): Single"
        ],
        "csharp": [
          "public static float Geometry.CircleX(Circle c);",
          "public static float SplashKit.CircleX(Circle c);"
        ]
      }
    },
    {
      "signature": "float circle_y(const circle &c);",
      "name": "circle_y",
      "method_name": null,
      "unique_global_name": "circle_y",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the circle y value.",
      "brief": null,
      "return": {
        "type": "float",
        "description": "The y location of the center of the circle",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "c": {
          "type": "circle",
          "description": "The circle",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "float circle_y(const circle &c)"
        ],
        "rust": [
          "pub fn circle_y(c: &circle) -> f32"
        ],
        "python": [
          "def circle_y(c):"
        ],
        "pascal": [
          "function CircleY(const c: Circle): Single"
        ],
        "csharp": [
          "public static float Geometry.CircleY(Circle c);",
          "public static float SplashKit.CircleY(Circle c);"
        ]
      }
    },
    {
      "signature": "bool circles_intersect(circle c1,circle c2);",
      "name": "circles_intersect",
      "method_name": null,
      "unique_global_name": "circles_intersect",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Detects if two circles intersect. This can be used to detect collisions between\nbounding circles.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True if the two circles do intersect",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "c1": {
          "type": "circle",
          "description": "The circle to test if intersects with c2",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "c2": {
          "type": "circle",
          "description": "The circle to test if intersects with c1",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "bool circles_intersect(circle c1, circle c2)"
        ],
        "rust": [
          "pub fn circles_intersect(c1: circle, c2: circle) -> bool"
        ],
        "python": [
          "def circles_intersect(c1, c2):"
        ],
        "pascal": [
          "function CirclesIntersect(c1: Circle; c2: Circle): Boolean"
        ],
        "csharp": [
          "public static bool Geometry.CirclesIntersect(Circle c1, Circle c2);",
          "public static bool SplashKit.CirclesIntersect(Circle c1, Circle c2);"
        ]
      }
    },
    {
      "signature": "bool circles_intersect(double c1_x,double c1_y,double c1_radius,double c2_x,double c2_y,double c2_radius);",
      "name": "circles_intersect",
      "method_name": null,
      "unique_global_name": "circles_intersect_using_values",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Detects if two circles intersect. This can be used to detect collisions between\nbounding circles. The circle data is passed in as individual values.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "true when the two circles intersect",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "c1_x": {
          "type": "double",
          "description": "the x location of the first circle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "c1_y": {
          "type": "double",
          "description": "the y location of the first circle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "c1_radius": {
          "type": "double",
          "description": "the radius of the first circle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "c2_x": {
          "type": "double",
          "description": "the x location of the second circle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "c2_y": {
          "type": "double",
          "description": "the y location of the second circle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "c2_radius": {
          "type": "double",
          "description": "the radius of the second circle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "using_values",
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "bool circles_intersect(double c1_x, double c1_y, double c1_radius, double c2_x, double c2_y, double c2_radius)"
        ],
        "rust": [
          "pub fn circles_intersect(c1_x: f64, c1_y: f64, c1_radius: f64, c2_x: f64, c2_y: f64, c2_radius: f64) -> bool"
        ],
        "python": [
          "def circles_intersect_using_values(c1_x, c1_y, c1_radius, c2_x, c2_y, c2_radius):"
        ],
        "pascal": [
          "function CirclesIntersect(c1X: Double; c1Y: Double; c1Radius: Double; c2X: Double; c2Y: Double; c2Radius: Double): Boolean"
        ],
        "csharp": [
          "public static bool Geometry.CirclesIntersect(double c1X, double c1Y, double c1Radius, double c2X, double c2Y, double c2Radius);",
          "public static bool SplashKit.CirclesIntersect(double c1X, double c1Y, double c1Radius, double c2X, double c2Y, double c2Radius);"
        ]
      }
    },
    {
      "signature": "point_2d closest_point_on_circle(const point_2d &from_pt,const circle &c);",
      "name": "closest_point_on_circle",
      "method_name": null,
      "unique_global_name": "closest_point_on_circle",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "The closest point on the circle to the given point.",
      "brief": null,
      "return": {
        "type": "point_2d",
        "description": "The point on c that is closest to the from point",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "from_pt": {
          "type": "point_2d",
          "description": "The point to test from",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "c": {
          "type": "circle",
          "description": "The circle you want to get a point on its circumference",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "point_2d closest_point_on_circle(const point_2d &from_pt, const circle &c)"
        ],
        "rust": [
          "pub fn closest_point_on_circle(from_pt: &point_2d, c: &circle) -> point_2d"
        ],
        "python": [
          "def closest_point_on_circle(from_pt, c):"
        ],
        "pascal": [
          "function ClosestPointOnCircle(const fromPt: Point2D; const c: Circle): Point2D"
        ],
        "csharp": [
          "public static Point2D Geometry.ClosestPointOnCircle(Point2D fromPt, Circle c);",
          "public static Point2D SplashKit.ClosestPointOnCircle(Point2D fromPt, Circle c);"
        ]
      }
    },
    {
      "signature": "point_2d closest_point_on_line_from_circle(const circle &c,const line &l);",
      "name": "closest_point_on_line_from_circle",
      "method_name": null,
      "unique_global_name": "closest_point_on_line_from_circle",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the closest point on a line to a circle.",
      "brief": null,
      "return": {
        "type": "point_2d",
        "description": "The point that is closest to `c` on `l`",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "c": {
          "type": "circle",
          "description": "The circle",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "l": {
          "type": "line",
          "description": "The line",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "point_2d closest_point_on_line_from_circle(const circle &c, const line &l)"
        ],
        "rust": [
          "pub fn closest_point_on_line_from_circle(c: &circle, l: &line) -> point_2d"
        ],
        "python": [
          "def closest_point_on_line_from_circle(c, l):"
        ],
        "pascal": [
          "function ClosestPointOnLineFromCircle(const c: Circle; const l: Line): Point2D"
        ],
        "csharp": [
          "public static Point2D Geometry.ClosestPointOnLineFromCircle(Circle c, Line l);",
          "public static Point2D SplashKit.ClosestPointOnLineFromCircle(Circle c, Line l);"
        ]
      }
    },
    {
      "signature": "point_2d closest_point_on_rect_from_circle(const circle &c,const rectangle &rect);",
      "name": "closest_point_on_rect_from_circle",
      "method_name": null,
      "unique_global_name": "closest_point_on_rect_from_circle",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the closest point on a rectangle to a circle.",
      "brief": null,
      "return": {
        "type": "point_2d",
        "description": "The point that is closest to `c` on `rect`",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "c": {
          "type": "circle",
          "description": "The circle",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "rect": {
          "type": "rectangle",
          "description": "The rectangle",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "point_2d closest_point_on_rect_from_circle(const circle &c, const rectangle &rect)"
        ],
        "rust": [
          "pub fn closest_point_on_rect_from_circle(c: &circle, rect: &rectangle) -> point_2d"
        ],
        "python": [
          "def closest_point_on_rect_from_circle(c, rect):"
        ],
        "pascal": [
          "function ClosestPointOnRectFromCircle(const c: Circle; const rect: Rectangle): Point2D"
        ],
        "csharp": [
          "public static Point2D Geometry.ClosestPointOnRectFromCircle(Circle c, Rectangle rect);",
          "public static Point2D SplashKit.ClosestPointOnRectFromCircle(Circle c, Rectangle rect);"
        ]
      }
    },
    {
      "signature": "point_2d closest_point_on_triangle_from_circle(const circle &c,const triangle &tri);",
      "name": "closest_point_on_triangle_from_circle",
      "method_name": null,
      "unique_global_name": "closest_point_on_triangle_from_circle",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Calculates the closest point on a triangle to a circle. If the circle and\ntriangle do not intersect, the closest point on the triangle to the circle\nis returned. If the circle and triangle do intersect, the center of the\ncircle is returned.",
      "brief": null,
      "return": {
        "type": "point_2d",
        "description": "The closest point on the triangle to the circle",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "c": {
          "type": "circle",
          "description": "The circle to test",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "tri": {
          "type": "triangle",
          "description": "The triangle to test",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "point_2d closest_point_on_triangle_from_circle(const circle &c, const triangle &tri)"
        ],
        "rust": [
          "pub fn closest_point_on_triangle_from_circle(c: &circle, tri: &triangle) -> point_2d"
        ],
        "python": [
          "def closest_point_on_triangle_from_circle(c, tri):"
        ],
        "pascal": [
          "function ClosestPointOnTriangleFromCircle(const c: Circle; const tri: Triangle): Point2D"
        ],
        "csharp": [
          "public static Point2D Geometry.ClosestPointOnTriangleFromCircle(Circle c, Triangle tri);",
          "public static Point2D SplashKit.ClosestPointOnTriangleFromCircle(Circle c, Triangle tri);"
        ]
      }
    },
    {
      "signature": "point_2d distant_point_on_circle(const point_2d &pt,const circle &c);",
      "name": "distant_point_on_circle",
      "method_name": null,
      "unique_global_name": "distant_point_on_circle",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "The furthest point on the circle to the given point.",
      "brief": null,
      "return": {
        "type": "point_2d",
        "description": "The point on c that is furthest from `pt`",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "pt": {
          "type": "point_2d",
          "description": "The point to test from",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "c": {
          "type": "circle",
          "description": "The circle you want to get a point on its circumference",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "point_2d distant_point_on_circle(const point_2d &pt, const circle &c)"
        ],
        "rust": [
          "pub fn distant_point_on_circle(pt: &point_2d, c: &circle) -> point_2d"
        ],
        "python": [
          "def distant_point_on_circle(pt, c):"
        ],
        "pascal": [
          "function DistantPointOnCircle(const pt: Point2D; const c: Circle): Point2D"
        ],
        "csharp": [
          "public static Point2D Geometry.DistantPointOnCircle(Point2D pt, Circle c);",
          "public static Point2D SplashKit.DistantPointOnCircle(Point2D pt, Circle c);"
        ]
      }
    },
    {
      "signature": "bool distant_point_on_circle_heading(const point_2d &pt,const circle &c,const vector_2d &heading,point_2d &opposite_pt);",
      "name": "distant_point_on_circle_heading",
      "method_name": null,
      "unique_global_name": "distant_point_on_circle_heading",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Determines the opposite side of a circle given a collision point and a\nheading.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True when the `opposite_pt` is calculated, false when\nthe point would not collide with the circle when\nheading as indicated.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "pt": {
          "type": "point_2d",
          "description": "The point from which the test is being made",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "c": {
          "type": "circle",
          "description": "The circle",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "heading": {
          "type": "vector_2d",
          "description": "The direction the point is heading",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opposite_pt": {
          "type": "point_2d",
          "description": "After the call, this is set to the point on the\nopposite side of the circle from pt when it is\nheading in the given direction.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "bool distant_point_on_circle_heading(const point_2d &pt, const circle &c, const vector_2d &heading, point_2d &opposite_pt)"
        ],
        "rust": [
          "pub fn distant_point_on_circle_heading(pt: &point_2d, c: &circle, heading: &vector_2d, opposite_pt: &mut point_2d) -> bool"
        ],
        "python": [
          "def distant_point_on_circle_heading(pt, c, heading, opposite_pt):"
        ],
        "pascal": [
          "function DistantPointOnCircleHeading(const pt: Point2D; const c: Circle; const heading: Vector2D; var oppositePt: Point2D): Boolean"
        ],
        "csharp": [
          "public static bool Geometry.DistantPointOnCircleHeading(Point2D pt, Circle c, Vector2D heading, ref Point2D oppositePt);",
          "public static bool SplashKit.DistantPointOnCircleHeading(Point2D pt, Circle c, Vector2D heading, ref Point2D oppositePt);"
        ]
      }
    },
    {
      "signature": "float ray_circle_intersect_distance(const point_2d &ray_origin,const vector_2d &ray_heading,const circle &c);",
      "name": "ray_circle_intersect_distance",
      "method_name": null,
      "unique_global_name": "ray_circle_intersect_distance",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Calculates the distance from a ray cast from a point to a given circle.",
      "brief": null,
      "return": {
        "type": "float",
        "description": "-1 if the ray does not hit the circle, otherwise the\ndistance from the origin to the circle bounds.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "ray_origin": {
          "type": "point_2d",
          "description": "The origin of the ray",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "ray_heading": {
          "type": "vector_2d",
          "description": "The direction of the ray",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "c": {
          "type": "circle",
          "description": "The circle being tested",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "float ray_circle_intersect_distance(const point_2d &ray_origin, const vector_2d &ray_heading, const circle &c)"
        ],
        "rust": [
          "pub fn ray_circle_intersect_distance(ray_origin: &point_2d, ray_heading: &vector_2d, c: &circle) -> f32"
        ],
        "python": [
          "def ray_circle_intersect_distance(ray_origin, ray_heading, c):"
        ],
        "pascal": [
          "function RayCircleIntersectDistance(const rayOrigin: Point2D; const rayHeading: Vector2D; const c: Circle): Single"
        ],
        "csharp": [
          "public static float Geometry.RayCircleIntersectDistance(Point2D rayOrigin, Vector2D rayHeading, Circle c);",
          "public static float SplashKit.RayCircleIntersectDistance(Point2D rayOrigin, Vector2D rayHeading, Circle c);"
        ]
      }
    },
    {
      "signature": "bool tangent_points(const point_2d &from_pt,const circle &c,point_2d &p1,point_2d &p2);",
      "name": "tangent_points",
      "method_name": null,
      "unique_global_name": "tangent_points",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the two tangent points on the circle given the indicated point.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True if `from_pt` is outside of the circle, and tangent\npoints are calculated",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "from_pt": {
          "type": "point_2d",
          "description": "The source point",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "c": {
          "type": "circle",
          "description": "The circle",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "p1": {
          "type": "point_2d",
          "description": "If this returns true, then `p1` contains one of the points",
          "is_pointer": false,
          "is_const": false,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "p2": {
          "type": "point_2d",
          "description": "If this returns true, then `p2` contains one of the points",
          "is_pointer": false,
          "is_const": false,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "bool tangent_points(const point_2d &from_pt, const circle &c, point_2d &p1, point_2d &p2)"
        ],
        "rust": [
          "pub fn tangent_points(from_pt: &point_2d, c: &circle, p1: &mut point_2d, p2: &mut point_2d) -> bool"
        ],
        "python": [
          "def tangent_points(from_pt, c, p1, p2):"
        ],
        "pascal": [
          "function TangentPoints(const fromPt: Point2D; const c: Circle; var p1: Point2D; var p2: Point2D): Boolean"
        ],
        "csharp": [
          "public static bool Geometry.TangentPoints(Point2D fromPt, Circle c, ref Point2D p1, ref Point2D p2);",
          "public static bool SplashKit.TangentPoints(Point2D fromPt, Circle c, ref Point2D p1, ref Point2D p2);"
        ]
      }
    },
    {
      "signature": "void widest_points(const circle &c,const vector_2d &along,point_2d &pt1,point_2d &pt2);",
      "name": "widest_points",
      "method_name": null,
      "unique_global_name": "widest_points",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Calculates the two points on a circles radius that lie along the given\nvector. This represents the points on the circle when the vector is\nplaced at the circle's center point.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "c": {
          "type": "circle",
          "description": "The circle",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "along": {
          "type": "vector_2d",
          "description": "The vector representing the line along which the points lie.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "pt1": {
          "type": "point_2d",
          "description": "After the call, this is set to one of the widest points",
          "is_pointer": false,
          "is_const": false,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "pt2": {
          "type": "point_2d",
          "description": "After the call, this is set to one of the widest points",
          "is_pointer": false,
          "is_const": false,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "void widest_points(const circle &c, const vector_2d &along, point_2d &pt1, point_2d &pt2)"
        ],
        "rust": [
          "pub fn widest_points(c: &circle, along: &vector_2d, pt1: &mut point_2d, pt2: &mut point_2d)"
        ],
        "python": [
          "def widest_points(c, along, pt1, pt2):"
        ],
        "pascal": [
          "procedure WidestPoints(const c: Circle; const along: Vector2D; var pt1: Point2D; var pt2: Point2D)"
        ],
        "csharp": [
          "public static void Geometry.WidestPoints(Circle c, Vector2D along, ref Point2D pt1, ref Point2D pt2);",
          "public static void SplashKit.WidestPoints(Circle c, Vector2D along, ref Point2D pt1, ref Point2D pt2);"
        ]
      }
    },
    {
      "signature": "float cosine(float degrees);",
      "name": "cosine",
      "method_name": null,
      "unique_global_name": "cosine",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the cosine of the supplied angle (in degrees).",
      "brief": null,
      "return": {
        "type": "float",
        "description": "the cosine of the supplied angle (in degrees).",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "degrees": {
          "type": "float",
          "description": "The angle in degrees",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "float cosine(float degrees)"
        ],
        "rust": [
          "pub fn cosine(degrees: f32) -> f32"
        ],
        "python": [
          "def cosine(degrees):"
        ],
        "pascal": [
          "function Cosine(degrees: Single): Single"
        ],
        "csharp": [
          "public static float Geometry.Cosine(float degrees);",
          "public static float SplashKit.Cosine(float degrees);"
        ]
      }
    },
    {
      "signature": "float sine(float degrees);",
      "name": "sine",
      "method_name": null,
      "unique_global_name": "sine",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the sine of the supplied angle (in degrees).",
      "brief": null,
      "return": {
        "type": "float",
        "description": "the sine of the supplied angle (in degrees).",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "degrees": {
          "type": "float",
          "description": "The angle in degrees",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "float sine(float degrees)"
        ],
        "rust": [
          "pub fn sine(degrees: f32) -> f32"
        ],
        "python": [
          "def sine(degrees):"
        ],
        "pascal": [
          "function Sine(degrees: Single): Single"
        ],
        "csharp": [
          "public static float Geometry.Sine(float degrees);",
          "public static float SplashKit.Sine(float degrees);"
        ]
      }
    },
    {
      "signature": "float tangent(float degrees);",
      "name": "tangent",
      "method_name": null,
      "unique_global_name": "tangent",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the tangent of the supplied angle (in degrees).",
      "brief": null,
      "return": {
        "type": "float",
        "description": "the tangent of the supplied angle (in degrees).",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "degrees": {
          "type": "float",
          "description": "The angle in degrees",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "float tangent(float degrees)"
        ],
        "rust": [
          "pub fn tangent(degrees: f32) -> f32"
        ],
        "python": [
          "def tangent(degrees):"
        ],
        "pascal": [
          "function Tangent(degrees: Single): Single"
        ],
        "csharp": [
          "public static float Geometry.Tangent(float degrees);",
          "public static float SplashKit.Tangent(float degrees);"
        ]
      }
    },
    {
      "signature": "point_2d closest_point_on_line(const point_2d from_pt,const line &l);",
      "name": "closest_point_on_line",
      "method_name": null,
      "unique_global_name": "closest_point_on_line",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Gets the closest point on the line to a given point.",
      "brief": null,
      "return": {
        "type": "point_2d",
        "description": "The point on the line that is closest to `from_pt`",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "from_pt": {
          "type": "point_2d",
          "description": "The point to test (usually somewhere near the line)",
          "is_pointer": false,
          "is_const": true,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "l": {
          "type": "line",
          "description": "The line",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "point_2d closest_point_on_line(const point_2d from_pt, const line &l)"
        ],
        "rust": [
          "pub fn closest_point_on_line(from_pt: point_2d, l: &line) -> point_2d"
        ],
        "python": [
          "def closest_point_on_line(from_pt, l):"
        ],
        "pascal": [
          "function ClosestPointOnLine(fromPt: Point2D; const l: Line): Point2D"
        ],
        "csharp": [
          "public static Point2D Geometry.ClosestPointOnLine(Point2D fromPt, Line l);",
          "public static Point2D SplashKit.ClosestPointOnLine(Point2D fromPt, Line l);"
        ]
      }
    },
    {
      "signature": "point_2d closest_point_on_lines(const point_2d from_pt,const vector<line> &lines,int &line_idx);",
      "name": "closest_point_on_lines",
      "method_name": null,
      "unique_global_name": "closest_point_on_lines",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Get the point closest to `from pt` that is on one of the supplied lines.",
      "brief": null,
      "return": {
        "type": "point_2d",
        "description": "The point on one of the lines that is the closest point\non these lines to the `from pt`.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "from_pt": {
          "type": "point_2d",
          "description": "The point to test",
          "is_pointer": false,
          "is_const": true,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "lines": {
          "type": "vector",
          "description": "The lines to check",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": true,
          "type_parameter": "line"
        },
        "line_idx": {
          "type": "int",
          "description": "After the call this will store the index of the line that\nhad the matching point.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "point_2d closest_point_on_lines(const point_2d from_pt, const vector<line> &lines, int &line_idx)"
        ],
        "rust": [
          "pub fn closest_point_on_lines(from_pt: point_2d, lines: &Vec<line>, line_idx: &mut i32) -> point_2d"
        ],
        "python": [
          "def closest_point_on_lines(from_pt, lines, line_idx):"
        ],
        "pascal": [
          "function ClosestPointOnLines(fromPt: Point2D; const lines: ArrayOfLine; var lineIdx: Integer): Point2D"
        ],
        "csharp": [
          "public static Point2D Geometry.ClosestPointOnLines(Point2D fromPt, List<Line> lines, ref int lineIdx);",
          "public static Point2D SplashKit.ClosestPointOnLines(Point2D fromPt, List<Line> lines, ref int lineIdx);"
        ]
      }
    },
    {
      "signature": "line line_from(const point_2d &start,const point_2d &end_pt);",
      "name": "line_from",
      "method_name": null,
      "unique_global_name": "line_from_point_to_point",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Create a line from one point to another.",
      "brief": null,
      "return": {
        "type": "line",
        "description": "A line from the start to the end point",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "start": {
          "type": "point_2d",
          "description": "The start of the line",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "end_pt": {
          "type": "point_2d",
          "description": "The end of the line",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "point_to_point",
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "line line_from(const point_2d &start, const point_2d &end_pt)"
        ],
        "rust": [
          "pub fn line_from(start: &point_2d, end_pt: &point_2d) -> line"
        ],
        "python": [
          "def line_from_point_to_point(start, end_pt):"
        ],
        "pascal": [
          "function LineFrom(const start: Point2D; const endPt: Point2D): Line"
        ],
        "csharp": [
          "public static Line Geometry.LineFrom(Point2D start, Point2D endPt);",
          "public static Line SplashKit.LineFrom(Point2D start, Point2D endPt);"
        ]
      }
    },
    {
      "signature": "line line_from(const point_2d &start,const vector_2d &offset);",
      "name": "line_from",
      "method_name": null,
      "unique_global_name": "line_from_start_with_offset",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Creates a line that starts at a point, and follows a given vector.",
      "brief": null,
      "return": {
        "type": "line",
        "description": "A line from the start to end point",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "start": {
          "type": "point_2d",
          "description": "The start of the line",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "offset": {
          "type": "vector_2d",
          "description": "The offset to the end of the line",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "start_with_offset",
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "line line_from(const point_2d &start, const vector_2d &offset)"
        ],
        "rust": [
          "pub fn line_from(start: &point_2d, offset: &vector_2d) -> line"
        ],
        "python": [
          "def line_from_start_with_offset(start, offset):"
        ],
        "pascal": [
          "function LineFrom(const start: Point2D; const offset: Vector2D): Line"
        ],
        "csharp": [
          "public static Line Geometry.LineFrom(Point2D start, Vector2D offset);",
          "public static Line SplashKit.LineFrom(Point2D start, Vector2D offset);"
        ]
      }
    },
    {
      "signature": "line line_from(const vector_2d &v);",
      "name": "line_from",
      "method_name": null,
      "unique_global_name": "line_from_vector",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Gets a line that goes from the origin and ends at the end of the vector.",
      "brief": null,
      "return": {
        "type": "line",
        "description": "A line from the origin to the end point",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "v": {
          "type": "vector_2d",
          "description": "The offset from the origin for the end of the line",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "vector",
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "line line_from(const vector_2d &v)"
        ],
        "rust": [
          "pub fn line_from(v: &vector_2d) -> line"
        ],
        "python": [
          "def line_from_vector(v):"
        ],
        "pascal": [
          "function LineFrom(const v: Vector2D): Line"
        ],
        "csharp": [
          "public static Line Geometry.LineFrom(Vector2D v);",
          "public static Line SplashKit.LineFrom(Vector2D v);"
        ]
      }
    },
    {
      "signature": "line line_from(double x1,double y1,double x2,double y2);",
      "name": "line_from",
      "method_name": null,
      "unique_global_name": "line_from",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Create a line from one point to another.",
      "brief": null,
      "return": {
        "type": "line",
        "description": "A line from the start to the end point",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "x1": {
          "type": "double",
          "description": "The x value of the start of the line",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y1": {
          "type": "double",
          "description": "The y value of the start of the line",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x2": {
          "type": "double",
          "description": "The x value of the end of the line",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y2": {
          "type": "double",
          "description": "The y value of the end of the line",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "line line_from(double x1, double y1, double x2, double y2)"
        ],
        "rust": [
          "pub fn line_from(x1: f64, y1: f64, x2: f64, y2: f64) -> line"
        ],
        "python": [
          "def line_from(x1, y1, x2, y2):"
        ],
        "pascal": [
          "function LineFrom(x1: Double; y1: Double; x2: Double; y2: Double): Line"
        ],
        "csharp": [
          "public static Line Geometry.LineFrom(double x1, double y1, double x2, double y2);",
          "public static Line SplashKit.LineFrom(double x1, double y1, double x2, double y2);"
        ]
      }
    },
    {
      "signature": "bool line_intersection_point(const line &line1,const line &line2,point_2d &pt);",
      "name": "line_intersection_point",
      "method_name": null,
      "unique_global_name": "line_intersection_point",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the point at which two lines would intersect. This point may lie\npast the end of one or both lines.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "[description]",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "line1": {
          "type": "line",
          "description": "The first line",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "line2": {
          "type": "line",
          "description": "The other line",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "pt": {
          "type": "point_2d",
          "description": "The resulting point where they intersect",
          "is_pointer": false,
          "is_const": false,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "bool line_intersection_point(const line &line1, const line &line2, point_2d &pt)"
        ],
        "rust": [
          "pub fn line_intersection_point(line1: &line, line2: &line, pt: &mut point_2d) -> bool"
        ],
        "python": [
          "def line_intersection_point(line1, line2, pt):"
        ],
        "pascal": [
          "function LineIntersectionPoint(const line1: Line; const line2: Line; var pt: Point2D): Boolean"
        ],
        "csharp": [
          "public static bool Geometry.LineIntersectionPoint(Line line1, Line line2, ref Point2D pt);",
          "public static bool SplashKit.LineIntersectionPoint(Line line1, Line line2, ref Point2D pt);"
        ]
      }
    },
    {
      "signature": "bool line_intersects_circle(const line &l,const circle &c);",
      "name": "line_intersects_circle",
      "method_name": null,
      "unique_global_name": "line_intersects_circle",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns true if the line intersects the circle.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True if the line `l` intersects the circle `c`",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "l": {
          "type": "line",
          "description": "The line",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "c": {
          "type": "circle",
          "description": "The circle",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "bool line_intersects_circle(const line &l, const circle &c)"
        ],
        "rust": [
          "pub fn line_intersects_circle(l: &line, c: &circle) -> bool"
        ],
        "python": [
          "def line_intersects_circle(l, c):"
        ],
        "pascal": [
          "function LineIntersectsCircle(const l: Line; const c: Circle): Boolean"
        ],
        "csharp": [
          "public static bool Geometry.LineIntersectsCircle(Line l, Circle c);",
          "public static bool SplashKit.LineIntersectsCircle(Line l, Circle c);"
        ]
      }
    },
    {
      "signature": "bool line_intersects_lines(const line &l,const vector<line> &lines);",
      "name": "line_intersects_lines",
      "method_name": null,
      "unique_global_name": "line_intersects_lines",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns true if the line intersects any of the lines.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True if `line` intersects any of the lines in `lines`",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "l": {
          "type": "line",
          "description": "The line to check",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "lines": {
          "type": "vector",
          "description": "The lines to check against",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": true,
          "type_parameter": "line"
        }
      },
      "attributes": {
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "bool line_intersects_lines(const line &l, const vector<line> &lines)"
        ],
        "rust": [
          "pub fn line_intersects_lines(l: &line, lines: &Vec<line>) -> bool"
        ],
        "python": [
          "def line_intersects_lines(l, lines):"
        ],
        "pascal": [
          "function LineIntersectsLines(const l: Line; const lines: ArrayOfLine): Boolean"
        ],
        "csharp": [
          "public static bool Geometry.LineIntersectsLines(Line l, List<Line> lines);",
          "public static bool SplashKit.LineIntersectsLines(Line l, List<Line> lines);"
        ]
      }
    },
    {
      "signature": "bool line_intersects_rect(const line &l,const rectangle &rect);",
      "name": "line_intersects_rect",
      "method_name": null,
      "unique_global_name": "line_intersects_rect",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns true if the line intersects the rectangle.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True if `l` intersects `rect`",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "l": {
          "type": "line",
          "description": "The line",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "rect": {
          "type": "rectangle",
          "description": "The rectangle",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "bool line_intersects_rect(const line &l, const rectangle &rect)"
        ],
        "rust": [
          "pub fn line_intersects_rect(l: &line, rect: &rectangle) -> bool"
        ],
        "python": [
          "def line_intersects_rect(l, rect):"
        ],
        "pascal": [
          "function LineIntersectsRect(const l: Line; const rect: Rectangle): Boolean"
        ],
        "csharp": [
          "public static bool Geometry.LineIntersectsRect(Line l, Rectangle rect);",
          "public static bool SplashKit.LineIntersectsRect(Line l, Rectangle rect);"
        ]
      }
    },
    {
      "signature": "float line_length(const line &l);",
      "name": "line_length",
      "method_name": null,
      "unique_global_name": "line_length",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the length of a line.",
      "brief": null,
      "return": {
        "type": "float",
        "description": "The length of the line",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "l": {
          "type": "line",
          "description": "The line",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "float line_length(const line &l)"
        ],
        "rust": [
          "pub fn line_length(l: &line) -> f32"
        ],
        "python": [
          "def line_length(l):"
        ],
        "pascal": [
          "function LineLength(const l: Line): Single"
        ],
        "csharp": [
          "public static float Geometry.LineLength(Line l);",
          "public static float SplashKit.LineLength(Line l);"
        ]
      }
    },
    {
      "signature": "float line_length_squared(const line &l);",
      "name": "line_length_squared",
      "method_name": null,
      "unique_global_name": "line_length_squared",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the squared length of the line. You can also get the\n`line_length`.",
      "brief": null,
      "return": {
        "type": "float",
        "description": "The squared length of the line",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "l": {
          "type": "line",
          "description": "The line",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "float line_length_squared(const line &l)"
        ],
        "rust": [
          "pub fn line_length_squared(l: &line) -> f32"
        ],
        "python": [
          "def line_length_squared(l):"
        ],
        "pascal": [
          "function LineLengthSquared(const l: Line): Single"
        ],
        "csharp": [
          "public static float Geometry.LineLengthSquared(Line l);",
          "public static float SplashKit.LineLengthSquared(Line l);"
        ]
      }
    },
    {
      "signature": "point_2d line_mid_point(const line &l);",
      "name": "line_mid_point",
      "method_name": null,
      "unique_global_name": "line_mid_point",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the center point of the line.",
      "brief": null,
      "return": {
        "type": "point_2d",
        "description": "The point that is at the center of the line",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "l": {
          "type": "line",
          "description": "The line",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "point_2d line_mid_point(const line &l)"
        ],
        "rust": [
          "pub fn line_mid_point(l: &line) -> point_2d"
        ],
        "python": [
          "def line_mid_point(l):"
        ],
        "pascal": [
          "function LineMidPoint(const l: Line): Point2D"
        ],
        "csharp": [
          "public static Point2D Geometry.LineMidPoint(Line l);",
          "public static Point2D SplashKit.LineMidPoint(Line l);"
        ]
      }
    },
    {
      "signature": "vector_2d line_normal(const line &l);",
      "name": "line_normal",
      "method_name": null,
      "unique_global_name": "line_normal",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "The line normal (a perpendicular vector).",
      "brief": null,
      "return": {
        "type": "vector_2d",
        "description": "The line's normal vector",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "l": {
          "type": "line",
          "description": "The line",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "vector_2d line_normal(const line &l)"
        ],
        "rust": [
          "pub fn line_normal(l: &line) -> vector_2d"
        ],
        "python": [
          "def line_normal(l):"
        ],
        "pascal": [
          "function LineNormal(const l: Line): Vector2D"
        ],
        "csharp": [
          "public static Vector2D Geometry.LineNormal(Line l);",
          "public static Vector2D SplashKit.LineNormal(Line l);"
        ]
      }
    },
    {
      "signature": "string line_to_string(const line &ln);",
      "name": "line_to_string",
      "method_name": null,
      "unique_global_name": "line_to_string",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns a text description of the line.",
      "brief": null,
      "return": {
        "type": "string",
        "description": "A text description of the line",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "ln": {
          "type": "line",
          "description": "The line",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "string line_to_string(const line &ln)"
        ],
        "rust": [
          "pub fn line_to_string(ln: &line) -> String"
        ],
        "python": [
          "def line_to_string(ln):"
        ],
        "pascal": [
          "function LineToString(const ln: Line): String"
        ],
        "csharp": [
          "public static string Geometry.LineToString(Line ln);",
          "public static string SplashKit.LineToString(Line ln);"
        ]
      }
    },
    {
      "signature": "vector<line> lines_from(const rectangle &rect);",
      "name": "lines_from",
      "method_name": null,
      "unique_global_name": "lines_from_rectangle",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns an array of lines from a supplied rectangle.",
      "brief": null,
      "return": {
        "type": "vector",
        "description": "An array containing 4 lines",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": true,
        "type_parameter": "line"
      },
      "parameters": {
        "rect": {
          "type": "rectangle",
          "description": "The rectangle to get the lines from",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "rectangle",
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "vector<line> lines_from(const rectangle &rect)"
        ],
        "rust": [
          "pub fn lines_from(rect: &rectangle) -> Vec<line>"
        ],
        "python": [
          "def lines_from_rectangle(rect):"
        ],
        "pascal": [
          "function LinesFrom(const rect: Rectangle): ArrayOfLine"
        ],
        "csharp": [
          "public static List<Line> Geometry.LinesFrom(Rectangle rect);",
          "public static List<Line> SplashKit.LinesFrom(Rectangle rect);"
        ]
      }
    },
    {
      "signature": "vector<line> lines_from(const triangle &t);",
      "name": "lines_from",
      "method_name": null,
      "unique_global_name": "lines_from_triangle",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns an array of lines from the details in the triangle.",
      "brief": null,
      "return": {
        "type": "vector",
        "description": "The lines from the triangle",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": true,
        "type_parameter": "line"
      },
      "parameters": {
        "t": {
          "type": "triangle",
          "description": "The triangle",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "triangle",
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "vector<line> lines_from(const triangle &t)"
        ],
        "rust": [
          "pub fn lines_from(t: &triangle) -> Vec<line>"
        ],
        "python": [
          "def lines_from_triangle(t):"
        ],
        "pascal": [
          "function LinesFrom(const t: Triangle): ArrayOfLine"
        ],
        "csharp": [
          "public static List<Line> Geometry.LinesFrom(Triangle t);",
          "public static List<Line> SplashKit.LinesFrom(Triangle t);"
        ]
      }
    },
    {
      "signature": "bool lines_intersect(const line &l1,const line &l2);",
      "name": "lines_intersect",
      "method_name": null,
      "unique_global_name": "lines_intersect",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns true if the two lines intersect.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True if the two lines intersect (share a common point).",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "l1": {
          "type": "line",
          "description": "The first line",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "l2": {
          "type": "line",
          "description": "The other line",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "bool lines_intersect(const line &l1, const line &l2)"
        ],
        "rust": [
          "pub fn lines_intersect(l1: &line, l2: &line) -> bool"
        ],
        "python": [
          "def lines_intersect(l1, l2):"
        ],
        "pascal": [
          "function LinesIntersect(const l1: Line; const l2: Line): Boolean"
        ],
        "csharp": [
          "public static bool Geometry.LinesIntersect(Line l1, Line l2);",
          "public static bool SplashKit.LinesIntersect(Line l1, Line l2);"
        ]
      }
    },
    {
      "signature": "point_2d point_at(double x,double y);",
      "name": "point_at",
      "method_name": null,
      "unique_global_name": "point_at",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns a point at the given location.",
      "brief": null,
      "return": {
        "type": "point_2d",
        "description": "A point at the given location",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "x": {
          "type": "double",
          "description": "The x value of the coordinate",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y": {
          "type": "double",
          "description": "The y value of the coordinate",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "point_2d point_at(double x, double y)"
        ],
        "rust": [
          "pub fn point_at(x: f64, y: f64) -> point_2d"
        ],
        "python": [
          "def point_at(x, y):"
        ],
        "pascal": [
          "function PointAt(x: Double; y: Double): Point2D"
        ],
        "csharp": [
          "public static Point2D Geometry.PointAt(double x, double y);",
          "public static Point2D SplashKit.PointAt(double x, double y);"
        ]
      }
    },
    {
      "signature": "point_2d point_at_origin();",
      "name": "point_at_origin",
      "method_name": null,
      "unique_global_name": "point_at_origin",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns a point representing the origin.",
      "brief": null,
      "return": {
        "type": "point_2d",
        "description": "A point with x and y set to 0",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "point_2d point_at_origin()"
        ],
        "rust": [
          "pub fn point_at_origin() -> point_2d"
        ],
        "python": [
          "def point_at_origin():"
        ],
        "pascal": [
          "function PointAtOrigin(): Point2D"
        ],
        "csharp": [
          "public static Point2D Geometry.PointAtOrigin();",
          "public static Point2D SplashKit.PointAtOrigin();"
        ]
      }
    },
    {
      "signature": "bool point_in_circle(const point_2d &pt,const circle &c);",
      "name": "point_in_circle",
      "method_name": null,
      "unique_global_name": "point_in_circle",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns true if the point `pt` is in the circle `c`.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True if the point is within the area of the circle",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "pt": {
          "type": "point_2d",
          "description": "The point to test",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "c": {
          "type": "circle",
          "description": "The circle to check",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "bool point_in_circle(const point_2d &pt, const circle &c)"
        ],
        "rust": [
          "pub fn point_in_circle(pt: &point_2d, c: &circle) -> bool"
        ],
        "python": [
          "def point_in_circle(pt, c):"
        ],
        "pascal": [
          "function PointInCircle(const pt: Point2D; const c: Circle): Boolean"
        ],
        "csharp": [
          "public static bool Geometry.PointInCircle(Point2D pt, Circle c);",
          "public static bool SplashKit.PointInCircle(Point2D pt, Circle c);"
        ]
      }
    },
    {
      "signature": "bool point_in_circle(double ptx,double pty,double cx,double cy,double radius);",
      "name": "point_in_circle",
      "method_name": null,
      "unique_global_name": "point_in_circle_with_values",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Return true if the point is in the circle.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True when the point is in the circle, otherwise it returns false.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "ptx": {
          "type": "double",
          "description": "the x value of the point",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "pty": {
          "type": "double",
          "description": "the y value of the point",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "cx": {
          "type": "double",
          "description": "the x value of the centre of the circle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "cy": {
          "type": "double",
          "description": "the y value of the centre of the circle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "radius": {
          "type": "double",
          "description": "the radius of the circle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "with_values",
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "bool point_in_circle(double ptx, double pty, double cx, double cy, double radius)"
        ],
        "rust": [
          "pub fn point_in_circle(ptx: f64, pty: f64, cx: f64, cy: f64, radius: f64) -> bool"
        ],
        "python": [
          "def point_in_circle_with_values(ptx, pty, cx, cy, radius):"
        ],
        "pascal": [
          "function PointInCircle(ptx: Double; pty: Double; cx: Double; cy: Double; radius: Double): Boolean"
        ],
        "csharp": [
          "public static bool Geometry.PointInCircle(double ptx, double pty, double cx, double cy, double radius);",
          "public static bool SplashKit.PointInCircle(double ptx, double pty, double cx, double cy, double radius);"
        ]
      }
    },
    {
      "signature": "bool point_in_quad(const point_2d &pt,const quad &q);",
      "name": "point_in_quad",
      "method_name": null,
      "unique_global_name": "point_in_quad",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Tests if a point is in a quad.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True if pt lies within the area of q.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "pt": {
          "type": "point_2d",
          "description": "The point to test.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "q": {
          "type": "quad",
          "description": "The quad to check if the point is within.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "bool point_in_quad(const point_2d &pt, const quad &q)"
        ],
        "rust": [
          "pub fn point_in_quad(pt: &point_2d, q: &quad) -> bool"
        ],
        "python": [
          "def point_in_quad(pt, q):"
        ],
        "pascal": [
          "function PointInQuad(const pt: Point2D; const q: Quad): Boolean"
        ],
        "csharp": [
          "public static bool Geometry.PointInQuad(Point2D pt, Quad q);",
          "public static bool SplashKit.PointInQuad(Point2D pt, Quad q);"
        ]
      }
    },
    {
      "signature": "bool point_in_rectangle(const point_2d &pt,const rectangle &rect);",
      "name": "point_in_rectangle",
      "method_name": null,
      "unique_global_name": "point_in_rectangle",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns true if point `pt` is in the Rectangle `rect`.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True if the point is within the rectangle",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "pt": {
          "type": "point_2d",
          "description": "The point to test",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "rect": {
          "type": "rectangle",
          "description": "The rectangle to check",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "bool point_in_rectangle(const point_2d &pt, const rectangle &rect)"
        ],
        "rust": [
          "pub fn point_in_rectangle(pt: &point_2d, rect: &rectangle) -> bool"
        ],
        "python": [
          "def point_in_rectangle(pt, rect):"
        ],
        "pascal": [
          "function PointInRectangle(const pt: Point2D; const rect: Rectangle): Boolean"
        ],
        "csharp": [
          "public static bool Geometry.PointInRectangle(Point2D pt, Rectangle rect);",
          "public static bool SplashKit.PointInRectangle(Point2D pt, Rectangle rect);"
        ]
      }
    },
    {
      "signature": "bool point_in_rectangle(double ptx,double pty,double rect_x,double rect_y,double rect_width,double rect_height);",
      "name": "point_in_rectangle",
      "method_name": null,
      "unique_global_name": "point_in_rectangle_with_values",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns true if the point is within the bounds of a Rectangle.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "true when the point is in the rectangle, otherwise it returns false.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "ptx": {
          "type": "double",
          "description": "the x value of the point",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "pty": {
          "type": "double",
          "description": "the y value of the point",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "rect_x": {
          "type": "double",
          "description": "x value of the rectangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "rect_y": {
          "type": "double",
          "description": "y value of the rectangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "rect_width": {
          "type": "double",
          "description": "width of the rectangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "rect_height": {
          "type": "double",
          "description": "height of the rectangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "with_values",
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "bool point_in_rectangle(double ptx, double pty, double rect_x, double rect_y, double rect_width, double rect_height)"
        ],
        "rust": [
          "pub fn point_in_rectangle(ptx: f64, pty: f64, rect_x: f64, rect_y: f64, rect_width: f64, rect_height: f64) -> bool"
        ],
        "python": [
          "def point_in_rectangle_with_values(ptx, pty, rect_x, rect_y, rect_width, rect_height):"
        ],
        "pascal": [
          "function PointInRectangle(ptx: Double; pty: Double; rectX: Double; rectY: Double; rectWidth: Double; rectHeight: Double): Boolean"
        ],
        "csharp": [
          "public static bool Geometry.PointInRectangle(double ptx, double pty, double rectX, double rectY, double rectWidth, double rectHeight);",
          "public static bool SplashKit.PointInRectangle(double ptx, double pty, double rectX, double rectY, double rectWidth, double rectHeight);"
        ]
      }
    },
    {
      "signature": "bool point_in_triangle(const point_2d &pt,const triangle &tri);",
      "name": "point_in_triangle",
      "method_name": null,
      "unique_global_name": "point_in_triangle",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns true if the point `pt` is in the Triangle `tri`.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True if the point is within the triangle",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "pt": {
          "type": "point_2d",
          "description": "The point to test",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "tri": {
          "type": "triangle",
          "description": "The triangle to check",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "bool point_in_triangle(const point_2d &pt, const triangle &tri)"
        ],
        "rust": [
          "pub fn point_in_triangle(pt: &point_2d, tri: &triangle) -> bool"
        ],
        "python": [
          "def point_in_triangle(pt, tri):"
        ],
        "pascal": [
          "function PointInTriangle(const pt: Point2D; const tri: Triangle): Boolean"
        ],
        "csharp": [
          "public static bool Geometry.PointInTriangle(Point2D pt, Triangle tri);",
          "public static bool SplashKit.PointInTriangle(Point2D pt, Triangle tri);"
        ]
      }
    },
    {
      "signature": "float point_line_distance(const point_2d &pt,const line &l);",
      "name": "point_line_distance",
      "method_name": null,
      "unique_global_name": "point_line_distance",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the distance from a point to a line.",
      "brief": null,
      "return": {
        "type": "float",
        "description": "The distance from `pt` to `l`",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "pt": {
          "type": "point_2d",
          "description": "The point",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "l": {
          "type": "line",
          "description": "The line",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "float point_line_distance(const point_2d &pt, const line &l)"
        ],
        "rust": [
          "pub fn point_line_distance(pt: &point_2d, l: &line) -> f32"
        ],
        "python": [
          "def point_line_distance(pt, l):"
        ],
        "pascal": [
          "function PointLineDistance(const pt: Point2D; const l: Line): Single"
        ],
        "csharp": [
          "public static float Geometry.PointLineDistance(Point2D pt, Line l);",
          "public static float SplashKit.PointLineDistance(Point2D pt, Line l);"
        ]
      }
    },
    {
      "signature": "point_2d point_offset_by(const point_2d &start_point,const vector_2d &offset);",
      "name": "point_offset_by",
      "method_name": null,
      "unique_global_name": "point_offset_by",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Calculate the `point_2d` that is offset from the `start_point` by the\n`offset`",
      "brief": null,
      "return": {
        "type": "point_2d",
        "description": "A new point as a result of moving by the offset from\nthe starting point",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "start_point": {
          "type": "point_2d",
          "description": "The starting point",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "offset": {
          "type": "vector_2d",
          "description": "The distance and direction to move",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "point_2d point_offset_by(const point_2d &start_point, const vector_2d &offset)"
        ],
        "rust": [
          "pub fn point_offset_by(start_point: &point_2d, offset: &vector_2d) -> point_2d"
        ],
        "python": [
          "def point_offset_by(start_point, offset):"
        ],
        "pascal": [
          "function PointOffsetBy(const startPoint: Point2D; const offset: Vector2D): Point2D"
        ],
        "csharp": [
          "public static Point2D Geometry.PointOffsetBy(Point2D startPoint, Vector2D offset);",
          "public static Point2D SplashKit.PointOffsetBy(Point2D startPoint, Vector2D offset);"
        ]
      }
    },
    {
      "signature": "point_2d point_offset_from_origin(const vector_2d &offset);",
      "name": "point_offset_from_origin",
      "method_name": null,
      "unique_global_name": "point_offset_from_origin",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the point offset from the origin by the provided vector.",
      "brief": null,
      "return": {
        "type": "point_2d",
        "description": "A new point as a result of moving by the offset from\nthe starting point",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "offset": {
          "type": "vector_2d",
          "description": "The distance and direction to move",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "point_2d point_offset_from_origin(const vector_2d &offset)"
        ],
        "rust": [
          "pub fn point_offset_from_origin(offset: &vector_2d) -> point_2d"
        ],
        "python": [
          "def point_offset_from_origin(offset):"
        ],
        "pascal": [
          "function PointOffsetFromOrigin(const offset: Vector2D): Point2D"
        ],
        "csharp": [
          "public static Point2D Geometry.PointOffsetFromOrigin(Vector2D offset);",
          "public static Point2D SplashKit.PointOffsetFromOrigin(Vector2D offset);"
        ]
      }
    },
    {
      "signature": "bool point_on_line(const point_2d &pt,const line &l);",
      "name": "point_on_line",
      "method_name": null,
      "unique_global_name": "point_on_line",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns true if point `pt` is on the line `l`.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True if the point is on the line",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "pt": {
          "type": "point_2d",
          "description": "The point to test",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "l": {
          "type": "line",
          "description": "The line to check",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "bool point_on_line(const point_2d &pt, const line &l)"
        ],
        "rust": [
          "pub fn point_on_line(pt: &point_2d, l: &line) -> bool"
        ],
        "python": [
          "def point_on_line(pt, l):"
        ],
        "pascal": [
          "function PointOnLine(const pt: Point2D; const l: Line): Boolean"
        ],
        "csharp": [
          "public static bool Geometry.PointOnLine(Point2D pt, Line l);",
          "public static bool SplashKit.PointOnLine(Point2D pt, Line l);"
        ]
      }
    },
    {
      "signature": "bool point_on_line(const point_2d &pt,const line &l,float proximity);",
      "name": "point_on_line",
      "method_name": null,
      "unique_global_name": "point_on_line_with_proximity",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns true when the point `pt` is on the line `l`. The\nproximity value is used to set the sensitivity -- higher values\neffectively make the line thicker.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True if the point is on the line",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "pt": {
          "type": "point_2d",
          "description": "The point to test",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "l": {
          "type": "line",
          "description": "The line to check",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "proximity": {
          "type": "float",
          "description": "The sensitivity to allow close approximities",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "with_proximity",
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "bool point_on_line(const point_2d &pt, const line &l, float proximity)"
        ],
        "rust": [
          "pub fn point_on_line(pt: &point_2d, l: &line, proximity: f32) -> bool"
        ],
        "python": [
          "def point_on_line_with_proximity(pt, l, proximity):"
        ],
        "pascal": [
          "function PointOnLine(const pt: Point2D; const l: Line; proximity: Single): Boolean"
        ],
        "csharp": [
          "public static bool Geometry.PointOnLine(Point2D pt, Line l, float proximity);",
          "public static bool SplashKit.PointOnLine(Point2D pt, Line l, float proximity);"
        ]
      }
    },
    {
      "signature": "float point_point_angle(const point_2d &pt1,const point_2d &pt2);",
      "name": "point_point_angle",
      "method_name": null,
      "unique_global_name": "point_point_angle",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the angle between two points in degrees.",
      "brief": null,
      "return": {
        "type": "float",
        "description": "The angle (in degrees) of the line between the points",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "pt1": {
          "type": "point_2d",
          "description": "The first point",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "pt2": {
          "type": "point_2d",
          "description": "The other point",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "float point_point_angle(const point_2d &pt1, const point_2d &pt2)"
        ],
        "rust": [
          "pub fn point_point_angle(pt1: &point_2d, pt2: &point_2d) -> f32"
        ],
        "python": [
          "def point_point_angle(pt1, pt2):"
        ],
        "pascal": [
          "function PointPointAngle(const pt1: Point2D; const pt2: Point2D): Single"
        ],
        "csharp": [
          "public static float Geometry.PointPointAngle(Point2D pt1, Point2D pt2);",
          "public static float SplashKit.PointPointAngle(Point2D pt1, Point2D pt2);"
        ]
      }
    },
    {
      "signature": "float point_point_distance(const point_2d &pt1,const point_2d &pt2);",
      "name": "point_point_distance",
      "method_name": null,
      "unique_global_name": "point_point_distance",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the distance between two points.",
      "brief": null,
      "return": {
        "type": "float",
        "description": "The distance between the two points",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "pt1": {
          "type": "point_2d",
          "description": "The first point",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "pt2": {
          "type": "point_2d",
          "description": "The other point",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "float point_point_distance(const point_2d &pt1, const point_2d &pt2)"
        ],
        "rust": [
          "pub fn point_point_distance(pt1: &point_2d, pt2: &point_2d) -> f32"
        ],
        "python": [
          "def point_point_distance(pt1, pt2):"
        ],
        "pascal": [
          "function PointPointDistance(const pt1: Point2D; const pt2: Point2D): Single"
        ],
        "csharp": [
          "public static float Geometry.PointPointDistance(Point2D pt1, Point2D pt2);",
          "public static float SplashKit.PointPointDistance(Point2D pt1, Point2D pt2);"
        ]
      }
    },
    {
      "signature": "string point_to_string(const point_2d &pt);",
      "name": "point_to_string",
      "method_name": null,
      "unique_global_name": "point_to_string",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Get a text description of the `point_2d`.",
      "brief": null,
      "return": {
        "type": "string",
        "description": "A string representation of the point",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "pt": {
          "type": "point_2d",
          "description": "The point details",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "string point_to_string(const point_2d &pt)"
        ],
        "rust": [
          "pub fn point_to_string(pt: &point_2d) -> String"
        ],
        "python": [
          "def point_to_string(pt):"
        ],
        "pascal": [
          "function PointToString(const pt: Point2D): String"
        ],
        "csharp": [
          "public static string Geometry.PointToString(Point2D pt);",
          "public static string SplashKit.PointToString(Point2D pt);"
        ]
      }
    },
    {
      "signature": "point_2d random_bitmap_point(bitmap bmp);",
      "name": "random_bitmap_point",
      "method_name": null,
      "unique_global_name": "random_bitmap_point",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns a random point within the bounds of the bitmap.",
      "brief": null,
      "return": {
        "type": "point_2d",
        "description": "A point within the bounds of the bitmap",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "bmp": {
          "type": "bitmap",
          "description": "The bitmap",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "point_2d random_bitmap_point(bitmap bmp)"
        ],
        "rust": [
          "pub fn random_bitmap_point(bmp: bitmap) -> point_2d"
        ],
        "python": [
          "def random_bitmap_point(bmp):"
        ],
        "pascal": [
          "function RandomBitmapPoint(bmp: Bitmap): Point2D"
        ],
        "csharp": [
          "public static Point2D Geometry.RandomBitmapPoint(Bitmap bmp);",
          "public static Point2D SplashKit.RandomBitmapPoint(Bitmap bmp);"
        ]
      }
    },
    {
      "signature": "point_2d random_screen_point();",
      "name": "random_screen_point",
      "method_name": null,
      "unique_global_name": "random_screen_point",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns a random point on the current window.",
      "brief": null,
      "return": {
        "type": "point_2d",
        "description": "A point within the bounds of the current window",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "point_2d random_screen_point()"
        ],
        "rust": [
          "pub fn random_screen_point() -> point_2d"
        ],
        "python": [
          "def random_screen_point():"
        ],
        "pascal": [
          "function RandomScreenPoint(): Point2D"
        ],
        "csharp": [
          "public static Point2D Geometry.RandomScreenPoint();",
          "public static Point2D SplashKit.RandomScreenPoint();"
        ]
      }
    },
    {
      "signature": "point_2d random_window_point(window wind);",
      "name": "random_window_point",
      "method_name": null,
      "unique_global_name": "random_window_point",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns a random point on the provided window.",
      "brief": null,
      "return": {
        "type": "point_2d",
        "description": "A point within the bounds of the window",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "wind": {
          "type": "window",
          "description": "The window",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "point_2d random_window_point(window wind)"
        ],
        "rust": [
          "pub fn random_window_point(wind: window) -> point_2d"
        ],
        "python": [
          "def random_window_point(wind):"
        ],
        "pascal": [
          "function RandomWindowPoint(wind: Window): Point2D"
        ],
        "csharp": [
          "public static Point2D Geometry.RandomWindowPoint(Window wind);",
          "public static Point2D SplashKit.RandomWindowPoint(Window wind);"
        ]
      }
    },
    {
      "signature": "bool same_point(const point_2d &pt1,const point_2d &pt2);",
      "name": "same_point",
      "method_name": null,
      "unique_global_name": "same_point",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns True of `pt1` is at the same point as `pt2`. This checks at an\ninteger level, indicating the two points refer to the same pixel.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True if the two points are at the same location",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "pt1": {
          "type": "point_2d",
          "description": "The first point",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "pt2": {
          "type": "point_2d",
          "description": "The other point",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "bool same_point(const point_2d &pt1, const point_2d &pt2)"
        ],
        "rust": [
          "pub fn same_point(pt1: &point_2d, pt2: &point_2d) -> bool"
        ],
        "python": [
          "def same_point(pt1, pt2):"
        ],
        "pascal": [
          "function SamePoint(const pt1: Point2D; const pt2: Point2D): Boolean"
        ],
        "csharp": [
          "public static bool Geometry.SamePoint(Point2D pt1, Point2D pt2);",
          "public static bool SplashKit.SamePoint(Point2D pt1, Point2D pt2);"
        ]
      }
    },
    {
      "signature": "quad quad_from(const point_2d &p1,const point_2d &p2,const point_2d &p3,const point_2d &p4);",
      "name": "quad_from",
      "method_name": null,
      "unique_global_name": "quad_from_points",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns a quad from the passed in points.",
      "brief": null,
      "return": {
        "type": "quad",
        "description": "A quad from the passed in points",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "p1": {
          "type": "point_2d",
          "description": "The top left of the quad.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "p2": {
          "type": "point_2d",
          "description": "The top right of the quad",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "p3": {
          "type": "point_2d",
          "description": "The bottom left of the quad",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "p4": {
          "type": "point_2d",
          "description": "The bottom right of the quad",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "points",
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "quad quad_from(const point_2d &p1, const point_2d &p2, const point_2d &p3, const point_2d &p4)"
        ],
        "rust": [
          "pub fn quad_from(p1: &point_2d, p2: &point_2d, p3: &point_2d, p4: &point_2d) -> quad"
        ],
        "python": [
          "def quad_from_points(p1, p2, p3, p4):"
        ],
        "pascal": [
          "function QuadFrom(const p1: Point2D; const p2: Point2D; const p3: Point2D; const p4: Point2D): Quad"
        ],
        "csharp": [
          "public static Quad Geometry.QuadFrom(Point2D p1, Point2D p2, Point2D p3, Point2D p4);",
          "public static Quad SplashKit.QuadFrom(Point2D p1, Point2D p2, Point2D p3, Point2D p4);"
        ]
      }
    },
    {
      "signature": "quad quad_from(const rectangle &rect);",
      "name": "quad_from",
      "method_name": null,
      "unique_global_name": "quad_from_rectangle",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns a quad from the x-y points of a given recatangle",
      "brief": null,
      "return": {
        "type": "quad",
        "description": "A quad at the same location as the rectangle",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "rect": {
          "type": "rectangle",
          "description": "The rectangle to convert to a quad",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "rectangle",
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "quad quad_from(const rectangle &rect)"
        ],
        "rust": [
          "pub fn quad_from(rect: &rectangle) -> quad"
        ],
        "python": [
          "def quad_from_rectangle(rect):"
        ],
        "pascal": [
          "function QuadFrom(const rect: Rectangle): Quad"
        ],
        "csharp": [
          "public static Quad Geometry.QuadFrom(Rectangle rect);",
          "public static Quad SplashKit.QuadFrom(Rectangle rect);"
        ]
      }
    },
    {
      "signature": "quad quad_from(const rectangle &rect,const matrix_2d &transform);",
      "name": "quad_from",
      "method_name": null,
      "unique_global_name": "quad_from_rectangle_with_transformation",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns a quad from the rectangle, then applies the transformation to\nthe quads points.",
      "brief": null,
      "return": {
        "type": "quad",
        "description": "A quad that represents the rectangle after the transformation.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "rect": {
          "type": "rectangle",
          "description": "The rectangle to transform to a quad.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "transform": {
          "type": "matrix_2d",
          "description": "A transform to apply to the resulting quad.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "rectangle_with_transformation",
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "quad quad_from(const rectangle &rect, const matrix_2d &transform)"
        ],
        "rust": [
          "pub fn quad_from(rect: &rectangle, transform: &matrix_2d) -> quad"
        ],
        "python": [
          "def quad_from_rectangle_with_transformation(rect, transform):"
        ],
        "pascal": [
          "function QuadFrom(const rect: Rectangle; const transform: Matrix2D): Quad"
        ],
        "csharp": [
          "public static Quad Geometry.QuadFrom(Rectangle rect, Matrix2D transform);",
          "public static Quad SplashKit.QuadFrom(Rectangle rect, Matrix2D transform);"
        ]
      }
    },
    {
      "signature": "quad quad_from(double x_top_left,double y_top_left,double x_top_right,double y_top_right,double x_bottom_left,double y_bottom_left,double x_bottom_right,double y_bottom_right );",
      "name": "quad_from",
      "method_name": null,
      "unique_global_name": "quad_from",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns a quad for the passed in x & y points.",
      "brief": null,
      "return": {
        "type": "quad",
        "description": "A quad with the indicated points",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "x_top_left": {
          "type": "double",
          "description": "X coordinate of the top left of the quad",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y_top_left": {
          "type": "double",
          "description": "Y coordinate of the top left of the quad",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x_top_right": {
          "type": "double",
          "description": "X coordinate of the top right of the quad",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y_top_right": {
          "type": "double",
          "description": "Y coordinate of the top right of the quad",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x_bottom_left": {
          "type": "double",
          "description": "X coordinate of the bottom left of the quad",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y_bottom_left": {
          "type": "double",
          "description": "Y coordinate of the bottom left of the quad",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x_bottom_right": {
          "type": "double",
          "description": "X coordinate of the bottom right of the quad",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y_bottom_right": {
          "type": "double",
          "description": "Y coordinate of the bottom right of the quad",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "quad quad_from(double x_top_left, double y_top_left, double x_top_right, double y_top_right, double x_bottom_left, double y_bottom_left, double x_bottom_right, double y_bottom_right)"
        ],
        "rust": [
          "pub fn quad_from(x_top_left: f64, y_top_left: f64, x_top_right: f64, y_top_right: f64, x_bottom_left: f64, y_bottom_left: f64, x_bottom_right: f64, y_bottom_right: f64) -> quad"
        ],
        "python": [
          "def quad_from(x_top_left, y_top_left, x_top_right, y_top_right, x_bottom_left, y_bottom_left, x_bottom_right, y_bottom_right):"
        ],
        "pascal": [
          "function QuadFrom(xTopLeft: Double; yTopLeft: Double; xTopRight: Double; yTopRight: Double; xBottomLeft: Double; yBottomLeft: Double; xBottomRight: Double; yBottomRight: Double): Quad"
        ],
        "csharp": [
          "public static Quad Geometry.QuadFrom(double xTopLeft, double yTopLeft, double xTopRight, double yTopRight, double xBottomLeft, double yBottomLeft, double xBottomRight, double yBottomRight);",
          "public static Quad SplashKit.QuadFrom(double xTopLeft, double yTopLeft, double xTopRight, double yTopRight, double xBottomLeft, double yBottomLeft, double xBottomRight, double yBottomRight);"
        ]
      }
    },
    {
      "signature": "bool quads_intersect(const quad &q1,const quad &q2);",
      "name": "quads_intersect",
      "method_name": null,
      "unique_global_name": "quads_intersect",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns true if two quads intersect.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True if the two quads intersect.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "q1": {
          "type": "quad",
          "description": "The first quad",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "q2": {
          "type": "quad",
          "description": "The second quad",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "bool quads_intersect(const quad &q1, const quad &q2)"
        ],
        "rust": [
          "pub fn quads_intersect(q1: &quad, q2: &quad) -> bool"
        ],
        "python": [
          "def quads_intersect(q1, q2):"
        ],
        "pascal": [
          "function QuadsIntersect(const q1: Quad; const q2: Quad): Boolean"
        ],
        "csharp": [
          "public static bool Geometry.QuadsIntersect(Quad q1, Quad q2);",
          "public static bool SplashKit.QuadsIntersect(Quad q1, Quad q2);"
        ]
      }
    },
    {
      "signature": "void set_quad_point(quad &q,int idx,const point_2d &value);",
      "name": "set_quad_point",
      "method_name": null,
      "unique_global_name": "set_quad_point",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Change a point in a quad.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "q": {
          "type": "quad",
          "description": "The quad to change",
          "is_pointer": false,
          "is_const": false,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "idx": {
          "type": "int",
          "description": "The index of the point: 0 is top left, 1 is top right, 2 is\nbottom left, and 3 is bottom right",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "value": {
          "type": "point_2d",
          "description": "The new value for that point in the quad",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "void set_quad_point(quad &q, int idx, const point_2d &value)"
        ],
        "rust": [
          "pub fn set_quad_point(q: &mut quad, idx: i32, value: &point_2d)"
        ],
        "python": [
          "def set_quad_point(q, idx, value):"
        ],
        "pascal": [
          "procedure SetQuadPoint(var q: Quad; idx: Integer; const value: Point2D)"
        ],
        "csharp": [
          "public static void Geometry.SetQuadPoint(ref Quad q, int idx, Point2D value);",
          "public static void SplashKit.SetQuadPoint(ref Quad q, int idx, Point2D value);"
        ]
      }
    },
    {
      "signature": "vector<triangle> triangles_from(const quad &q);",
      "name": "triangles_from",
      "method_name": null,
      "unique_global_name": "triangles_from",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the two triangles that make up a quad in a vector.",
      "brief": null,
      "return": {
        "type": "vector",
        "description": "A vector with the two triangles from the quad.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": true,
        "type_parameter": "triangle"
      },
      "parameters": {
        "q": {
          "type": "quad",
          "description": "The quad",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "vector<triangle> triangles_from(const quad &q)"
        ],
        "rust": [
          "pub fn triangles_from(q: &quad) -> Vec<triangle>"
        ],
        "python": [
          "def triangles_from(q):"
        ],
        "pascal": [
          "function TrianglesFrom(const q: Quad): ArrayOfTriangle"
        ],
        "csharp": [
          "public static List<Triangle> Geometry.TrianglesFrom(Quad q);",
          "public static List<Triangle> SplashKit.TrianglesFrom(Quad q);"
        ]
      }
    },
    {
      "signature": "rectangle inset_rectangle(const rectangle &rect,float inset_amount);",
      "name": "inset_rectangle",
      "method_name": null,
      "unique_global_name": "inset_rectangle",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Return a rectangle that is inset an amount from a given rectangle.",
      "brief": null,
      "return": {
        "type": "rectangle",
        "description": "A new rectangle created inset from `rect`",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "rect": {
          "type": "rectangle",
          "description": "The rectangle to inset",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "inset_amount": {
          "type": "float",
          "description": "The amount to inset the rectangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "rectangle inset_rectangle(const rectangle &rect, float inset_amount)"
        ],
        "rust": [
          "pub fn inset_rectangle(rect: &rectangle, inset_amount: f32) -> rectangle"
        ],
        "python": [
          "def inset_rectangle(rect, inset_amount):"
        ],
        "pascal": [
          "function InsetRectangle(const rect: Rectangle; insetAmount: Single): Rectangle"
        ],
        "csharp": [
          "public static Rectangle Geometry.InsetRectangle(Rectangle rect, float insetAmount);",
          "public static Rectangle SplashKit.InsetRectangle(Rectangle rect, float insetAmount);"
        ]
      }
    },
    {
      "signature": "rectangle intersection(const rectangle &rect1,const rectangle &rect2);",
      "name": "intersection",
      "method_name": null,
      "unique_global_name": "intersection",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns a rectangle that represents the intersection of two rectangles.",
      "brief": null,
      "return": {
        "type": "rectangle",
        "description": "The intersection of rect1 and rect2.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "rect1": {
          "type": "rectangle",
          "description": "The first rectangle",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "rect2": {
          "type": "rectangle",
          "description": "The second rectangle",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "rectangle intersection(const rectangle &rect1, const rectangle &rect2)"
        ],
        "rust": [
          "pub fn intersection(rect1: &rectangle, rect2: &rectangle) -> rectangle"
        ],
        "python": [
          "def intersection(rect1, rect2):"
        ],
        "pascal": [
          "function Intersection(const rect1: Rectangle; const rect2: Rectangle): Rectangle"
        ],
        "csharp": [
          "public static Rectangle Geometry.Intersection(Rectangle rect1, Rectangle rect2);",
          "public static Rectangle SplashKit.Intersection(Rectangle rect1, Rectangle rect2);"
        ]
      }
    },
    {
      "signature": "rectangle rectangle_around(const circle &c);",
      "name": "rectangle_around",
      "method_name": null,
      "unique_global_name": "rectangle_around_circle",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns a rectangle that surrounds a given circle",
      "brief": null,
      "return": {
        "type": "rectangle",
        "description": "A rectangle that will surround the circle",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "c": {
          "type": "circle",
          "description": "The circle",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "circle",
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "rectangle rectangle_around(const circle &c)"
        ],
        "rust": [
          "pub fn rectangle_around(c: &circle) -> rectangle"
        ],
        "python": [
          "def rectangle_around_circle(c):"
        ],
        "pascal": [
          "function RectangleAround(const c: Circle): Rectangle"
        ],
        "csharp": [
          "public static Rectangle Geometry.RectangleAround(Circle c);",
          "public static Rectangle SplashKit.RectangleAround(Circle c);"
        ]
      }
    },
    {
      "signature": "rectangle rectangle_around(const line &l);",
      "name": "rectangle_around",
      "method_name": null,
      "unique_global_name": "rectangle_around_line",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns a rectangle that surrounds a given line segment",
      "brief": null,
      "return": {
        "type": "rectangle",
        "description": "A rectangle that will surround the line",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "l": {
          "type": "line",
          "description": "The line",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "line",
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "rectangle rectangle_around(const line &l)"
        ],
        "rust": [
          "pub fn rectangle_around(l: &line) -> rectangle"
        ],
        "python": [
          "def rectangle_around_line(l):"
        ],
        "pascal": [
          "function RectangleAround(const l: Line): Rectangle"
        ],
        "csharp": [
          "public static Rectangle Geometry.RectangleAround(Line l);",
          "public static Rectangle SplashKit.RectangleAround(Line l);"
        ]
      }
    },
    {
      "signature": "rectangle rectangle_around(const quad &q);",
      "name": "rectangle_around",
      "method_name": null,
      "unique_global_name": "rectangle_around_quad",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns a rectangle that surrounds a given quad.",
      "brief": null,
      "return": {
        "type": "rectangle",
        "description": "A rectangle that will surround the quad",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "q": {
          "type": "quad",
          "description": "The quad",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "quad",
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "rectangle rectangle_around(const quad &q)"
        ],
        "rust": [
          "pub fn rectangle_around(q: &quad) -> rectangle"
        ],
        "python": [
          "def rectangle_around_quad(q):"
        ],
        "pascal": [
          "function RectangleAround(const q: Quad): Rectangle"
        ],
        "csharp": [
          "public static Rectangle Geometry.RectangleAround(Quad q);",
          "public static Rectangle SplashKit.RectangleAround(Quad q);"
        ]
      }
    },
    {
      "signature": "rectangle rectangle_around(const triangle &t);",
      "name": "rectangle_around",
      "method_name": null,
      "unique_global_name": "rectangle_around_triangle",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns a rectangle that surrounds a given triangle",
      "brief": null,
      "return": {
        "type": "rectangle",
        "description": "A rectangle that will surround the triangle",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "t": {
          "type": "triangle",
          "description": "The triangle",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "triangle",
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "rectangle rectangle_around(const triangle &t)"
        ],
        "rust": [
          "pub fn rectangle_around(t: &triangle) -> rectangle"
        ],
        "python": [
          "def rectangle_around_triangle(t):"
        ],
        "pascal": [
          "function RectangleAround(const t: Triangle): Rectangle"
        ],
        "csharp": [
          "public static Rectangle Geometry.RectangleAround(Triangle t);",
          "public static Rectangle SplashKit.RectangleAround(Triangle t);"
        ]
      }
    },
    {
      "signature": "float rectangle_bottom(const rectangle &rect);",
      "name": "rectangle_bottom",
      "method_name": null,
      "unique_global_name": "rectangle_bottom",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "The location of the bottom of the rectangle.",
      "brief": null,
      "return": {
        "type": "float",
        "description": "The distance from the top of the screen to the bottom of\nthe rectangle.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "rect": {
          "type": "rectangle",
          "description": "The rectangle.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "float rectangle_bottom(const rectangle &rect)"
        ],
        "rust": [
          "pub fn rectangle_bottom(rect: &rectangle) -> f32"
        ],
        "python": [
          "def rectangle_bottom(rect):"
        ],
        "pascal": [
          "function RectangleBottom(const rect: Rectangle): Single"
        ],
        "csharp": [
          "public static float Geometry.RectangleBottom(Rectangle rect);",
          "public static float SplashKit.RectangleBottom(Rectangle rect);"
        ]
      }
    },
    {
      "signature": "point_2d rectangle_center(const rectangle &rect);",
      "name": "rectangle_center",
      "method_name": null,
      "unique_global_name": "rectangle_center",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the center point of a given rectangle",
      "brief": null,
      "return": {
        "type": "point_2d",
        "description": "The center point of the vector",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "rect": {
          "type": "rectangle",
          "description": "The rectangle",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "point_2d rectangle_center(const rectangle &rect)"
        ],
        "rust": [
          "pub fn rectangle_center(rect: &rectangle) -> point_2d"
        ],
        "python": [
          "def rectangle_center(rect):"
        ],
        "pascal": [
          "function RectangleCenter(const rect: Rectangle): Point2D"
        ],
        "csharp": [
          "public static Point2D Geometry.RectangleCenter(Rectangle rect);",
          "public static Point2D SplashKit.RectangleCenter(Rectangle rect);"
        ]
      }
    },
    {
      "signature": "rectangle rectangle_from(const point_2d pt,const double width,const double height);",
      "name": "rectangle_from",
      "method_name": null,
      "unique_global_name": "rectangle_from_point_and_size",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns a rectangle at the specified point with a given width and height",
      "brief": null,
      "return": {
        "type": "rectangle",
        "description": "A rectangle with the specified dimensions and location",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "pt": {
          "type": "point_2d",
          "description": "The origin for the rectangle",
          "is_pointer": false,
          "is_const": true,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "width": {
          "type": "double",
          "description": "Its width",
          "is_pointer": false,
          "is_const": true,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "height": {
          "type": "double",
          "description": "Its height",
          "is_pointer": false,
          "is_const": true,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "point_and_size",
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "rectangle rectangle_from(const point_2d pt, const double width, const double height)"
        ],
        "rust": [
          "pub fn rectangle_from(pt: point_2d, width: f64, height: f64) -> rectangle"
        ],
        "python": [
          "def rectangle_from_point_and_size(pt, width, height):"
        ],
        "pascal": [
          "function RectangleFrom(pt: Point2D; width: Double; height: Double): Rectangle"
        ],
        "csharp": [
          "public static Rectangle Geometry.RectangleFrom(Point2D pt, double width, double height);",
          "public static Rectangle SplashKit.RectangleFrom(Point2D pt, double width, double height);"
        ]
      }
    },
    {
      "signature": "rectangle rectangle_from(const point_2d pt1,const point_2d pt2);",
      "name": "rectangle_from",
      "method_name": null,
      "unique_global_name": "rectangle_from_points",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns a rectangle with pt1 and pt2 defining the two distant edge points.",
      "brief": null,
      "return": {
        "type": "rectangle",
        "description": "A rectangle enclosing the two points.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "pt1": {
          "type": "point_2d",
          "description": "The first point",
          "is_pointer": false,
          "is_const": true,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "pt2": {
          "type": "point_2d",
          "description": "The second point",
          "is_pointer": false,
          "is_const": true,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "points",
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "rectangle rectangle_from(const point_2d pt1, const point_2d pt2)"
        ],
        "rust": [
          "pub fn rectangle_from(pt1: point_2d, pt2: point_2d) -> rectangle"
        ],
        "python": [
          "def rectangle_from_points(pt1, pt2):"
        ],
        "pascal": [
          "function RectangleFrom(pt1: Point2D; pt2: Point2D): Rectangle"
        ],
        "csharp": [
          "public static Rectangle Geometry.RectangleFrom(Point2D pt1, Point2D pt2);",
          "public static Rectangle SplashKit.RectangleFrom(Point2D pt1, Point2D pt2);"
        ]
      }
    },
    {
      "signature": "rectangle rectangle_from(double x,double y,double width,double height);",
      "name": "rectangle_from",
      "method_name": null,
      "unique_global_name": "rectangle_from",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns a rectangle from a given x,y location with the specified width\nand height.",
      "brief": null,
      "return": {
        "type": "rectangle",
        "description": "A rectangle with the specified dimensions and location.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "x": {
          "type": "double",
          "description": "The x coordinate of the rectangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y": {
          "type": "double",
          "description": "The y coordinate of the rectangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "width": {
          "type": "double",
          "description": "The width of the rectangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "height": {
          "type": "double",
          "description": "The height of the rectangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "rectangle rectangle_from(double x, double y, double width, double height)"
        ],
        "rust": [
          "pub fn rectangle_from(x: f64, y: f64, width: f64, height: f64) -> rectangle"
        ],
        "python": [
          "def rectangle_from(x, y, width, height):"
        ],
        "pascal": [
          "function RectangleFrom(x: Double; y: Double; width: Double; height: Double): Rectangle"
        ],
        "csharp": [
          "public static Rectangle Geometry.RectangleFrom(double x, double y, double width, double height);",
          "public static Rectangle SplashKit.RectangleFrom(double x, double y, double width, double height);"
        ]
      }
    },
    {
      "signature": "float rectangle_left(const rectangle &rect);",
      "name": "rectangle_left",
      "method_name": null,
      "unique_global_name": "rectangle_left",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "The location of the left edge of the rectangle.",
      "brief": null,
      "return": {
        "type": "float",
        "description": "The distance from the left of the screen to the left side of\nthe rectangle.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "rect": {
          "type": "rectangle",
          "description": "The rectangle.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "float rectangle_left(const rectangle &rect)"
        ],
        "rust": [
          "pub fn rectangle_left(rect: &rectangle) -> f32"
        ],
        "python": [
          "def rectangle_left(rect):"
        ],
        "pascal": [
          "function RectangleLeft(const rect: Rectangle): Single"
        ],
        "csharp": [
          "public static float Geometry.RectangleLeft(Rectangle rect);",
          "public static float SplashKit.RectangleLeft(Rectangle rect);"
        ]
      }
    },
    {
      "signature": "rectangle rectangle_offset_by(const rectangle &rect,const vector_2d &offset);",
      "name": "rectangle_offset_by",
      "method_name": null,
      "unique_global_name": "rectangle_offset_by",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns a rectangle that is moved by the provided vector.",
      "brief": null,
      "return": {
        "type": "rectangle",
        "description": "A new rectangle that represents the original rectangle\nafter being moved by the offset vector.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "rect": {
          "type": "rectangle",
          "description": "The original rectangle",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "offset": {
          "type": "vector_2d",
          "description": "The amount and direction for the rectangle to move",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "rectangle rectangle_offset_by(const rectangle &rect, const vector_2d &offset)"
        ],
        "rust": [
          "pub fn rectangle_offset_by(rect: &rectangle, offset: &vector_2d) -> rectangle"
        ],
        "python": [
          "def rectangle_offset_by(rect, offset):"
        ],
        "pascal": [
          "function RectangleOffsetBy(const rect: Rectangle; const offset: Vector2D): Rectangle"
        ],
        "csharp": [
          "public static Rectangle Geometry.RectangleOffsetBy(Rectangle rect, Vector2D offset);",
          "public static Rectangle SplashKit.RectangleOffsetBy(Rectangle rect, Vector2D offset);"
        ]
      }
    },
    {
      "signature": "float rectangle_right(const rectangle &rect);",
      "name": "rectangle_right",
      "method_name": null,
      "unique_global_name": "rectangle_right",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "The location of the right edge of the rectangle.",
      "brief": null,
      "return": {
        "type": "float",
        "description": "The distance from the left of the screen to the right side\nof the rectangle.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "rect": {
          "type": "rectangle",
          "description": "The rectangle.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "float rectangle_right(const rectangle &rect)"
        ],
        "rust": [
          "pub fn rectangle_right(rect: &rectangle) -> f32"
        ],
        "python": [
          "def rectangle_right(rect):"
        ],
        "pascal": [
          "function RectangleRight(const rect: Rectangle): Single"
        ],
        "csharp": [
          "public static float Geometry.RectangleRight(Rectangle rect);",
          "public static float SplashKit.RectangleRight(Rectangle rect);"
        ]
      }
    },
    {
      "signature": "string rectangle_to_string(const rectangle &rect);",
      "name": "rectangle_to_string",
      "method_name": null,
      "unique_global_name": "rectangle_to_string",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Get a text representation of the passed in rectangle.",
      "brief": null,
      "return": {
        "type": "string",
        "description": "A string representation of the rectangle.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "rect": {
          "type": "rectangle",
          "description": "The rectangle",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "string rectangle_to_string(const rectangle &rect)"
        ],
        "rust": [
          "pub fn rectangle_to_string(rect: &rectangle) -> String"
        ],
        "python": [
          "def rectangle_to_string(rect):"
        ],
        "pascal": [
          "function RectangleToString(const rect: Rectangle): String"
        ],
        "csharp": [
          "public static string Geometry.RectangleToString(Rectangle rect);",
          "public static string SplashKit.RectangleToString(Rectangle rect);"
        ]
      }
    },
    {
      "signature": "float rectangle_top(const rectangle &rect);",
      "name": "rectangle_top",
      "method_name": null,
      "unique_global_name": "rectangle_top",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "The top of the rectangle.",
      "brief": null,
      "return": {
        "type": "float",
        "description": "Its distance from the top of the screen.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "rect": {
          "type": "rectangle",
          "description": "The rectangle.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "float rectangle_top(const rectangle &rect)"
        ],
        "rust": [
          "pub fn rectangle_top(rect: &rectangle) -> f32"
        ],
        "python": [
          "def rectangle_top(rect):"
        ],
        "pascal": [
          "function RectangleTop(const rect: Rectangle): Single"
        ],
        "csharp": [
          "public static float Geometry.RectangleTop(Rectangle rect);",
          "public static float SplashKit.RectangleTop(Rectangle rect);"
        ]
      }
    },
    {
      "signature": "bool rectangles_intersect(const rectangle &rect1,const rectangle &rect2);",
      "name": "rectangles_intersect",
      "method_name": null,
      "unique_global_name": "rectangles_intersect",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns true if the two rectangles intersect.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True when rect1 and rect2 intersect.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "rect1": {
          "type": "rectangle",
          "description": "The first rectangle",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "rect2": {
          "type": "rectangle",
          "description": "The second rectangle",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "bool rectangles_intersect(const rectangle &rect1, const rectangle &rect2)"
        ],
        "rust": [
          "pub fn rectangles_intersect(rect1: &rectangle, rect2: &rectangle) -> bool"
        ],
        "python": [
          "def rectangles_intersect(rect1, rect2):"
        ],
        "pascal": [
          "function RectanglesIntersect(const rect1: Rectangle; const rect2: Rectangle): Boolean"
        ],
        "csharp": [
          "public static bool Geometry.RectanglesIntersect(Rectangle rect1, Rectangle rect2);",
          "public static bool SplashKit.RectanglesIntersect(Rectangle rect1, Rectangle rect2);"
        ]
      }
    },
    {
      "signature": "point_2d triangle_barycenter(const triangle &tri);",
      "name": "triangle_barycenter",
      "method_name": null,
      "unique_global_name": "triangle_barycenter",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Return the barycenter of the triangle. This is one way of calculating the\ncenter point of a triangle.",
      "brief": null,
      "return": {
        "type": "point_2d",
        "description": "The point that is the barycenter of `tri`",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "tri": {
          "type": "triangle",
          "description": "The triangle to get the center of",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "point_2d triangle_barycenter(const triangle &tri)"
        ],
        "rust": [
          "pub fn triangle_barycenter(tri: &triangle) -> point_2d"
        ],
        "python": [
          "def triangle_barycenter(tri):"
        ],
        "pascal": [
          "function TriangleBarycenter(const tri: Triangle): Point2D"
        ],
        "csharp": [
          "public static Point2D Geometry.TriangleBarycenter(Triangle tri);",
          "public static Point2D SplashKit.TriangleBarycenter(Triangle tri);"
        ]
      }
    },
    {
      "signature": "triangle triangle_from(const point_2d &p1,const point_2d &p2,const point_2d &p3);",
      "name": "triangle_from",
      "method_name": null,
      "unique_global_name": "triangle_from",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Generate a triangle from a set of points.",
      "brief": null,
      "return": {
        "type": "triangle",
        "description": "A triangle with the indicated points",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "p1": {
          "type": "point_2d",
          "description": "The first point of the triangle",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "p2": {
          "type": "point_2d",
          "description": "The second point of the triangle",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "p3": {
          "type": "point_2d",
          "description": "The third point of the triangle",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "triangle triangle_from(const point_2d &p1, const point_2d &p2, const point_2d &p3)"
        ],
        "rust": [
          "pub fn triangle_from(p1: &point_2d, p2: &point_2d, p3: &point_2d) -> triangle"
        ],
        "python": [
          "def triangle_from(p1, p2, p3):"
        ],
        "pascal": [
          "function TriangleFrom(const p1: Point2D; const p2: Point2D; const p3: Point2D): Triangle"
        ],
        "csharp": [
          "public static Triangle Geometry.TriangleFrom(Point2D p1, Point2D p2, Point2D p3);",
          "public static Triangle SplashKit.TriangleFrom(Point2D p1, Point2D p2, Point2D p3);"
        ]
      }
    },
    {
      "signature": "triangle triangle_from(double x1,double y1,double x2,double y2,double x3,double y3);",
      "name": "triangle_from",
      "method_name": null,
      "unique_global_name": "triangle_from__from_coordinates",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Generate a triangle from a set of points.",
      "brief": null,
      "return": {
        "type": "triangle",
        "description": "A triangle at the indicated points",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "x1": {
          "type": "double",
          "description": "The x coordinate for the first point",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y1": {
          "type": "double",
          "description": "The y coordinate for the first point",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x2": {
          "type": "double",
          "description": "The x coordinate for the second point",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y2": {
          "type": "double",
          "description": "The y coordinate for the second point",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x3": {
          "type": "double",
          "description": "The x coordinate for the third point",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y3": {
          "type": "double",
          "description": "The y coordinate for the third point",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "_from_coordinates",
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "triangle triangle_from(double x1, double y1, double x2, double y2, double x3, double y3)"
        ],
        "rust": [
          "pub fn triangle_from(x1: f64, y1: f64, x2: f64, y2: f64, x3: f64, y3: f64) -> triangle"
        ],
        "python": [
          "def triangle_from__from_coordinates(x1, y1, x2, y2, x3, y3):"
        ],
        "pascal": [
          "function TriangleFrom(x1: Double; y1: Double; x2: Double; y2: Double; x3: Double; y3: Double): Triangle"
        ],
        "csharp": [
          "public static Triangle Geometry.TriangleFrom(double x1, double y1, double x2, double y2, double x3, double y3);",
          "public static Triangle SplashKit.TriangleFrom(double x1, double y1, double x2, double y2, double x3, double y3);"
        ]
      }
    },
    {
      "signature": "bool triangle_rectangle_intersect(const triangle &tri,const rectangle &rect);",
      "name": "triangle_rectangle_intersect",
      "method_name": null,
      "unique_global_name": "triangle_rectangle_intersect",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns true if the triangle intersects with the rectangle.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True if the triangle and rect intersect",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "tri": {
          "type": "triangle",
          "description": "The triangle to test",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "rect": {
          "type": "rectangle",
          "description": "The rectangle to test",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "bool triangle_rectangle_intersect(const triangle &tri, const rectangle &rect)"
        ],
        "rust": [
          "pub fn triangle_rectangle_intersect(tri: &triangle, rect: &rectangle) -> bool"
        ],
        "python": [
          "def triangle_rectangle_intersect(tri, rect):"
        ],
        "pascal": [
          "function TriangleRectangleIntersect(const tri: Triangle; const rect: Rectangle): Boolean"
        ],
        "csharp": [
          "public static bool Geometry.TriangleRectangleIntersect(Triangle tri, Rectangle rect);",
          "public static bool SplashKit.TriangleRectangleIntersect(Triangle tri, Rectangle rect);"
        ]
      }
    },
    {
      "signature": "string triangle_to_string(const triangle &tri);",
      "name": "triangle_to_string",
      "method_name": null,
      "unique_global_name": "triangle_to_string",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns a text description of the triangle.",
      "brief": null,
      "return": {
        "type": "string",
        "description": "A text description of the triangle.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "tri": {
          "type": "triangle",
          "description": "The triangle",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "string triangle_to_string(const triangle &tri)"
        ],
        "rust": [
          "pub fn triangle_to_string(tri: &triangle) -> String"
        ],
        "python": [
          "def triangle_to_string(tri):"
        ],
        "pascal": [
          "function TriangleToString(const tri: Triangle): String"
        ],
        "csharp": [
          "public static string Geometry.TriangleToString(Triangle tri);",
          "public static string SplashKit.TriangleToString(Triangle tri);"
        ]
      }
    },
    {
      "signature": "bool triangles_intersect(const triangle &t1,const triangle &t2);",
      "name": "triangles_intersect",
      "method_name": null,
      "unique_global_name": "triangles_intersect",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns true if the two triangles intersect.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True if the two triangles intersect",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "t1": {
          "type": "triangle",
          "description": "The first triangle",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "t2": {
          "type": "triangle",
          "description": "The other triangle",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "geometry",
        "static": "geometry"
      },
      "signatures": {
        "cpp": [
          "bool triangles_intersect(const triangle &t1, const triangle &t2)"
        ],
        "rust": [
          "pub fn triangles_intersect(t1: &triangle, t2: &triangle) -> bool"
        ],
        "python": [
          "def triangles_intersect(t1, t2):"
        ],
        "pascal": [
          "function TrianglesIntersect(const t1: Triangle; const t2: Triangle): Boolean"
        ],
        "csharp": [
          "public static bool Geometry.TrianglesIntersect(Triangle t1, Triangle t2);",
          "public static bool SplashKit.TrianglesIntersect(Triangle t1, Triangle t2);"
        ]
      }
    }
  ]
}