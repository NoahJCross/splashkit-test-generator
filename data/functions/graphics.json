{
  "functions": [
    {
      "signature": "void draw_circle(color clr,const circle &c);",
      "name": "draw_circle",
      "method_name": "draw",
      "unique_global_name": "draw_circle_record",
      "unique_method_name": "circle.draw_record",
      "suffix_name": null,
      "description": "Draw a circle on the current window. The circle is centred on its x, y\ncoordinates, and has the provided radius.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "clr": {
          "type": "color",
          "description": "The color of the circle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "c": {
          "type": "circle",
          "description": "The circle being drawn",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "circle",
        "method": "draw",
        "self": "c",
        "suffix": "record",
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "void draw_circle(color clr, const circle &c)"
        ],
        "rust": [
          "pub fn draw_circle(clr: color, c: &circle)"
        ],
        "python": [
          "def draw_circle_record(clr, c):"
        ],
        "pascal": [
          "procedure DrawCircle(clr: Color; const c: Circle)"
        ],
        "csharp": [
          "public void Circle.DrawCircle(Color clr);",
          "public static void SplashKit.DrawCircle(Color clr, Circle c);"
        ]
      }
    },
    {
      "signature": "void draw_circle(color clr,const circle &c,drawing_options opts);",
      "name": "draw_circle",
      "method_name": "draw",
      "unique_global_name": "draw_circle_record_with_options",
      "unique_method_name": "circle.draw_record_with_options",
      "suffix_name": null,
      "description": "Draw a circle with the provided drawing options, which may include options related to\nthe drawing destination.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "clr": {
          "type": "color",
          "description": "The color of the circle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "c": {
          "type": "circle",
          "description": "The circle being drawn",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "Drawing options to configure the drawing operation",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "circle",
        "method": "draw",
        "self": "c",
        "suffix": "record_with_options",
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "void draw_circle(color clr, const circle &c, drawing_options opts)"
        ],
        "rust": [
          "pub fn draw_circle(clr: color, c: &circle, opts: drawing_options)"
        ],
        "python": [
          "def draw_circle_record_with_options(clr, c, opts):"
        ],
        "pascal": [
          "procedure DrawCircle(clr: Color; const c: Circle; opts: DrawingOptions)"
        ],
        "csharp": [
          "public void Circle.DrawCircle(Color clr, DrawingOptions opts);",
          "public static void SplashKit.DrawCircle(Color clr, Circle c, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "void draw_circle(color clr,double x,double y,double radius);",
      "name": "draw_circle",
      "method_name": null,
      "unique_global_name": "draw_circle",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Draw a circle onto the current window. The circle is centred on its x, y\ncoordinates, and has the provided radius.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "clr": {
          "type": "color",
          "description": "The color of the circle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x": {
          "type": "double",
          "description": "The x location of the circle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y": {
          "type": "double",
          "description": "The y location of the circle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "radius": {
          "type": "double",
          "description": "The radius of the circle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "void draw_circle(color clr, double x, double y, double radius)"
        ],
        "rust": [
          "pub fn draw_circle(clr: color, x: f64, y: f64, radius: f64)"
        ],
        "python": [
          "def draw_circle(clr, x, y, radius):"
        ],
        "pascal": [
          "procedure DrawCircle(clr: Color; x: Double; y: Double; radius: Double)"
        ],
        "csharp": [
          "public static void SplashKit.DrawCircle(Color clr, double x, double y, double radius);"
        ]
      }
    },
    {
      "signature": "void draw_circle(color clr,double x,double y,double radius,drawing_options opts);",
      "name": "draw_circle",
      "method_name": null,
      "unique_global_name": "draw_circle_with_options",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Draw a circle using the supplied drawing options. The circle is centred on its x, y\ncoordinates, and has the provided radius. This will use `drawing_options` to determine\nthe destination.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "clr": {
          "type": "color",
          "description": "The color of the circle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x": {
          "type": "double",
          "description": "The x location of the circle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y": {
          "type": "double",
          "description": "The y location of the circle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "radius": {
          "type": "double",
          "description": "The radius of the circle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "Drawing options to configure the drawing operation",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "with_options",
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "void draw_circle(color clr, double x, double y, double radius, drawing_options opts)"
        ],
        "rust": [
          "pub fn draw_circle(clr: color, x: f64, y: f64, radius: f64, opts: drawing_options)"
        ],
        "python": [
          "def draw_circle_with_options(clr, x, y, radius, opts):"
        ],
        "pascal": [
          "procedure DrawCircle(clr: Color; x: Double; y: Double; radius: Double; opts: DrawingOptions)"
        ],
        "csharp": [
          "public static void SplashKit.DrawCircle(Color clr, double x, double y, double radius, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "void draw_circle_on_bitmap(bitmap destination,color clr,double x,double y,double radius);",
      "name": "draw_circle_on_bitmap",
      "method_name": "draw_circle",
      "unique_global_name": "draw_circle_on_bitmap",
      "unique_method_name": "bitmap.draw_circle",
      "suffix_name": null,
      "description": "Draw a circle onto the destination bitmap. The circle is centred on its x, y\ncoordinates, and has the provided radius.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "bitmap",
          "description": "The destination bitmap",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The color of the circle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x": {
          "type": "double",
          "description": "The x location of the circle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y": {
          "type": "double",
          "description": "The y location of the circle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "radius": {
          "type": "double",
          "description": "The radius of the circle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "bitmap",
        "method": "draw_circle",
        "group": "graphics",
        "self": "destination"
      },
      "signatures": {
        "cpp": [
          "void draw_circle_on_bitmap(bitmap destination, color clr, double x, double y, double radius)"
        ],
        "rust": [
          "pub fn draw_circle_on_bitmap(destination: bitmap, clr: color, x: f64, y: f64, radius: f64)"
        ],
        "python": [
          "def draw_circle_on_bitmap(destination, clr, x, y, radius):"
        ],
        "pascal": [
          "procedure DrawCircleOnBitmap(destination: Bitmap; clr: Color; x: Double; y: Double; radius: Double)"
        ],
        "csharp": [
          "public void Bitmap.DrawCircleOnBitmap(Color clr, double x, double y, double radius);",
          "public static void SplashKit.DrawCircleOnBitmap(Bitmap destination, Color clr, double x, double y, double radius);"
        ]
      }
    },
    {
      "signature": "void draw_circle_on_bitmap(bitmap destination,color clr,double x,double y,double radius,drawing_options opts);",
      "name": "draw_circle_on_bitmap",
      "method_name": "draw_circle",
      "unique_global_name": "draw_circle_on_bitmap_with_options",
      "unique_method_name": "bitmap.draw_circle_with_options",
      "suffix_name": null,
      "description": "Draw a circle to the bitmap using the supplied drawing options. The circle is centred on its x, y\ncoordinates, and has the provided radius.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "bitmap",
          "description": "The destination bitmap",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The color of the circle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x": {
          "type": "double",
          "description": "The x location of the circle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y": {
          "type": "double",
          "description": "The y location of the circle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "radius": {
          "type": "double",
          "description": "The radius of the circle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "Drawing options to configure the drawing operation",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "bitmap",
        "method": "draw_circle",
        "suffix": "with_options",
        "group": "graphics",
        "self": "destination"
      },
      "signatures": {
        "cpp": [
          "void draw_circle_on_bitmap(bitmap destination, color clr, double x, double y, double radius, drawing_options opts)"
        ],
        "rust": [
          "pub fn draw_circle_on_bitmap(destination: bitmap, clr: color, x: f64, y: f64, radius: f64, opts: drawing_options)"
        ],
        "python": [
          "def draw_circle_on_bitmap_with_options(destination, clr, x, y, radius, opts):"
        ],
        "pascal": [
          "procedure DrawCircleOnBitmap(destination: Bitmap; clr: Color; x: Double; y: Double; radius: Double; opts: DrawingOptions)"
        ],
        "csharp": [
          "public void Bitmap.DrawCircleOnBitmap(Color clr, double x, double y, double radius, DrawingOptions opts);",
          "public static void SplashKit.DrawCircleOnBitmap(Bitmap destination, Color clr, double x, double y, double radius, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "void draw_circle_on_window(window destination,color clr,double x,double y,double radius);",
      "name": "draw_circle_on_window",
      "method_name": "draw_circle",
      "unique_global_name": "draw_circle_on_window",
      "unique_method_name": "window.draw_circle",
      "suffix_name": null,
      "description": "Draw a circle onto the destination window. The circle is centred on its x, y\ncoordinates, and has the provided radius.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "window",
          "description": "The destination window",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The color of the circle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x": {
          "type": "double",
          "description": "The x location of the circle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y": {
          "type": "double",
          "description": "The y location of the circle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "radius": {
          "type": "double",
          "description": "The radius of the circle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "window",
        "method": "draw_circle",
        "group": "graphics",
        "self": "destination"
      },
      "signatures": {
        "cpp": [
          "void draw_circle_on_window(window destination, color clr, double x, double y, double radius)"
        ],
        "rust": [
          "pub fn draw_circle_on_window(destination: window, clr: color, x: f64, y: f64, radius: f64)"
        ],
        "python": [
          "def draw_circle_on_window(destination, clr, x, y, radius):"
        ],
        "pascal": [
          "procedure DrawCircleOnWindow(destination: Window; clr: Color; x: Double; y: Double; radius: Double)"
        ],
        "csharp": [
          "public void Window.DrawCircleOnWindow(Color clr, double x, double y, double radius);",
          "public static void SplashKit.DrawCircleOnWindow(Window destination, Color clr, double x, double y, double radius);"
        ]
      }
    },
    {
      "signature": "void draw_circle_on_window(window destination,color clr,double x,double y,double radius,drawing_options opts);",
      "name": "draw_circle_on_window",
      "method_name": "draw_circle",
      "unique_global_name": "draw_circle_on_window_with_options",
      "unique_method_name": "window.draw_circle_with_options",
      "suffix_name": null,
      "description": "Draw a circle to the window using the supplied drawing options. The circle is centred on its x, y\ncoordinates, and has the provided radius.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "window",
          "description": "The destination window",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The color of the circle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x": {
          "type": "double",
          "description": "The x location of the circle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y": {
          "type": "double",
          "description": "The y location of the circle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "radius": {
          "type": "double",
          "description": "The radius of the circle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "Drawing options to configure the drawing operation",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "window",
        "method": "draw_circle",
        "suffix": "with_options",
        "group": "graphics",
        "self": "destination"
      },
      "signatures": {
        "cpp": [
          "void draw_circle_on_window(window destination, color clr, double x, double y, double radius, drawing_options opts)"
        ],
        "rust": [
          "pub fn draw_circle_on_window(destination: window, clr: color, x: f64, y: f64, radius: f64, opts: drawing_options)"
        ],
        "python": [
          "def draw_circle_on_window_with_options(destination, clr, x, y, radius, opts):"
        ],
        "pascal": [
          "procedure DrawCircleOnWindow(destination: Window; clr: Color; x: Double; y: Double; radius: Double; opts: DrawingOptions)"
        ],
        "csharp": [
          "public void Window.DrawCircleOnWindow(Color clr, double x, double y, double radius, DrawingOptions opts);",
          "public static void SplashKit.DrawCircleOnWindow(Window destination, Color clr, double x, double y, double radius, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "void fill_circle(color clr,const circle &c);",
      "name": "fill_circle",
      "method_name": "fill",
      "unique_global_name": "fill_circle_record",
      "unique_method_name": "circle.fill_record",
      "suffix_name": null,
      "description": "Draw a circle on the current window. The circle is centred on its x, y\ncoordinates, and has the provided radius.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "clr": {
          "type": "color",
          "description": "The color of the circle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "c": {
          "type": "circle",
          "description": "The circle being drawn",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "circle",
        "method": "fill",
        "self": "c",
        "suffix": "record",
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "void fill_circle(color clr, const circle &c)"
        ],
        "rust": [
          "pub fn fill_circle(clr: color, c: &circle)"
        ],
        "python": [
          "def fill_circle_record(clr, c):"
        ],
        "pascal": [
          "procedure FillCircle(clr: Color; const c: Circle)"
        ],
        "csharp": [
          "public void Circle.FillCircle(Color clr);",
          "public static void SplashKit.FillCircle(Color clr, Circle c);"
        ]
      }
    },
    {
      "signature": "void fill_circle(color clr,const circle &c,drawing_options opts);",
      "name": "fill_circle",
      "method_name": "fill",
      "unique_global_name": "fill_circle_record_with_options",
      "unique_method_name": "circle.fill_record_with_options",
      "suffix_name": null,
      "description": "Fill a circle with the provided drawing options, which may include options related to\nthe drawing destination.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "clr": {
          "type": "color",
          "description": "The color of the circle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "c": {
          "type": "circle",
          "description": "The circle being drawn",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "Drawing options to configure the drawing operation",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "circle",
        "method": "fill",
        "self": "c",
        "suffix": "record_with_options",
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "void fill_circle(color clr, const circle &c, drawing_options opts)"
        ],
        "rust": [
          "pub fn fill_circle(clr: color, c: &circle, opts: drawing_options)"
        ],
        "python": [
          "def fill_circle_record_with_options(clr, c, opts):"
        ],
        "pascal": [
          "procedure FillCircle(clr: Color; const c: Circle; opts: DrawingOptions)"
        ],
        "csharp": [
          "public void Circle.FillCircle(Color clr, DrawingOptions opts);",
          "public static void SplashKit.FillCircle(Color clr, Circle c, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "void fill_circle(color clr,double x,double y,double radius);",
      "name": "fill_circle",
      "method_name": null,
      "unique_global_name": "fill_circle",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Fill a circle onto the current window. The circle is centred on its x, y\ncoordinates, and has the provided radius.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "clr": {
          "type": "color",
          "description": "The color of the circle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x": {
          "type": "double",
          "description": "The x location of the circle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y": {
          "type": "double",
          "description": "The y location of the circle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "radius": {
          "type": "double",
          "description": "The radius of the circle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "void fill_circle(color clr, double x, double y, double radius)"
        ],
        "rust": [
          "pub fn fill_circle(clr: color, x: f64, y: f64, radius: f64)"
        ],
        "python": [
          "def fill_circle(clr, x, y, radius):"
        ],
        "pascal": [
          "procedure FillCircle(clr: Color; x: Double; y: Double; radius: Double)"
        ],
        "csharp": [
          "public static void SplashKit.FillCircle(Color clr, double x, double y, double radius);"
        ]
      }
    },
    {
      "signature": "void fill_circle(color clr,double x,double y,double radius,drawing_options opts);",
      "name": "fill_circle",
      "method_name": null,
      "unique_global_name": "fill_circle_with_options",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Fill a circle using the supplied drawing options. The circle is centred on its x, y\ncoordinates, and has the provided radius. This will use `drawing_options` to determine\nthe destination.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "clr": {
          "type": "color",
          "description": "The color of the circle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x": {
          "type": "double",
          "description": "The x location of the circle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y": {
          "type": "double",
          "description": "The y location of the circle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "radius": {
          "type": "double",
          "description": "The radius of the circle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "Drawing options to configure the drawing operation",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "with_options",
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "void fill_circle(color clr, double x, double y, double radius, drawing_options opts)"
        ],
        "rust": [
          "pub fn fill_circle(clr: color, x: f64, y: f64, radius: f64, opts: drawing_options)"
        ],
        "python": [
          "def fill_circle_with_options(clr, x, y, radius, opts):"
        ],
        "pascal": [
          "procedure FillCircle(clr: Color; x: Double; y: Double; radius: Double; opts: DrawingOptions)"
        ],
        "csharp": [
          "public static void SplashKit.FillCircle(Color clr, double x, double y, double radius, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "void fill_circle_on_bitmap(bitmap destination,color clr,double x,double y,double radius);",
      "name": "fill_circle_on_bitmap",
      "method_name": "fill_circle",
      "unique_global_name": "fill_circle_on_bitmap",
      "unique_method_name": "bitmap.fill_circle",
      "suffix_name": null,
      "description": "Fill a circle onto the destination bitmap. The circle is centred on its x, y\ncoordinates, and has the provided radius.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "bitmap",
          "description": "The destination bitmap",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The color of the circle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x": {
          "type": "double",
          "description": "The x location of the circle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y": {
          "type": "double",
          "description": "The y location of the circle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "radius": {
          "type": "double",
          "description": "The radius of the circle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "bitmap",
        "method": "fill_circle",
        "group": "graphics",
        "self": "destination"
      },
      "signatures": {
        "cpp": [
          "void fill_circle_on_bitmap(bitmap destination, color clr, double x, double y, double radius)"
        ],
        "rust": [
          "pub fn fill_circle_on_bitmap(destination: bitmap, clr: color, x: f64, y: f64, radius: f64)"
        ],
        "python": [
          "def fill_circle_on_bitmap(destination, clr, x, y, radius):"
        ],
        "pascal": [
          "procedure FillCircleOnBitmap(destination: Bitmap; clr: Color; x: Double; y: Double; radius: Double)"
        ],
        "csharp": [
          "public void Bitmap.FillCircleOnBitmap(Color clr, double x, double y, double radius);",
          "public static void SplashKit.FillCircleOnBitmap(Bitmap destination, Color clr, double x, double y, double radius);"
        ]
      }
    },
    {
      "signature": "void fill_circle_on_bitmap(bitmap destination,color clr,double x,double y,double radius,drawing_options opts);",
      "name": "fill_circle_on_bitmap",
      "method_name": "fill_circle",
      "unique_global_name": "fill_circle_on_bitmap_with_options",
      "unique_method_name": "bitmap.fill_circle_with_options",
      "suffix_name": null,
      "description": "Fill a circle to the bitmap using the supplied drawing options. The circle is centred on its x, y\ncoordinates, and has the provided radius.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "bitmap",
          "description": "The destination bitmap",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The color of the circle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x": {
          "type": "double",
          "description": "The x location of the circle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y": {
          "type": "double",
          "description": "The y location of the circle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "radius": {
          "type": "double",
          "description": "The radius of the circle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "Drawing options to configure the drawing operation",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "bitmap",
        "method": "fill_circle",
        "suffix": "with_options",
        "group": "graphics",
        "self": "destination"
      },
      "signatures": {
        "cpp": [
          "void fill_circle_on_bitmap(bitmap destination, color clr, double x, double y, double radius, drawing_options opts)"
        ],
        "rust": [
          "pub fn fill_circle_on_bitmap(destination: bitmap, clr: color, x: f64, y: f64, radius: f64, opts: drawing_options)"
        ],
        "python": [
          "def fill_circle_on_bitmap_with_options(destination, clr, x, y, radius, opts):"
        ],
        "pascal": [
          "procedure FillCircleOnBitmap(destination: Bitmap; clr: Color; x: Double; y: Double; radius: Double; opts: DrawingOptions)"
        ],
        "csharp": [
          "public void Bitmap.FillCircleOnBitmap(Color clr, double x, double y, double radius, DrawingOptions opts);",
          "public static void SplashKit.FillCircleOnBitmap(Bitmap destination, Color clr, double x, double y, double radius, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "void fill_circle_on_window(window destination,color clr,double x,double y,double radius);",
      "name": "fill_circle_on_window",
      "method_name": "fill_circle",
      "unique_global_name": "fill_circle_on_window",
      "unique_method_name": "window.fill_circle",
      "suffix_name": null,
      "description": "Fill a circle onto the destination window. The circle is centred on its x, y\ncoordinates, and has the provided radius.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "window",
          "description": "The destination window",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The color of the circle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x": {
          "type": "double",
          "description": "The x location of the circle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y": {
          "type": "double",
          "description": "The y location of the circle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "radius": {
          "type": "double",
          "description": "The radius of the circle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "window",
        "method": "fill_circle",
        "group": "graphics",
        "self": "destination"
      },
      "signatures": {
        "cpp": [
          "void fill_circle_on_window(window destination, color clr, double x, double y, double radius)"
        ],
        "rust": [
          "pub fn fill_circle_on_window(destination: window, clr: color, x: f64, y: f64, radius: f64)"
        ],
        "python": [
          "def fill_circle_on_window(destination, clr, x, y, radius):"
        ],
        "pascal": [
          "procedure FillCircleOnWindow(destination: Window; clr: Color; x: Double; y: Double; radius: Double)"
        ],
        "csharp": [
          "public void Window.FillCircleOnWindow(Color clr, double x, double y, double radius);",
          "public static void SplashKit.FillCircleOnWindow(Window destination, Color clr, double x, double y, double radius);"
        ]
      }
    },
    {
      "signature": "void fill_circle_on_window(window destination,color clr,double x,double y,double radius,drawing_options opts);",
      "name": "fill_circle_on_window",
      "method_name": "fill_circle",
      "unique_global_name": "fill_circle_on_window_with_options",
      "unique_method_name": "window.fill_circle_with_options",
      "suffix_name": null,
      "description": "Fill a circle to the window using the supplied drawing options. The circle is centred on its x, y\ncoordinates, and has the provided radius.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "window",
          "description": "The destination window",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The color of the circle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x": {
          "type": "double",
          "description": "The x location of the circle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y": {
          "type": "double",
          "description": "The y location of the circle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "radius": {
          "type": "double",
          "description": "The radius of the circle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "Drawing options to configure the drawing operation",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "window",
        "method": "fill_circle",
        "suffix": "with_options",
        "group": "graphics",
        "self": "destination"
      },
      "signatures": {
        "cpp": [
          "void fill_circle_on_window(window destination, color clr, double x, double y, double radius, drawing_options opts)"
        ],
        "rust": [
          "pub fn fill_circle_on_window(destination: window, clr: color, x: f64, y: f64, radius: f64, opts: drawing_options)"
        ],
        "python": [
          "def fill_circle_on_window_with_options(destination, clr, x, y, radius, opts):"
        ],
        "pascal": [
          "procedure FillCircleOnWindow(destination: Window; clr: Color; x: Double; y: Double; radius: Double; opts: DrawingOptions)"
        ],
        "csharp": [
          "public void Window.FillCircleOnWindow(Color clr, double x, double y, double radius, DrawingOptions opts);",
          "public static void SplashKit.FillCircleOnWindow(Window destination, Color clr, double x, double y, double radius, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "rectangle current_clip();",
      "name": "current_clip",
      "method_name": null,
      "unique_global_name": "current_clip",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the rectangle of the current clip area for the current window",
      "brief": null,
      "return": {
        "type": "rectangle",
        "description": "The current clipping rectangle for the current window",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "rectangle current_clip()"
        ],
        "rust": [
          "pub fn current_clip() -> rectangle"
        ],
        "python": [
          "def current_clip():"
        ],
        "pascal": [
          "function CurrentClip(): Rectangle"
        ],
        "csharp": [
          "public static Rectangle SplashKit.CurrentClip();"
        ]
      }
    },
    {
      "signature": "rectangle current_clip(bitmap bmp);",
      "name": "current_clip",
      "method_name": null,
      "unique_global_name": "current_clip_for_bitmap",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the rectangle of the current clip area for a bitmap",
      "brief": null,
      "return": {
        "type": "rectangle",
        "description": "The current clipping rectangle for the bitmap",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "bmp": {
          "type": "bitmap",
          "description": "The bitmap to get the clipping rectangle from",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "for_bitmap",
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "rectangle current_clip(bitmap bmp)"
        ],
        "rust": [
          "pub fn current_clip(bmp: bitmap) -> rectangle"
        ],
        "python": [
          "def current_clip_for_bitmap(bmp):"
        ],
        "pascal": [
          "function CurrentClip(bmp: Bitmap): Rectangle"
        ],
        "csharp": [
          "public static Rectangle SplashKit.CurrentClip(Bitmap bmp);"
        ]
      }
    },
    {
      "signature": "rectangle current_clip(window wnd);",
      "name": "current_clip",
      "method_name": null,
      "unique_global_name": "current_clip_for_window",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the rectangle of the current clip area for a window",
      "brief": null,
      "return": {
        "type": "rectangle",
        "description": "The current clipping rectangle for the window",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "wnd": {
          "type": "window",
          "description": "The window to get the clipping rectangle from",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "for_window",
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "rectangle current_clip(window wnd)"
        ],
        "rust": [
          "pub fn current_clip(wnd: window) -> rectangle"
        ],
        "python": [
          "def current_clip_for_window(wnd):"
        ],
        "pascal": [
          "function CurrentClip(wnd: Window): Rectangle"
        ],
        "csharp": [
          "public static Rectangle SplashKit.CurrentClip(Window wnd);"
        ]
      }
    },
    {
      "signature": "void pop_clip(window wnd);",
      "name": "pop_clip",
      "method_name": null,
      "unique_global_name": "pop_clip_for_window",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Remove the last clipping rectangle pushed to the window. This\nwill then apply the previously pushed clipping rectangle.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "wnd": {
          "type": "window",
          "description": "The window to change",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "for_window",
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "void pop_clip(window wnd)"
        ],
        "rust": [
          "pub fn pop_clip(wnd: window)"
        ],
        "python": [
          "def pop_clip_for_window(wnd):"
        ],
        "pascal": [
          "procedure PopClip(wnd: Window)"
        ],
        "csharp": [
          "public static void SplashKit.PopClip(Window wnd);"
        ]
      }
    },
    {
      "signature": "void pop_clip();",
      "name": "pop_clip",
      "method_name": null,
      "unique_global_name": "pop_clip",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Remove the last clipping rectangle pushed to the current window. This\nwill then apply the previously pushed clipping rectangle.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "void pop_clip()"
        ],
        "rust": [
          "pub fn pop_clip()"
        ],
        "python": [
          "def pop_clip():"
        ],
        "pascal": [
          "procedure PopClip()"
        ],
        "csharp": [
          "public static void SplashKit.PopClip();"
        ]
      }
    },
    {
      "signature": "void pop_clip(bitmap bmp);",
      "name": "pop_clip",
      "method_name": null,
      "unique_global_name": "pop_clip_for_bitmap",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Remove the last clipping rectangle pushed to the bitmap. This\nwill then apply the previously pushed clipping rectangle.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "bmp": {
          "type": "bitmap",
          "description": "The bitmap to change",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "for_bitmap",
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "void pop_clip(bitmap bmp)"
        ],
        "rust": [
          "pub fn pop_clip(bmp: bitmap)"
        ],
        "python": [
          "def pop_clip_for_bitmap(bmp):"
        ],
        "pascal": [
          "procedure PopClip(bmp: Bitmap)"
        ],
        "csharp": [
          "public static void SplashKit.PopClip(Bitmap bmp);"
        ]
      }
    },
    {
      "signature": "void push_clip(window wnd,const rectangle &r);",
      "name": "push_clip",
      "method_name": null,
      "unique_global_name": "push_clip_for_window",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Add the clipping rectangle of a window and uses the intersect between\nthe new rectangle and previous clip.\n\nWhen a clipping rectangle is provided, drawing operations will only\naffect the area specified in the current clipping rectangle.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "wnd": {
          "type": "window",
          "description": "The window to add clipping to",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "r": {
          "type": "rectangle",
          "description": "The new clipping rectangle",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "for_window",
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "void push_clip(window wnd, const rectangle &r)"
        ],
        "rust": [
          "pub fn push_clip(wnd: window, r: &rectangle)"
        ],
        "python": [
          "def push_clip_for_window(wnd, r):"
        ],
        "pascal": [
          "procedure PushClip(wnd: Window; const r: Rectangle)"
        ],
        "csharp": [
          "public static void SplashKit.PushClip(Window wnd, Rectangle r);"
        ]
      }
    },
    {
      "signature": "void push_clip(bitmap bmp,const rectangle &r);",
      "name": "push_clip",
      "method_name": null,
      "unique_global_name": "push_clip_for_bitmap",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Add the clipping rectangle of a bitmap and uses the intersect between\nthe new rectangle and previous clip.\n\nWhen a clipping rectangle is provided, drawing operations will only\naffect the area specified in the current clipping rectangle.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "bmp": {
          "type": "bitmap",
          "description": "The bitmap to add clipping to",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "r": {
          "type": "rectangle",
          "description": "The new clipping rectangle",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "for_bitmap",
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "void push_clip(bitmap bmp, const rectangle &r)"
        ],
        "rust": [
          "pub fn push_clip(bmp: bitmap, r: &rectangle)"
        ],
        "python": [
          "def push_clip_for_bitmap(bmp, r):"
        ],
        "pascal": [
          "procedure PushClip(bmp: Bitmap; const r: Rectangle)"
        ],
        "csharp": [
          "public static void SplashKit.PushClip(Bitmap bmp, Rectangle r);"
        ]
      }
    },
    {
      "signature": "void push_clip(const rectangle &r);",
      "name": "push_clip",
      "method_name": null,
      "unique_global_name": "push_clip",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Push a clip rectangle to the current window. The resulting clipping\nrectangle will be the intersection of the existing clipping rectangle\nwith the new rectangle provided in this call. This can be undone using\n`pop_clip`.\n\nWhen a clipping rectangle is provided, drawing operations will only\naffect the area specified in the current clipping rectangle.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "r": {
          "type": "rectangle",
          "description": "The new clipping rectangle",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "void push_clip(const rectangle &r)"
        ],
        "rust": [
          "pub fn push_clip(r: &rectangle)"
        ],
        "python": [
          "def push_clip(r):"
        ],
        "pascal": [
          "procedure PushClip(const r: Rectangle)"
        ],
        "csharp": [
          "public static void SplashKit.PushClip(Rectangle r);"
        ]
      }
    },
    {
      "signature": "void reset_clip(bitmap bmp);",
      "name": "reset_clip",
      "method_name": null,
      "unique_global_name": "reset_clip_for_bitmap",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Reset the clipping rectangle on a bitmap. This will clear all\nof the clipping rectangles pushed to the bitmap.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "bmp": {
          "type": "bitmap",
          "description": "The bitmap to clear the clipping rectangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "for_bitmap",
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "void reset_clip(bitmap bmp)"
        ],
        "rust": [
          "pub fn reset_clip(bmp: bitmap)"
        ],
        "python": [
          "def reset_clip_for_bitmap(bmp):"
        ],
        "pascal": [
          "procedure ResetClip(bmp: Bitmap)"
        ],
        "csharp": [
          "public static void SplashKit.ResetClip(Bitmap bmp);"
        ]
      }
    },
    {
      "signature": "void reset_clip();",
      "name": "reset_clip",
      "method_name": null,
      "unique_global_name": "reset_clip",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Reset the clipping rectangle of the current window. This will clear all\nof the clipping rectangles pushed to the current window.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "void reset_clip()"
        ],
        "rust": [
          "pub fn reset_clip()"
        ],
        "python": [
          "def reset_clip():"
        ],
        "pascal": [
          "procedure ResetClip()"
        ],
        "csharp": [
          "public static void SplashKit.ResetClip();"
        ]
      }
    },
    {
      "signature": "void reset_clip(window wnd);",
      "name": "reset_clip",
      "method_name": null,
      "unique_global_name": "reset_clip_for_window",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Reset the clipping rectangle on a window. This will clear all\nof the clipping rectangles pushed to the window.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "wnd": {
          "type": "window",
          "description": "The window to clear the clipping rectangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "for_window",
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "void reset_clip(window wnd)"
        ],
        "rust": [
          "pub fn reset_clip(wnd: window)"
        ],
        "python": [
          "def reset_clip_for_window(wnd):"
        ],
        "pascal": [
          "procedure ResetClip(wnd: Window)"
        ],
        "csharp": [
          "public static void SplashKit.ResetClip(Window wnd);"
        ]
      }
    },
    {
      "signature": "void set_clip(const rectangle &r);",
      "name": "set_clip",
      "method_name": null,
      "unique_global_name": "set_clip",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Set the clip rectangle of the current window. This will clear any\nexisting clipping rectangles pushed to the current window, and use the\nsupplied rectangle for clipping.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "r": {
          "type": "rectangle",
          "description": "The new clipping rectangle",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "void set_clip(const rectangle &r)"
        ],
        "rust": [
          "pub fn set_clip(r: &rectangle)"
        ],
        "python": [
          "def set_clip(r):"
        ],
        "pascal": [
          "procedure SetClip(const r: Rectangle)"
        ],
        "csharp": [
          "public static void SplashKit.SetClip(Rectangle r);"
        ]
      }
    },
    {
      "signature": "void set_clip(bitmap bmp,const rectangle &r);",
      "name": "set_clip",
      "method_name": null,
      "unique_global_name": "set_clip_for_bitmap",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Set the clip rectangle of the bitmap. This will clear any existing\nclipping rectangles pushed to the bitmap, and use the supplied rectangle\nfor clipping.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "bmp": {
          "type": "bitmap",
          "description": "The bitmap to change",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "r": {
          "type": "rectangle",
          "description": "The new clipping rectangle",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "for_bitmap",
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "void set_clip(bitmap bmp, const rectangle &r)"
        ],
        "rust": [
          "pub fn set_clip(bmp: bitmap, r: &rectangle)"
        ],
        "python": [
          "def set_clip_for_bitmap(bmp, r):"
        ],
        "pascal": [
          "procedure SetClip(bmp: Bitmap; const r: Rectangle)"
        ],
        "csharp": [
          "public static void SplashKit.SetClip(Bitmap bmp, Rectangle r);"
        ]
      }
    },
    {
      "signature": "void set_clip(window wnd,const rectangle &r);",
      "name": "set_clip",
      "method_name": null,
      "unique_global_name": "set_clip_for_window",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Set the clip rectangle of the window. This will clear any existing\nclipping rectangles pushed to the window, and use the supplied rectangle\nfor clipping.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "wnd": {
          "type": "window",
          "description": "The window to change",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "r": {
          "type": "rectangle",
          "description": "The new clipping rectangle",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "for_window",
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "void set_clip(window wnd, const rectangle &r)"
        ],
        "rust": [
          "pub fn set_clip(wnd: window, r: &rectangle)"
        ],
        "python": [
          "def set_clip_for_window(wnd, r):"
        ],
        "pascal": [
          "procedure SetClip(wnd: Window; const r: Rectangle)"
        ],
        "csharp": [
          "public static void SplashKit.SetClip(Window wnd, Rectangle r);"
        ]
      }
    },
    {
      "signature": "drawing_options option_defaults();",
      "name": "option_defaults",
      "method_name": null,
      "unique_global_name": "option_defaults",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns a `drawing_options` with default values.\nThis will draw to the current window, with default scale of 1, no\nrotation or offset, not flipped, drawing whole images, with default\ncamera mechanisms and line width.",
      "brief": null,
      "return": {
        "type": "drawing_options",
        "description": "A default drawing options.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "drawing_options option_defaults()"
        ],
        "rust": [
          "pub fn option_defaults() -> drawing_options"
        ],
        "python": [
          "def option_defaults():"
        ],
        "pascal": [
          "function OptionDefaults(): DrawingOptions"
        ],
        "csharp": [
          "public static DrawingOptions SplashKit.OptionDefaults();"
        ]
      }
    },
    {
      "signature": "drawing_options option_draw_to(bitmap dest);",
      "name": "option_draw_to",
      "method_name": null,
      "unique_global_name": "option_draw_to_bitmap",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Use this option to draw to a Bitmap. Pass dest the Bitmap you want to draw on.",
      "brief": null,
      "return": {
        "type": "drawing_options",
        "description": "Drawing options that will draw onto a bitmap.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "dest": {
          "type": "bitmap",
          "description": "The bitmap to draw to.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "bitmap",
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "drawing_options option_draw_to(bitmap dest)"
        ],
        "rust": [
          "pub fn option_draw_to(dest: bitmap) -> drawing_options"
        ],
        "python": [
          "def option_draw_to_bitmap(dest):"
        ],
        "pascal": [
          "function OptionDrawTo(dest: Bitmap): DrawingOptions"
        ],
        "csharp": [
          "public static DrawingOptions SplashKit.OptionDrawTo(Bitmap dest);"
        ]
      }
    },
    {
      "signature": "drawing_options option_draw_to(bitmap dest,drawing_options opts);",
      "name": "option_draw_to",
      "method_name": null,
      "unique_global_name": "option_draw_to_bitmap_with_options",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Use this option to draw to a Bitmap. Pass dest the Bitmap you want to draw on.\nPass opts the other options you want use.",
      "brief": null,
      "return": {
        "type": "drawing_options",
        "description": "Drawing options that will draw onto a bitmap.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "dest": {
          "type": "bitmap",
          "description": "The bitmap to draw to.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "Values for the other options.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "bitmap_with_options",
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "drawing_options option_draw_to(bitmap dest, drawing_options opts)"
        ],
        "rust": [
          "pub fn option_draw_to(dest: bitmap, opts: drawing_options) -> drawing_options"
        ],
        "python": [
          "def option_draw_to_bitmap_with_options(dest, opts):"
        ],
        "pascal": [
          "function OptionDrawTo(dest: Bitmap; opts: DrawingOptions): DrawingOptions"
        ],
        "csharp": [
          "public static DrawingOptions SplashKit.OptionDrawTo(Bitmap dest, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "drawing_options option_draw_to(window dest);",
      "name": "option_draw_to",
      "method_name": null,
      "unique_global_name": "option_draw_to_window",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Use this option to draw to a specified Window. Pass dest the Window you want to draw on.",
      "brief": null,
      "return": {
        "type": "drawing_options",
        "description": "A drawing option that will draw to the indicated window.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "dest": {
          "type": "window",
          "description": "The window to draw onto.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "window",
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "drawing_options option_draw_to(window dest)"
        ],
        "rust": [
          "pub fn option_draw_to(dest: window) -> drawing_options"
        ],
        "python": [
          "def option_draw_to_window(dest):"
        ],
        "pascal": [
          "function OptionDrawTo(dest: Window): DrawingOptions"
        ],
        "csharp": [
          "public static DrawingOptions SplashKit.OptionDrawTo(Window dest);"
        ]
      }
    },
    {
      "signature": "drawing_options option_draw_to(window dest,drawing_options opts);",
      "name": "option_draw_to",
      "method_name": null,
      "unique_global_name": "option_draw_to_window_with_options",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Use this option to draw to a Bitmap. Pass dest the Bitmap you want to draw on to.\nPass opts the other options you want use.",
      "brief": null,
      "return": {
        "type": "drawing_options",
        "description": "A drawing option that will draw to the indicated window.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "dest": {
          "type": "window",
          "description": "The window to draw onto.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "Values for the other options.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "window_with_options",
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "drawing_options option_draw_to(window dest, drawing_options opts)"
        ],
        "rust": [
          "pub fn option_draw_to(dest: window, opts: drawing_options) -> drawing_options"
        ],
        "python": [
          "def option_draw_to_window_with_options(dest, opts):"
        ],
        "pascal": [
          "function OptionDrawTo(dest: Window; opts: DrawingOptions): DrawingOptions"
        ],
        "csharp": [
          "public static DrawingOptions SplashKit.OptionDrawTo(Window dest, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "drawing_options option_flip_x();",
      "name": "option_flip_x",
      "method_name": null,
      "unique_global_name": "option_flip_x",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Use this option to flip an image along its X axis.",
      "brief": null,
      "return": {
        "type": "drawing_options",
        "description": "Options that will flip bitmaps horizontally.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "drawing_options option_flip_x()"
        ],
        "rust": [
          "pub fn option_flip_x() -> drawing_options"
        ],
        "python": [
          "def option_flip_x():"
        ],
        "pascal": [
          "function OptionFlipX(): DrawingOptions"
        ],
        "csharp": [
          "public static DrawingOptions SplashKit.OptionFlipX();"
        ]
      }
    },
    {
      "signature": "drawing_options option_flip_x(drawing_options opts);",
      "name": "option_flip_x",
      "method_name": null,
      "unique_global_name": "option_flip_x_with_options",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Use this option to flip an image along its X axis.",
      "brief": null,
      "return": {
        "type": "drawing_options",
        "description": "Options that will flip bitmaps horizontally.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "opts": {
          "type": "drawing_options",
          "description": "Values for the other options.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "with_options",
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "drawing_options option_flip_x(drawing_options opts)"
        ],
        "rust": [
          "pub fn option_flip_x(opts: drawing_options) -> drawing_options"
        ],
        "python": [
          "def option_flip_x_with_options(opts):"
        ],
        "pascal": [
          "function OptionFlipX(opts: DrawingOptions): DrawingOptions"
        ],
        "csharp": [
          "public static DrawingOptions SplashKit.OptionFlipX(DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "drawing_options option_flip_xy();",
      "name": "option_flip_xy",
      "method_name": null,
      "unique_global_name": "option_flip_xy",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Use this option to flip the drawing of an image along both X and Y axis.",
      "brief": null,
      "return": {
        "type": "drawing_options",
        "description": "Options that flip bitmap drawing both vertically and\nhorizontally.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "drawing_options option_flip_xy()"
        ],
        "rust": [
          "pub fn option_flip_xy() -> drawing_options"
        ],
        "python": [
          "def option_flip_xy():"
        ],
        "pascal": [
          "function OptionFlipXy(): DrawingOptions"
        ],
        "csharp": [
          "public static DrawingOptions SplashKit.OptionFlipXy();"
        ]
      }
    },
    {
      "signature": "drawing_options option_flip_xy(drawing_options opts);",
      "name": "option_flip_xy",
      "method_name": null,
      "unique_global_name": "option_flip_xy_with_options",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Use this option to flip the drawing of an image along both X and Y axis.",
      "brief": null,
      "return": {
        "type": "drawing_options",
        "description": "Options that flip bitmap drawing both vertically and\nhorizontally.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "opts": {
          "type": "drawing_options",
          "description": "Values for the other options.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "with_options",
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "drawing_options option_flip_xy(drawing_options opts)"
        ],
        "rust": [
          "pub fn option_flip_xy(opts: drawing_options) -> drawing_options"
        ],
        "python": [
          "def option_flip_xy_with_options(opts):"
        ],
        "pascal": [
          "function OptionFlipXy(opts: DrawingOptions): DrawingOptions"
        ],
        "csharp": [
          "public static DrawingOptions SplashKit.OptionFlipXy(DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "drawing_options option_flip_y();",
      "name": "option_flip_y",
      "method_name": null,
      "unique_global_name": "option_flip_y",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Use this option to flip the drawing of an image along its Y axis.",
      "brief": null,
      "return": {
        "type": "drawing_options",
        "description": "Options that will flip bitmaps vertically.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "drawing_options option_flip_y()"
        ],
        "rust": [
          "pub fn option_flip_y() -> drawing_options"
        ],
        "python": [
          "def option_flip_y():"
        ],
        "pascal": [
          "function OptionFlipY(): DrawingOptions"
        ],
        "csharp": [
          "public static DrawingOptions SplashKit.OptionFlipY();"
        ]
      }
    },
    {
      "signature": "drawing_options option_flip_y(drawing_options opts);",
      "name": "option_flip_y",
      "method_name": null,
      "unique_global_name": "option_flip_y_with_options",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Use this option to flip the drawing of an image along its Y axis.",
      "brief": null,
      "return": {
        "type": "drawing_options",
        "description": "Options that will flip bitmaps vertically.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "opts": {
          "type": "drawing_options",
          "description": "Values for the other options.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "with_options",
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "drawing_options option_flip_y(drawing_options opts)"
        ],
        "rust": [
          "pub fn option_flip_y(opts: drawing_options) -> drawing_options"
        ],
        "python": [
          "def option_flip_y_with_options(opts):"
        ],
        "pascal": [
          "function OptionFlipY(opts: DrawingOptions): DrawingOptions"
        ],
        "csharp": [
          "public static DrawingOptions SplashKit.OptionFlipY(DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "drawing_options option_line_width(int width);",
      "name": "option_line_width",
      "method_name": null,
      "unique_global_name": "option_line_width",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Use this option to change the width of line drawings.",
      "brief": null,
      "return": {
        "type": "drawing_options",
        "description": "Options to draw lines with the indicated width.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "width": {
          "type": "int",
          "description": "The new line width for line drawing.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "drawing_options option_line_width(int width)"
        ],
        "rust": [
          "pub fn option_line_width(width: i32) -> drawing_options"
        ],
        "python": [
          "def option_line_width(width):"
        ],
        "pascal": [
          "function OptionLineWidth(width: Integer): DrawingOptions"
        ],
        "csharp": [
          "public static DrawingOptions SplashKit.OptionLineWidth(int width);"
        ]
      }
    },
    {
      "signature": "drawing_options option_line_width(int width,drawing_options opts);",
      "name": "option_line_width",
      "method_name": null,
      "unique_global_name": "option_line_width_with_options",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Use this option to change the width of line drawings.",
      "brief": null,
      "return": {
        "type": "drawing_options",
        "description": "Options to draw lines with the indicated width.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "width": {
          "type": "int",
          "description": "The new line width for line drawing.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "Values for the other options.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "with_options",
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "drawing_options option_line_width(int width, drawing_options opts)"
        ],
        "rust": [
          "pub fn option_line_width(width: i32, opts: drawing_options) -> drawing_options"
        ],
        "python": [
          "def option_line_width_with_options(width, opts):"
        ],
        "pascal": [
          "function OptionLineWidth(width: Integer; opts: DrawingOptions): DrawingOptions"
        ],
        "csharp": [
          "public static DrawingOptions SplashKit.OptionLineWidth(int width, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "drawing_options option_part_bmp(double x,double y,double w,double h);",
      "name": "option_part_bmp",
      "method_name": null,
      "unique_global_name": "option_part_bmp",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Use this option to draw only a part of a bitmap.",
      "brief": null,
      "return": {
        "type": "drawing_options",
        "description": "Options to draw parts of a bitmap.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "x": {
          "type": "double",
          "description": "The x coordinate of the part within the bitmap.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y": {
          "type": "double",
          "description": "The y coordinate of the part within the bitmap.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "w": {
          "type": "double",
          "description": "The width of the part within the bitmap.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "h": {
          "type": "double",
          "description": "The height of the part within the bitmap.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "drawing_options option_part_bmp(double x, double y, double w, double h)"
        ],
        "rust": [
          "pub fn option_part_bmp(x: f64, y: f64, w: f64, h: f64) -> drawing_options"
        ],
        "python": [
          "def option_part_bmp(x, y, w, h):"
        ],
        "pascal": [
          "function OptionPartBmp(x: Double; y: Double; w: Double; h: Double): DrawingOptions"
        ],
        "csharp": [
          "public static DrawingOptions SplashKit.OptionPartBmp(double x, double y, double w, double h);"
        ]
      }
    },
    {
      "signature": "drawing_options option_part_bmp(double x,double y,double w,double h,drawing_options opts);",
      "name": "option_part_bmp",
      "method_name": null,
      "unique_global_name": "option_part_bmp_with_options",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Use this option to draw only a part of a bitmap.",
      "brief": null,
      "return": {
        "type": "drawing_options",
        "description": "Options to draw parts of a bitmap.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "x": {
          "type": "double",
          "description": "The x coordinate of the part within the bitmap.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y": {
          "type": "double",
          "description": "The y coordinate of the part within the bitmap.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "w": {
          "type": "double",
          "description": "The width of the part within the bitmap.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "h": {
          "type": "double",
          "description": "The height of the part within the bitmap.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "Values for the other options.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "with_options",
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "drawing_options option_part_bmp(double x, double y, double w, double h, drawing_options opts)"
        ],
        "rust": [
          "pub fn option_part_bmp(x: f64, y: f64, w: f64, h: f64, opts: drawing_options) -> drawing_options"
        ],
        "python": [
          "def option_part_bmp_with_options(x, y, w, h, opts):"
        ],
        "pascal": [
          "function OptionPartBmp(x: Double; y: Double; w: Double; h: Double; opts: DrawingOptions): DrawingOptions"
        ],
        "csharp": [
          "public static DrawingOptions SplashKit.OptionPartBmp(double x, double y, double w, double h, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "drawing_options option_part_bmp(rectangle part);",
      "name": "option_part_bmp",
      "method_name": null,
      "unique_global_name": "option_part_bmp_from_rectangle",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Use this option to draw only part of a bitmap.",
      "brief": null,
      "return": {
        "type": "drawing_options",
        "description": "Options to draw parts of a bitmap.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "part": {
          "type": "rectangle",
          "description": "The rectangle of the part of the bitmap to draw.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "from_rectangle",
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "drawing_options option_part_bmp(rectangle part)"
        ],
        "rust": [
          "pub fn option_part_bmp(part: rectangle) -> drawing_options"
        ],
        "python": [
          "def option_part_bmp_from_rectangle(part):"
        ],
        "pascal": [
          "function OptionPartBmp(part: Rectangle): DrawingOptions"
        ],
        "csharp": [
          "public static DrawingOptions SplashKit.OptionPartBmp(Rectangle part);"
        ]
      }
    },
    {
      "signature": "drawing_options option_part_bmp(rectangle part,drawing_options opts);",
      "name": "option_part_bmp",
      "method_name": null,
      "unique_global_name": "option_part_bmp_from_rectangle_with_options",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Use this option to draw only part of a bitmap.",
      "brief": null,
      "return": {
        "type": "drawing_options",
        "description": "Options to draw parts of a bitmap.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "part": {
          "type": "rectangle",
          "description": "The rectangle of the part of the bitmap to draw.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "Values for the other options.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "from_rectangle_with_options",
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "drawing_options option_part_bmp(rectangle part, drawing_options opts)"
        ],
        "rust": [
          "pub fn option_part_bmp(part: rectangle, opts: drawing_options) -> drawing_options"
        ],
        "python": [
          "def option_part_bmp_from_rectangle_with_options(part, opts):"
        ],
        "pascal": [
          "function OptionPartBmp(part: Rectangle; opts: DrawingOptions): DrawingOptions"
        ],
        "csharp": [
          "public static DrawingOptions SplashKit.OptionPartBmp(Rectangle part, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "drawing_options option_rotate_bmp(double angle);",
      "name": "option_rotate_bmp",
      "method_name": null,
      "unique_global_name": "option_rotate_bmp",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Use this option to rotate a bitmap around its centre point.",
      "brief": null,
      "return": {
        "type": "drawing_options",
        "description": "Options that will rotate bitmaps around its center point.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "angle": {
          "type": "double",
          "description": "The angle to rotate bitmaps.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "drawing_options option_rotate_bmp(double angle)"
        ],
        "rust": [
          "pub fn option_rotate_bmp(angle: f64) -> drawing_options"
        ],
        "python": [
          "def option_rotate_bmp(angle):"
        ],
        "pascal": [
          "function OptionRotateBmp(angle: Double): DrawingOptions"
        ],
        "csharp": [
          "public static DrawingOptions SplashKit.OptionRotateBmp(double angle);"
        ]
      }
    },
    {
      "signature": "drawing_options option_rotate_bmp(double angle,double anchor_x,double anchor_y);",
      "name": "option_rotate_bmp",
      "method_name": null,
      "unique_global_name": "option_rotate_bmp_with_anchor",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Use this option to rotate the drawing of a bitmap. This allows you to set the\nanchor point and rotate around that by a number of degrees.\nPass opts the other options you want use.",
      "brief": null,
      "return": {
        "type": "drawing_options",
        "description": "Options that will rotate bitmaps around an anchor point.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "angle": {
          "type": "double",
          "description": "The angle to rotate bitmaps.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "anchor_x": {
          "type": "double",
          "description": "The x location of the anchor within the bitmap",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "anchor_y": {
          "type": "double",
          "description": "The y location of the anchor within the bitmap",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "with_anchor",
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "drawing_options option_rotate_bmp(double angle, double anchor_x, double anchor_y)"
        ],
        "rust": [
          "pub fn option_rotate_bmp(angle: f64, anchor_x: f64, anchor_y: f64) -> drawing_options"
        ],
        "python": [
          "def option_rotate_bmp_with_anchor(angle, anchor_x, anchor_y):"
        ],
        "pascal": [
          "function OptionRotateBmp(angle: Double; anchorX: Double; anchorY: Double): DrawingOptions"
        ],
        "csharp": [
          "public static DrawingOptions SplashKit.OptionRotateBmp(double angle, double anchorX, double anchorY);"
        ]
      }
    },
    {
      "signature": "drawing_options option_rotate_bmp(double angle,double anchor_x,double anchor_y,drawing_options opts);",
      "name": "option_rotate_bmp",
      "method_name": null,
      "unique_global_name": "option_rotate_bmp_with_anchor_and_options",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Use this option to rotate the drawing of a bitmap. This allows you to set the\nanchor point and rotate around that by a number of degrees.\nPass opts the other options you want use.",
      "brief": null,
      "return": {
        "type": "drawing_options",
        "description": "Options that will rotate bitmaps around an anchor point.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "angle": {
          "type": "double",
          "description": "The angle to rotate bitmaps.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "anchor_x": {
          "type": "double",
          "description": "The x location of the anchor within the bitmap",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "anchor_y": {
          "type": "double",
          "description": "The y location of the anchor within the bitmap",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "Values for the other options.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "with_anchor_and_options",
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "drawing_options option_rotate_bmp(double angle, double anchor_x, double anchor_y, drawing_options opts)"
        ],
        "rust": [
          "pub fn option_rotate_bmp(angle: f64, anchor_x: f64, anchor_y: f64, opts: drawing_options) -> drawing_options"
        ],
        "python": [
          "def option_rotate_bmp_with_anchor_and_options(angle, anchor_x, anchor_y, opts):"
        ],
        "pascal": [
          "function OptionRotateBmp(angle: Double; anchorX: Double; anchorY: Double; opts: DrawingOptions): DrawingOptions"
        ],
        "csharp": [
          "public static DrawingOptions SplashKit.OptionRotateBmp(double angle, double anchorX, double anchorY, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "drawing_options option_rotate_bmp(double angle,drawing_options opts);",
      "name": "option_rotate_bmp",
      "method_name": null,
      "unique_global_name": "option_rotate_bmp_with_options",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Use this option to rotate a bitmap around its centre point.",
      "brief": null,
      "return": {
        "type": "drawing_options",
        "description": "Options that will rotate bitmaps around its center point.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "angle": {
          "type": "double",
          "description": "The angle to rotate bitmaps.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "Values for the other options.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "with_options",
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "drawing_options option_rotate_bmp(double angle, drawing_options opts)"
        ],
        "rust": [
          "pub fn option_rotate_bmp(angle: f64, opts: drawing_options) -> drawing_options"
        ],
        "python": [
          "def option_rotate_bmp_with_options(angle, opts):"
        ],
        "pascal": [
          "function OptionRotateBmp(angle: Double; opts: DrawingOptions): DrawingOptions"
        ],
        "csharp": [
          "public static DrawingOptions SplashKit.OptionRotateBmp(double angle, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "drawing_options option_scale_bmp(double scale_x,double scale_y);",
      "name": "option_scale_bmp",
      "method_name": null,
      "unique_global_name": "option_scale_bmp",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Use this option to scale the drawing of bitmaps. You can scale x and y separately.",
      "brief": null,
      "return": {
        "type": "drawing_options",
        "description": "Options that will scale bitmaps along the x,y axis.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "scale_x": {
          "type": "double",
          "description": "The amount to scale bitmaps aalong the x axis",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "scale_y": {
          "type": "double",
          "description": "The amount to scale bitmaps aalong the y axis",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "drawing_options option_scale_bmp(double scale_x, double scale_y)"
        ],
        "rust": [
          "pub fn option_scale_bmp(scale_x: f64, scale_y: f64) -> drawing_options"
        ],
        "python": [
          "def option_scale_bmp(scale_x, scale_y):"
        ],
        "pascal": [
          "function OptionScaleBmp(scaleX: Double; scaleY: Double): DrawingOptions"
        ],
        "csharp": [
          "public static DrawingOptions SplashKit.OptionScaleBmp(double scaleX, double scaleY);"
        ]
      }
    },
    {
      "signature": "drawing_options option_scale_bmp(double scale_x,double scale_y,drawing_options opts);",
      "name": "option_scale_bmp",
      "method_name": null,
      "unique_global_name": "option_scale_bmp_with_options",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Use this option to scale the drawing of bitmaps. You can scale x and y separately.\nPass opts the other options you want use.",
      "brief": null,
      "return": {
        "type": "drawing_options",
        "description": "Options that will scale bitmaps along the x,y axis.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "scale_x": {
          "type": "double",
          "description": "The amount to scale bitmaps aalong the x axis",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "scale_y": {
          "type": "double",
          "description": "The amount to scale bitmaps aalong the y axis",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "Values for the other options.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "with_options",
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "drawing_options option_scale_bmp(double scale_x, double scale_y, drawing_options opts)"
        ],
        "rust": [
          "pub fn option_scale_bmp(scale_x: f64, scale_y: f64, opts: drawing_options) -> drawing_options"
        ],
        "python": [
          "def option_scale_bmp_with_options(scale_x, scale_y, opts):"
        ],
        "pascal": [
          "function OptionScaleBmp(scaleX: Double; scaleY: Double; opts: DrawingOptions): DrawingOptions"
        ],
        "csharp": [
          "public static DrawingOptions SplashKit.OptionScaleBmp(double scaleX, double scaleY, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "drawing_options option_to_screen();",
      "name": "option_to_screen",
      "method_name": null,
      "unique_global_name": "option_to_screen",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Use this option to draw to the screen, ignoring the positon of the\ncamera.",
      "brief": null,
      "return": {
        "type": "drawing_options",
        "description": "Options that will draw to the surface without camera effects.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "drawing_options option_to_screen()"
        ],
        "rust": [
          "pub fn option_to_screen() -> drawing_options"
        ],
        "python": [
          "def option_to_screen():"
        ],
        "pascal": [
          "function OptionToScreen(): DrawingOptions"
        ],
        "csharp": [
          "public static DrawingOptions SplashKit.OptionToScreen();"
        ]
      }
    },
    {
      "signature": "drawing_options option_to_screen(drawing_options opts);",
      "name": "option_to_screen",
      "method_name": null,
      "unique_global_name": "option_to_screen_with_options",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Use this option to draw to the screen, ignoring the positon of the\ncamera.",
      "brief": null,
      "return": {
        "type": "drawing_options",
        "description": "Options that will draw to the surface without camera effects.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "opts": {
          "type": "drawing_options",
          "description": "Values for the other options.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "with_options",
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "drawing_options option_to_screen(drawing_options opts)"
        ],
        "rust": [
          "pub fn option_to_screen(opts: drawing_options) -> drawing_options"
        ],
        "python": [
          "def option_to_screen_with_options(opts):"
        ],
        "pascal": [
          "function OptionToScreen(opts: DrawingOptions): DrawingOptions"
        ],
        "csharp": [
          "public static DrawingOptions SplashKit.OptionToScreen(DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "drawing_options option_to_world();",
      "name": "option_to_world",
      "method_name": null,
      "unique_global_name": "option_to_world",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Use this option to draw in World coordinates -- these are affected by\nthe movement of the camera.",
      "brief": null,
      "return": {
        "type": "drawing_options",
        "description": "Options that will draw with camera effects.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "drawing_options option_to_world()"
        ],
        "rust": [
          "pub fn option_to_world() -> drawing_options"
        ],
        "python": [
          "def option_to_world():"
        ],
        "pascal": [
          "function OptionToWorld(): DrawingOptions"
        ],
        "csharp": [
          "public static DrawingOptions SplashKit.OptionToWorld();"
        ]
      }
    },
    {
      "signature": "drawing_options option_to_world(drawing_options opts);",
      "name": "option_to_world",
      "method_name": null,
      "unique_global_name": "option_to_world_with_options",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Use this option to draw in World coordinates -- these are affected by\nthe movement of the camera.",
      "brief": null,
      "return": {
        "type": "drawing_options",
        "description": "Options that will draw with camera effects.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "opts": {
          "type": "drawing_options",
          "description": "Values for the other options.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "with_options",
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "drawing_options option_to_world(drawing_options opts)"
        ],
        "rust": [
          "pub fn option_to_world(opts: drawing_options) -> drawing_options"
        ],
        "python": [
          "def option_to_world_with_options(opts):"
        ],
        "pascal": [
          "function OptionToWorld(opts: DrawingOptions): DrawingOptions"
        ],
        "csharp": [
          "public static DrawingOptions SplashKit.OptionToWorld(DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "drawing_options option_with_animation(animation anim);",
      "name": "option_with_animation",
      "method_name": null,
      "unique_global_name": "option_with_animation",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Use details from the animation to select an appropriate cell from the\nbitmaps being drawn.",
      "brief": null,
      "return": {
        "type": "drawing_options",
        "description": "A drawing option that will draw the current cell from the\nanimation.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "anim": {
          "type": "animation",
          "description": "The animation with the cell details to be used.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "drawing_options option_with_animation(animation anim)"
        ],
        "rust": [
          "pub fn option_with_animation(anim: animation) -> drawing_options"
        ],
        "python": [
          "def option_with_animation(anim):"
        ],
        "pascal": [
          "function OptionWithAnimation(anim: Animation): DrawingOptions"
        ],
        "csharp": [
          "public static DrawingOptions SplashKit.OptionWithAnimation(Animation anim);"
        ]
      }
    },
    {
      "signature": "drawing_options option_with_animation(animation anim,drawing_options opts);",
      "name": "option_with_animation",
      "method_name": null,
      "unique_global_name": "option_with_animation_with_options",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Use details from the animation to select an appropriate cell from the\nbitmaps being drawn. This extends the passed in drawing options with\nthe animation details.",
      "brief": null,
      "return": {
        "type": "drawing_options",
        "description": "A drawing option that will draw the current cell from the\nanimation.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "anim": {
          "type": "animation",
          "description": "The animation with the cell details to be used.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "The existing options to extend.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "with_options",
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "drawing_options option_with_animation(animation anim, drawing_options opts)"
        ],
        "rust": [
          "pub fn option_with_animation(anim: animation, opts: drawing_options) -> drawing_options"
        ],
        "python": [
          "def option_with_animation_with_options(anim, opts):"
        ],
        "pascal": [
          "function OptionWithAnimation(anim: Animation; opts: DrawingOptions): DrawingOptions"
        ],
        "csharp": [
          "public static DrawingOptions SplashKit.OptionWithAnimation(Animation anim, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "drawing_options option_with_bitmap_cell(int cell);",
      "name": "option_with_bitmap_cell",
      "method_name": null,
      "unique_global_name": "option_with_bitmap_cell",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "When drawing the bitmap this will only draw the cell. To use this the bitmap\nneeds to have been provided with its cell details (see `bitmap_set_cell_details`).\nThis option overrides the animation or part drawing options.",
      "brief": null,
      "return": {
        "type": "drawing_options",
        "description": "A drawing option that will draw the selected cell.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "cell": {
          "type": "int",
          "description": "The cell to draw from the bitmap (-1 for entire bitmap)",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "drawing_options option_with_bitmap_cell(int cell)"
        ],
        "rust": [
          "pub fn option_with_bitmap_cell(cell: i32) -> drawing_options"
        ],
        "python": [
          "def option_with_bitmap_cell(cell):"
        ],
        "pascal": [
          "function OptionWithBitmapCell(cell: Integer): DrawingOptions"
        ],
        "csharp": [
          "public static DrawingOptions SplashKit.OptionWithBitmapCell(int cell);"
        ]
      }
    },
    {
      "signature": "drawing_options option_with_bitmap_cell(int cell,drawing_options opts);",
      "name": "option_with_bitmap_cell",
      "method_name": null,
      "unique_global_name": "option_with_bitmap_cell_with_options",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "When drawing the bitmap this will only draw the cell. To use this the bitmap\nneeds to have been provided with its cell details (see `bitmap_set_cell_details`).\nThis option overrides the animation or part drawing options. This extends\nthe passed in drawing options with the cell details.",
      "brief": null,
      "return": {
        "type": "drawing_options",
        "description": "A drawing option that will draw the selected cell.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "cell": {
          "type": "int",
          "description": "The cell to draw from the bitmap (-1 for entire bitmap)",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "The existing options to extend.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "with_options",
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "drawing_options option_with_bitmap_cell(int cell, drawing_options opts)"
        ],
        "rust": [
          "pub fn option_with_bitmap_cell(cell: i32, opts: drawing_options) -> drawing_options"
        ],
        "python": [
          "def option_with_bitmap_cell_with_options(cell, opts):"
        ],
        "pascal": [
          "function OptionWithBitmapCell(cell: Integer; opts: DrawingOptions): DrawingOptions"
        ],
        "csharp": [
          "public static DrawingOptions SplashKit.OptionWithBitmapCell(int cell, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "void draw_ellipse(color clr,const rectangle rect);",
      "name": "draw_ellipse",
      "method_name": null,
      "unique_global_name": "draw_ellipse_within_rectangle",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Draws an ellipse using the provided location, and size.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "clr": {
          "type": "color",
          "description": "The color of the ellipse",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "rect": {
          "type": "rectangle",
          "description": "Indicates the location and size of the ellipse",
          "is_pointer": false,
          "is_const": true,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "within_rectangle",
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "void draw_ellipse(color clr, const rectangle rect)"
        ],
        "rust": [
          "pub fn draw_ellipse(clr: color, rect: rectangle)"
        ],
        "python": [
          "def draw_ellipse_within_rectangle(clr, rect):"
        ],
        "pascal": [
          "procedure DrawEllipse(clr: Color; rect: Rectangle)"
        ],
        "csharp": [
          "public static void SplashKit.DrawEllipse(Color clr, Rectangle rect);"
        ]
      }
    },
    {
      "signature": "void draw_ellipse(color clr,const rectangle rect,drawing_options opts);",
      "name": "draw_ellipse",
      "method_name": null,
      "unique_global_name": "draw_ellipse_within_rectangle_with_options",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Draws an ellipse using the provided location, size, and drawing options.\n\nAt this stage ellipse drawing is not affected by line width from the\ndrawing options.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "clr": {
          "type": "color",
          "description": "The color of the ellipse",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "rect": {
          "type": "rectangle",
          "description": "Indicates the location and size of the ellipse",
          "is_pointer": false,
          "is_const": true,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "The drawing options",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "within_rectangle_with_options",
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "void draw_ellipse(color clr, const rectangle rect, drawing_options opts)"
        ],
        "rust": [
          "pub fn draw_ellipse(clr: color, rect: rectangle, opts: drawing_options)"
        ],
        "python": [
          "def draw_ellipse_within_rectangle_with_options(clr, rect, opts):"
        ],
        "pascal": [
          "procedure DrawEllipse(clr: Color; rect: Rectangle; opts: DrawingOptions)"
        ],
        "csharp": [
          "public static void SplashKit.DrawEllipse(Color clr, Rectangle rect, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "void draw_ellipse(color clr,double x,double y,double width,double height);",
      "name": "draw_ellipse",
      "method_name": null,
      "unique_global_name": "draw_ellipse",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Draws an ellipse using the provided location, and size.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "clr": {
          "type": "color",
          "description": "The color of the ellipse",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x": {
          "type": "double",
          "description": "The distance from the left of the bitmap or window to the\nleft edge of the ellipse",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y": {
          "type": "double",
          "description": "The distance from the top of the bitmap or window to the\ntop edge of the ellipse",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "width": {
          "type": "double",
          "description": "The width of the ellipse",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "height": {
          "type": "double",
          "description": "The height of the ellipse",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "void draw_ellipse(color clr, double x, double y, double width, double height)"
        ],
        "rust": [
          "pub fn draw_ellipse(clr: color, x: f64, y: f64, width: f64, height: f64)"
        ],
        "python": [
          "def draw_ellipse(clr, x, y, width, height):"
        ],
        "pascal": [
          "procedure DrawEllipse(clr: Color; x: Double; y: Double; width: Double; height: Double)"
        ],
        "csharp": [
          "public static void SplashKit.DrawEllipse(Color clr, double x, double y, double width, double height);"
        ]
      }
    },
    {
      "signature": "void draw_ellipse(color clr,double x,double y,double width,double height,drawing_options opts);",
      "name": "draw_ellipse",
      "method_name": null,
      "unique_global_name": "draw_ellipse_with_options",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Draws an ellipse using the provided location, size, and drawing options.\n\nAt this stage ellipse drawing is not affected by line width from the\ndrawing options.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "clr": {
          "type": "color",
          "description": "The color of the ellipse",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x": {
          "type": "double",
          "description": "The distance from the left of the bitmap or window to the\nleft edge of the ellipse",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y": {
          "type": "double",
          "description": "The distance from the top of the bitmap or window to the\ntop edge of the ellipse",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "width": {
          "type": "double",
          "description": "The width of the ellipse",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "height": {
          "type": "double",
          "description": "The height of the ellipse",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "The drawing options",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "with_options",
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "void draw_ellipse(color clr, double x, double y, double width, double height, drawing_options opts)"
        ],
        "rust": [
          "pub fn draw_ellipse(clr: color, x: f64, y: f64, width: f64, height: f64, opts: drawing_options)"
        ],
        "python": [
          "def draw_ellipse_with_options(clr, x, y, width, height, opts):"
        ],
        "pascal": [
          "procedure DrawEllipse(clr: Color; x: Double; y: Double; width: Double; height: Double; opts: DrawingOptions)"
        ],
        "csharp": [
          "public static void SplashKit.DrawEllipse(Color clr, double x, double y, double width, double height, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "void draw_ellipse_on_bitmap(bitmap destination,color clr,const rectangle rect);",
      "name": "draw_ellipse_on_bitmap",
      "method_name": "draw_ellipse",
      "unique_global_name": "draw_ellipse_on_bitmap_within_rectangle",
      "unique_method_name": "bitmap.draw_ellipse_within_rectangle",
      "suffix_name": null,
      "description": "Draws an ellipse on the given bitmap, using the provided location, and size.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "bitmap",
          "description": "the bitmap to draw the ellipse on",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The color of the ellipse",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "rect": {
          "type": "rectangle",
          "description": "Indicates the location and size of the ellipse",
          "is_pointer": false,
          "is_const": true,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "bitmap",
        "method": "draw_ellipse",
        "suffix": "within_rectangle",
        "group": "graphics",
        "self": "destination"
      },
      "signatures": {
        "cpp": [
          "void draw_ellipse_on_bitmap(bitmap destination, color clr, const rectangle rect)"
        ],
        "rust": [
          "pub fn draw_ellipse_on_bitmap(destination: bitmap, clr: color, rect: rectangle)"
        ],
        "python": [
          "def draw_ellipse_on_bitmap_within_rectangle(destination, clr, rect):"
        ],
        "pascal": [
          "procedure DrawEllipseOnBitmap(destination: Bitmap; clr: Color; rect: Rectangle)"
        ],
        "csharp": [
          "public void Bitmap.DrawEllipseOnBitmap(Color clr, Rectangle rect);",
          "public static void SplashKit.DrawEllipseOnBitmap(Bitmap destination, Color clr, Rectangle rect);"
        ]
      }
    },
    {
      "signature": "void draw_ellipse_on_bitmap(bitmap destination,color clr,const rectangle rect,drawing_options opts);",
      "name": "draw_ellipse_on_bitmap",
      "method_name": "draw_ellipse",
      "unique_global_name": "draw_ellipse_on_bitmap_within_rectangle_with_options",
      "unique_method_name": "bitmap.draw_ellipse_within_rectangle_with_options",
      "suffix_name": null,
      "description": "Draws an ellipse on the given bitmap, using the provided location, size, and drawing options.\n\nAt this stage ellipse drawing is not affected by line width from the\ndrawing options.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "bitmap",
          "description": "the bitmap to draw the ellipse on",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The color of the ellipse",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "rect": {
          "type": "rectangle",
          "description": "Indicates the location and size of the ellipse",
          "is_pointer": false,
          "is_const": true,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "The drawing options",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "bitmap",
        "method": "draw_ellipse",
        "suffix": "within_rectangle_with_options",
        "group": "graphics",
        "self": "destination"
      },
      "signatures": {
        "cpp": [
          "void draw_ellipse_on_bitmap(bitmap destination, color clr, const rectangle rect, drawing_options opts)"
        ],
        "rust": [
          "pub fn draw_ellipse_on_bitmap(destination: bitmap, clr: color, rect: rectangle, opts: drawing_options)"
        ],
        "python": [
          "def draw_ellipse_on_bitmap_within_rectangle_with_options(destination, clr, rect, opts):"
        ],
        "pascal": [
          "procedure DrawEllipseOnBitmap(destination: Bitmap; clr: Color; rect: Rectangle; opts: DrawingOptions)"
        ],
        "csharp": [
          "public void Bitmap.DrawEllipseOnBitmap(Color clr, Rectangle rect, DrawingOptions opts);",
          "public static void SplashKit.DrawEllipseOnBitmap(Bitmap destination, Color clr, Rectangle rect, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "void draw_ellipse_on_bitmap(bitmap destination,color clr,double x,double y,double width,double height);",
      "name": "draw_ellipse_on_bitmap",
      "method_name": "draw_ellipse",
      "unique_global_name": "draw_ellipse_on_bitmap",
      "unique_method_name": "bitmap.draw_ellipse",
      "suffix_name": null,
      "description": "Draws an ellipse on the given bitmap, using the provided location, and size.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "bitmap",
          "description": "the bitmap to draw the ellipse on",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The color of the ellipse",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x": {
          "type": "double",
          "description": "The distance from the left of the bitmap or bitmap to the\nleft edge of the ellipse",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y": {
          "type": "double",
          "description": "The distance from the top of the bitmap or bitmap to the\ntop edge of the ellipse",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "width": {
          "type": "double",
          "description": "The width of the ellipse",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "height": {
          "type": "double",
          "description": "The height of the ellipse",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "bitmap",
        "method": "draw_ellipse",
        "group": "graphics",
        "self": "destination"
      },
      "signatures": {
        "cpp": [
          "void draw_ellipse_on_bitmap(bitmap destination, color clr, double x, double y, double width, double height)"
        ],
        "rust": [
          "pub fn draw_ellipse_on_bitmap(destination: bitmap, clr: color, x: f64, y: f64, width: f64, height: f64)"
        ],
        "python": [
          "def draw_ellipse_on_bitmap(destination, clr, x, y, width, height):"
        ],
        "pascal": [
          "procedure DrawEllipseOnBitmap(destination: Bitmap; clr: Color; x: Double; y: Double; width: Double; height: Double)"
        ],
        "csharp": [
          "public void Bitmap.DrawEllipseOnBitmap(Color clr, double x, double y, double width, double height);",
          "public static void SplashKit.DrawEllipseOnBitmap(Bitmap destination, Color clr, double x, double y, double width, double height);"
        ]
      }
    },
    {
      "signature": "void draw_ellipse_on_bitmap(bitmap destination,color clr,double x,double y,double width,double height,drawing_options opts);",
      "name": "draw_ellipse_on_bitmap",
      "method_name": "draw_ellipse",
      "unique_global_name": "draw_ellipse_on_bitmap_with_options",
      "unique_method_name": "bitmap.draw_ellipse_with_options",
      "suffix_name": null,
      "description": "Draws an ellipse to the bitmap, using the provided location, size, and drawing options.\n\nAt this stage ellipse drawing is not affected by line width from the\ndrawing options.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "bitmap",
          "description": "the bitmap to draw the ellipse on",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The color of the ellipse",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x": {
          "type": "double",
          "description": "The distance from the left of the bitmap or bitmap to the\nleft edge of the ellipse",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y": {
          "type": "double",
          "description": "The distance from the top of the bitmap or bitmap to the\ntop edge of the ellipse",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "width": {
          "type": "double",
          "description": "The width of the ellipse",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "height": {
          "type": "double",
          "description": "The height of the ellipse",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "The drawing options",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "bitmap",
        "method": "draw_ellipse",
        "suffix": "with_options",
        "group": "graphics",
        "self": "destination"
      },
      "signatures": {
        "cpp": [
          "void draw_ellipse_on_bitmap(bitmap destination, color clr, double x, double y, double width, double height, drawing_options opts)"
        ],
        "rust": [
          "pub fn draw_ellipse_on_bitmap(destination: bitmap, clr: color, x: f64, y: f64, width: f64, height: f64, opts: drawing_options)"
        ],
        "python": [
          "def draw_ellipse_on_bitmap_with_options(destination, clr, x, y, width, height, opts):"
        ],
        "pascal": [
          "procedure DrawEllipseOnBitmap(destination: Bitmap; clr: Color; x: Double; y: Double; width: Double; height: Double; opts: DrawingOptions)"
        ],
        "csharp": [
          "public void Bitmap.DrawEllipseOnBitmap(Color clr, double x, double y, double width, double height, DrawingOptions opts);",
          "public static void SplashKit.DrawEllipseOnBitmap(Bitmap destination, Color clr, double x, double y, double width, double height, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "void draw_ellipse_on_window(window destination,color clr,const rectangle rect);",
      "name": "draw_ellipse_on_window",
      "method_name": "draw_ellipse",
      "unique_global_name": "draw_ellipse_on_window_within_rectangle",
      "unique_method_name": "window.draw_ellipse_within_rectangle",
      "suffix_name": null,
      "description": "Draws an ellipse on the given window, using the provided location, and size.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "window",
          "description": "the window to draw the ellipse on",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The color of the ellipse",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "rect": {
          "type": "rectangle",
          "description": "Indicates the location and size of the ellipse",
          "is_pointer": false,
          "is_const": true,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "window",
        "method": "draw_ellipse",
        "suffix": "within_rectangle",
        "group": "graphics",
        "self": "destination"
      },
      "signatures": {
        "cpp": [
          "void draw_ellipse_on_window(window destination, color clr, const rectangle rect)"
        ],
        "rust": [
          "pub fn draw_ellipse_on_window(destination: window, clr: color, rect: rectangle)"
        ],
        "python": [
          "def draw_ellipse_on_window_within_rectangle(destination, clr, rect):"
        ],
        "pascal": [
          "procedure DrawEllipseOnWindow(destination: Window; clr: Color; rect: Rectangle)"
        ],
        "csharp": [
          "public void Window.DrawEllipseOnWindow(Color clr, Rectangle rect);",
          "public static void SplashKit.DrawEllipseOnWindow(Window destination, Color clr, Rectangle rect);"
        ]
      }
    },
    {
      "signature": "void draw_ellipse_on_window(window destination,color clr,const rectangle rect,drawing_options opts);",
      "name": "draw_ellipse_on_window",
      "method_name": "draw_ellipse",
      "unique_global_name": "draw_ellipse_on_window_within_rectangle_with_options",
      "unique_method_name": "window.draw_ellipse_within_rectangle_with_options",
      "suffix_name": null,
      "description": "Draws an ellipse on the given window, using the provided location, size, and drawing options.\n\nAt this stage ellipse drawing is not affected by line width from the\ndrawing options.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "window",
          "description": "the window to draw the ellipse on",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The color of the ellipse",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "rect": {
          "type": "rectangle",
          "description": "Indicates the location and size of the ellipse",
          "is_pointer": false,
          "is_const": true,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "The drawing options",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "window",
        "method": "draw_ellipse",
        "suffix": "within_rectangle_with_options",
        "group": "graphics",
        "self": "destination"
      },
      "signatures": {
        "cpp": [
          "void draw_ellipse_on_window(window destination, color clr, const rectangle rect, drawing_options opts)"
        ],
        "rust": [
          "pub fn draw_ellipse_on_window(destination: window, clr: color, rect: rectangle, opts: drawing_options)"
        ],
        "python": [
          "def draw_ellipse_on_window_within_rectangle_with_options(destination, clr, rect, opts):"
        ],
        "pascal": [
          "procedure DrawEllipseOnWindow(destination: Window; clr: Color; rect: Rectangle; opts: DrawingOptions)"
        ],
        "csharp": [
          "public void Window.DrawEllipseOnWindow(Color clr, Rectangle rect, DrawingOptions opts);",
          "public static void SplashKit.DrawEllipseOnWindow(Window destination, Color clr, Rectangle rect, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "void draw_ellipse_on_window(window destination,color clr,double x,double y,double width,double height);",
      "name": "draw_ellipse_on_window",
      "method_name": "draw_ellipse",
      "unique_global_name": "draw_ellipse_on_window",
      "unique_method_name": "window.draw_ellipse",
      "suffix_name": null,
      "description": "Draws an ellipse on the given window, using the provided location, and size.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "window",
          "description": "the window to draw the ellipse on",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The color of the ellipse",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x": {
          "type": "double",
          "description": "The distance from the left of the bitmap or window to the\nleft edge of the ellipse",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y": {
          "type": "double",
          "description": "The distance from the top of the bitmap or window to the\ntop edge of the ellipse",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "width": {
          "type": "double",
          "description": "The width of the ellipse",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "height": {
          "type": "double",
          "description": "The height of the ellipse",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "window",
        "method": "draw_ellipse",
        "group": "graphics",
        "self": "destination"
      },
      "signatures": {
        "cpp": [
          "void draw_ellipse_on_window(window destination, color clr, double x, double y, double width, double height)"
        ],
        "rust": [
          "pub fn draw_ellipse_on_window(destination: window, clr: color, x: f64, y: f64, width: f64, height: f64)"
        ],
        "python": [
          "def draw_ellipse_on_window(destination, clr, x, y, width, height):"
        ],
        "pascal": [
          "procedure DrawEllipseOnWindow(destination: Window; clr: Color; x: Double; y: Double; width: Double; height: Double)"
        ],
        "csharp": [
          "public void Window.DrawEllipseOnWindow(Color clr, double x, double y, double width, double height);",
          "public static void SplashKit.DrawEllipseOnWindow(Window destination, Color clr, double x, double y, double width, double height);"
        ]
      }
    },
    {
      "signature": "void draw_ellipse_on_window(window destination,color clr,double x,double y,double width,double height,drawing_options opts);",
      "name": "draw_ellipse_on_window",
      "method_name": "draw_ellipse",
      "unique_global_name": "draw_ellipse_on_window_with_options",
      "unique_method_name": "window.draw_ellipse_with_options",
      "suffix_name": null,
      "description": "Draws an ellipse to the window, using the provided location, size, and drawing options.\n\nAt this stage ellipse drawing is not affected by line width from the\ndrawing options.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "window",
          "description": "the window to draw the ellipse on",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The color of the ellipse",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x": {
          "type": "double",
          "description": "The distance from the left of the bitmap or window to the\nleft edge of the ellipse",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y": {
          "type": "double",
          "description": "The distance from the top of the bitmap or window to the\ntop edge of the ellipse",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "width": {
          "type": "double",
          "description": "The width of the ellipse",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "height": {
          "type": "double",
          "description": "The height of the ellipse",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "The drawing options",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "window",
        "method": "draw_ellipse",
        "suffix": "with_options",
        "group": "graphics",
        "self": "destination"
      },
      "signatures": {
        "cpp": [
          "void draw_ellipse_on_window(window destination, color clr, double x, double y, double width, double height, drawing_options opts)"
        ],
        "rust": [
          "pub fn draw_ellipse_on_window(destination: window, clr: color, x: f64, y: f64, width: f64, height: f64, opts: drawing_options)"
        ],
        "python": [
          "def draw_ellipse_on_window_with_options(destination, clr, x, y, width, height, opts):"
        ],
        "pascal": [
          "procedure DrawEllipseOnWindow(destination: Window; clr: Color; x: Double; y: Double; width: Double; height: Double; opts: DrawingOptions)"
        ],
        "csharp": [
          "public void Window.DrawEllipseOnWindow(Color clr, double x, double y, double width, double height, DrawingOptions opts);",
          "public static void SplashKit.DrawEllipseOnWindow(Window destination, Color clr, double x, double y, double width, double height, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "void fill_ellipse(color clr,const rectangle rect);",
      "name": "fill_ellipse",
      "method_name": null,
      "unique_global_name": "fill_ellipse_within_rectangle",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Fill an ellipse using the provided location, and size.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "clr": {
          "type": "color",
          "description": "The color of the ellipse",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "rect": {
          "type": "rectangle",
          "description": "Indicates the location and size of the ellipse",
          "is_pointer": false,
          "is_const": true,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "within_rectangle",
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "void fill_ellipse(color clr, const rectangle rect)"
        ],
        "rust": [
          "pub fn fill_ellipse(clr: color, rect: rectangle)"
        ],
        "python": [
          "def fill_ellipse_within_rectangle(clr, rect):"
        ],
        "pascal": [
          "procedure FillEllipse(clr: Color; rect: Rectangle)"
        ],
        "csharp": [
          "public static void SplashKit.FillEllipse(Color clr, Rectangle rect);"
        ]
      }
    },
    {
      "signature": "void fill_ellipse(color clr,const rectangle rect,drawing_options opts);",
      "name": "fill_ellipse",
      "method_name": null,
      "unique_global_name": "fill_ellipse_within_rectangle_with_options",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Fills an ellipse using the provided location, size, and drawing options.\n\nAt this stage ellipse drawing is not affected by line width from the\ndrawing options.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "clr": {
          "type": "color",
          "description": "The color of the ellipse",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "rect": {
          "type": "rectangle",
          "description": "Indicates the location and size of the ellipse",
          "is_pointer": false,
          "is_const": true,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "The drawing options",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "within_rectangle_with_options",
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "void fill_ellipse(color clr, const rectangle rect, drawing_options opts)"
        ],
        "rust": [
          "pub fn fill_ellipse(clr: color, rect: rectangle, opts: drawing_options)"
        ],
        "python": [
          "def fill_ellipse_within_rectangle_with_options(clr, rect, opts):"
        ],
        "pascal": [
          "procedure FillEllipse(clr: Color; rect: Rectangle; opts: DrawingOptions)"
        ],
        "csharp": [
          "public static void SplashKit.FillEllipse(Color clr, Rectangle rect, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "void fill_ellipse(color clr,double x,double y,double width,double height);",
      "name": "fill_ellipse",
      "method_name": null,
      "unique_global_name": "fill_ellipse",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Fills an ellipse using the provided location, and size.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "clr": {
          "type": "color",
          "description": "The color of the ellipse",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x": {
          "type": "double",
          "description": "The distance from the left of the bitmap or window to the\nleft edge of the ellipse",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y": {
          "type": "double",
          "description": "The distance from the top of the bitmap or window to the\ntop edge of the ellipse",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "width": {
          "type": "double",
          "description": "The width of the ellipse",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "height": {
          "type": "double",
          "description": "The height of the ellipse",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "void fill_ellipse(color clr, double x, double y, double width, double height)"
        ],
        "rust": [
          "pub fn fill_ellipse(clr: color, x: f64, y: f64, width: f64, height: f64)"
        ],
        "python": [
          "def fill_ellipse(clr, x, y, width, height):"
        ],
        "pascal": [
          "procedure FillEllipse(clr: Color; x: Double; y: Double; width: Double; height: Double)"
        ],
        "csharp": [
          "public static void SplashKit.FillEllipse(Color clr, double x, double y, double width, double height);"
        ]
      }
    },
    {
      "signature": "void fill_ellipse(color clr,double x,double y,double width,double height,drawing_options opts);",
      "name": "fill_ellipse",
      "method_name": null,
      "unique_global_name": "fill_ellipse_with_options",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Fills an ellipse using the provided location, size, and drawing options.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "clr": {
          "type": "color",
          "description": "The color of the ellipse",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x": {
          "type": "double",
          "description": "The distance from the left of the bitmap or window to the\nleft edge of the ellipse",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y": {
          "type": "double",
          "description": "The distance from the top of the bitmap or window to the\ntop edge of the ellipse",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "width": {
          "type": "double",
          "description": "The width of the ellipse",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "height": {
          "type": "double",
          "description": "The height of the ellipse",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "The drawing options",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "with_options",
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "void fill_ellipse(color clr, double x, double y, double width, double height, drawing_options opts)"
        ],
        "rust": [
          "pub fn fill_ellipse(clr: color, x: f64, y: f64, width: f64, height: f64, opts: drawing_options)"
        ],
        "python": [
          "def fill_ellipse_with_options(clr, x, y, width, height, opts):"
        ],
        "pascal": [
          "procedure FillEllipse(clr: Color; x: Double; y: Double; width: Double; height: Double; opts: DrawingOptions)"
        ],
        "csharp": [
          "public static void SplashKit.FillEllipse(Color clr, double x, double y, double width, double height, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "void fill_ellipse_on_bitmap(bitmap destination,color clr,const rectangle rect);",
      "name": "fill_ellipse_on_bitmap",
      "method_name": "fill_ellipse",
      "unique_global_name": "fill_ellipse_on_bitmap_within_rectangle",
      "unique_method_name": "bitmap.fill_ellipse_within_rectangle",
      "suffix_name": null,
      "description": "Fill an ellipse on the given bitmap, using the provided location, and size.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "bitmap",
          "description": "the bitmap to draw the ellipse on",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The color of the ellipse",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "rect": {
          "type": "rectangle",
          "description": "Indicates the location and size of the ellipse",
          "is_pointer": false,
          "is_const": true,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "bitmap",
        "method": "fill_ellipse",
        "suffix": "within_rectangle",
        "group": "graphics",
        "self": "destination"
      },
      "signatures": {
        "cpp": [
          "void fill_ellipse_on_bitmap(bitmap destination, color clr, const rectangle rect)"
        ],
        "rust": [
          "pub fn fill_ellipse_on_bitmap(destination: bitmap, clr: color, rect: rectangle)"
        ],
        "python": [
          "def fill_ellipse_on_bitmap_within_rectangle(destination, clr, rect):"
        ],
        "pascal": [
          "procedure FillEllipseOnBitmap(destination: Bitmap; clr: Color; rect: Rectangle)"
        ],
        "csharp": [
          "public void Bitmap.FillEllipseOnBitmap(Color clr, Rectangle rect);",
          "public static void SplashKit.FillEllipseOnBitmap(Bitmap destination, Color clr, Rectangle rect);"
        ]
      }
    },
    {
      "signature": "void fill_ellipse_on_bitmap(bitmap destination,color clr,const rectangle rect,drawing_options opts);",
      "name": "fill_ellipse_on_bitmap",
      "method_name": "fill_ellipse",
      "unique_global_name": "fill_ellipse_on_bitmap_within_rectangle_with_options",
      "unique_method_name": "bitmap.fill_ellipse_within_rectangle_with_options",
      "suffix_name": null,
      "description": "Fills an ellipse on the given bitmap, using the provided location, size, and drawing options.\n\nAt this stage ellipse drawing is not affected by line width from the\ndrawing options.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "bitmap",
          "description": "the bitmap to draw the ellipse on",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The color of the ellipse",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "rect": {
          "type": "rectangle",
          "description": "Indicates the location and size of the ellipse",
          "is_pointer": false,
          "is_const": true,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "The drawing options",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "bitmap",
        "method": "fill_ellipse",
        "suffix": "within_rectangle_with_options",
        "group": "graphics",
        "self": "destination"
      },
      "signatures": {
        "cpp": [
          "void fill_ellipse_on_bitmap(bitmap destination, color clr, const rectangle rect, drawing_options opts)"
        ],
        "rust": [
          "pub fn fill_ellipse_on_bitmap(destination: bitmap, clr: color, rect: rectangle, opts: drawing_options)"
        ],
        "python": [
          "def fill_ellipse_on_bitmap_within_rectangle_with_options(destination, clr, rect, opts):"
        ],
        "pascal": [
          "procedure FillEllipseOnBitmap(destination: Bitmap; clr: Color; rect: Rectangle; opts: DrawingOptions)"
        ],
        "csharp": [
          "public void Bitmap.FillEllipseOnBitmap(Color clr, Rectangle rect, DrawingOptions opts);",
          "public static void SplashKit.FillEllipseOnBitmap(Bitmap destination, Color clr, Rectangle rect, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "void fill_ellipse_on_bitmap(bitmap destination,color clr,double x,double y,double width,double height);",
      "name": "fill_ellipse_on_bitmap",
      "method_name": "fill_ellipse",
      "unique_global_name": "fill_ellipse_on_bitmap",
      "unique_method_name": "bitmap.fill_ellipse",
      "suffix_name": null,
      "description": "Fills an ellipse on the given bitmap, using the provided location, and size.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "bitmap",
          "description": "the bitmap to draw the ellipse on",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The color of the ellipse",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x": {
          "type": "double",
          "description": "The distance from the left of the bitmap or bitmap to the\nleft edge of the ellipse",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y": {
          "type": "double",
          "description": "The distance from the top of the bitmap or bitmap to the\ntop edge of the ellipse",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "width": {
          "type": "double",
          "description": "The width of the ellipse",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "height": {
          "type": "double",
          "description": "The height of the ellipse",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "bitmap",
        "method": "fill_ellipse",
        "group": "graphics",
        "self": "destination"
      },
      "signatures": {
        "cpp": [
          "void fill_ellipse_on_bitmap(bitmap destination, color clr, double x, double y, double width, double height)"
        ],
        "rust": [
          "pub fn fill_ellipse_on_bitmap(destination: bitmap, clr: color, x: f64, y: f64, width: f64, height: f64)"
        ],
        "python": [
          "def fill_ellipse_on_bitmap(destination, clr, x, y, width, height):"
        ],
        "pascal": [
          "procedure FillEllipseOnBitmap(destination: Bitmap; clr: Color; x: Double; y: Double; width: Double; height: Double)"
        ],
        "csharp": [
          "public void Bitmap.FillEllipseOnBitmap(Color clr, double x, double y, double width, double height);",
          "public static void SplashKit.FillEllipseOnBitmap(Bitmap destination, Color clr, double x, double y, double width, double height);"
        ]
      }
    },
    {
      "signature": "void fill_ellipse_on_bitmap(bitmap destination,color clr,double x,double y,double width,double height,drawing_options opts);",
      "name": "fill_ellipse_on_bitmap",
      "method_name": "fill_ellipse",
      "unique_global_name": "fill_ellipse_on_bitmap_with_options",
      "unique_method_name": "bitmap.fill_ellipse_with_options",
      "suffix_name": null,
      "description": "Fills an ellipse on the given bitmap, using the provided location, size, and drawing options.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "bitmap",
          "description": "the bitmap to draw the ellipse on",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The color of the ellipse",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x": {
          "type": "double",
          "description": "The distance from the left of the bitmap or bitmap to the\nleft edge of the ellipse",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y": {
          "type": "double",
          "description": "The distance from the top of the bitmap or bitmap to the\ntop edge of the ellipse",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "width": {
          "type": "double",
          "description": "The width of the ellipse",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "height": {
          "type": "double",
          "description": "The height of the ellipse",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "The drawing options",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "bitmap",
        "method": "fill_ellipse",
        "suffix": "with_options",
        "group": "graphics",
        "self": "destination"
      },
      "signatures": {
        "cpp": [
          "void fill_ellipse_on_bitmap(bitmap destination, color clr, double x, double y, double width, double height, drawing_options opts)"
        ],
        "rust": [
          "pub fn fill_ellipse_on_bitmap(destination: bitmap, clr: color, x: f64, y: f64, width: f64, height: f64, opts: drawing_options)"
        ],
        "python": [
          "def fill_ellipse_on_bitmap_with_options(destination, clr, x, y, width, height, opts):"
        ],
        "pascal": [
          "procedure FillEllipseOnBitmap(destination: Bitmap; clr: Color; x: Double; y: Double; width: Double; height: Double; opts: DrawingOptions)"
        ],
        "csharp": [
          "public void Bitmap.FillEllipseOnBitmap(Color clr, double x, double y, double width, double height, DrawingOptions opts);",
          "public static void SplashKit.FillEllipseOnBitmap(Bitmap destination, Color clr, double x, double y, double width, double height, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "void fill_ellipse_on_window(window destination,color clr,const rectangle rect);",
      "name": "fill_ellipse_on_window",
      "method_name": "fill_ellipse",
      "unique_global_name": "fill_ellipse_on_window_within_rectangle",
      "unique_method_name": "window.fill_ellipse_within_rectangle",
      "suffix_name": null,
      "description": "Fill an ellipse on the given window, using the provided location, and size.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "window",
          "description": "the window to draw the ellipse on",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The color of the ellipse",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "rect": {
          "type": "rectangle",
          "description": "Indicates the location and size of the ellipse",
          "is_pointer": false,
          "is_const": true,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "window",
        "method": "fill_ellipse",
        "suffix": "within_rectangle",
        "group": "graphics",
        "self": "destination"
      },
      "signatures": {
        "cpp": [
          "void fill_ellipse_on_window(window destination, color clr, const rectangle rect)"
        ],
        "rust": [
          "pub fn fill_ellipse_on_window(destination: window, clr: color, rect: rectangle)"
        ],
        "python": [
          "def fill_ellipse_on_window_within_rectangle(destination, clr, rect):"
        ],
        "pascal": [
          "procedure FillEllipseOnWindow(destination: Window; clr: Color; rect: Rectangle)"
        ],
        "csharp": [
          "public void Window.FillEllipseOnWindow(Color clr, Rectangle rect);",
          "public static void SplashKit.FillEllipseOnWindow(Window destination, Color clr, Rectangle rect);"
        ]
      }
    },
    {
      "signature": "void fill_ellipse_on_window(window destination,color clr,const rectangle rect,drawing_options opts);",
      "name": "fill_ellipse_on_window",
      "method_name": "fill_ellipse",
      "unique_global_name": "fill_ellipse_on_window_within_rectangle_with_options",
      "unique_method_name": "window.fill_ellipse_within_rectangle_with_options",
      "suffix_name": null,
      "description": "Fills an ellipse on the given window, using the provided location, size, and drawing options.\n\nAt this stage ellipse drawing is not affected by line width from the\ndrawing options.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "window",
          "description": "the window to draw the ellipse on",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The color of the ellipse",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "rect": {
          "type": "rectangle",
          "description": "Indicates the location and size of the ellipse",
          "is_pointer": false,
          "is_const": true,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "The drawing options",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "window",
        "method": "fill_ellipse",
        "suffix": "within_rectangle_with_options",
        "group": "graphics",
        "self": "destination"
      },
      "signatures": {
        "cpp": [
          "void fill_ellipse_on_window(window destination, color clr, const rectangle rect, drawing_options opts)"
        ],
        "rust": [
          "pub fn fill_ellipse_on_window(destination: window, clr: color, rect: rectangle, opts: drawing_options)"
        ],
        "python": [
          "def fill_ellipse_on_window_within_rectangle_with_options(destination, clr, rect, opts):"
        ],
        "pascal": [
          "procedure FillEllipseOnWindow(destination: Window; clr: Color; rect: Rectangle; opts: DrawingOptions)"
        ],
        "csharp": [
          "public void Window.FillEllipseOnWindow(Color clr, Rectangle rect, DrawingOptions opts);",
          "public static void SplashKit.FillEllipseOnWindow(Window destination, Color clr, Rectangle rect, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "void fill_ellipse_on_window(window destination,color clr,double x,double y,double width,double height);",
      "name": "fill_ellipse_on_window",
      "method_name": "fill_ellipse",
      "unique_global_name": "fill_ellipse_on_window",
      "unique_method_name": "window.fill_ellipse",
      "suffix_name": null,
      "description": "Fills an ellipse on the given window, using the provided location, and size.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "window",
          "description": "the window to draw the ellipse on",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The color of the ellipse",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x": {
          "type": "double",
          "description": "The distance from the left of the bitmap or window to the\nleft edge of the ellipse",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y": {
          "type": "double",
          "description": "The distance from the top of the bitmap or window to the\ntop edge of the ellipse",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "width": {
          "type": "double",
          "description": "The width of the ellipse",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "height": {
          "type": "double",
          "description": "The height of the ellipse",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "window",
        "method": "fill_ellipse",
        "group": "graphics",
        "self": "destination"
      },
      "signatures": {
        "cpp": [
          "void fill_ellipse_on_window(window destination, color clr, double x, double y, double width, double height)"
        ],
        "rust": [
          "pub fn fill_ellipse_on_window(destination: window, clr: color, x: f64, y: f64, width: f64, height: f64)"
        ],
        "python": [
          "def fill_ellipse_on_window(destination, clr, x, y, width, height):"
        ],
        "pascal": [
          "procedure FillEllipseOnWindow(destination: Window; clr: Color; x: Double; y: Double; width: Double; height: Double)"
        ],
        "csharp": [
          "public void Window.FillEllipseOnWindow(Color clr, double x, double y, double width, double height);",
          "public static void SplashKit.FillEllipseOnWindow(Window destination, Color clr, double x, double y, double width, double height);"
        ]
      }
    },
    {
      "signature": "void fill_ellipse_on_window(window destination,color clr,double x,double y,double width,double height,drawing_options opts);",
      "name": "fill_ellipse_on_window",
      "method_name": "fill_ellipse",
      "unique_global_name": "fill_ellipse_on_window_with_options",
      "unique_method_name": "window.fill_ellipse_with_options",
      "suffix_name": null,
      "description": "Fills an ellipse on the given window, using the provided location, size, and drawing options.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "window",
          "description": "the window to draw the ellipse on",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The color of the ellipse",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x": {
          "type": "double",
          "description": "The distance from the left of the bitmap or window to the\nleft edge of the ellipse",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y": {
          "type": "double",
          "description": "The distance from the top of the bitmap or window to the\ntop edge of the ellipse",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "width": {
          "type": "double",
          "description": "The width of the ellipse",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "height": {
          "type": "double",
          "description": "The height of the ellipse",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "The drawing options",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "window",
        "method": "fill_ellipse",
        "suffix": "with_options",
        "group": "graphics",
        "self": "destination"
      },
      "signatures": {
        "cpp": [
          "void fill_ellipse_on_window(window destination, color clr, double x, double y, double width, double height, drawing_options opts)"
        ],
        "rust": [
          "pub fn fill_ellipse_on_window(destination: window, clr: color, x: f64, y: f64, width: f64, height: f64, opts: drawing_options)"
        ],
        "python": [
          "def fill_ellipse_on_window_with_options(destination, clr, x, y, width, height, opts):"
        ],
        "pascal": [
          "procedure FillEllipseOnWindow(destination: Window; clr: Color; x: Double; y: Double; width: Double; height: Double; opts: DrawingOptions)"
        ],
        "csharp": [
          "public void Window.FillEllipseOnWindow(Color clr, double x, double y, double width, double height, DrawingOptions opts);",
          "public static void SplashKit.FillEllipseOnWindow(Window destination, Color clr, double x, double y, double width, double height, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "void clear_screen();",
      "name": "clear_screen",
      "method_name": null,
      "unique_global_name": "clear_screen_to_white",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Clears the current screen to color white.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "suffix": "to_white",
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "void clear_screen()"
        ],
        "rust": [
          "pub fn clear_screen()"
        ],
        "python": [
          "def clear_screen_to_white():"
        ],
        "pascal": [
          "procedure ClearScreen()"
        ],
        "csharp": [
          "public static void SplashKit.ClearScreen();"
        ]
      }
    },
    {
      "signature": "void clear_screen(color clr);",
      "name": "clear_screen",
      "method_name": null,
      "unique_global_name": "clear_screen",
      "unique_method_name": null,
      "suffix_name": null,
      "description": null,
      "brief": "Clears all open windows to the `clr` provided.",
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "clr": {
          "type": "color",
          "description": "The color to clear the screen's background color to.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "void clear_screen(color clr)"
        ],
        "rust": [
          "pub fn clear_screen(clr: color)"
        ],
        "python": [
          "def clear_screen(clr):"
        ],
        "pascal": [
          "procedure ClearScreen(clr: Color)"
        ],
        "csharp": [
          "public static void SplashKit.ClearScreen(Color clr);"
        ]
      }
    },
    {
      "signature": "display display_details(unsigned int index);",
      "name": "display_details",
      "method_name": null,
      "unique_global_name": "display_details",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the details about one of the displays attached to the computer.",
      "brief": null,
      "return": {
        "type": "display",
        "description": "The details of this display",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "index": {
          "type": "unsigned int",
          "description": "The display number (from 0 to `number_of_displays` - 1)",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "display display_details(unsigned int index)"
        ],
        "rust": [
          "pub fn display_details(index: u32) -> display"
        ],
        "python": [
          "def display_details(index):"
        ],
        "pascal": [
          "function DisplayDetails(index: Cardinal): Display"
        ],
        "csharp": [
          "public static Display SplashKit.DisplayDetails(uint index);"
        ]
      }
    },
    {
      "signature": "int display_height(display disp);",
      "name": "display_height",
      "method_name": null,
      "unique_global_name": "display_height",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Return the height of the display in pixels, read from the system details.",
      "brief": null,
      "return": {
        "type": "int",
        "description": "The height of the display",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "disp": {
          "type": "display",
          "description": "The display details",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "display",
        "getter": "height",
        "group": "graphics",
        "self": "disp"
      },
      "signatures": {
        "cpp": [
          "int display_height(display disp)"
        ],
        "rust": [
          "pub fn display_height(disp: display) -> i32"
        ],
        "python": [
          "def display_height(disp):"
        ],
        "pascal": [
          "function DisplayHeight(disp: Display): Integer"
        ],
        "csharp": [
          "public int Display.Height { get }",
          "public static int SplashKit.DisplayHeight(Display disp);"
        ]
      }
    },
    {
      "signature": "string display_name(display disp);",
      "name": "display_name",
      "method_name": null,
      "unique_global_name": "display_name",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Return the name of the display, read from the system details.",
      "brief": null,
      "return": {
        "type": "string",
        "description": "The name of the display",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "disp": {
          "type": "display",
          "description": "The display details",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "display",
        "getter": "name",
        "group": "graphics",
        "self": "disp"
      },
      "signatures": {
        "cpp": [
          "string display_name(display disp)"
        ],
        "rust": [
          "pub fn display_name(disp: display) -> String"
        ],
        "python": [
          "def display_name(disp):"
        ],
        "pascal": [
          "function DisplayName(disp: Display): String"
        ],
        "csharp": [
          "public string Display.Name { get }",
          "public static string SplashKit.DisplayName(Display disp);"
        ]
      }
    },
    {
      "signature": "int display_width(display disp);",
      "name": "display_width",
      "method_name": null,
      "unique_global_name": "display_width",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Return the width of the display in pixels, read from the system details.",
      "brief": null,
      "return": {
        "type": "int",
        "description": "The width of the display",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "disp": {
          "type": "display",
          "description": "The display details",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "display",
        "getter": "width",
        "group": "graphics",
        "self": "disp"
      },
      "signatures": {
        "cpp": [
          "int display_width(display disp)"
        ],
        "rust": [
          "pub fn display_width(disp: display) -> i32"
        ],
        "python": [
          "def display_width(disp):"
        ],
        "pascal": [
          "function DisplayWidth(disp: Display): Integer"
        ],
        "csharp": [
          "public int Display.Width { get }",
          "public static int SplashKit.DisplayWidth(Display disp);"
        ]
      }
    },
    {
      "signature": "int display_x(display disp);",
      "name": "display_x",
      "method_name": null,
      "unique_global_name": "display_x",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Return a relative x location for the display in pixels, read from the\nsystem details. This can be used to work out the arrangement of displays.",
      "brief": null,
      "return": {
        "type": "int",
        "description": "The x location of the display",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "disp": {
          "type": "display",
          "description": "The display details",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "display",
        "getter": "x",
        "group": "graphics",
        "self": "disp"
      },
      "signatures": {
        "cpp": [
          "int display_x(display disp)"
        ],
        "rust": [
          "pub fn display_x(disp: display) -> i32"
        ],
        "python": [
          "def display_x(disp):"
        ],
        "pascal": [
          "function DisplayX(disp: Display): Integer"
        ],
        "csharp": [
          "public int Display.X { get }",
          "public static int SplashKit.DisplayX(Display disp);"
        ]
      }
    },
    {
      "signature": "int display_y(display disp);",
      "name": "display_y",
      "method_name": null,
      "unique_global_name": "display_y",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Return a relative y location for the display in pixels, read from the\nsystem details. This can be used to work out the arrangement of displays.",
      "brief": null,
      "return": {
        "type": "int",
        "description": "The y location of the display",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "disp": {
          "type": "display",
          "description": "The display details",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "display",
        "getter": "y",
        "group": "graphics",
        "self": "disp"
      },
      "signatures": {
        "cpp": [
          "int display_y(display disp)"
        ],
        "rust": [
          "pub fn display_y(disp: display) -> i32"
        ],
        "python": [
          "def display_y(disp):"
        ],
        "pascal": [
          "function DisplayY(disp: Display): Integer"
        ],
        "csharp": [
          "public int Display.Y { get }",
          "public static int SplashKit.DisplayY(Display disp);"
        ]
      }
    },
    {
      "signature": "int number_of_displays();",
      "name": "number_of_displays",
      "method_name": null,
      "unique_global_name": "number_of_displays",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the number of physical displays attached to the computer.",
      "brief": null,
      "return": {
        "type": "int",
        "description": "The number of displays attached to the computer",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "int number_of_displays()"
        ],
        "rust": [
          "pub fn number_of_displays() -> i32"
        ],
        "python": [
          "def number_of_displays():"
        ],
        "pascal": [
          "function NumberOfDisplays(): Integer"
        ],
        "csharp": [
          "public static int SplashKit.NumberOfDisplays();"
        ]
      }
    },
    {
      "signature": "void refresh_screen();",
      "name": "refresh_screen",
      "method_name": null,
      "unique_global_name": "refresh_screen",
      "unique_method_name": null,
      "suffix_name": null,
      "description": null,
      "brief": "Refreshes the current drawing on all open windows.",
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "void refresh_screen()"
        ],
        "rust": [
          "pub fn refresh_screen()"
        ],
        "python": [
          "def refresh_screen():"
        ],
        "pascal": [
          "procedure RefreshScreen()"
        ],
        "csharp": [
          "public static void SplashKit.RefreshScreen();"
        ]
      }
    },
    {
      "signature": "void refresh_screen(unsigned int target_fps);",
      "name": "refresh_screen",
      "method_name": null,
      "unique_global_name": "refresh_screen_with_target_fps",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Refreshes all open windows with a target FPS (frames per second). This will\ndelay a period of time that will approximately meet the targeted frames per\nsecond.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "target_fps": {
          "type": "unsigned int",
          "description": "The targeted frames per second to refresh the screen at.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "with_target_fps",
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "void refresh_screen(unsigned int target_fps)"
        ],
        "rust": [
          "pub fn refresh_screen(target_fps: u32)"
        ],
        "python": [
          "def refresh_screen_with_target_fps(target_fps):"
        ],
        "pascal": [
          "procedure RefreshScreen(targetFps: Cardinal)"
        ],
        "csharp": [
          "public static void SplashKit.RefreshScreen(uint targetFps);"
        ]
      }
    },
    {
      "signature": "void save_bitmap(bitmap bmp,const string &basename);",
      "name": "save_bitmap",
      "method_name": null,
      "unique_global_name": "save_bitmap",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Save the bitmap to the user's desktop.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "bmp": {
          "type": "bitmap",
          "description": "The bitmap to save",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "basename": {
          "type": "string",
          "description": "The base of the filename. If there is a file of this name\nalready, then the name will be changed to generate a\nunique filename.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "void save_bitmap(bitmap bmp, const string &basename)"
        ],
        "rust": [
          "pub fn save_bitmap(bmp: bitmap, basename: &String)"
        ],
        "python": [
          "def save_bitmap(bmp, basename):"
        ],
        "pascal": [
          "procedure SaveBitmap(bmp: Bitmap; const basename: String)"
        ],
        "csharp": [
          "public static void SplashKit.SaveBitmap(Bitmap bmp, string basename);"
        ]
      }
    },
    {
      "signature": "int screen_height();",
      "name": "screen_height",
      "method_name": null,
      "unique_global_name": "screen_height",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the height of the current window.",
      "brief": null,
      "return": {
        "type": "int",
        "description": "The height of the current window.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "int screen_height()"
        ],
        "rust": [
          "pub fn screen_height() -> i32"
        ],
        "python": [
          "def screen_height():"
        ],
        "pascal": [
          "function ScreenHeight(): Integer"
        ],
        "csharp": [
          "public static int SplashKit.ScreenHeight();"
        ]
      }
    },
    {
      "signature": "int screen_width();",
      "name": "screen_width",
      "method_name": null,
      "unique_global_name": "screen_width",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the width of the current window.",
      "brief": null,
      "return": {
        "type": "int",
        "description": "The width of the current window.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "int screen_width()"
        ],
        "rust": [
          "pub fn screen_width() -> i32"
        ],
        "python": [
          "def screen_width():"
        ],
        "pascal": [
          "function ScreenWidth(): Integer"
        ],
        "csharp": [
          "public static int SplashKit.ScreenWidth();"
        ]
      }
    },
    {
      "signature": "void take_screenshot(const string &basename);",
      "name": "take_screenshot",
      "method_name": null,
      "unique_global_name": "take_screenshot",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Saves a screenshot of the current window to a bitmap file. The file will\nbe saved onto the user's desktop.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "basename": {
          "type": "string",
          "description": "The base of the filename. If there is a file of this name\nalready, then the name will be changed to generate a\nunique filename.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "void take_screenshot(const string &basename)"
        ],
        "rust": [
          "pub fn take_screenshot(basename: &String)"
        ],
        "python": [
          "def take_screenshot(basename):"
        ],
        "pascal": [
          "procedure TakeScreenshot(const basename: String)"
        ],
        "csharp": [
          "public static void SplashKit.TakeScreenshot(string basename);"
        ]
      }
    },
    {
      "signature": "void take_screenshot(window wind,const string &basename);",
      "name": "take_screenshot",
      "method_name": null,
      "unique_global_name": "take_screenshot_of_window",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Saves a screenshot of the current window to a bitmap file. The file will\nbe saved onto the user's desktop.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "wind": {
          "type": "window",
          "description": "The window to capture in the screenshot",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "basename": {
          "type": "string",
          "description": "The base of the filename. If there is a file of this name\nalready, then the name will be changed to generate a\nunique filename.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "of_window",
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "void take_screenshot(window wind, const string &basename)"
        ],
        "rust": [
          "pub fn take_screenshot(wind: window, basename: &String)"
        ],
        "python": [
          "def take_screenshot_of_window(wind, basename):"
        ],
        "pascal": [
          "procedure TakeScreenshot(wind: Window; const basename: String)"
        ],
        "csharp": [
          "public static void SplashKit.TakeScreenshot(Window wind, string basename);"
        ]
      }
    },
    {
      "signature": "circle bitmap_bounding_circle(bitmap bmp,const point_2d &pt);",
      "name": "bitmap_bounding_circle",
      "method_name": "bounding_circle",
      "unique_global_name": "bitmap_bounding_circle",
      "unique_method_name": "bitmap.bounding_circle",
      "suffix_name": null,
      "description": "Returns a circle that will encompass the entire bitamp.",
      "brief": null,
      "return": {
        "type": "circle",
        "description": "A circle that surrounds the bitmap.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "bmp": {
          "type": "bitmap",
          "description": "The bitmap to encompass.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "pt": {
          "type": "point_2d",
          "description": "The point where the bitmap is located.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "bitmap",
        "method": "bounding_circle",
        "group": "graphics",
        "static": "images",
        "self": "bmp"
      },
      "signatures": {
        "cpp": [
          "circle bitmap_bounding_circle(bitmap bmp, const point_2d &pt)"
        ],
        "rust": [
          "pub fn bitmap_bounding_circle(bmp: bitmap, pt: &point_2d) -> circle"
        ],
        "python": [
          "def bitmap_bounding_circle(bmp, pt):"
        ],
        "pascal": [
          "function BitmapBoundingCircle(bmp: Bitmap; const pt: Point2D): Circle"
        ],
        "csharp": [
          "public Circle Bitmap.BitmapBoundingCircle(Point2D pt);",
          "public static Circle SplashKit.BitmapBoundingCircle(Bitmap bmp, Point2D pt);"
        ]
      }
    },
    {
      "signature": "rectangle bitmap_bounding_rectangle(bitmap bmp);",
      "name": "bitmap_bounding_rectangle",
      "method_name": "bounding_rectangle",
      "unique_global_name": "bitmap_bounding_rectangle",
      "unique_method_name": "bitmap.bounding_rectangle",
      "suffix_name": null,
      "description": "Returns a rectangle that is the same size as a bitmap (the whole bitmap).",
      "brief": null,
      "return": {
        "type": "rectangle",
        "description": "A rectangle with the same size as the bitmap.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "bmp": {
          "type": "bitmap",
          "description": "The bitmap",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "bitmap",
        "method": "bounding_rectangle",
        "group": "graphics",
        "static": "images",
        "self": "bmp"
      },
      "signatures": {
        "cpp": [
          "rectangle bitmap_bounding_rectangle(bitmap bmp)"
        ],
        "rust": [
          "pub fn bitmap_bounding_rectangle(bmp: bitmap) -> rectangle"
        ],
        "python": [
          "def bitmap_bounding_rectangle(bmp):"
        ],
        "pascal": [
          "function BitmapBoundingRectangle(bmp: Bitmap): Rectangle"
        ],
        "csharp": [
          "public Rectangle Bitmap.BitmapBoundingRectangle();",
          "public static Rectangle SplashKit.BitmapBoundingRectangle(Bitmap bmp);"
        ]
      }
    },
    {
      "signature": "rectangle bitmap_bounding_rectangle(bitmap bmp,double x,double y);",
      "name": "bitmap_bounding_rectangle",
      "method_name": "bounding_rectangle",
      "unique_global_name": "bitmap_bounding_rectangle_at_location",
      "unique_method_name": "bitmap.bounding_rectangle_at_location",
      "suffix_name": null,
      "description": "Returns a rectangle that is the same size as the bitmap and is located at\nthe indicated position.",
      "brief": null,
      "return": {
        "type": "rectangle",
        "description": "A rectangle with the same size as the bitmap, at the\nindicated location.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "bmp": {
          "type": "bitmap",
          "description": "The bitmap",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x": {
          "type": "double",
          "description": "The x location of the rectangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y": {
          "type": "double",
          "description": "The y location of the rectangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "bitmap",
        "method": "bounding_rectangle",
        "suffix": "at_location",
        "group": "graphics",
        "static": "images",
        "self": "bmp"
      },
      "signatures": {
        "cpp": [
          "rectangle bitmap_bounding_rectangle(bitmap bmp, double x, double y)"
        ],
        "rust": [
          "pub fn bitmap_bounding_rectangle(bmp: bitmap, x: f64, y: f64) -> rectangle"
        ],
        "python": [
          "def bitmap_bounding_rectangle_at_location(bmp, x, y):"
        ],
        "pascal": [
          "function BitmapBoundingRectangle(bmp: Bitmap; x: Double; y: Double): Rectangle"
        ],
        "csharp": [
          "public Rectangle Bitmap.BitmapBoundingRectangle(double x, double y);",
          "public static Rectangle SplashKit.BitmapBoundingRectangle(Bitmap bmp, double x, double y);"
        ]
      }
    },
    {
      "signature": "point_2d bitmap_cell_center(bitmap bmp);",
      "name": "bitmap_cell_center",
      "method_name": null,
      "unique_global_name": "bitmap_cell_center",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "This returns a point that represents the center of a cell from this\nbitmap in local space.",
      "brief": null,
      "return": {
        "type": "point_2d",
        "description": "A point in the center of a cell for this bitmap.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "bmp": {
          "type": "bitmap",
          "description": "The bitmap to get the center of.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "bitmap",
        "getter": "cell_center",
        "group": "graphics",
        "static": "images",
        "self": "bmp"
      },
      "signatures": {
        "cpp": [
          "point_2d bitmap_cell_center(bitmap bmp)"
        ],
        "rust": [
          "pub fn bitmap_cell_center(bmp: bitmap) -> point_2d"
        ],
        "python": [
          "def bitmap_cell_center(bmp):"
        ],
        "pascal": [
          "function BitmapCellCenter(bmp: Bitmap): Point2D"
        ],
        "csharp": [
          "public Point2D Bitmap.CellCenter { get }",
          "public static Point2D SplashKit.BitmapCellCenter(Bitmap bmp);"
        ]
      }
    },
    {
      "signature": "circle bitmap_cell_circle(bitmap bmp,double x,double y);",
      "name": "bitmap_cell_circle",
      "method_name": "cell_circle",
      "unique_global_name": "bitmap_cell_circle",
      "unique_method_name": "bitmap.cell_circle",
      "suffix_name": null,
      "description": "Returns a circle that will encompass the bitmap cell if it were drawn\nat the indicated point.",
      "brief": null,
      "return": {
        "type": "circle",
        "description": "A circle that will encompass the bitmap cell.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "bmp": {
          "type": "bitmap",
          "description": "The bitmap to get the details from.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x": {
          "type": "double",
          "description": "The the x location of the bitmap.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y": {
          "type": "double",
          "description": "The the y location of the bitmap.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "bitmap",
        "method": "cell_circle",
        "group": "graphics",
        "static": "images",
        "self": "bmp"
      },
      "signatures": {
        "cpp": [
          "circle bitmap_cell_circle(bitmap bmp, double x, double y)"
        ],
        "rust": [
          "pub fn bitmap_cell_circle(bmp: bitmap, x: f64, y: f64) -> circle"
        ],
        "python": [
          "def bitmap_cell_circle(bmp, x, y):"
        ],
        "pascal": [
          "function BitmapCellCircle(bmp: Bitmap; x: Double; y: Double): Circle"
        ],
        "csharp": [
          "public Circle Bitmap.BitmapCellCircle(double x, double y);",
          "public static Circle SplashKit.BitmapCellCircle(Bitmap bmp, double x, double y);"
        ]
      }
    },
    {
      "signature": "circle bitmap_cell_circle(bitmap bmp,const point_2d pt);",
      "name": "bitmap_cell_circle",
      "method_name": "cell_circle",
      "unique_global_name": "bitmap_cell_circle_at_point",
      "unique_method_name": "bitmap.cell_circle_at_point",
      "suffix_name": null,
      "description": "Returns a circle that will encompass the bitmap cell if it were drawn\nat the indicated point.",
      "brief": null,
      "return": {
        "type": "circle",
        "description": "A circle that will encompass the bitmap cell.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "bmp": {
          "type": "bitmap",
          "description": "The bitmap to get the details from.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "pt": {
          "type": "point_2d",
          "description": "The point indicating the location of the bitmap.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "bitmap",
        "method": "cell_circle",
        "suffix": "at_point",
        "group": "graphics",
        "static": "images",
        "self": "bmp"
      },
      "signatures": {
        "cpp": [
          "circle bitmap_cell_circle(bitmap bmp, const point_2d pt)"
        ],
        "rust": [
          "pub fn bitmap_cell_circle(bmp: bitmap, pt: point_2d) -> circle"
        ],
        "python": [
          "def bitmap_cell_circle_at_point(bmp, pt):"
        ],
        "pascal": [
          "function BitmapCellCircle(bmp: Bitmap; pt: Point2D): Circle"
        ],
        "csharp": [
          "public Circle Bitmap.BitmapCellCircle(Point2D pt);",
          "public static Circle SplashKit.BitmapCellCircle(Bitmap bmp, Point2D pt);"
        ]
      }
    },
    {
      "signature": "circle bitmap_cell_circle(bitmap bmp,const point_2d pt,double scale);",
      "name": "bitmap_cell_circle",
      "method_name": "cell_circle",
      "unique_global_name": "bitmap_cell_circle_at_point_with_scale",
      "unique_method_name": "bitmap.cell_circle_at_point_with_scale",
      "suffix_name": null,
      "description": "Returns a circle that will encompass the bitmap cell if it were drawn\nat the indicated point, with the provided scale.",
      "brief": null,
      "return": {
        "type": "circle",
        "description": "A circle that will encompass the bitmap cell.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "bmp": {
          "type": "bitmap",
          "description": "The bitmap to get the details from.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "pt": {
          "type": "point_2d",
          "description": "The point indicating the location of the bitmap.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "scale": {
          "type": "double",
          "description": "The scaling factor for the bitmap drawing.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "bitmap",
        "method": "cell_circle",
        "suffix": "at_point_with_scale",
        "group": "graphics",
        "static": "images",
        "self": "bmp"
      },
      "signatures": {
        "cpp": [
          "circle bitmap_cell_circle(bitmap bmp, const point_2d pt, double scale)"
        ],
        "rust": [
          "pub fn bitmap_cell_circle(bmp: bitmap, pt: point_2d, scale: f64) -> circle"
        ],
        "python": [
          "def bitmap_cell_circle_at_point_with_scale(bmp, pt, scale):"
        ],
        "pascal": [
          "function BitmapCellCircle(bmp: Bitmap; pt: Point2D; scale: Double): Circle"
        ],
        "csharp": [
          "public Circle Bitmap.BitmapCellCircle(Point2D pt, double scale);",
          "public static Circle SplashKit.BitmapCellCircle(Bitmap bmp, Point2D pt, double scale);"
        ]
      }
    },
    {
      "signature": "int bitmap_cell_columns(bitmap bmp);",
      "name": "bitmap_cell_columns",
      "method_name": null,
      "unique_global_name": "bitmap_cell_columns",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the number of cell columns in the bitmap.\nThis is setup using `bitmap_set_cell_details`",
      "brief": null,
      "return": {
        "type": "int",
        "description": "The number of cell columns",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "bmp": {
          "type": "bitmap",
          "description": "The bitmap to check",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "bitmap",
        "getter": "cell_columns",
        "group": "graphics",
        "static": "images",
        "self": "bmp"
      },
      "signatures": {
        "cpp": [
          "int bitmap_cell_columns(bitmap bmp)"
        ],
        "rust": [
          "pub fn bitmap_cell_columns(bmp: bitmap) -> i32"
        ],
        "python": [
          "def bitmap_cell_columns(bmp):"
        ],
        "pascal": [
          "function BitmapCellColumns(bmp: Bitmap): Integer"
        ],
        "csharp": [
          "public int Bitmap.CellColumns { get }",
          "public static int SplashKit.BitmapCellColumns(Bitmap bmp);"
        ]
      }
    },
    {
      "signature": "int bitmap_cell_count(bitmap bmp);",
      "name": "bitmap_cell_count",
      "method_name": null,
      "unique_global_name": "bitmap_cell_count",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the number of cells within the bitmap.",
      "brief": null,
      "return": {
        "type": "int",
        "description": "The number of individual cells within the bitmap.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "bmp": {
          "type": "bitmap",
          "description": "The bitmap to check.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "bitmap",
        "getter": "cell_count",
        "group": "graphics",
        "static": "images",
        "self": "bmp"
      },
      "signatures": {
        "cpp": [
          "int bitmap_cell_count(bitmap bmp)"
        ],
        "rust": [
          "pub fn bitmap_cell_count(bmp: bitmap) -> i32"
        ],
        "python": [
          "def bitmap_cell_count(bmp):"
        ],
        "pascal": [
          "function BitmapCellCount(bmp: Bitmap): Integer"
        ],
        "csharp": [
          "public int Bitmap.CellCount { get }",
          "public static int SplashKit.BitmapCellCount(Bitmap bmp);"
        ]
      }
    },
    {
      "signature": "int bitmap_cell_height(bitmap bmp);",
      "name": "bitmap_cell_height",
      "method_name": null,
      "unique_global_name": "bitmap_cell_height",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the height of each cell in this bitmap.",
      "brief": null,
      "return": {
        "type": "int",
        "description": "The height of each cells in bmp",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "bmp": {
          "type": "bitmap",
          "description": "The bitmap to get the details from.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "bitmap",
        "getter": "cell_height",
        "group": "graphics",
        "static": "images",
        "self": "bmp"
      },
      "signatures": {
        "cpp": [
          "int bitmap_cell_height(bitmap bmp)"
        ],
        "rust": [
          "pub fn bitmap_cell_height(bmp: bitmap) -> i32"
        ],
        "python": [
          "def bitmap_cell_height(bmp):"
        ],
        "pascal": [
          "function BitmapCellHeight(bmp: Bitmap): Integer"
        ],
        "csharp": [
          "public int Bitmap.CellHeight { get }",
          "public static int SplashKit.BitmapCellHeight(Bitmap bmp);"
        ]
      }
    },
    {
      "signature": "vector_2d bitmap_cell_offset(bitmap src,int cell);",
      "name": "bitmap_cell_offset",
      "method_name": "cell_offset",
      "unique_global_name": "bitmap_cell_offset",
      "unique_method_name": "bitmap.cell_offset",
      "suffix_name": null,
      "description": "Returns a vector that represents the movement needed to get to a given\ncell within a bitmap.",
      "brief": null,
      "return": {
        "type": "vector_2d",
        "description": "The offset needed to get to the cell from the top left of the bitmap.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "src": {
          "type": "bitmap",
          "description": "The bitmap with the cell details.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "cell": {
          "type": "int",
          "description": "The index of the cell",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "bitmap",
        "method": "cell_offset",
        "group": "graphics",
        "static": "images",
        "self": "src"
      },
      "signatures": {
        "cpp": [
          "vector_2d bitmap_cell_offset(bitmap src, int cell)"
        ],
        "rust": [
          "pub fn bitmap_cell_offset(src: bitmap, cell: i32) -> vector_2d"
        ],
        "python": [
          "def bitmap_cell_offset(src, cell):"
        ],
        "pascal": [
          "function BitmapCellOffset(src: Bitmap; cell: Integer): Vector2D"
        ],
        "csharp": [
          "public Vector2D Bitmap.BitmapCellOffset(int cell);",
          "public static Vector2D SplashKit.BitmapCellOffset(Bitmap src, int cell);"
        ]
      }
    },
    {
      "signature": "rectangle bitmap_cell_rectangle(bitmap src);",
      "name": "bitmap_cell_rectangle",
      "method_name": "cell_rectangle",
      "unique_global_name": "bitmap_cell_rectangle",
      "unique_method_name": "bitmap.cell_rectangle",
      "suffix_name": null,
      "description": "Returns a rectangle that will encompass a cell of the bitmap.",
      "brief": null,
      "return": {
        "type": "rectangle",
        "description": "A rectangle with width and height from the bitmap's cell details.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "src": {
          "type": "bitmap",
          "description": "The bitmap to get the details from",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "bitmap",
        "method": "cell_rectangle",
        "group": "graphics",
        "static": "images",
        "self": "src"
      },
      "signatures": {
        "cpp": [
          "rectangle bitmap_cell_rectangle(bitmap src)"
        ],
        "rust": [
          "pub fn bitmap_cell_rectangle(src: bitmap) -> rectangle"
        ],
        "python": [
          "def bitmap_cell_rectangle(src):"
        ],
        "pascal": [
          "function BitmapCellRectangle(src: Bitmap): Rectangle"
        ],
        "csharp": [
          "public Rectangle Bitmap.BitmapCellRectangle();",
          "public static Rectangle SplashKit.BitmapCellRectangle(Bitmap src);"
        ]
      }
    },
    {
      "signature": "rectangle bitmap_cell_rectangle(bitmap src,const point_2d &pt);",
      "name": "bitmap_cell_rectangle",
      "method_name": "cell_rectangle",
      "unique_global_name": "bitmap_cell_rectangle_at_point",
      "unique_method_name": "bitmap.cell_rectangle_at_point",
      "suffix_name": null,
      "description": "Returns a rectangle that will encompass the bitmap cell if it were drawn\nat the indicated point.",
      "brief": null,
      "return": {
        "type": "rectangle",
        "description": "A rectangle at pt, with width and height from the bitmap's cell details.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "src": {
          "type": "bitmap",
          "description": "The bitmap to get the details from",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "pt": {
          "type": "point_2d",
          "description": "The point details for the rectangle.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "bitmap",
        "method": "cell_rectangle",
        "suffix": "at_point",
        "group": "graphics",
        "static": "images",
        "self": "src"
      },
      "signatures": {
        "cpp": [
          "rectangle bitmap_cell_rectangle(bitmap src, const point_2d &pt)"
        ],
        "rust": [
          "pub fn bitmap_cell_rectangle(src: bitmap, pt: &point_2d) -> rectangle"
        ],
        "python": [
          "def bitmap_cell_rectangle_at_point(src, pt):"
        ],
        "pascal": [
          "function BitmapCellRectangle(src: Bitmap; const pt: Point2D): Rectangle"
        ],
        "csharp": [
          "public Rectangle Bitmap.BitmapCellRectangle(Point2D pt);",
          "public static Rectangle SplashKit.BitmapCellRectangle(Bitmap src, Point2D pt);"
        ]
      }
    },
    {
      "signature": "int bitmap_cell_rows(bitmap bmp);",
      "name": "bitmap_cell_rows",
      "method_name": null,
      "unique_global_name": "bitmap_cell_rows",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the number of rows of cells in the bitmap. These details are set in\n`bitmap_set_cell_details`.",
      "brief": null,
      "return": {
        "type": "int",
        "description": "The number of rows of cells in the bitmap.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "bmp": {
          "type": "bitmap",
          "description": "The bitmap to get the details from.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "bitmap",
        "getter": "cell_rows",
        "group": "graphics",
        "static": "images",
        "self": "bmp"
      },
      "signatures": {
        "cpp": [
          "int bitmap_cell_rows(bitmap bmp)"
        ],
        "rust": [
          "pub fn bitmap_cell_rows(bmp: bitmap) -> i32"
        ],
        "python": [
          "def bitmap_cell_rows(bmp):"
        ],
        "pascal": [
          "function BitmapCellRows(bmp: Bitmap): Integer"
        ],
        "csharp": [
          "public int Bitmap.CellRows { get }",
          "public static int SplashKit.BitmapCellRows(Bitmap bmp);"
        ]
      }
    },
    {
      "signature": "int bitmap_cell_width(bitmap bmp);",
      "name": "bitmap_cell_width",
      "method_name": null,
      "unique_global_name": "bitmap_cell_width",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the width of each cell in this bitmap.",
      "brief": null,
      "return": {
        "type": "int",
        "description": "The width of each cells in bmp",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "bmp": {
          "type": "bitmap",
          "description": "The bitmap to get the details from.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "bitmap",
        "getter": "cell_width",
        "group": "graphics",
        "static": "images",
        "self": "bmp"
      },
      "signatures": {
        "cpp": [
          "int bitmap_cell_width(bitmap bmp)"
        ],
        "rust": [
          "pub fn bitmap_cell_width(bmp: bitmap) -> i32"
        ],
        "python": [
          "def bitmap_cell_width(bmp):"
        ],
        "pascal": [
          "function BitmapCellWidth(bmp: Bitmap): Integer"
        ],
        "csharp": [
          "public int Bitmap.CellWidth { get }",
          "public static int SplashKit.BitmapCellWidth(Bitmap bmp);"
        ]
      }
    },
    {
      "signature": "point_2d bitmap_center(bitmap bmp);",
      "name": "bitmap_center",
      "method_name": null,
      "unique_global_name": "bitmap_center",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "This returns a point that represents the center of the bitmap in local\nspace.",
      "brief": null,
      "return": {
        "type": "point_2d",
        "description": "A point in the center of the bitmap.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "bmp": {
          "type": "bitmap",
          "description": "The bitmap to get the center of.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "bitmap",
        "getter": "center",
        "group": "graphics",
        "static": "images",
        "self": "bmp"
      },
      "signatures": {
        "cpp": [
          "point_2d bitmap_center(bitmap bmp)"
        ],
        "rust": [
          "pub fn bitmap_center(bmp: bitmap) -> point_2d"
        ],
        "python": [
          "def bitmap_center(bmp):"
        ],
        "pascal": [
          "function BitmapCenter(bmp: Bitmap): Point2D"
        ],
        "csharp": [
          "public Point2D Bitmap.Center { get }",
          "public static Point2D SplashKit.BitmapCenter(Bitmap bmp);"
        ]
      }
    },
    {
      "signature": "string bitmap_filename(bitmap bmp);",
      "name": "bitmap_filename",
      "method_name": null,
      "unique_global_name": "bitmap_filename",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the filename from which the bitmap was loaded. This will be an empty\nstring for created bitmaps.",
      "brief": null,
      "return": {
        "type": "string",
        "description": "The file name of the bitmap.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "bmp": {
          "type": "bitmap",
          "description": "The bitmap to get the filename from.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "bitmap",
        "getter": "filename",
        "group": "graphics",
        "static": "images",
        "self": "bmp"
      },
      "signatures": {
        "cpp": [
          "string bitmap_filename(bitmap bmp)"
        ],
        "rust": [
          "pub fn bitmap_filename(bmp: bitmap) -> String"
        ],
        "python": [
          "def bitmap_filename(bmp):"
        ],
        "pascal": [
          "function BitmapFilename(bmp: Bitmap): String"
        ],
        "csharp": [
          "public string Bitmap.Filename { get }",
          "public static string SplashKit.BitmapFilename(Bitmap bmp);"
        ]
      }
    },
    {
      "signature": "int bitmap_height(bitmap bmp);",
      "name": "bitmap_height",
      "method_name": null,
      "unique_global_name": "bitmap_height",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the total height of the bitmap. If the bitmap contains cells, you ca\nget the height of a cell using `bitmap_cell_height`.",
      "brief": null,
      "return": {
        "type": "int",
        "description": "The height of the bitmap.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "bmp": {
          "type": "bitmap",
          "description": "The bitmap to get the details from.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "bitmap",
        "getter": "height",
        "group": "graphics",
        "static": "images",
        "self": "bmp"
      },
      "signatures": {
        "cpp": [
          "int bitmap_height(bitmap bmp)"
        ],
        "rust": [
          "pub fn bitmap_height(bmp: bitmap) -> i32"
        ],
        "python": [
          "def bitmap_height(bmp):"
        ],
        "pascal": [
          "function BitmapHeight(bmp: Bitmap): Integer"
        ],
        "csharp": [
          "public int Bitmap.Height { get }",
          "public static int SplashKit.BitmapHeight(Bitmap bmp);"
        ]
      }
    },
    {
      "signature": "int bitmap_height(string name);",
      "name": "bitmap_height",
      "method_name": null,
      "unique_global_name": "bitmap_height_of_bitmap_named",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the total height of the bitmap. If the bitmap contains cells, you ca\nget the height of a cell using `bitmap_cell_height`.",
      "brief": null,
      "return": {
        "type": "int",
        "description": "The height of the bitmap.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name of the bitmap to get the details from.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "of_bitmap_named",
        "group": "graphics",
        "static": "images"
      },
      "signatures": {
        "cpp": [
          "int bitmap_height(string name)"
        ],
        "rust": [
          "pub fn bitmap_height(name: String) -> i32"
        ],
        "python": [
          "def bitmap_height_of_bitmap_named(name):"
        ],
        "pascal": [
          "function BitmapHeight(name: String): Integer"
        ],
        "csharp": [
          "public static int Images.BitmapHeight(string name);",
          "public static int SplashKit.BitmapHeight(string name);"
        ]
      }
    },
    {
      "signature": "string bitmap_name(bitmap bmp);",
      "name": "bitmap_name",
      "method_name": null,
      "unique_global_name": "bitmap_name",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the name of the bitmap was loaded. This is the name you can use to\naccess this bitmap.",
      "brief": null,
      "return": {
        "type": "string",
        "description": "The name of the bitmap.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "bmp": {
          "type": "bitmap",
          "description": "The bitmap to get the name from.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "bitmap",
        "getter": "name",
        "group": "graphics",
        "static": "images",
        "self": "bmp"
      },
      "signatures": {
        "cpp": [
          "string bitmap_name(bitmap bmp)"
        ],
        "rust": [
          "pub fn bitmap_name(bmp: bitmap) -> String"
        ],
        "python": [
          "def bitmap_name(bmp):"
        ],
        "pascal": [
          "function BitmapName(bmp: Bitmap): String"
        ],
        "csharp": [
          "public string Bitmap.Name { get }",
          "public static string SplashKit.BitmapName(Bitmap bmp);"
        ]
      }
    },
    {
      "signature": "bitmap bitmap_named(string name);",
      "name": "bitmap_named",
      "method_name": null,
      "unique_global_name": "bitmap_named",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the `bitmap` that has been loaded with the specified name,\nsee `load_bitmap`. This will attempt to load the bitmap if it has not\nbeen loaded.",
      "brief": null,
      "return": {
        "type": "bitmap",
        "description": "The bitmap with the name specified, which may refer to nothing\nif the bitmap has not been loaded.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name of the bitmap to check.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "graphics",
        "static": "images"
      },
      "signatures": {
        "cpp": [
          "bitmap bitmap_named(string name)"
        ],
        "rust": [
          "pub fn bitmap_named(name: String) -> bitmap"
        ],
        "python": [
          "def bitmap_named(name):"
        ],
        "pascal": [
          "function BitmapNamed(name: String): Bitmap"
        ],
        "csharp": [
          "public static Bitmap Images.BitmapNamed(string name);",
          "public static Bitmap SplashKit.BitmapNamed(string name);"
        ]
      }
    },
    {
      "signature": "rectangle bitmap_rectangle_of_cell(bitmap src,int cell);",
      "name": "bitmap_rectangle_of_cell",
      "method_name": "rectangle_of_cell",
      "unique_global_name": "bitmap_rectangle_of_cell",
      "unique_method_name": "bitmap.rectangle_of_cell",
      "suffix_name": null,
      "description": "Returns a rectangle that can be used to access the part of a bitmap\nrelated to an individual cell.",
      "brief": null,
      "return": {
        "type": "rectangle",
        "description": "The area of the cell within the bitmap",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "src": {
          "type": "bitmap",
          "description": "The bitmap",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "cell": {
          "type": "int",
          "description": "The cell",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "bitmap",
        "method": "rectangle_of_cell",
        "group": "graphics",
        "static": "images",
        "self": "src"
      },
      "signatures": {
        "cpp": [
          "rectangle bitmap_rectangle_of_cell(bitmap src, int cell)"
        ],
        "rust": [
          "pub fn bitmap_rectangle_of_cell(src: bitmap, cell: i32) -> rectangle"
        ],
        "python": [
          "def bitmap_rectangle_of_cell(src, cell):"
        ],
        "pascal": [
          "function BitmapRectangleOfCell(src: Bitmap; cell: Integer): Rectangle"
        ],
        "csharp": [
          "public Rectangle Bitmap.BitmapRectangleOfCell(int cell);",
          "public static Rectangle SplashKit.BitmapRectangleOfCell(Bitmap src, int cell);"
        ]
      }
    },
    {
      "signature": "void bitmap_set_cell_details(bitmap bmp,int width,int height,int columns,int rows,int count);",
      "name": "bitmap_set_cell_details",
      "method_name": "set_cell_details",
      "unique_global_name": "bitmap_set_cell_details",
      "unique_method_name": "bitmap.set_cell_details",
      "suffix_name": null,
      "description": "Initialise the bitmap cell details. This allows parts of the bitmap to be\ndrawn as individual cells.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "bmp": {
          "type": "bitmap",
          "description": "The bitmap",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "width": {
          "type": "int",
          "description": "The width of each cell",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "height": {
          "type": "int",
          "description": "The height of each cell",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "columns": {
          "type": "int",
          "description": "The number of cell columns within the bitmap",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "rows": {
          "type": "int",
          "description": "The number of cell rows within the bitmap",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "count": {
          "type": "int",
          "description": "The total number of cells, may be fewer than columns *\nrows",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "bitmap",
        "method": "set_cell_details",
        "group": "graphics",
        "static": "images",
        "self": "bmp"
      },
      "signatures": {
        "cpp": [
          "void bitmap_set_cell_details(bitmap bmp, int width, int height, int columns, int rows, int count)"
        ],
        "rust": [
          "pub fn bitmap_set_cell_details(bmp: bitmap, width: i32, height: i32, columns: i32, rows: i32, count: i32)"
        ],
        "python": [
          "def bitmap_set_cell_details(bmp, width, height, columns, rows, count):"
        ],
        "pascal": [
          "procedure BitmapSetCellDetails(bmp: Bitmap; width: Integer; height: Integer; columns: Integer; rows: Integer; count: Integer)"
        ],
        "csharp": [
          "public void Bitmap.BitmapSetCellDetails(int width, int height, int columns, int rows, int count);",
          "public static void SplashKit.BitmapSetCellDetails(Bitmap bmp, int width, int height, int columns, int rows, int count);"
        ]
      }
    },
    {
      "signature": "bool bitmap_valid(bitmap bmp);",
      "name": "bitmap_valid",
      "method_name": null,
      "unique_global_name": "bitmap_valid",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Lets you test if bitmap value is valid. This will return true when it is a valid bitmap.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "true when the bitmap is valid.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "bmp": {
          "type": "bitmap",
          "description": "the bitmap to test",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "graphics",
        "static": "images"
      },
      "signatures": {
        "cpp": [
          "bool bitmap_valid(bitmap bmp)"
        ],
        "rust": [
          "pub fn bitmap_valid(bmp: bitmap) -> bool"
        ],
        "python": [
          "def bitmap_valid(bmp):"
        ],
        "pascal": [
          "function BitmapValid(bmp: Bitmap): Boolean"
        ],
        "csharp": [
          "public static bool Images.BitmapValid(Bitmap bmp);",
          "public static bool SplashKit.BitmapValid(Bitmap bmp);"
        ]
      }
    },
    {
      "signature": "int bitmap_width(bitmap bmp);",
      "name": "bitmap_width",
      "method_name": null,
      "unique_global_name": "bitmap_width",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the width of the bitmap.",
      "brief": null,
      "return": {
        "type": "int",
        "description": "The width of the bitmap",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "bmp": {
          "type": "bitmap",
          "description": "The bitmap",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "bitmap",
        "getter": "width",
        "group": "graphics",
        "static": "images",
        "self": "bmp"
      },
      "signatures": {
        "cpp": [
          "int bitmap_width(bitmap bmp)"
        ],
        "rust": [
          "pub fn bitmap_width(bmp: bitmap) -> i32"
        ],
        "python": [
          "def bitmap_width(bmp):"
        ],
        "pascal": [
          "function BitmapWidth(bmp: Bitmap): Integer"
        ],
        "csharp": [
          "public int Bitmap.Width { get }",
          "public static int SplashKit.BitmapWidth(Bitmap bmp);"
        ]
      }
    },
    {
      "signature": "int bitmap_width(string name);",
      "name": "bitmap_width",
      "method_name": null,
      "unique_global_name": "bitmap_width_of_bitmap_named",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the width of the bitmap.",
      "brief": null,
      "return": {
        "type": "int",
        "description": "The width of the bitmap",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name of the bitmap",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "of_bitmap_named",
        "group": "graphics",
        "static": "images"
      },
      "signatures": {
        "cpp": [
          "int bitmap_width(string name)"
        ],
        "rust": [
          "pub fn bitmap_width(name: String) -> i32"
        ],
        "python": [
          "def bitmap_width_of_bitmap_named(name):"
        ],
        "pascal": [
          "function BitmapWidth(name: String): Integer"
        ],
        "csharp": [
          "public static int Images.BitmapWidth(string name);",
          "public static int SplashKit.BitmapWidth(string name);"
        ]
      }
    },
    {
      "signature": "void clear_bitmap(bitmap bmp,color clr);",
      "name": "clear_bitmap",
      "method_name": "clear",
      "unique_global_name": "clear_bitmap",
      "unique_method_name": "bitmap.clear",
      "suffix_name": null,
      "description": "Clear the bitmap to the indicated color. This will ensure the entire\nsurface of the bitmap is set to that color.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "bmp": {
          "type": "bitmap",
          "description": "The bitmap",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The new color for the surface of the bitmap",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "bitmap",
        "method": "clear",
        "group": "graphics",
        "static": "images",
        "self": "bmp"
      },
      "signatures": {
        "cpp": [
          "void clear_bitmap(bitmap bmp, color clr)"
        ],
        "rust": [
          "pub fn clear_bitmap(bmp: bitmap, clr: color)"
        ],
        "python": [
          "def clear_bitmap(bmp, clr):"
        ],
        "pascal": [
          "procedure ClearBitmap(bmp: Bitmap; clr: Color)"
        ],
        "csharp": [
          "public void Bitmap.ClearBitmap(Color clr);",
          "public static void SplashKit.ClearBitmap(Bitmap bmp, Color clr);"
        ]
      }
    },
    {
      "signature": "void clear_bitmap(string name,color clr);",
      "name": "clear_bitmap",
      "method_name": null,
      "unique_global_name": "clear_bitmap_named",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Clear the bitmap to the indicated color. This will ensure the entire\nsurface of the bitmap is set to that color.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name of the bitmap",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The new color for the surface of the bitmap",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "named",
        "group": "graphics",
        "static": "images"
      },
      "signatures": {
        "cpp": [
          "void clear_bitmap(string name, color clr)"
        ],
        "rust": [
          "pub fn clear_bitmap(name: String, clr: color)"
        ],
        "python": [
          "def clear_bitmap_named(name, clr):"
        ],
        "pascal": [
          "procedure ClearBitmap(name: String; clr: Color)"
        ],
        "csharp": [
          "public static void Images.ClearBitmap(string name, Color clr);",
          "public static void SplashKit.ClearBitmap(string name, Color clr);"
        ]
      }
    },
    {
      "signature": "bitmap create_bitmap(string name,int width,int height);",
      "name": "create_bitmap",
      "method_name": null,
      "unique_global_name": "create_bitmap",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Creates a new bitmap that you can draw to. Initially the bitmap will\nbe transparent.",
      "brief": null,
      "return": {
        "type": "bitmap",
        "description": "A new transparent bitmap",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name of the bitmap resource to be created. If this\nalready exists SplashKit will alter the name to make it\nunique.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "width": {
          "type": "int",
          "description": "The width of the created bitmap",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "height": {
          "type": "int",
          "description": "The height of the created bitmap",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "bitmap",
        "constructor": true,
        "group": "graphics",
        "static": "images"
      },
      "signatures": {
        "cpp": [
          "bitmap create_bitmap(string name, int width, int height)"
        ],
        "rust": [
          "pub fn create_bitmap(name: String, width: i32, height: i32) -> bitmap"
        ],
        "python": [
          "def create_bitmap(name, width, height):"
        ],
        "pascal": [
          "function CreateBitmap(name: String; width: Integer; height: Integer): Bitmap"
        ],
        "csharp": [
          "public static Bitmap SplashKit.CreateBitmap(string name, int width, int height);",
          "public Bitmap(string name, int width, int height);"
        ]
      }
    },
    {
      "signature": "void draw_bitmap(bitmap bmp,double x,double y);",
      "name": "draw_bitmap",
      "method_name": "draw",
      "unique_global_name": "draw_bitmap",
      "unique_method_name": "bitmap.draw",
      "suffix_name": null,
      "description": "Draws the bitmap supplied into `bmp` to the current window.\nat `x` and `y`.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "bmp": {
          "type": "bitmap",
          "description": "the bitmap which will be drawn to the screen",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x": {
          "type": "double",
          "description": "the x location which represents where the bitmap\nwill be drawn",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y": {
          "type": "double",
          "description": "the y location which represents where the bitmap\nwill be drawn",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "bitmap",
        "method": "draw",
        "self": "bmp",
        "group": "graphics",
        "static": "images"
      },
      "signatures": {
        "cpp": [
          "void draw_bitmap(bitmap bmp, double x, double y)"
        ],
        "rust": [
          "pub fn draw_bitmap(bmp: bitmap, x: f64, y: f64)"
        ],
        "python": [
          "def draw_bitmap(bmp, x, y):"
        ],
        "pascal": [
          "procedure DrawBitmap(bmp: Bitmap; x: Double; y: Double)"
        ],
        "csharp": [
          "public void Bitmap.DrawBitmap(double x, double y);",
          "public static void SplashKit.DrawBitmap(Bitmap bmp, double x, double y);"
        ]
      }
    },
    {
      "signature": "void draw_bitmap(bitmap bmp,double x,double y,drawing_options opts);",
      "name": "draw_bitmap",
      "method_name": "draw",
      "unique_global_name": "draw_bitmap_with_options",
      "unique_method_name": "bitmap.draw_with_options",
      "suffix_name": null,
      "description": "Draws the bitmap supplied into `bmp` to the current window.\nwith extra drawing options supplied in `opts` at `x` and `y`.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "bmp": {
          "type": "bitmap",
          "description": "the bitmap which will be drawn to the screen",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x": {
          "type": "double",
          "description": "the x location which represents where the bitmap\nwill be drawn",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y": {
          "type": "double",
          "description": "the y location which represents where the bitmap\nwill be drawn",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "the `drawing_options` which provide extra information\nfor how to draw the `bitmap`",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "bitmap",
        "method": "draw",
        "self": "bmp",
        "suffix": "with_options",
        "group": "graphics",
        "static": "images"
      },
      "signatures": {
        "cpp": [
          "void draw_bitmap(bitmap bmp, double x, double y, drawing_options opts)"
        ],
        "rust": [
          "pub fn draw_bitmap(bmp: bitmap, x: f64, y: f64, opts: drawing_options)"
        ],
        "python": [
          "def draw_bitmap_with_options(bmp, x, y, opts):"
        ],
        "pascal": [
          "procedure DrawBitmap(bmp: Bitmap; x: Double; y: Double; opts: DrawingOptions)"
        ],
        "csharp": [
          "public void Bitmap.DrawBitmap(double x, double y, DrawingOptions opts);",
          "public static void SplashKit.DrawBitmap(Bitmap bmp, double x, double y, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "void draw_bitmap(string name,double x,double y);",
      "name": "draw_bitmap",
      "method_name": null,
      "unique_global_name": "draw_bitmap_named",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Searches and draws a bitmap with name `name` to the current window.\nwith extra drawing options supplied in `opts` at `x` and `y`.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "the name of the bitmap which will be drawn to the screen",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x": {
          "type": "double",
          "description": "the x location which represents where the bitmap\nwill be drawn",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y": {
          "type": "double",
          "description": "the y location which represents where the bitmap\nwill be drawn",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "named",
        "group": "graphics",
        "static": "images"
      },
      "signatures": {
        "cpp": [
          "void draw_bitmap(string name, double x, double y)"
        ],
        "rust": [
          "pub fn draw_bitmap(name: String, x: f64, y: f64)"
        ],
        "python": [
          "def draw_bitmap_named(name, x, y):"
        ],
        "pascal": [
          "procedure DrawBitmap(name: String; x: Double; y: Double)"
        ],
        "csharp": [
          "public static void Images.DrawBitmap(string name, double x, double y);",
          "public static void SplashKit.DrawBitmap(string name, double x, double y);"
        ]
      }
    },
    {
      "signature": "void draw_bitmap(string name,double x,double y,drawing_options opts);",
      "name": "draw_bitmap",
      "method_name": null,
      "unique_global_name": "draw_bitmap_named_with_options",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Searches and draws a bitmap with name `name` to the current window.\nwith extra drawing options supplied in `opts` at `x` and `y`.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "the name of the bitmap which will be drawn to the screen",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x": {
          "type": "double",
          "description": "the x location which represents where the bitmap\nwill be drawn",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y": {
          "type": "double",
          "description": "the y location which represents where the bitmap\nwill be drawn",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "the `drawing_options` which provide extra information\nfor how to draw the `bitmap`",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "named_with_options",
        "group": "graphics",
        "static": "images"
      },
      "signatures": {
        "cpp": [
          "void draw_bitmap(string name, double x, double y, drawing_options opts)"
        ],
        "rust": [
          "pub fn draw_bitmap(name: String, x: f64, y: f64, opts: drawing_options)"
        ],
        "python": [
          "def draw_bitmap_named_with_options(name, x, y, opts):"
        ],
        "pascal": [
          "procedure DrawBitmap(name: String; x: Double; y: Double; opts: DrawingOptions)"
        ],
        "csharp": [
          "public static void Images.DrawBitmap(string name, double x, double y, DrawingOptions opts);",
          "public static void SplashKit.DrawBitmap(string name, double x, double y, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "void draw_bitmap_on_bitmap(bitmap destination,bitmap bmp,double x,double y);",
      "name": "draw_bitmap_on_bitmap",
      "method_name": "draw_bitmap",
      "unique_global_name": "draw_bitmap_on_bitmap_on_bitmap",
      "unique_method_name": "bitmap.draw_bitmap_on_bitmap",
      "suffix_name": null,
      "description": "Draws the bitmap supplied into `bmp` to the given bitmap.\nat `x` and `y`.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "bitmap",
          "description": "the bitmap to draw the bitmap to",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "bmp": {
          "type": "bitmap",
          "description": "the bitmap which will be drawn to the screen",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x": {
          "type": "double",
          "description": "the x location which represents where the bitmap\nwill be drawn",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y": {
          "type": "double",
          "description": "the y location which represents where the bitmap\nwill be drawn",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "bitmap",
        "method": "draw_bitmap",
        "self": "bmp",
        "suffix": "on_bitmap",
        "group": "graphics",
        "static": "images"
      },
      "signatures": {
        "cpp": [
          "void draw_bitmap_on_bitmap(bitmap destination, bitmap bmp, double x, double y)"
        ],
        "rust": [
          "pub fn draw_bitmap_on_bitmap(destination: bitmap, bmp: bitmap, x: f64, y: f64)"
        ],
        "python": [
          "def draw_bitmap_on_bitmap_on_bitmap(destination, bmp, x, y):"
        ],
        "pascal": [
          "procedure DrawBitmapOnBitmap(destination: Bitmap; bmp: Bitmap; x: Double; y: Double)"
        ],
        "csharp": [
          "public void Bitmap.DrawBitmapOnBitmap(Bitmap destination, double x, double y);",
          "public static void SplashKit.DrawBitmapOnBitmap(Bitmap destination, Bitmap bmp, double x, double y);"
        ]
      }
    },
    {
      "signature": "void draw_bitmap_on_bitmap(bitmap destination,bitmap bmp,double x,double y,drawing_options opts);",
      "name": "draw_bitmap_on_bitmap",
      "method_name": "draw_bitmap",
      "unique_global_name": "draw_bitmap_on_bitmap_on_bitmap_with_options",
      "unique_method_name": "bitmap.draw_bitmap_on_bitmap_with_options",
      "suffix_name": null,
      "description": "Draws the bitmap supplied into `bmp` to the given bitmap.\nwith extra drawing options supplied in `opts` at `x` and `y`.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "bitmap",
          "description": "the bitmap to draw the bitmap to",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "bmp": {
          "type": "bitmap",
          "description": "the bitmap which will be drawn to the screen",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x": {
          "type": "double",
          "description": "the x location which represents where the bitmap\nwill be drawn",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y": {
          "type": "double",
          "description": "the y location which represents where the bitmap\nwill be drawn",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "the `drawing_options` which provide extra information\nfor how to draw the `bitmap`",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "bitmap",
        "method": "draw_bitmap",
        "self": "bmp",
        "suffix": "on_bitmap_with_options",
        "group": "graphics",
        "static": "images"
      },
      "signatures": {
        "cpp": [
          "void draw_bitmap_on_bitmap(bitmap destination, bitmap bmp, double x, double y, drawing_options opts)"
        ],
        "rust": [
          "pub fn draw_bitmap_on_bitmap(destination: bitmap, bmp: bitmap, x: f64, y: f64, opts: drawing_options)"
        ],
        "python": [
          "def draw_bitmap_on_bitmap_on_bitmap_with_options(destination, bmp, x, y, opts):"
        ],
        "pascal": [
          "procedure DrawBitmapOnBitmap(destination: Bitmap; bmp: Bitmap; x: Double; y: Double; opts: DrawingOptions)"
        ],
        "csharp": [
          "public void Bitmap.DrawBitmapOnBitmap(Bitmap destination, double x, double y, DrawingOptions opts);",
          "public static void SplashKit.DrawBitmapOnBitmap(Bitmap destination, Bitmap bmp, double x, double y, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "void draw_bitmap_on_window(window destination,bitmap bmp,double x,double y);",
      "name": "draw_bitmap_on_window",
      "method_name": "draw_bitmap",
      "unique_global_name": "draw_bitmap_on_window",
      "unique_method_name": "window.draw_bitmap",
      "suffix_name": null,
      "description": "Draws the bitmap supplied into `bmp` to the given window.\nat `x` and `y`.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "window",
          "description": "the window to draw the bitmap to",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "bmp": {
          "type": "bitmap",
          "description": "the bitmap which will be drawn to the screen",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x": {
          "type": "double",
          "description": "the x location which represents where the bitmap\nwill be drawn",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y": {
          "type": "double",
          "description": "the y location which represents where the bitmap\nwill be drawn",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "window",
        "method": "draw_bitmap",
        "self": "destination",
        "group": "graphics",
        "static": "images"
      },
      "signatures": {
        "cpp": [
          "void draw_bitmap_on_window(window destination, bitmap bmp, double x, double y)"
        ],
        "rust": [
          "pub fn draw_bitmap_on_window(destination: window, bmp: bitmap, x: f64, y: f64)"
        ],
        "python": [
          "def draw_bitmap_on_window(destination, bmp, x, y):"
        ],
        "pascal": [
          "procedure DrawBitmapOnWindow(destination: Window; bmp: Bitmap; x: Double; y: Double)"
        ],
        "csharp": [
          "public void Window.DrawBitmapOnWindow(Bitmap bmp, double x, double y);",
          "public static void SplashKit.DrawBitmapOnWindow(Window destination, Bitmap bmp, double x, double y);"
        ]
      }
    },
    {
      "signature": "void draw_bitmap_on_window(window destination,bitmap bmp,double x,double y,drawing_options opts);",
      "name": "draw_bitmap_on_window",
      "method_name": "draw_bitmap",
      "unique_global_name": "draw_bitmap_on_window_with_options",
      "unique_method_name": "window.draw_bitmap_with_options",
      "suffix_name": null,
      "description": "Draws the bitmap supplied into `bmp` to the given window.\nwith extra drawing options supplied in `opts` at `x` and `y`.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "window",
          "description": "the window to draw the bitmap to",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "bmp": {
          "type": "bitmap",
          "description": "the bitmap which will be drawn to the screen",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x": {
          "type": "double",
          "description": "the x location which represents where the bitmap\nwill be drawn",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y": {
          "type": "double",
          "description": "the y location which represents where the bitmap\nwill be drawn",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "the `drawing_options` which provide extra information\nfor how to draw the `bitmap`",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "window",
        "method": "draw_bitmap",
        "self": "destination",
        "suffix": "with_options",
        "group": "graphics",
        "static": "images"
      },
      "signatures": {
        "cpp": [
          "void draw_bitmap_on_window(window destination, bitmap bmp, double x, double y, drawing_options opts)"
        ],
        "rust": [
          "pub fn draw_bitmap_on_window(destination: window, bmp: bitmap, x: f64, y: f64, opts: drawing_options)"
        ],
        "python": [
          "def draw_bitmap_on_window_with_options(destination, bmp, x, y, opts):"
        ],
        "pascal": [
          "procedure DrawBitmapOnWindow(destination: Window; bmp: Bitmap; x: Double; y: Double; opts: DrawingOptions)"
        ],
        "csharp": [
          "public void Window.DrawBitmapOnWindow(Bitmap bmp, double x, double y, DrawingOptions opts);",
          "public static void SplashKit.DrawBitmapOnWindow(Window destination, Bitmap bmp, double x, double y, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "void free_all_bitmaps();",
      "name": "free_all_bitmaps",
      "method_name": null,
      "unique_global_name": "free_all_bitmaps",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Free all of the loaded bitmap resources.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "group": "graphics",
        "static": "images"
      },
      "signatures": {
        "cpp": [
          "void free_all_bitmaps()"
        ],
        "rust": [
          "pub fn free_all_bitmaps()"
        ],
        "python": [
          "def free_all_bitmaps():"
        ],
        "pascal": [
          "procedure FreeAllBitmaps()"
        ],
        "csharp": [
          "public static void Images.FreeAllBitmaps();",
          "public static void SplashKit.FreeAllBitmaps();"
        ]
      }
    },
    {
      "signature": "void free_bitmap(bitmap to_delete);",
      "name": "free_bitmap",
      "method_name": "free",
      "unique_global_name": "free_bitmap",
      "unique_method_name": "bitmap.free",
      "suffix_name": null,
      "description": "Frees the bitmap resource.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "to_delete": {
          "type": "bitmap",
          "description": "The bitmap to be freed.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "bitmap",
        "destructor": true,
        "method": "free",
        "group": "graphics",
        "static": "images",
        "self": "to_delete"
      },
      "signatures": {
        "cpp": [
          "void free_bitmap(bitmap to_delete)"
        ],
        "rust": [
          "pub fn free_bitmap(to_delete: bitmap)"
        ],
        "python": [
          "def free_bitmap(to_delete):"
        ],
        "pascal": [
          "procedure FreeBitmap(toDelete: Bitmap)"
        ],
        "csharp": [
          "public void Bitmap.FreeBitmap();",
          "public static void SplashKit.FreeBitmap(Bitmap toDelete);"
        ]
      }
    },
    {
      "signature": "bool has_bitmap(string name);",
      "name": "has_bitmap",
      "method_name": null,
      "unique_global_name": "has_bitmap",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Determines if SplashKit has a bitmap loaded for the supplied name.\nThis checks against all bitmaps loaded.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True if SplashKit has a bitmap with that name",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name to check",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "graphics",
        "static": "images"
      },
      "signatures": {
        "cpp": [
          "bool has_bitmap(string name)"
        ],
        "rust": [
          "pub fn has_bitmap(name: String) -> bool"
        ],
        "python": [
          "def has_bitmap(name):"
        ],
        "pascal": [
          "function HasBitmap(name: String): Boolean"
        ],
        "csharp": [
          "public static bool Images.HasBitmap(string name);",
          "public static bool SplashKit.HasBitmap(string name);"
        ]
      }
    },
    {
      "signature": "bitmap load_bitmap(string name,string filename);",
      "name": "load_bitmap",
      "method_name": null,
      "unique_global_name": "load_bitmap",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Loads and returns a bitmap. The supplied `filename` is used to\nlocate the Bitmap to load. The supplied `name` indicates the\nname to use to refer to this Bitmap in SplashKit. The `bitmap` can then\nbe retrieved by passing this `name` to the `bitmap_named` function.",
      "brief": null,
      "return": {
        "type": "bitmap",
        "description": "The loaded bitmap",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name of the bitmap resource in SplashKit",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "filename": {
          "type": "string",
          "description": "The filename to load",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "bitmap",
        "constructor": true,
        "group": "graphics",
        "static": "images"
      },
      "signatures": {
        "cpp": [
          "bitmap load_bitmap(string name, string filename)"
        ],
        "rust": [
          "pub fn load_bitmap(name: String, filename: String) -> bitmap"
        ],
        "python": [
          "def load_bitmap(name, filename):"
        ],
        "pascal": [
          "function LoadBitmap(name: String; filename: String): Bitmap"
        ],
        "csharp": [
          "public static Bitmap SplashKit.LoadBitmap(string name, string filename);",
          "public Bitmap(string name, string filename);"
        ]
      }
    },
    {
      "signature": "bool pixel_drawn_at_point(bitmap bmp,const point_2d &pt);",
      "name": "pixel_drawn_at_point",
      "method_name": "pixel_drawn_at_point",
      "unique_global_name": "pixel_drawn_at_point_pt",
      "unique_method_name": "bitmap.pixel_drawn_at_point_pt",
      "suffix_name": null,
      "description": "Check if the bitmap has a pixel drawn at the indicated point.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True if the pixel at that point in the bitmap is drawn.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "bmp": {
          "type": "bitmap",
          "description": "The bitmap to check.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "pt": {
          "type": "point_2d",
          "description": "The point within the bitmap to check.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "bitmap",
        "method": "pixel_drawn_at_point",
        "suffix": "pt",
        "group": "graphics",
        "static": "images",
        "self": "bmp"
      },
      "signatures": {
        "cpp": [
          "bool pixel_drawn_at_point(bitmap bmp, const point_2d &pt)"
        ],
        "rust": [
          "pub fn pixel_drawn_at_point(bmp: bitmap, pt: &point_2d) -> bool"
        ],
        "python": [
          "def pixel_drawn_at_point_pt(bmp, pt):"
        ],
        "pascal": [
          "function PixelDrawnAtPoint(bmp: Bitmap; const pt: Point2D): Boolean"
        ],
        "csharp": [
          "public bool Bitmap.PixelDrawnAtPoint(Point2D pt);",
          "public static bool SplashKit.PixelDrawnAtPoint(Bitmap bmp, Point2D pt);"
        ]
      }
    },
    {
      "signature": "bool pixel_drawn_at_point(bitmap bmp,double x,double y);",
      "name": "pixel_drawn_at_point",
      "method_name": "pixel_drawn_at_point",
      "unique_global_name": "pixel_drawn_at_point",
      "unique_method_name": "bitmap.pixel_drawn_at_point",
      "suffix_name": null,
      "description": "Check if the bitmap has a pixel drawn at the indicated point.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True if the pixel at that point in the bitmap is drawn.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "bmp": {
          "type": "bitmap",
          "description": "The bitmap to check.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x": {
          "type": "double",
          "description": "The x coordinate within the bitmap to check",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y": {
          "type": "double",
          "description": "The y coordinate within the bitmap to check",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "bitmap",
        "method": "pixel_drawn_at_point",
        "group": "graphics",
        "static": "images",
        "self": "bmp"
      },
      "signatures": {
        "cpp": [
          "bool pixel_drawn_at_point(bitmap bmp, double x, double y)"
        ],
        "rust": [
          "pub fn pixel_drawn_at_point(bmp: bitmap, x: f64, y: f64) -> bool"
        ],
        "python": [
          "def pixel_drawn_at_point(bmp, x, y):"
        ],
        "pascal": [
          "function PixelDrawnAtPoint(bmp: Bitmap; x: Double; y: Double): Boolean"
        ],
        "csharp": [
          "public bool Bitmap.PixelDrawnAtPoint(double x, double y);",
          "public static bool SplashKit.PixelDrawnAtPoint(Bitmap bmp, double x, double y);"
        ]
      }
    },
    {
      "signature": "bool pixel_drawn_at_point(bitmap bmp,int cell,const point_2d &pt);",
      "name": "pixel_drawn_at_point",
      "method_name": "pixel_drawn_at_point_in_cell",
      "unique_global_name": "pixel_drawn_at_point_in_cell_pt",
      "unique_method_name": "bitmap.pixel_drawn_at_point_in_cell_in_cell_pt",
      "suffix_name": null,
      "description": "Check if the bitmap has a pixel drawn at the indicated point in the cell.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True if the pixel at that point in the bitmap's cell is\ndrawn.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "bmp": {
          "type": "bitmap",
          "description": "The bitmap to check.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "cell": {
          "type": "int",
          "description": "The bitmap cell to check.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "pt": {
          "type": "point_2d",
          "description": "The point within the bitmap to check.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "bitmap",
        "method": "pixel_drawn_at_point_in_cell",
        "suffix": "in_cell_pt",
        "group": "graphics",
        "static": "images",
        "self": "bmp"
      },
      "signatures": {
        "cpp": [
          "bool pixel_drawn_at_point(bitmap bmp, int cell, const point_2d &pt)"
        ],
        "rust": [
          "pub fn pixel_drawn_at_point(bmp: bitmap, cell: i32, pt: &point_2d) -> bool"
        ],
        "python": [
          "def pixel_drawn_at_point_in_cell_pt(bmp, cell, pt):"
        ],
        "pascal": [
          "function PixelDrawnAtPoint(bmp: Bitmap; cell: Integer; const pt: Point2D): Boolean"
        ],
        "csharp": [
          "public bool Bitmap.PixelDrawnAtPoint(int cell, Point2D pt);",
          "public static bool SplashKit.PixelDrawnAtPoint(Bitmap bmp, int cell, Point2D pt);"
        ]
      }
    },
    {
      "signature": "bool pixel_drawn_at_point(bitmap bmp,int cell,double x,double y);",
      "name": "pixel_drawn_at_point",
      "method_name": "pixel_drawn_at_point",
      "unique_global_name": "pixel_drawn_at_point_in_cell",
      "unique_method_name": "bitmap.pixel_drawn_at_point_in_cell",
      "suffix_name": null,
      "description": "Check if the bitmap has a pixel drawn at the indicated point in the cell.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True if the pixel at that point in the bitmap's cell is\ndrawn.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "bmp": {
          "type": "bitmap",
          "description": "The bitmap to check.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "cell": {
          "type": "int",
          "description": "The bitmap cell to check.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x": {
          "type": "double",
          "description": "The x coordinate within the bitmap to check",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y": {
          "type": "double",
          "description": "The y coordinate within the bitmap to check",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "bitmap",
        "method": "pixel_drawn_at_point",
        "suffix": "in_cell",
        "group": "graphics",
        "static": "images",
        "self": "bmp"
      },
      "signatures": {
        "cpp": [
          "bool pixel_drawn_at_point(bitmap bmp, int cell, double x, double y)"
        ],
        "rust": [
          "pub fn pixel_drawn_at_point(bmp: bitmap, cell: i32, x: f64, y: f64) -> bool"
        ],
        "python": [
          "def pixel_drawn_at_point_in_cell(bmp, cell, x, y):"
        ],
        "pascal": [
          "function PixelDrawnAtPoint(bmp: Bitmap; cell: Integer; x: Double; y: Double): Boolean"
        ],
        "csharp": [
          "public bool Bitmap.PixelDrawnAtPoint(int cell, double x, double y);",
          "public static bool SplashKit.PixelDrawnAtPoint(Bitmap bmp, int cell, double x, double y);"
        ]
      }
    },
    {
      "signature": "void setup_collision_mask(bitmap bmp);",
      "name": "setup_collision_mask",
      "method_name": "setup_collision_mask",
      "unique_global_name": "setup_collision_mask",
      "unique_method_name": "bitmap.setup_collision_mask",
      "suffix_name": null,
      "description": "Sets up the collision mask for a bitmap. This enables collision detection between\nthis bitmap and other bitmaps or shapes.\n\nThis is automatically called when a bitmap is loaded, and only needs to be \ncalled on bitmaps created using `create_bitmap`, and when a bitmap is\nchanged by drawing onto the bitmap.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "bmp": {
          "type": "bitmap",
          "description": "the bitmap to setup",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "bitmap",
        "method": "setup_collision_mask",
        "group": "graphics",
        "static": "images",
        "self": "bmp"
      },
      "signatures": {
        "cpp": [
          "void setup_collision_mask(bitmap bmp)"
        ],
        "rust": [
          "pub fn setup_collision_mask(bmp: bitmap)"
        ],
        "python": [
          "def setup_collision_mask(bmp):"
        ],
        "pascal": [
          "procedure SetupCollisionMask(bmp: Bitmap)"
        ],
        "csharp": [
          "public void Bitmap.SetupCollisionMask();",
          "public static void SplashKit.SetupCollisionMask(Bitmap bmp);"
        ]
      }
    },
    {
      "signature": "void draw_line(color clr,const line &l);",
      "name": "draw_line",
      "method_name": null,
      "unique_global_name": "draw_line_record",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Draws a line onto the current window.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "clr": {
          "type": "color",
          "description": "The color of the line",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "l": {
          "type": "line",
          "description": "The line's details",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "record",
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "void draw_line(color clr, const line &l)"
        ],
        "rust": [
          "pub fn draw_line(clr: color, l: &line)"
        ],
        "python": [
          "def draw_line_record(clr, l):"
        ],
        "pascal": [
          "procedure DrawLine(clr: Color; const l: Line)"
        ],
        "csharp": [
          "public static void SplashKit.DrawLine(Color clr, Line l);"
        ]
      }
    },
    {
      "signature": "void draw_line(color clr,const line &l,drawing_options opts);",
      "name": "draw_line",
      "method_name": null,
      "unique_global_name": "draw_line_record_with_options",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Draws a line.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "clr": {
          "type": "color",
          "description": "The color of the line",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "l": {
          "type": "line",
          "description": "The line's details",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "The drawing options",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "record_with_options",
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "void draw_line(color clr, const line &l, drawing_options opts)"
        ],
        "rust": [
          "pub fn draw_line(clr: color, l: &line, opts: drawing_options)"
        ],
        "python": [
          "def draw_line_record_with_options(clr, l, opts):"
        ],
        "pascal": [
          "procedure DrawLine(clr: Color; const l: Line; opts: DrawingOptions)"
        ],
        "csharp": [
          "public static void SplashKit.DrawLine(Color clr, Line l, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "void draw_line(color clr,const point_2d &from_pt,const point_2d &to_pt);",
      "name": "draw_line",
      "method_name": null,
      "unique_global_name": "draw_line_point_to_point",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Draw a line from one point to another on the current window.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "clr": {
          "type": "color",
          "description": "The color of the line",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "from_pt": {
          "type": "point_2d",
          "description": "The start of the line",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "to_pt": {
          "type": "point_2d",
          "description": "The end of the line",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "point_to_point",
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "void draw_line(color clr, const point_2d &from_pt, const point_2d &to_pt)"
        ],
        "rust": [
          "pub fn draw_line(clr: color, from_pt: &point_2d, to_pt: &point_2d)"
        ],
        "python": [
          "def draw_line_point_to_point(clr, from_pt, to_pt):"
        ],
        "pascal": [
          "procedure DrawLine(clr: Color; const fromPt: Point2D; const toPt: Point2D)"
        ],
        "csharp": [
          "public static void SplashKit.DrawLine(Color clr, Point2D fromPt, Point2D toPt);"
        ]
      }
    },
    {
      "signature": "void draw_line(color clr,const point_2d &from_pt,const point_2d &to_pt,const drawing_options &opts);",
      "name": "draw_line",
      "method_name": null,
      "unique_global_name": "draw_line_point_to_point_with_options",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Draw a line from one point to another on the current window.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "clr": {
          "type": "color",
          "description": "The color of the line",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "from_pt": {
          "type": "point_2d",
          "description": "The start of the line",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "to_pt": {
          "type": "point_2d",
          "description": "The end of the line",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "The drawing options",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "point_to_point_with_options",
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "void draw_line(color clr, const point_2d &from_pt, const point_2d &to_pt, const drawing_options &opts)"
        ],
        "rust": [
          "pub fn draw_line(clr: color, from_pt: &point_2d, to_pt: &point_2d, opts: &drawing_options)"
        ],
        "python": [
          "def draw_line_point_to_point_with_options(clr, from_pt, to_pt, opts):"
        ],
        "pascal": [
          "procedure DrawLine(clr: Color; const fromPt: Point2D; const toPt: Point2D; const opts: DrawingOptions)"
        ],
        "csharp": [
          "public static void SplashKit.DrawLine(Color clr, Point2D fromPt, Point2D toPt, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "void draw_line(color clr,double x1,double y1,double x2,double y2);",
      "name": "draw_line",
      "method_name": null,
      "unique_global_name": "draw_line",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Draw a line from one point to another on the current window.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "clr": {
          "type": "color",
          "description": "The color of the line",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x1": {
          "type": "double",
          "description": "The distance from the left of the window/bitmap to the first\npoint",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y1": {
          "type": "double",
          "description": "The distance from the top of the window/bitmap to the first\npoint",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x2": {
          "type": "double",
          "description": "The distance from the left of the window/bitmap to the second\npoint",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y2": {
          "type": "double",
          "description": "The distance from the top of the window/bitmap to the second\npoint",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "void draw_line(color clr, double x1, double y1, double x2, double y2)"
        ],
        "rust": [
          "pub fn draw_line(clr: color, x1: f64, y1: f64, x2: f64, y2: f64)"
        ],
        "python": [
          "def draw_line(clr, x1, y1, x2, y2):"
        ],
        "pascal": [
          "procedure DrawLine(clr: Color; x1: Double; y1: Double; x2: Double; y2: Double)"
        ],
        "csharp": [
          "public static void SplashKit.DrawLine(Color clr, double x1, double y1, double x2, double y2);"
        ]
      }
    },
    {
      "signature": "void draw_line(color clr,double x1,double y1,double x2,double y2,const drawing_options &opts);",
      "name": "draw_line",
      "method_name": null,
      "unique_global_name": "draw_line_with_options",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Draw a line from one point to another",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "clr": {
          "type": "color",
          "description": "The color of the line",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x1": {
          "type": "double",
          "description": "The distance from the left of the window/bitmap to the first\npoint",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y1": {
          "type": "double",
          "description": "The distance from the top of the window/bitmap to the first\npoint",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x2": {
          "type": "double",
          "description": "The distance from the left of the window/bitmap to the second\npoint",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y2": {
          "type": "double",
          "description": "The distance from the top of the window/bitmap to the second\npoint",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "The drawing options",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "with_options",
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "void draw_line(color clr, double x1, double y1, double x2, double y2, const drawing_options &opts)"
        ],
        "rust": [
          "pub fn draw_line(clr: color, x1: f64, y1: f64, x2: f64, y2: f64, opts: &drawing_options)"
        ],
        "python": [
          "def draw_line_with_options(clr, x1, y1, x2, y2, opts):"
        ],
        "pascal": [
          "procedure DrawLine(clr: Color; x1: Double; y1: Double; x2: Double; y2: Double; const opts: DrawingOptions)"
        ],
        "csharp": [
          "public static void SplashKit.DrawLine(Color clr, double x1, double y1, double x2, double y2, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "void draw_line_on_bitmap(bitmap destination,color clr,const line &l);",
      "name": "draw_line_on_bitmap",
      "method_name": "draw_line",
      "unique_global_name": "draw_line_on_bitmap_record",
      "unique_method_name": "bitmap.draw_line_record",
      "suffix_name": null,
      "description": "Draws a line onto the given bitmap.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "bitmap",
          "description": "The destination bitmap",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The color of the line",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "l": {
          "type": "line",
          "description": "The line's details",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "bitmap",
        "method": "draw_line",
        "suffix": "record",
        "group": "graphics",
        "self": "destination"
      },
      "signatures": {
        "cpp": [
          "void draw_line_on_bitmap(bitmap destination, color clr, const line &l)"
        ],
        "rust": [
          "pub fn draw_line_on_bitmap(destination: bitmap, clr: color, l: &line)"
        ],
        "python": [
          "def draw_line_on_bitmap_record(destination, clr, l):"
        ],
        "pascal": [
          "procedure DrawLineOnBitmap(destination: Bitmap; clr: Color; const l: Line)"
        ],
        "csharp": [
          "public void Bitmap.DrawLineOnBitmap(Color clr, Line l);",
          "public static void SplashKit.DrawLineOnBitmap(Bitmap destination, Color clr, Line l);"
        ]
      }
    },
    {
      "signature": "void draw_line_on_bitmap(bitmap destination,color clr,const line &l,drawing_options opts);",
      "name": "draw_line_on_bitmap",
      "method_name": "draw_line",
      "unique_global_name": "draw_line_on_bitmap_record_with_options",
      "unique_method_name": "bitmap.draw_line_record_with_options",
      "suffix_name": null,
      "description": "Draws a line on the given bitmap.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "bitmap",
          "description": "The destination bitmap",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The color of the line",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "l": {
          "type": "line",
          "description": "The line's details",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "The drawing options",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "bitmap",
        "method": "draw_line",
        "suffix": "record_with_options",
        "group": "graphics",
        "self": "destination"
      },
      "signatures": {
        "cpp": [
          "void draw_line_on_bitmap(bitmap destination, color clr, const line &l, drawing_options opts)"
        ],
        "rust": [
          "pub fn draw_line_on_bitmap(destination: bitmap, clr: color, l: &line, opts: drawing_options)"
        ],
        "python": [
          "def draw_line_on_bitmap_record_with_options(destination, clr, l, opts):"
        ],
        "pascal": [
          "procedure DrawLineOnBitmap(destination: Bitmap; clr: Color; const l: Line; opts: DrawingOptions)"
        ],
        "csharp": [
          "public void Bitmap.DrawLineOnBitmap(Color clr, Line l, DrawingOptions opts);",
          "public static void SplashKit.DrawLineOnBitmap(Bitmap destination, Color clr, Line l, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "void draw_line_on_bitmap(bitmap destination,color clr,const point_2d &from_pt,const point_2d &to_pt);",
      "name": "draw_line_on_bitmap",
      "method_name": "draw_line",
      "unique_global_name": "draw_line_on_bitmap_point_to_point",
      "unique_method_name": "bitmap.draw_line_point_to_point",
      "suffix_name": null,
      "description": "Draw a line from one point to another on the given bitmap.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "bitmap",
          "description": "The destination bitmap",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The color of the line",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "from_pt": {
          "type": "point_2d",
          "description": "The start of the line",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "to_pt": {
          "type": "point_2d",
          "description": "The end of the line",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "bitmap",
        "method": "draw_line",
        "suffix": "point_to_point",
        "group": "graphics",
        "self": "destination"
      },
      "signatures": {
        "cpp": [
          "void draw_line_on_bitmap(bitmap destination, color clr, const point_2d &from_pt, const point_2d &to_pt)"
        ],
        "rust": [
          "pub fn draw_line_on_bitmap(destination: bitmap, clr: color, from_pt: &point_2d, to_pt: &point_2d)"
        ],
        "python": [
          "def draw_line_on_bitmap_point_to_point(destination, clr, from_pt, to_pt):"
        ],
        "pascal": [
          "procedure DrawLineOnBitmap(destination: Bitmap; clr: Color; const fromPt: Point2D; const toPt: Point2D)"
        ],
        "csharp": [
          "public void Bitmap.DrawLineOnBitmap(Color clr, Point2D fromPt, Point2D toPt);",
          "public static void SplashKit.DrawLineOnBitmap(Bitmap destination, Color clr, Point2D fromPt, Point2D toPt);"
        ]
      }
    },
    {
      "signature": "void draw_line_on_bitmap(bitmap destination,color clr,const point_2d &from_pt,const point_2d &to_pt,const drawing_options &opts);",
      "name": "draw_line_on_bitmap",
      "method_name": "draw_line",
      "unique_global_name": "draw_line_on_bitmap_point_to_point_with_options",
      "unique_method_name": "bitmap.draw_line_point_to_point_with_options",
      "suffix_name": null,
      "description": "Draw a line from one point to another on the given bitmap.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "bitmap",
          "description": "The destination bitmap",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The color of the line",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "from_pt": {
          "type": "point_2d",
          "description": "The start of the line",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "to_pt": {
          "type": "point_2d",
          "description": "The end of the line",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "The drawing options",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "bitmap",
        "method": "draw_line",
        "suffix": "point_to_point_with_options",
        "group": "graphics",
        "self": "destination"
      },
      "signatures": {
        "cpp": [
          "void draw_line_on_bitmap(bitmap destination, color clr, const point_2d &from_pt, const point_2d &to_pt, const drawing_options &opts)"
        ],
        "rust": [
          "pub fn draw_line_on_bitmap(destination: bitmap, clr: color, from_pt: &point_2d, to_pt: &point_2d, opts: &drawing_options)"
        ],
        "python": [
          "def draw_line_on_bitmap_point_to_point_with_options(destination, clr, from_pt, to_pt, opts):"
        ],
        "pascal": [
          "procedure DrawLineOnBitmap(destination: Bitmap; clr: Color; const fromPt: Point2D; const toPt: Point2D; const opts: DrawingOptions)"
        ],
        "csharp": [
          "public void Bitmap.DrawLineOnBitmap(Color clr, Point2D fromPt, Point2D toPt, DrawingOptions opts);",
          "public static void SplashKit.DrawLineOnBitmap(Bitmap destination, Color clr, Point2D fromPt, Point2D toPt, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "void draw_line_on_bitmap(bitmap destination,color clr,double x1,double y1,double x2,double y2);",
      "name": "draw_line_on_bitmap",
      "method_name": "draw_line",
      "unique_global_name": "draw_line_on_bitmap",
      "unique_method_name": "bitmap.draw_line",
      "suffix_name": null,
      "description": "Draw a line from one point to another on the given bitmap.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "bitmap",
          "description": "The destination bitmap",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The color of the line",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x1": {
          "type": "double",
          "description": "The distance from the left of the bitmap/bitmap to the first\npoint",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y1": {
          "type": "double",
          "description": "The distance from the top of the bitmap/bitmap to the first\npoint",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x2": {
          "type": "double",
          "description": "The distance from the left of the bitmap/bitmap to the second\npoint",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y2": {
          "type": "double",
          "description": "The distance from the top of the bitmap/bitmap to the second\npoint",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "bitmap",
        "method": "draw_line",
        "group": "graphics",
        "self": "destination"
      },
      "signatures": {
        "cpp": [
          "void draw_line_on_bitmap(bitmap destination, color clr, double x1, double y1, double x2, double y2)"
        ],
        "rust": [
          "pub fn draw_line_on_bitmap(destination: bitmap, clr: color, x1: f64, y1: f64, x2: f64, y2: f64)"
        ],
        "python": [
          "def draw_line_on_bitmap(destination, clr, x1, y1, x2, y2):"
        ],
        "pascal": [
          "procedure DrawLineOnBitmap(destination: Bitmap; clr: Color; x1: Double; y1: Double; x2: Double; y2: Double)"
        ],
        "csharp": [
          "public void Bitmap.DrawLineOnBitmap(Color clr, double x1, double y1, double x2, double y2);",
          "public static void SplashKit.DrawLineOnBitmap(Bitmap destination, Color clr, double x1, double y1, double x2, double y2);"
        ]
      }
    },
    {
      "signature": "void draw_line_on_bitmap(bitmap destination,color clr,double x1,double y1,double x2,double y2,const drawing_options &opts);",
      "name": "draw_line_on_bitmap",
      "method_name": "draw_line",
      "unique_global_name": "draw_line_on_bitmap_with_options",
      "unique_method_name": "bitmap.draw_line_with_options",
      "suffix_name": null,
      "description": "Draw a line from one point to another",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "bitmap",
          "description": "The destination bitmap",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The color of the line",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x1": {
          "type": "double",
          "description": "The distance from the left of the bitmap/bitmap to the first\npoint",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y1": {
          "type": "double",
          "description": "The distance from the top of the bitmap/bitmap to the first\npoint",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x2": {
          "type": "double",
          "description": "The distance from the left of the bitmap/bitmap to the second\npoint",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y2": {
          "type": "double",
          "description": "The distance from the top of the bitmap/bitmap to the second\npoint",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "The drawing options",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "bitmap",
        "method": "draw_line",
        "suffix": "with_options",
        "group": "graphics",
        "self": "destination"
      },
      "signatures": {
        "cpp": [
          "void draw_line_on_bitmap(bitmap destination, color clr, double x1, double y1, double x2, double y2, const drawing_options &opts)"
        ],
        "rust": [
          "pub fn draw_line_on_bitmap(destination: bitmap, clr: color, x1: f64, y1: f64, x2: f64, y2: f64, opts: &drawing_options)"
        ],
        "python": [
          "def draw_line_on_bitmap_with_options(destination, clr, x1, y1, x2, y2, opts):"
        ],
        "pascal": [
          "procedure DrawLineOnBitmap(destination: Bitmap; clr: Color; x1: Double; y1: Double; x2: Double; y2: Double; const opts: DrawingOptions)"
        ],
        "csharp": [
          "public void Bitmap.DrawLineOnBitmap(Color clr, double x1, double y1, double x2, double y2, DrawingOptions opts);",
          "public static void SplashKit.DrawLineOnBitmap(Bitmap destination, Color clr, double x1, double y1, double x2, double y2, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "void draw_line_on_window(window destination,color clr,const line &l);",
      "name": "draw_line_on_window",
      "method_name": "draw_line",
      "unique_global_name": "draw_line_on_window_record",
      "unique_method_name": "window.draw_line_record",
      "suffix_name": null,
      "description": "Draws a line onto the given window.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "window",
          "description": "The destination bitmap",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The color of the line",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "l": {
          "type": "line",
          "description": "The line's details",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "window",
        "method": "draw_line",
        "suffix": "record",
        "group": "graphics",
        "self": "destination"
      },
      "signatures": {
        "cpp": [
          "void draw_line_on_window(window destination, color clr, const line &l)"
        ],
        "rust": [
          "pub fn draw_line_on_window(destination: window, clr: color, l: &line)"
        ],
        "python": [
          "def draw_line_on_window_record(destination, clr, l):"
        ],
        "pascal": [
          "procedure DrawLineOnWindow(destination: Window; clr: Color; const l: Line)"
        ],
        "csharp": [
          "public void Window.DrawLineOnWindow(Color clr, Line l);",
          "public static void SplashKit.DrawLineOnWindow(Window destination, Color clr, Line l);"
        ]
      }
    },
    {
      "signature": "void draw_line_on_window(window destination,color clr,const line &l,drawing_options opts);",
      "name": "draw_line_on_window",
      "method_name": "draw_line",
      "unique_global_name": "draw_line_on_window_record_with_options",
      "unique_method_name": "window.draw_line_record_with_options",
      "suffix_name": null,
      "description": "Draws a line on the given window.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "window",
          "description": "The destination bitmap",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The color of the line",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "l": {
          "type": "line",
          "description": "The line's details",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "The drawing options",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "window",
        "method": "draw_line",
        "suffix": "record_with_options",
        "group": "graphics",
        "self": "destination"
      },
      "signatures": {
        "cpp": [
          "void draw_line_on_window(window destination, color clr, const line &l, drawing_options opts)"
        ],
        "rust": [
          "pub fn draw_line_on_window(destination: window, clr: color, l: &line, opts: drawing_options)"
        ],
        "python": [
          "def draw_line_on_window_record_with_options(destination, clr, l, opts):"
        ],
        "pascal": [
          "procedure DrawLineOnWindow(destination: Window; clr: Color; const l: Line; opts: DrawingOptions)"
        ],
        "csharp": [
          "public void Window.DrawLineOnWindow(Color clr, Line l, DrawingOptions opts);",
          "public static void SplashKit.DrawLineOnWindow(Window destination, Color clr, Line l, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "void draw_line_on_window(window destination,color clr,const point_2d &from_pt,const point_2d &to_pt);",
      "name": "draw_line_on_window",
      "method_name": "draw_line",
      "unique_global_name": "draw_line_on_window_point_to_point",
      "unique_method_name": "window.draw_line_point_to_point",
      "suffix_name": null,
      "description": "Draw a line from one point to another on the given window.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "window",
          "description": "The destination bitmap",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The color of the line",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "from_pt": {
          "type": "point_2d",
          "description": "The start of the line",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "to_pt": {
          "type": "point_2d",
          "description": "The end of the line",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "window",
        "method": "draw_line",
        "suffix": "point_to_point",
        "group": "graphics",
        "self": "destination"
      },
      "signatures": {
        "cpp": [
          "void draw_line_on_window(window destination, color clr, const point_2d &from_pt, const point_2d &to_pt)"
        ],
        "rust": [
          "pub fn draw_line_on_window(destination: window, clr: color, from_pt: &point_2d, to_pt: &point_2d)"
        ],
        "python": [
          "def draw_line_on_window_point_to_point(destination, clr, from_pt, to_pt):"
        ],
        "pascal": [
          "procedure DrawLineOnWindow(destination: Window; clr: Color; const fromPt: Point2D; const toPt: Point2D)"
        ],
        "csharp": [
          "public void Window.DrawLineOnWindow(Color clr, Point2D fromPt, Point2D toPt);",
          "public static void SplashKit.DrawLineOnWindow(Window destination, Color clr, Point2D fromPt, Point2D toPt);"
        ]
      }
    },
    {
      "signature": "void draw_line_on_window(window destination,color clr,const point_2d &from_pt,const point_2d &to_pt,const drawing_options &opts);",
      "name": "draw_line_on_window",
      "method_name": "draw_line",
      "unique_global_name": "draw_line_on_window_point_to_point_with_options",
      "unique_method_name": "window.draw_line_point_to_point_with_options",
      "suffix_name": null,
      "description": "Draw a line from one point to another on the given window.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "window",
          "description": "The destination bitmap",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The color of the line",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "from_pt": {
          "type": "point_2d",
          "description": "The start of the line",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "to_pt": {
          "type": "point_2d",
          "description": "The end of the line",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "The drawing options",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "window",
        "method": "draw_line",
        "suffix": "point_to_point_with_options",
        "group": "graphics",
        "self": "destination"
      },
      "signatures": {
        "cpp": [
          "void draw_line_on_window(window destination, color clr, const point_2d &from_pt, const point_2d &to_pt, const drawing_options &opts)"
        ],
        "rust": [
          "pub fn draw_line_on_window(destination: window, clr: color, from_pt: &point_2d, to_pt: &point_2d, opts: &drawing_options)"
        ],
        "python": [
          "def draw_line_on_window_point_to_point_with_options(destination, clr, from_pt, to_pt, opts):"
        ],
        "pascal": [
          "procedure DrawLineOnWindow(destination: Window; clr: Color; const fromPt: Point2D; const toPt: Point2D; const opts: DrawingOptions)"
        ],
        "csharp": [
          "public void Window.DrawLineOnWindow(Color clr, Point2D fromPt, Point2D toPt, DrawingOptions opts);",
          "public static void SplashKit.DrawLineOnWindow(Window destination, Color clr, Point2D fromPt, Point2D toPt, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "void draw_line_on_window(window destination,color clr,double x1,double y1,double x2,double y2);",
      "name": "draw_line_on_window",
      "method_name": "draw_line",
      "unique_global_name": "draw_line_on_window",
      "unique_method_name": "window.draw_line",
      "suffix_name": null,
      "description": "Draw a line from one point to another on the given window.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "window",
          "description": "The destination bitmap",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The color of the line",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x1": {
          "type": "double",
          "description": "The distance from the left of the window/bitmap to the first\npoint",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y1": {
          "type": "double",
          "description": "The distance from the top of the window/bitmap to the first\npoint",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x2": {
          "type": "double",
          "description": "The distance from the left of the window/bitmap to the second\npoint",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y2": {
          "type": "double",
          "description": "The distance from the top of the window/bitmap to the second\npoint",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "window",
        "method": "draw_line",
        "group": "graphics",
        "self": "destination"
      },
      "signatures": {
        "cpp": [
          "void draw_line_on_window(window destination, color clr, double x1, double y1, double x2, double y2)"
        ],
        "rust": [
          "pub fn draw_line_on_window(destination: window, clr: color, x1: f64, y1: f64, x2: f64, y2: f64)"
        ],
        "python": [
          "def draw_line_on_window(destination, clr, x1, y1, x2, y2):"
        ],
        "pascal": [
          "procedure DrawLineOnWindow(destination: Window; clr: Color; x1: Double; y1: Double; x2: Double; y2: Double)"
        ],
        "csharp": [
          "public void Window.DrawLineOnWindow(Color clr, double x1, double y1, double x2, double y2);",
          "public static void SplashKit.DrawLineOnWindow(Window destination, Color clr, double x1, double y1, double x2, double y2);"
        ]
      }
    },
    {
      "signature": "void draw_line_on_window(window destination,color clr,double x1,double y1,double x2,double y2,const drawing_options &opts);",
      "name": "draw_line_on_window",
      "method_name": "draw_line",
      "unique_global_name": "draw_line_on_window_with_options",
      "unique_method_name": "window.draw_line_with_options",
      "suffix_name": null,
      "description": "Draw a line from one point to another",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "window",
          "description": "The destination bitmap",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The color of the line",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x1": {
          "type": "double",
          "description": "The distance from the left of the window/bitmap to the first\npoint",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y1": {
          "type": "double",
          "description": "The distance from the top of the window/bitmap to the first\npoint",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x2": {
          "type": "double",
          "description": "The distance from the left of the window/bitmap to the second\npoint",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y2": {
          "type": "double",
          "description": "The distance from the top of the window/bitmap to the second\npoint",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "The drawing options",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "window",
        "method": "draw_line",
        "suffix": "with_options",
        "group": "graphics",
        "self": "destination"
      },
      "signatures": {
        "cpp": [
          "void draw_line_on_window(window destination, color clr, double x1, double y1, double x2, double y2, const drawing_options &opts)"
        ],
        "rust": [
          "pub fn draw_line_on_window(destination: window, clr: color, x1: f64, y1: f64, x2: f64, y2: f64, opts: &drawing_options)"
        ],
        "python": [
          "def draw_line_on_window_with_options(destination, clr, x1, y1, x2, y2, opts):"
        ],
        "pascal": [
          "procedure DrawLineOnWindow(destination: Window; clr: Color; x1: Double; y1: Double; x2: Double; y2: Double; const opts: DrawingOptions)"
        ],
        "csharp": [
          "public void Window.DrawLineOnWindow(Color clr, double x1, double y1, double x2, double y2, DrawingOptions opts);",
          "public static void SplashKit.DrawLineOnWindow(Window destination, Color clr, double x1, double y1, double x2, double y2, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "void draw_pixel(color clr,const point_2d &pt);",
      "name": "draw_pixel",
      "method_name": null,
      "unique_global_name": "draw_pixel_at_point",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Draws an individual pixel to the current window.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "clr": {
          "type": "color",
          "description": "The color of the pixel",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "pt": {
          "type": "point_2d",
          "description": "The location of the pixel to draw",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "at_point",
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "void draw_pixel(color clr, const point_2d &pt)"
        ],
        "rust": [
          "pub fn draw_pixel(clr: color, pt: &point_2d)"
        ],
        "python": [
          "def draw_pixel_at_point(clr, pt):"
        ],
        "pascal": [
          "procedure DrawPixel(clr: Color; const pt: Point2D)"
        ],
        "csharp": [
          "public static void SplashKit.DrawPixel(Color clr, Point2D pt);"
        ]
      }
    },
    {
      "signature": "void draw_pixel(color clr,const point_2d &pt,drawing_options opts);",
      "name": "draw_pixel",
      "method_name": null,
      "unique_global_name": "draw_pixel_at_point_with_options",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Draws an individual pixel with the supplied options.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "clr": {
          "type": "color",
          "description": "The color of the pixel",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "pt": {
          "type": "point_2d",
          "description": "The location of the pixel to draw",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "The drawing options",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "at_point_with_options",
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "void draw_pixel(color clr, const point_2d &pt, drawing_options opts)"
        ],
        "rust": [
          "pub fn draw_pixel(clr: color, pt: &point_2d, opts: drawing_options)"
        ],
        "python": [
          "def draw_pixel_at_point_with_options(clr, pt, opts):"
        ],
        "pascal": [
          "procedure DrawPixel(clr: Color; const pt: Point2D; opts: DrawingOptions)"
        ],
        "csharp": [
          "public static void SplashKit.DrawPixel(Color clr, Point2D pt, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "void draw_pixel(color clr,double x,double y);",
      "name": "draw_pixel",
      "method_name": null,
      "unique_global_name": "draw_pixel",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Draws an individual pixel to the current window.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "clr": {
          "type": "color",
          "description": "The color of the pixel",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x": {
          "type": "double",
          "description": "The distance from the left edge of the window to the\npixel",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y": {
          "type": "double",
          "description": "The distance from the top edge of the window to the\npixel",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "void draw_pixel(color clr, double x, double y)"
        ],
        "rust": [
          "pub fn draw_pixel(clr: color, x: f64, y: f64)"
        ],
        "python": [
          "def draw_pixel(clr, x, y):"
        ],
        "pascal": [
          "procedure DrawPixel(clr: Color; x: Double; y: Double)"
        ],
        "csharp": [
          "public static void SplashKit.DrawPixel(Color clr, double x, double y);"
        ]
      }
    },
    {
      "signature": "void draw_pixel(color clr,double x,double y,drawing_options opts);",
      "name": "draw_pixel",
      "method_name": null,
      "unique_global_name": "draw_pixel_with_options",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Draws an individual pixel with the supplied options.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "clr": {
          "type": "color",
          "description": "The color of the pixel",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x": {
          "type": "double",
          "description": "The distance from the left edge of the window/bitmap to the\npixel",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y": {
          "type": "double",
          "description": "The distance from the top edge of the window/bitmap to the\npixel",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "The drawing options",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "with_options",
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "void draw_pixel(color clr, double x, double y, drawing_options opts)"
        ],
        "rust": [
          "pub fn draw_pixel(clr: color, x: f64, y: f64, opts: drawing_options)"
        ],
        "python": [
          "def draw_pixel_with_options(clr, x, y, opts):"
        ],
        "pascal": [
          "procedure DrawPixel(clr: Color; x: Double; y: Double; opts: DrawingOptions)"
        ],
        "csharp": [
          "public static void SplashKit.DrawPixel(Color clr, double x, double y, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "void draw_pixel_on_bitmap(bitmap destination,color clr,const point_2d &pt);",
      "name": "draw_pixel_on_bitmap",
      "method_name": "draw_pixel",
      "unique_global_name": "draw_pixel_on_bitmap_at_point",
      "unique_method_name": "bitmap.draw_pixel_at_point",
      "suffix_name": null,
      "description": "Draws an individual pixel to the given bitmap.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "bitmap",
          "description": "the bitmap to draw the pixel on",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The color of the pixel",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "pt": {
          "type": "point_2d",
          "description": "The location of the pixel to draw",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "bitmap",
        "method": "draw_pixel",
        "suffix": "at_point",
        "group": "graphics",
        "self": "destination"
      },
      "signatures": {
        "cpp": [
          "void draw_pixel_on_bitmap(bitmap destination, color clr, const point_2d &pt)"
        ],
        "rust": [
          "pub fn draw_pixel_on_bitmap(destination: bitmap, clr: color, pt: &point_2d)"
        ],
        "python": [
          "def draw_pixel_on_bitmap_at_point(destination, clr, pt):"
        ],
        "pascal": [
          "procedure DrawPixelOnBitmap(destination: Bitmap; clr: Color; const pt: Point2D)"
        ],
        "csharp": [
          "public void Bitmap.DrawPixelOnBitmap(Color clr, Point2D pt);",
          "public static void SplashKit.DrawPixelOnBitmap(Bitmap destination, Color clr, Point2D pt);"
        ]
      }
    },
    {
      "signature": "void draw_pixel_on_bitmap(bitmap destination,color clr,const point_2d &pt,drawing_options opts);",
      "name": "draw_pixel_on_bitmap",
      "method_name": "draw_pixel",
      "unique_global_name": "draw_pixel_on_bitmap_at_point_with_options",
      "unique_method_name": "bitmap.draw_pixel_at_point_with_options",
      "suffix_name": null,
      "description": "Draws an individual pixel to the given bitmap with the given drawing options.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "bitmap",
          "description": "the bitmap to draw the pixel on",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The color of the pixel",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "pt": {
          "type": "point_2d",
          "description": "The location of the pixel to draw",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "The drawing options",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "bitmap",
        "method": "draw_pixel",
        "suffix": "at_point_with_options",
        "group": "graphics",
        "self": "destination"
      },
      "signatures": {
        "cpp": [
          "void draw_pixel_on_bitmap(bitmap destination, color clr, const point_2d &pt, drawing_options opts)"
        ],
        "rust": [
          "pub fn draw_pixel_on_bitmap(destination: bitmap, clr: color, pt: &point_2d, opts: drawing_options)"
        ],
        "python": [
          "def draw_pixel_on_bitmap_at_point_with_options(destination, clr, pt, opts):"
        ],
        "pascal": [
          "procedure DrawPixelOnBitmap(destination: Bitmap; clr: Color; const pt: Point2D; opts: DrawingOptions)"
        ],
        "csharp": [
          "public void Bitmap.DrawPixelOnBitmap(Color clr, Point2D pt, DrawingOptions opts);",
          "public static void SplashKit.DrawPixelOnBitmap(Bitmap destination, Color clr, Point2D pt, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "void draw_pixel_on_bitmap(bitmap destination,color clr,double x,double y);",
      "name": "draw_pixel_on_bitmap",
      "method_name": "draw_pixel",
      "unique_global_name": "draw_pixel_on_bitmap",
      "unique_method_name": "bitmap.draw_pixel",
      "suffix_name": null,
      "description": "Draws an individual pixel to the given bitmap.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "bitmap",
          "description": "the bitmap to draw the pixel on",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The color of the pixel",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x": {
          "type": "double",
          "description": "The distance from the left edge of the bitmap to the\npixel",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y": {
          "type": "double",
          "description": "The distance from the top edge of the bitmap to the\npixel",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "bitmap",
        "method": "draw_pixel",
        "group": "graphics",
        "self": "destination"
      },
      "signatures": {
        "cpp": [
          "void draw_pixel_on_bitmap(bitmap destination, color clr, double x, double y)"
        ],
        "rust": [
          "pub fn draw_pixel_on_bitmap(destination: bitmap, clr: color, x: f64, y: f64)"
        ],
        "python": [
          "def draw_pixel_on_bitmap(destination, clr, x, y):"
        ],
        "pascal": [
          "procedure DrawPixelOnBitmap(destination: Bitmap; clr: Color; x: Double; y: Double)"
        ],
        "csharp": [
          "public void Bitmap.DrawPixelOnBitmap(Color clr, double x, double y);",
          "public static void SplashKit.DrawPixelOnBitmap(Bitmap destination, Color clr, double x, double y);"
        ]
      }
    },
    {
      "signature": "void draw_pixel_on_bitmap(bitmap destination,color clr,double x,double y,drawing_options opts);",
      "name": "draw_pixel_on_bitmap",
      "method_name": "draw_pixel",
      "unique_global_name": "draw_pixel_on_bitmap_with_options",
      "unique_method_name": "bitmap.draw_pixel_with_options",
      "suffix_name": null,
      "description": "Draws an individual pixel to the given bitmap with the given drawing options.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "bitmap",
          "description": "the bitmap to draw the pixel on",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The color of the pixel",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x": {
          "type": "double",
          "description": "The distance from the left edge of the bitmap to the\npixel",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y": {
          "type": "double",
          "description": "The distance from the top edge of the bitmap to the\npixel",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "The drawing options",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "bitmap",
        "method": "draw_pixel",
        "suffix": "with_options",
        "group": "graphics",
        "self": "destination"
      },
      "signatures": {
        "cpp": [
          "void draw_pixel_on_bitmap(bitmap destination, color clr, double x, double y, drawing_options opts)"
        ],
        "rust": [
          "pub fn draw_pixel_on_bitmap(destination: bitmap, clr: color, x: f64, y: f64, opts: drawing_options)"
        ],
        "python": [
          "def draw_pixel_on_bitmap_with_options(destination, clr, x, y, opts):"
        ],
        "pascal": [
          "procedure DrawPixelOnBitmap(destination: Bitmap; clr: Color; x: Double; y: Double; opts: DrawingOptions)"
        ],
        "csharp": [
          "public void Bitmap.DrawPixelOnBitmap(Color clr, double x, double y, DrawingOptions opts);",
          "public static void SplashKit.DrawPixelOnBitmap(Bitmap destination, Color clr, double x, double y, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "void draw_pixel_on_window(window destination,color clr,const point_2d &pt);",
      "name": "draw_pixel_on_window",
      "method_name": null,
      "unique_global_name": "draw_pixel_on_window_at_point",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Draws an individual pixel to the given window.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "window",
          "description": "The window to draw the pixel on",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The color of the pixel",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "pt": {
          "type": "point_2d",
          "description": "The location of the pixel to draw",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "window",
        "suffix": "at_point",
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "void draw_pixel_on_window(window destination, color clr, const point_2d &pt)"
        ],
        "rust": [
          "pub fn draw_pixel_on_window(destination: window, clr: color, pt: &point_2d)"
        ],
        "python": [
          "def draw_pixel_on_window_at_point(destination, clr, pt):"
        ],
        "pascal": [
          "procedure DrawPixelOnWindow(destination: Window; clr: Color; const pt: Point2D)"
        ],
        "csharp": [
          "public void Window.DrawPixelOnWindow(Window destination, Color clr, Point2D pt);",
          "public static void SplashKit.DrawPixelOnWindow(Window destination, Color clr, Point2D pt);"
        ]
      }
    },
    {
      "signature": "void draw_pixel_on_window(window destination,color clr,const point_2d &pt,drawing_options opts);",
      "name": "draw_pixel_on_window",
      "method_name": null,
      "unique_global_name": "draw_pixel_on_window_at_point_with_options",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Draws an individual pixel to the given window with the given drawing options.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "window",
          "description": "The window to draw the pixel on",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The color of the pixel",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "pt": {
          "type": "point_2d",
          "description": "The location of the pixel to draw",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "The drawing options",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "window",
        "suffix": "at_point_with_options",
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "void draw_pixel_on_window(window destination, color clr, const point_2d &pt, drawing_options opts)"
        ],
        "rust": [
          "pub fn draw_pixel_on_window(destination: window, clr: color, pt: &point_2d, opts: drawing_options)"
        ],
        "python": [
          "def draw_pixel_on_window_at_point_with_options(destination, clr, pt, opts):"
        ],
        "pascal": [
          "procedure DrawPixelOnWindow(destination: Window; clr: Color; const pt: Point2D; opts: DrawingOptions)"
        ],
        "csharp": [
          "public void Window.DrawPixelOnWindow(Window destination, Color clr, Point2D pt, DrawingOptions opts);",
          "public static void SplashKit.DrawPixelOnWindow(Window destination, Color clr, Point2D pt, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "void draw_pixel_on_window(window destination,color clr,double x,double y);",
      "name": "draw_pixel_on_window",
      "method_name": null,
      "unique_global_name": "draw_pixel_on_window",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Draws an individual pixel to the given window.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "window",
          "description": "the window to draw the pixel on",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The color of the pixel",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x": {
          "type": "double",
          "description": "The distance from the left edge of the window to the\npixel",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y": {
          "type": "double",
          "description": "The distance from the top edge of the window to the\npixel",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "window",
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "void draw_pixel_on_window(window destination, color clr, double x, double y)"
        ],
        "rust": [
          "pub fn draw_pixel_on_window(destination: window, clr: color, x: f64, y: f64)"
        ],
        "python": [
          "def draw_pixel_on_window(destination, clr, x, y):"
        ],
        "pascal": [
          "procedure DrawPixelOnWindow(destination: Window; clr: Color; x: Double; y: Double)"
        ],
        "csharp": [
          "public void Window.DrawPixelOnWindow(Window destination, Color clr, double x, double y);",
          "public static void SplashKit.DrawPixelOnWindow(Window destination, Color clr, double x, double y);"
        ]
      }
    },
    {
      "signature": "void draw_pixel_on_window(window destination,color clr,double x,double y,drawing_options opts);",
      "name": "draw_pixel_on_window",
      "method_name": null,
      "unique_global_name": "draw_pixel_on_window_with_options",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Draws an individual pixel to the given window with the given drawing options.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "window",
          "description": "The window to draw the pixel on",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The color of the pixel",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x": {
          "type": "double",
          "description": "The distance from the left edge of the window to the\npixel",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y": {
          "type": "double",
          "description": "The distance from the top edge of the window to the\npixel",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "The drawing options",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "window",
        "suffix": "with_options",
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "void draw_pixel_on_window(window destination, color clr, double x, double y, drawing_options opts)"
        ],
        "rust": [
          "pub fn draw_pixel_on_window(destination: window, clr: color, x: f64, y: f64, opts: drawing_options)"
        ],
        "python": [
          "def draw_pixel_on_window_with_options(destination, clr, x, y, opts):"
        ],
        "pascal": [
          "procedure DrawPixelOnWindow(destination: Window; clr: Color; x: Double; y: Double; opts: DrawingOptions)"
        ],
        "csharp": [
          "public void Window.DrawPixelOnWindow(Window destination, Color clr, double x, double y, DrawingOptions opts);",
          "public static void SplashKit.DrawPixelOnWindow(Window destination, Color clr, double x, double y, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "color get_pixel(bitmap bmp,const point_2d &pt);",
      "name": "get_pixel",
      "method_name": null,
      "unique_global_name": "get_pixel_from_bitmap_at_point",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the color of the pixel at the location on the supplied\nbitmap.",
      "brief": null,
      "return": {
        "type": "color",
        "description": "The color of the pixel at the supplied location",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "bmp": {
          "type": "bitmap",
          "description": "The bitmap to get the color from",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "pt": {
          "type": "point_2d",
          "description": "The position of the pixel",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "from_bitmap_at_point",
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "color get_pixel(bitmap bmp, const point_2d &pt)"
        ],
        "rust": [
          "pub fn get_pixel(bmp: bitmap, pt: &point_2d) -> color"
        ],
        "python": [
          "def get_pixel_from_bitmap_at_point(bmp, pt):"
        ],
        "pascal": [
          "function GetPixel(bmp: Bitmap; const pt: Point2D): Color"
        ],
        "csharp": [
          "public static Color SplashKit.GetPixel(Bitmap bmp, Point2D pt);"
        ]
      }
    },
    {
      "signature": "color get_pixel(bitmap bmp,double x,double y);",
      "name": "get_pixel",
      "method_name": null,
      "unique_global_name": "get_pixel_from_bitmap",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the color of the pixel at the x,y location on the supplied\nbitmap.",
      "brief": null,
      "return": {
        "type": "color",
        "description": "The color of the pixel at the supplied location",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "bmp": {
          "type": "bitmap",
          "description": "The bitmap to get the color from",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x": {
          "type": "double",
          "description": "The distance from the left edge of the bitmap to the pixel\nto read",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y": {
          "type": "double",
          "description": "The distance from the top of the bitmap to the pixel to read",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "from_bitmap",
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "color get_pixel(bitmap bmp, double x, double y)"
        ],
        "rust": [
          "pub fn get_pixel(bmp: bitmap, x: f64, y: f64) -> color"
        ],
        "python": [
          "def get_pixel_from_bitmap(bmp, x, y):"
        ],
        "pascal": [
          "function GetPixel(bmp: Bitmap; x: Double; y: Double): Color"
        ],
        "csharp": [
          "public static Color SplashKit.GetPixel(Bitmap bmp, double x, double y);"
        ]
      }
    },
    {
      "signature": "color get_pixel(const point_2d &pt);",
      "name": "get_pixel",
      "method_name": null,
      "unique_global_name": "get_pixel_at_point",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the color of the pixel at the x,y location on the current\nwindow.",
      "brief": null,
      "return": {
        "type": "color",
        "description": "The color of the pixel at the supplied location",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "pt": {
          "type": "point_2d",
          "description": "The position of the pixel",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "at_point",
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "color get_pixel(const point_2d &pt)"
        ],
        "rust": [
          "pub fn get_pixel(pt: &point_2d) -> color"
        ],
        "python": [
          "def get_pixel_at_point(pt):"
        ],
        "pascal": [
          "function GetPixel(const pt: Point2D): Color"
        ],
        "csharp": [
          "public static Color SplashKit.GetPixel(Point2D pt);"
        ]
      }
    },
    {
      "signature": "color get_pixel(double x,double y);",
      "name": "get_pixel",
      "method_name": null,
      "unique_global_name": "get_pixel",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the color of the pixel at the x,y location on the current\nwindow.",
      "brief": null,
      "return": {
        "type": "color",
        "description": "The color of the pixel at the supplied location",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "x": {
          "type": "double",
          "description": "The distance from the left edge of the window to the pixel\nto read",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y": {
          "type": "double",
          "description": "The distance from the top of the window to the pixel to read",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "color get_pixel(double x, double y)"
        ],
        "rust": [
          "pub fn get_pixel(x: f64, y: f64) -> color"
        ],
        "python": [
          "def get_pixel(x, y):"
        ],
        "pascal": [
          "function GetPixel(x: Double; y: Double): Color"
        ],
        "csharp": [
          "public static Color SplashKit.GetPixel(double x, double y);"
        ]
      }
    },
    {
      "signature": "color get_pixel(window wnd,const point_2d &pt);",
      "name": "get_pixel",
      "method_name": null,
      "unique_global_name": "get_pixel_from_window_at_point",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the color of the pixel at the location on the supplied\nwindow.",
      "brief": null,
      "return": {
        "type": "color",
        "description": "The color of the pixel at the supplied location",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "wnd": {
          "type": "window",
          "description": "The window to get the color from",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "pt": {
          "type": "point_2d",
          "description": "The position of the pixel",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "from_window_at_point",
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "color get_pixel(window wnd, const point_2d &pt)"
        ],
        "rust": [
          "pub fn get_pixel(wnd: window, pt: &point_2d) -> color"
        ],
        "python": [
          "def get_pixel_from_window_at_point(wnd, pt):"
        ],
        "pascal": [
          "function GetPixel(wnd: Window; const pt: Point2D): Color"
        ],
        "csharp": [
          "public static Color SplashKit.GetPixel(Window wnd, Point2D pt);"
        ]
      }
    },
    {
      "signature": "color get_pixel(window wnd,double x,double y);",
      "name": "get_pixel",
      "method_name": null,
      "unique_global_name": "get_pixel_from_window",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the color of the pixel at the x,y location on the supplied\nwindow.",
      "brief": null,
      "return": {
        "type": "color",
        "description": "The color of the pixel at the supplied location",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "wnd": {
          "type": "window",
          "description": "The window to get the color from",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x": {
          "type": "double",
          "description": "The distance from the left edge of the window to the pixel\nto read",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y": {
          "type": "double",
          "description": "The distance from the top of the window to the pixel to read",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "from_window",
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "color get_pixel(window wnd, double x, double y)"
        ],
        "rust": [
          "pub fn get_pixel(wnd: window, x: f64, y: f64) -> color"
        ],
        "python": [
          "def get_pixel_from_window(wnd, x, y):"
        ],
        "pascal": [
          "function GetPixel(wnd: Window; x: Double; y: Double): Color"
        ],
        "csharp": [
          "public static Color SplashKit.GetPixel(Window wnd, double x, double y);"
        ]
      }
    },
    {
      "signature": "color get_pixel_from_window(window destination,const point_2d &pt);",
      "name": "get_pixel_from_window",
      "method_name": null,
      "unique_global_name": "get_pixel_from_window_at_point_from_window",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the color of the pixel at the x,y location on the given\nwindow.",
      "brief": null,
      "return": {
        "type": "color",
        "description": "The color of the pixel at the supplied location",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "window",
          "description": "The window to draw the pixel on",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "pt": {
          "type": "point_2d",
          "description": "The position of the pixel",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "at_point_from_window",
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "color get_pixel_from_window(window destination, const point_2d &pt)"
        ],
        "rust": [
          "pub fn get_pixel_from_window(destination: window, pt: &point_2d) -> color"
        ],
        "python": [
          "def get_pixel_from_window_at_point_from_window(destination, pt):"
        ],
        "pascal": [
          "function GetPixelFromWindow(destination: Window; const pt: Point2D): Color"
        ],
        "csharp": [
          "public static Color SplashKit.GetPixelFromWindow(Window destination, Point2D pt);"
        ]
      }
    },
    {
      "signature": "color get_pixel_from_window(window destination,double x,double y);",
      "name": "get_pixel_from_window",
      "method_name": null,
      "unique_global_name": "get_pixel_from_window_from_window",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the color of the pixel at the x,y location on the given\nwindow.",
      "brief": null,
      "return": {
        "type": "color",
        "description": "The color of the pixel at the supplied location",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "window",
          "description": "The window to draw the pixel on",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x": {
          "type": "double",
          "description": "The distance from the left edge of the window to the pixel\nto read",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y": {
          "type": "double",
          "description": "The distance from the top of the window to the pixel to read",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "window",
        "suffix": "from_window",
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "color get_pixel_from_window(window destination, double x, double y)"
        ],
        "rust": [
          "pub fn get_pixel_from_window(destination: window, x: f64, y: f64) -> color"
        ],
        "python": [
          "def get_pixel_from_window_from_window(destination, x, y):"
        ],
        "pascal": [
          "function GetPixelFromWindow(destination: Window; x: Double; y: Double): Color"
        ],
        "csharp": [
          "public Color Window.GetPixelFromWindow(Window destination, double x, double y);",
          "public static Color SplashKit.GetPixelFromWindow(Window destination, double x, double y);"
        ]
      }
    },
    {
      "signature": "void draw_quad(color clr,const quad &q);",
      "name": "draw_quad",
      "method_name": null,
      "unique_global_name": "draw_quad",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Draw a quad to the current window.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "clr": {
          "type": "color",
          "description": "The color for the quad",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "q": {
          "type": "quad",
          "description": "The details of the quad",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "void draw_quad(color clr, const quad &q)"
        ],
        "rust": [
          "pub fn draw_quad(clr: color, q: &quad)"
        ],
        "python": [
          "def draw_quad(clr, q):"
        ],
        "pascal": [
          "procedure DrawQuad(clr: Color; const q: Quad)"
        ],
        "csharp": [
          "public static void SplashKit.DrawQuad(Color clr, Quad q);"
        ]
      }
    },
    {
      "signature": "void draw_quad(color clr,const quad &q,const drawing_options &opts);",
      "name": "draw_quad",
      "method_name": null,
      "unique_global_name": "draw_quad_with_options",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Draw a quad using the supplied drawing options.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "clr": {
          "type": "color",
          "description": "The color for the quad",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "q": {
          "type": "quad",
          "description": "The details of the quad",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "The drawing options",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "with_options",
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "void draw_quad(color clr, const quad &q, const drawing_options &opts)"
        ],
        "rust": [
          "pub fn draw_quad(clr: color, q: &quad, opts: &drawing_options)"
        ],
        "python": [
          "def draw_quad_with_options(clr, q, opts):"
        ],
        "pascal": [
          "procedure DrawQuad(clr: Color; const q: Quad; const opts: DrawingOptions)"
        ],
        "csharp": [
          "public static void SplashKit.DrawQuad(Color clr, Quad q, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "void draw_quad_on_bitmap(bitmap destination,color clr,const quad &q);",
      "name": "draw_quad_on_bitmap",
      "method_name": "draw_quad",
      "unique_global_name": "draw_quad_on_bitmap",
      "unique_method_name": "bitmap.draw_quad",
      "suffix_name": null,
      "description": "Draw a quad on the supplied bitmap to the current bitmap.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "bitmap",
          "description": "The destination bitmap",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The color for the quad",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "q": {
          "type": "quad",
          "description": "The details of the quad",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "bitmap",
        "method": "draw_quad",
        "group": "graphics",
        "self": "destination"
      },
      "signatures": {
        "cpp": [
          "void draw_quad_on_bitmap(bitmap destination, color clr, const quad &q)"
        ],
        "rust": [
          "pub fn draw_quad_on_bitmap(destination: bitmap, clr: color, q: &quad)"
        ],
        "python": [
          "def draw_quad_on_bitmap(destination, clr, q):"
        ],
        "pascal": [
          "procedure DrawQuadOnBitmap(destination: Bitmap; clr: Color; const q: Quad)"
        ],
        "csharp": [
          "public void Bitmap.DrawQuadOnBitmap(Color clr, Quad q);",
          "public static void SplashKit.DrawQuadOnBitmap(Bitmap destination, Color clr, Quad q);"
        ]
      }
    },
    {
      "signature": "void draw_quad_on_bitmap(bitmap destination,color clr,const quad &q,const drawing_options &opts);",
      "name": "draw_quad_on_bitmap",
      "method_name": "draw_quad",
      "unique_global_name": "draw_quad_on_bitmap_with_options",
      "unique_method_name": "bitmap.draw_quad_with_options",
      "suffix_name": null,
      "description": "Draw a quad on the supplied bitmap using the supplied drawing options.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "bitmap",
          "description": "The destination bitmap",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The color for the quad",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "q": {
          "type": "quad",
          "description": "The details of the quad",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "The drawing options",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "bitmap",
        "method": "draw_quad",
        "suffix": "with_options",
        "group": "graphics",
        "self": "destination"
      },
      "signatures": {
        "cpp": [
          "void draw_quad_on_bitmap(bitmap destination, color clr, const quad &q, const drawing_options &opts)"
        ],
        "rust": [
          "pub fn draw_quad_on_bitmap(destination: bitmap, clr: color, q: &quad, opts: &drawing_options)"
        ],
        "python": [
          "def draw_quad_on_bitmap_with_options(destination, clr, q, opts):"
        ],
        "pascal": [
          "procedure DrawQuadOnBitmap(destination: Bitmap; clr: Color; const q: Quad; const opts: DrawingOptions)"
        ],
        "csharp": [
          "public void Bitmap.DrawQuadOnBitmap(Color clr, Quad q, DrawingOptions opts);",
          "public static void SplashKit.DrawQuadOnBitmap(Bitmap destination, Color clr, Quad q, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "void draw_quad_on_window(window destination,color clr,const quad &q);",
      "name": "draw_quad_on_window",
      "method_name": "draw_quad",
      "unique_global_name": "draw_quad_on_window",
      "unique_method_name": "window.draw_quad",
      "suffix_name": null,
      "description": "Draw a quad on the supplied window to the current window.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "window",
          "description": "The destination window",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The color for the quad",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "q": {
          "type": "quad",
          "description": "The details of the quad",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "window",
        "method": "draw_quad",
        "group": "graphics",
        "self": "destination"
      },
      "signatures": {
        "cpp": [
          "void draw_quad_on_window(window destination, color clr, const quad &q)"
        ],
        "rust": [
          "pub fn draw_quad_on_window(destination: window, clr: color, q: &quad)"
        ],
        "python": [
          "def draw_quad_on_window(destination, clr, q):"
        ],
        "pascal": [
          "procedure DrawQuadOnWindow(destination: Window; clr: Color; const q: Quad)"
        ],
        "csharp": [
          "public void Window.DrawQuadOnWindow(Color clr, Quad q);",
          "public static void SplashKit.DrawQuadOnWindow(Window destination, Color clr, Quad q);"
        ]
      }
    },
    {
      "signature": "void draw_quad_on_window(window destination,color clr,const quad &q,const drawing_options &opts);",
      "name": "draw_quad_on_window",
      "method_name": "draw_quad",
      "unique_global_name": "draw_quad_on_window_with_options",
      "unique_method_name": "window.draw_quad_with_options",
      "suffix_name": null,
      "description": "Draw a quad on the supplied window using the supplied drawing options.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "window",
          "description": "The destination window",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The color for the quad",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "q": {
          "type": "quad",
          "description": "The details of the quad",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "The drawing options",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "window",
        "method": "draw_quad",
        "suffix": "with_options",
        "group": "graphics",
        "self": "destination"
      },
      "signatures": {
        "cpp": [
          "void draw_quad_on_window(window destination, color clr, const quad &q, const drawing_options &opts)"
        ],
        "rust": [
          "pub fn draw_quad_on_window(destination: window, clr: color, q: &quad, opts: &drawing_options)"
        ],
        "python": [
          "def draw_quad_on_window_with_options(destination, clr, q, opts):"
        ],
        "pascal": [
          "procedure DrawQuadOnWindow(destination: Window; clr: Color; const q: Quad; const opts: DrawingOptions)"
        ],
        "csharp": [
          "public void Window.DrawQuadOnWindow(Color clr, Quad q, DrawingOptions opts);",
          "public static void SplashKit.DrawQuadOnWindow(Window destination, Color clr, Quad q, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "void draw_rectangle(color clr,const rectangle &rect);",
      "name": "draw_rectangle",
      "method_name": null,
      "unique_global_name": "draw_rectangle_record",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Draw a rectangle onto the current window.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "clr": {
          "type": "color",
          "description": "The color of the rectangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "rect": {
          "type": "rectangle",
          "description": "The rectangle to draw",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "record",
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "void draw_rectangle(color clr, const rectangle &rect)"
        ],
        "rust": [
          "pub fn draw_rectangle(clr: color, rect: &rectangle)"
        ],
        "python": [
          "def draw_rectangle_record(clr, rect):"
        ],
        "pascal": [
          "procedure DrawRectangle(clr: Color; const rect: Rectangle)"
        ],
        "csharp": [
          "public static void SplashKit.DrawRectangle(Color clr, Rectangle rect);"
        ]
      }
    },
    {
      "signature": "void draw_rectangle(color clr,const rectangle &rect,const drawing_options &opts);",
      "name": "draw_rectangle",
      "method_name": null,
      "unique_global_name": "draw_rectangle_record_with_options",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Draw a rectangle using the supplied drawing options.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "clr": {
          "type": "color",
          "description": "The color of the rectangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "rect": {
          "type": "rectangle",
          "description": "The rectangle to draw",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "The drawing options",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "record_with_options",
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "void draw_rectangle(color clr, const rectangle &rect, const drawing_options &opts)"
        ],
        "rust": [
          "pub fn draw_rectangle(clr: color, rect: &rectangle, opts: &drawing_options)"
        ],
        "python": [
          "def draw_rectangle_record_with_options(clr, rect, opts):"
        ],
        "pascal": [
          "procedure DrawRectangle(clr: Color; const rect: Rectangle; const opts: DrawingOptions)"
        ],
        "csharp": [
          "public static void SplashKit.DrawRectangle(Color clr, Rectangle rect, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "void draw_rectangle(color clr,double x,double y,double width,double height);",
      "name": "draw_rectangle",
      "method_name": null,
      "unique_global_name": "draw_rectangle",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Draw a rectangle to the current window.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "clr": {
          "type": "color",
          "description": "The color of the rectangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x": {
          "type": "double",
          "description": "The distance from the left of the window/bitmap to the\nrectangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y": {
          "type": "double",
          "description": "The distance from the top of the window/bitmap to the\nrectangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "width": {
          "type": "double",
          "description": "The width of the rectangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "height": {
          "type": "double",
          "description": "The height of the rectangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "void draw_rectangle(color clr, double x, double y, double width, double height)"
        ],
        "rust": [
          "pub fn draw_rectangle(clr: color, x: f64, y: f64, width: f64, height: f64)"
        ],
        "python": [
          "def draw_rectangle(clr, x, y, width, height):"
        ],
        "pascal": [
          "procedure DrawRectangle(clr: Color; x: Double; y: Double; width: Double; height: Double)"
        ],
        "csharp": [
          "public static void SplashKit.DrawRectangle(Color clr, double x, double y, double width, double height);"
        ]
      }
    },
    {
      "signature": "void draw_rectangle(color clr,double x,double y,double width,double height,const drawing_options &opts);",
      "name": "draw_rectangle",
      "method_name": null,
      "unique_global_name": "draw_rectangle_with_options",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Draw a rectangle using the supplied drawing options.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "clr": {
          "type": "color",
          "description": "The color of the rectangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x": {
          "type": "double",
          "description": "The distance from the left of the window/bitmap to the\nrectangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y": {
          "type": "double",
          "description": "The distance from the top of the window/bitmap to the\nrectangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "width": {
          "type": "double",
          "description": "The width of the rectangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "height": {
          "type": "double",
          "description": "The height of the rectangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "The drawing options",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "with_options",
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "void draw_rectangle(color clr, double x, double y, double width, double height, const drawing_options &opts)"
        ],
        "rust": [
          "pub fn draw_rectangle(clr: color, x: f64, y: f64, width: f64, height: f64, opts: &drawing_options)"
        ],
        "python": [
          "def draw_rectangle_with_options(clr, x, y, width, height, opts):"
        ],
        "pascal": [
          "procedure DrawRectangle(clr: Color; x: Double; y: Double; width: Double; height: Double; const opts: DrawingOptions)"
        ],
        "csharp": [
          "public static void SplashKit.DrawRectangle(Color clr, double x, double y, double width, double height, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "void draw_rectangle_on_bitmap(bitmap destination,color clr,const rectangle &rect);",
      "name": "draw_rectangle_on_bitmap",
      "method_name": "draw_rectangle",
      "unique_global_name": "draw_rectangle_on_bitmap_record",
      "unique_method_name": "bitmap.draw_rectangle_record",
      "suffix_name": null,
      "description": "Draw a rectangle to the bitmap using the supplied rect. The rectangle is centred on its x, y\ncoordinates, and has the provided width and height.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "bitmap",
          "description": "The destination bitmap",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The color of the rectangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "rect": {
          "type": "rectangle",
          "description": "the rectangle to be drawn to the bitmap",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "bitmap",
        "method": "draw_rectangle",
        "suffix": "record",
        "group": "graphics",
        "self": "destination"
      },
      "signatures": {
        "cpp": [
          "void draw_rectangle_on_bitmap(bitmap destination, color clr, const rectangle &rect)"
        ],
        "rust": [
          "pub fn draw_rectangle_on_bitmap(destination: bitmap, clr: color, rect: &rectangle)"
        ],
        "python": [
          "def draw_rectangle_on_bitmap_record(destination, clr, rect):"
        ],
        "pascal": [
          "procedure DrawRectangleOnBitmap(destination: Bitmap; clr: Color; const rect: Rectangle)"
        ],
        "csharp": [
          "public void Bitmap.DrawRectangleOnBitmap(Color clr, Rectangle rect);",
          "public static void SplashKit.DrawRectangleOnBitmap(Bitmap destination, Color clr, Rectangle rect);"
        ]
      }
    },
    {
      "signature": "void draw_rectangle_on_bitmap(bitmap destination,color clr,const rectangle &rect,const drawing_options &opts);",
      "name": "draw_rectangle_on_bitmap",
      "method_name": "draw_rectangle",
      "unique_global_name": "draw_rectangle_on_bitmap_record_with_options",
      "unique_method_name": "bitmap.draw_rectangle_record_with_options",
      "suffix_name": null,
      "description": "Draw a rectangle to the bitmap using the supplied rect and drawing options. The rectangle is centred on its x, y\ncoordinates, and has the provided width and height.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "bitmap",
          "description": "The destination bitmap",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The color of the rectangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "rect": {
          "type": "rectangle",
          "description": "the rectangle to be drawn to the bitmap",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "Drawing options to configure the drawing operation",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "bitmap",
        "method": "draw_rectangle",
        "suffix": "record_with_options",
        "group": "graphics",
        "self": "destination"
      },
      "signatures": {
        "cpp": [
          "void draw_rectangle_on_bitmap(bitmap destination, color clr, const rectangle &rect, const drawing_options &opts)"
        ],
        "rust": [
          "pub fn draw_rectangle_on_bitmap(destination: bitmap, clr: color, rect: &rectangle, opts: &drawing_options)"
        ],
        "python": [
          "def draw_rectangle_on_bitmap_record_with_options(destination, clr, rect, opts):"
        ],
        "pascal": [
          "procedure DrawRectangleOnBitmap(destination: Bitmap; clr: Color; const rect: Rectangle; const opts: DrawingOptions)"
        ],
        "csharp": [
          "public void Bitmap.DrawRectangleOnBitmap(Color clr, Rectangle rect, DrawingOptions opts);",
          "public static void SplashKit.DrawRectangleOnBitmap(Bitmap destination, Color clr, Rectangle rect, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "void draw_rectangle_on_bitmap(bitmap destination,color clr,double x,double y,double width,double height);",
      "name": "draw_rectangle_on_bitmap",
      "method_name": "draw_rectangle",
      "unique_global_name": "draw_rectangle_on_bitmap",
      "unique_method_name": "bitmap.draw_rectangle",
      "suffix_name": null,
      "description": "Draw a rectangle to the bitmap using. The rectangle is centred on its x, y\ncoordinates, and has the provided width and height.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "bitmap",
          "description": "The destination bitmap",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The color of the rectangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x": {
          "type": "double",
          "description": "The x location of the rectangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y": {
          "type": "double",
          "description": "The y location of the rectangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "width": {
          "type": "double",
          "description": "The width of the rectangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "height": {
          "type": "double",
          "description": "The height of the rectangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "bitmap",
        "method": "draw_rectangle",
        "group": "graphics",
        "self": "destination"
      },
      "signatures": {
        "cpp": [
          "void draw_rectangle_on_bitmap(bitmap destination, color clr, double x, double y, double width, double height)"
        ],
        "rust": [
          "pub fn draw_rectangle_on_bitmap(destination: bitmap, clr: color, x: f64, y: f64, width: f64, height: f64)"
        ],
        "python": [
          "def draw_rectangle_on_bitmap(destination, clr, x, y, width, height):"
        ],
        "pascal": [
          "procedure DrawRectangleOnBitmap(destination: Bitmap; clr: Color; x: Double; y: Double; width: Double; height: Double)"
        ],
        "csharp": [
          "public void Bitmap.DrawRectangleOnBitmap(Color clr, double x, double y, double width, double height);",
          "public static void SplashKit.DrawRectangleOnBitmap(Bitmap destination, Color clr, double x, double y, double width, double height);"
        ]
      }
    },
    {
      "signature": "void draw_rectangle_on_bitmap(bitmap destination,color clr,double x,double y,double width,double height,drawing_options opts);",
      "name": "draw_rectangle_on_bitmap",
      "method_name": "draw_rectangle",
      "unique_global_name": "draw_rectangle_on_bitmap_with_options",
      "unique_method_name": "bitmap.draw_rectangle_with_options",
      "suffix_name": null,
      "description": "Draw a rectangle to the bitmap using the supplied drawing options. The rectangle is centred on its x, y\ncoordinates, and has the provided width and height.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "bitmap",
          "description": "The destination bitmap",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The color of the rectangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x": {
          "type": "double",
          "description": "The x location of the rectangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y": {
          "type": "double",
          "description": "The y location of the rectangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "width": {
          "type": "double",
          "description": "The width of the rectangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "height": {
          "type": "double",
          "description": "The height of the rectangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "Drawing options to configure the drawing operation",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "bitmap",
        "method": "draw_rectangle",
        "suffix": "with_options",
        "group": "graphics",
        "self": "destination"
      },
      "signatures": {
        "cpp": [
          "void draw_rectangle_on_bitmap(bitmap destination, color clr, double x, double y, double width, double height, drawing_options opts)"
        ],
        "rust": [
          "pub fn draw_rectangle_on_bitmap(destination: bitmap, clr: color, x: f64, y: f64, width: f64, height: f64, opts: drawing_options)"
        ],
        "python": [
          "def draw_rectangle_on_bitmap_with_options(destination, clr, x, y, width, height, opts):"
        ],
        "pascal": [
          "procedure DrawRectangleOnBitmap(destination: Bitmap; clr: Color; x: Double; y: Double; width: Double; height: Double; opts: DrawingOptions)"
        ],
        "csharp": [
          "public void Bitmap.DrawRectangleOnBitmap(Color clr, double x, double y, double width, double height, DrawingOptions opts);",
          "public static void SplashKit.DrawRectangleOnBitmap(Bitmap destination, Color clr, double x, double y, double width, double height, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "void draw_rectangle_on_window(window destination,color clr,const rectangle &rect);",
      "name": "draw_rectangle_on_window",
      "method_name": "draw_rectangle",
      "unique_global_name": "draw_rectangle_on_window_record",
      "unique_method_name": "window.draw_rectangle_record",
      "suffix_name": null,
      "description": "Draw a rectangle to the window using the supplied rect. The rectangle is centred on its x, y\ncoordinates, and has the provided width and height.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "window",
          "description": "The destination window",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The color of the rectangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "rect": {
          "type": "rectangle",
          "description": "the rectangle to be drawn to the window",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "window",
        "method": "draw_rectangle",
        "suffix": "record",
        "group": "graphics",
        "self": "destination"
      },
      "signatures": {
        "cpp": [
          "void draw_rectangle_on_window(window destination, color clr, const rectangle &rect)"
        ],
        "rust": [
          "pub fn draw_rectangle_on_window(destination: window, clr: color, rect: &rectangle)"
        ],
        "python": [
          "def draw_rectangle_on_window_record(destination, clr, rect):"
        ],
        "pascal": [
          "procedure DrawRectangleOnWindow(destination: Window; clr: Color; const rect: Rectangle)"
        ],
        "csharp": [
          "public void Window.DrawRectangleOnWindow(Color clr, Rectangle rect);",
          "public static void SplashKit.DrawRectangleOnWindow(Window destination, Color clr, Rectangle rect);"
        ]
      }
    },
    {
      "signature": "void draw_rectangle_on_window(window destination,color clr,const rectangle &rect,const drawing_options &opts);",
      "name": "draw_rectangle_on_window",
      "method_name": "draw_rectangle",
      "unique_global_name": "draw_rectangle_on_window_record_with_options",
      "unique_method_name": "window.draw_rectangle_record_with_options",
      "suffix_name": null,
      "description": "Draw a rectangle to the window using the supplied rect and drawing options. The rectangle is centred on its x, y\ncoordinates, and has the provided width and height.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "window",
          "description": "The destination window",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The color of the rectangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "rect": {
          "type": "rectangle",
          "description": "the rectangle to be drawn to the window",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "Drawing options to configure the drawing operation",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "window",
        "method": "draw_rectangle",
        "suffix": "record_with_options",
        "group": "graphics",
        "self": "destination"
      },
      "signatures": {
        "cpp": [
          "void draw_rectangle_on_window(window destination, color clr, const rectangle &rect, const drawing_options &opts)"
        ],
        "rust": [
          "pub fn draw_rectangle_on_window(destination: window, clr: color, rect: &rectangle, opts: &drawing_options)"
        ],
        "python": [
          "def draw_rectangle_on_window_record_with_options(destination, clr, rect, opts):"
        ],
        "pascal": [
          "procedure DrawRectangleOnWindow(destination: Window; clr: Color; const rect: Rectangle; const opts: DrawingOptions)"
        ],
        "csharp": [
          "public void Window.DrawRectangleOnWindow(Color clr, Rectangle rect, DrawingOptions opts);",
          "public static void SplashKit.DrawRectangleOnWindow(Window destination, Color clr, Rectangle rect, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "void draw_rectangle_on_window(window destination,color clr,double x,double y,double width,double height);",
      "name": "draw_rectangle_on_window",
      "method_name": "draw_rectangle",
      "unique_global_name": "draw_rectangle_on_window",
      "unique_method_name": "window.draw_rectangle",
      "suffix_name": null,
      "description": "Draw a rectangle to the window using. The rectangle is centred on its x, y\ncoordinates, and has the provided width and height.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "window",
          "description": "The destination window",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The color of the rectangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x": {
          "type": "double",
          "description": "The x location of the rectangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y": {
          "type": "double",
          "description": "The y location of the rectangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "width": {
          "type": "double",
          "description": "The width of the rectangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "height": {
          "type": "double",
          "description": "The height of the rectangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "window",
        "method": "draw_rectangle",
        "group": "graphics",
        "self": "destination"
      },
      "signatures": {
        "cpp": [
          "void draw_rectangle_on_window(window destination, color clr, double x, double y, double width, double height)"
        ],
        "rust": [
          "pub fn draw_rectangle_on_window(destination: window, clr: color, x: f64, y: f64, width: f64, height: f64)"
        ],
        "python": [
          "def draw_rectangle_on_window(destination, clr, x, y, width, height):"
        ],
        "pascal": [
          "procedure DrawRectangleOnWindow(destination: Window; clr: Color; x: Double; y: Double; width: Double; height: Double)"
        ],
        "csharp": [
          "public void Window.DrawRectangleOnWindow(Color clr, double x, double y, double width, double height);",
          "public static void SplashKit.DrawRectangleOnWindow(Window destination, Color clr, double x, double y, double width, double height);"
        ]
      }
    },
    {
      "signature": "void draw_rectangle_on_window(window destination,color clr,double x,double y,double width,double height,drawing_options opts);",
      "name": "draw_rectangle_on_window",
      "method_name": "draw_rectangle",
      "unique_global_name": "draw_rectangle_on_window_with_options",
      "unique_method_name": "window.draw_rectangle_with_options",
      "suffix_name": null,
      "description": "Draw a rectangle to the window using the supplied drawing options. The rectangle is centred on its x, y\ncoordinates, and has the provided width and height.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "window",
          "description": "The destination window",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The color of the rectangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x": {
          "type": "double",
          "description": "The x location of the rectangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y": {
          "type": "double",
          "description": "The y location of the rectangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "width": {
          "type": "double",
          "description": "The width of the rectangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "height": {
          "type": "double",
          "description": "The height of the rectangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "Drawing options to configure the drawing operation",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "window",
        "method": "draw_rectangle",
        "suffix": "with_options",
        "group": "graphics",
        "self": "destination"
      },
      "signatures": {
        "cpp": [
          "void draw_rectangle_on_window(window destination, color clr, double x, double y, double width, double height, drawing_options opts)"
        ],
        "rust": [
          "pub fn draw_rectangle_on_window(destination: window, clr: color, x: f64, y: f64, width: f64, height: f64, opts: drawing_options)"
        ],
        "python": [
          "def draw_rectangle_on_window_with_options(destination, clr, x, y, width, height, opts):"
        ],
        "pascal": [
          "procedure DrawRectangleOnWindow(destination: Window; clr: Color; x: Double; y: Double; width: Double; height: Double; opts: DrawingOptions)"
        ],
        "csharp": [
          "public void Window.DrawRectangleOnWindow(Color clr, double x, double y, double width, double height, DrawingOptions opts);",
          "public static void SplashKit.DrawRectangleOnWindow(Window destination, Color clr, double x, double y, double width, double height, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "void fill_quad(color clr,const quad &q);",
      "name": "fill_quad",
      "method_name": null,
      "unique_global_name": "fill_quad",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Fill a quad on the current window.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "clr": {
          "type": "color",
          "description": "The color for the quad",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "q": {
          "type": "quad",
          "description": "The details of the quad",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "void fill_quad(color clr, const quad &q)"
        ],
        "rust": [
          "pub fn fill_quad(clr: color, q: &quad)"
        ],
        "python": [
          "def fill_quad(clr, q):"
        ],
        "pascal": [
          "procedure FillQuad(clr: Color; const q: Quad)"
        ],
        "csharp": [
          "public static void SplashKit.FillQuad(Color clr, Quad q);"
        ]
      }
    },
    {
      "signature": "void fill_quad(color clr,const quad &q,const drawing_options &opts);",
      "name": "fill_quad",
      "method_name": null,
      "unique_global_name": "fill_quad_with_options",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Fill a quad using the supplied drawing options.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "clr": {
          "type": "color",
          "description": "The color for the quad",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "q": {
          "type": "quad",
          "description": "The details of the quad",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "The drawing options",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "with_options",
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "void fill_quad(color clr, const quad &q, const drawing_options &opts)"
        ],
        "rust": [
          "pub fn fill_quad(clr: color, q: &quad, opts: &drawing_options)"
        ],
        "python": [
          "def fill_quad_with_options(clr, q, opts):"
        ],
        "pascal": [
          "procedure FillQuad(clr: Color; const q: Quad; const opts: DrawingOptions)"
        ],
        "csharp": [
          "public static void SplashKit.FillQuad(Color clr, Quad q, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "void fill_quad_on_bitmap(bitmap destination,color clr,const quad &q);",
      "name": "fill_quad_on_bitmap",
      "method_name": "fill_quad",
      "unique_global_name": "fill_quad_on_bitmap",
      "unique_method_name": "bitmap.fill_quad",
      "suffix_name": null,
      "description": "Fill a quad on the supplied bitmap on the current bitmap.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "bitmap",
          "description": "The destination bitmap",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The color for the quad",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "q": {
          "type": "quad",
          "description": "The details of the quad",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "bitmap",
        "method": "fill_quad",
        "group": "graphics",
        "self": "destination"
      },
      "signatures": {
        "cpp": [
          "void fill_quad_on_bitmap(bitmap destination, color clr, const quad &q)"
        ],
        "rust": [
          "pub fn fill_quad_on_bitmap(destination: bitmap, clr: color, q: &quad)"
        ],
        "python": [
          "def fill_quad_on_bitmap(destination, clr, q):"
        ],
        "pascal": [
          "procedure FillQuadOnBitmap(destination: Bitmap; clr: Color; const q: Quad)"
        ],
        "csharp": [
          "public void Bitmap.FillQuadOnBitmap(Color clr, Quad q);",
          "public static void SplashKit.FillQuadOnBitmap(Bitmap destination, Color clr, Quad q);"
        ]
      }
    },
    {
      "signature": "void fill_quad_on_bitmap(bitmap destination,color clr,const quad &q,const drawing_options &opts);",
      "name": "fill_quad_on_bitmap",
      "method_name": "fill_quad",
      "unique_global_name": "fill_quad_on_bitmap_with_options",
      "unique_method_name": "bitmap.fill_quad_with_options",
      "suffix_name": null,
      "description": "Fill a quad on the supplied bitmap using the supplied drawing options.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "bitmap",
          "description": "The destination bitmap",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The color for the quad",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "q": {
          "type": "quad",
          "description": "The details of the quad",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "The drawing options",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "bitmap",
        "method": "fill_quad",
        "suffix": "with_options",
        "group": "graphics",
        "self": "destination"
      },
      "signatures": {
        "cpp": [
          "void fill_quad_on_bitmap(bitmap destination, color clr, const quad &q, const drawing_options &opts)"
        ],
        "rust": [
          "pub fn fill_quad_on_bitmap(destination: bitmap, clr: color, q: &quad, opts: &drawing_options)"
        ],
        "python": [
          "def fill_quad_on_bitmap_with_options(destination, clr, q, opts):"
        ],
        "pascal": [
          "procedure FillQuadOnBitmap(destination: Bitmap; clr: Color; const q: Quad; const opts: DrawingOptions)"
        ],
        "csharp": [
          "public void Bitmap.FillQuadOnBitmap(Color clr, Quad q, DrawingOptions opts);",
          "public static void SplashKit.FillQuadOnBitmap(Bitmap destination, Color clr, Quad q, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "void fill_quad_on_window(window destination,color clr,const quad &q);",
      "name": "fill_quad_on_window",
      "method_name": "fill_quad",
      "unique_global_name": "fill_quad_on_window",
      "unique_method_name": "window.fill_quad",
      "suffix_name": null,
      "description": "Fill a quad on the supplied window on the current window.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "window",
          "description": "The destination window",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The color for the quad",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "q": {
          "type": "quad",
          "description": "The details of the quad",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "window",
        "method": "fill_quad",
        "group": "graphics",
        "self": "destination"
      },
      "signatures": {
        "cpp": [
          "void fill_quad_on_window(window destination, color clr, const quad &q)"
        ],
        "rust": [
          "pub fn fill_quad_on_window(destination: window, clr: color, q: &quad)"
        ],
        "python": [
          "def fill_quad_on_window(destination, clr, q):"
        ],
        "pascal": [
          "procedure FillQuadOnWindow(destination: Window; clr: Color; const q: Quad)"
        ],
        "csharp": [
          "public void Window.FillQuadOnWindow(Color clr, Quad q);",
          "public static void SplashKit.FillQuadOnWindow(Window destination, Color clr, Quad q);"
        ]
      }
    },
    {
      "signature": "void fill_quad_on_window(window destination,color clr,const quad &q,const drawing_options &opts);",
      "name": "fill_quad_on_window",
      "method_name": null,
      "unique_global_name": "fill_quad_on_window_with_options",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Fill a quad on the supplied window using the supplied drawing options.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "window",
          "description": "The destination window",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The color for the quad",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "q": {
          "type": "quad",
          "description": "The details of the quad",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "The drawing options",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "window",
        "suffix": "with_options",
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "void fill_quad_on_window(window destination, color clr, const quad &q, const drawing_options &opts)"
        ],
        "rust": [
          "pub fn fill_quad_on_window(destination: window, clr: color, q: &quad, opts: &drawing_options)"
        ],
        "python": [
          "def fill_quad_on_window_with_options(destination, clr, q, opts):"
        ],
        "pascal": [
          "procedure FillQuadOnWindow(destination: Window; clr: Color; const q: Quad; const opts: DrawingOptions)"
        ],
        "csharp": [
          "public void Window.FillQuadOnWindow(Window destination, Color clr, Quad q, DrawingOptions opts);",
          "public static void SplashKit.FillQuadOnWindow(Window destination, Color clr, Quad q, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "void fill_rectangle(color clr,const rectangle &rect);",
      "name": "fill_rectangle",
      "method_name": null,
      "unique_global_name": "fill_rectangle_record",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Fill a rectangle onto the current window.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "clr": {
          "type": "color",
          "description": "The color of the rectangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "rect": {
          "type": "rectangle",
          "description": "The rectangle to draw",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "record",
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "void fill_rectangle(color clr, const rectangle &rect)"
        ],
        "rust": [
          "pub fn fill_rectangle(clr: color, rect: &rectangle)"
        ],
        "python": [
          "def fill_rectangle_record(clr, rect):"
        ],
        "pascal": [
          "procedure FillRectangle(clr: Color; const rect: Rectangle)"
        ],
        "csharp": [
          "public static void SplashKit.FillRectangle(Color clr, Rectangle rect);"
        ]
      }
    },
    {
      "signature": "void fill_rectangle(color clr,const rectangle &rect,const drawing_options &opts);",
      "name": "fill_rectangle",
      "method_name": null,
      "unique_global_name": "fill_rectangle_record_with_options",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Fills a rectangle using the supplied drawing options.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "clr": {
          "type": "color",
          "description": "The color of the rectangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "rect": {
          "type": "rectangle",
          "description": "The rectangle to draw",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "The drawing options",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "record_with_options",
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "void fill_rectangle(color clr, const rectangle &rect, const drawing_options &opts)"
        ],
        "rust": [
          "pub fn fill_rectangle(clr: color, rect: &rectangle, opts: &drawing_options)"
        ],
        "python": [
          "def fill_rectangle_record_with_options(clr, rect, opts):"
        ],
        "pascal": [
          "procedure FillRectangle(clr: Color; const rect: Rectangle; const opts: DrawingOptions)"
        ],
        "csharp": [
          "public static void SplashKit.FillRectangle(Color clr, Rectangle rect, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "void fill_rectangle(color clr,double x,double y,double width,double height);",
      "name": "fill_rectangle",
      "method_name": null,
      "unique_global_name": "fill_rectangle",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Fills a rectangle to the current window.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "clr": {
          "type": "color",
          "description": "The color of the rectangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x": {
          "type": "double",
          "description": "The distance from the left of the window/bitmap to the\nrectangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y": {
          "type": "double",
          "description": "The distance from the top of the window/bitmap to the\nrectangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "width": {
          "type": "double",
          "description": "The width of the rectangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "height": {
          "type": "double",
          "description": "The height of the rectangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "void fill_rectangle(color clr, double x, double y, double width, double height)"
        ],
        "rust": [
          "pub fn fill_rectangle(clr: color, x: f64, y: f64, width: f64, height: f64)"
        ],
        "python": [
          "def fill_rectangle(clr, x, y, width, height):"
        ],
        "pascal": [
          "procedure FillRectangle(clr: Color; x: Double; y: Double; width: Double; height: Double)"
        ],
        "csharp": [
          "public static void SplashKit.FillRectangle(Color clr, double x, double y, double width, double height);"
        ]
      }
    },
    {
      "signature": "void fill_rectangle(color clr,double x,double y,double width,double height,const drawing_options &opts);",
      "name": "fill_rectangle",
      "method_name": null,
      "unique_global_name": "fill_rectangle_with_options",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Fills a rectangle using the supplied drawing options.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "clr": {
          "type": "color",
          "description": "The color of the rectangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x": {
          "type": "double",
          "description": "The distance from the left of the window/bitmap to the\nrectangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y": {
          "type": "double",
          "description": "The distance from the top of the window/bitmap to the\nrectangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "width": {
          "type": "double",
          "description": "The width of the rectangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "height": {
          "type": "double",
          "description": "The height of the rectangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "The drawing options",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "with_options",
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "void fill_rectangle(color clr, double x, double y, double width, double height, const drawing_options &opts)"
        ],
        "rust": [
          "pub fn fill_rectangle(clr: color, x: f64, y: f64, width: f64, height: f64, opts: &drawing_options)"
        ],
        "python": [
          "def fill_rectangle_with_options(clr, x, y, width, height, opts):"
        ],
        "pascal": [
          "procedure FillRectangle(clr: Color; x: Double; y: Double; width: Double; height: Double; const opts: DrawingOptions)"
        ],
        "csharp": [
          "public static void SplashKit.FillRectangle(Color clr, double x, double y, double width, double height, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "void fill_rectangle_on_bitmap(bitmap destination,color clr,const rectangle &rect);",
      "name": "fill_rectangle_on_bitmap",
      "method_name": "fill_rectangle",
      "unique_global_name": "fill_rectangle_on_bitmap_record",
      "unique_method_name": "bitmap.fill_rectangle_record",
      "suffix_name": null,
      "description": "Fill a rectangle on the supplied bitmap onto the current bitmap.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "bitmap",
          "description": "The destination bitmap",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The color of the rectangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "rect": {
          "type": "rectangle",
          "description": "The rectangle to draw",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "bitmap",
        "method": "fill_rectangle",
        "suffix": "record",
        "group": "graphics",
        "self": "destination"
      },
      "signatures": {
        "cpp": [
          "void fill_rectangle_on_bitmap(bitmap destination, color clr, const rectangle &rect)"
        ],
        "rust": [
          "pub fn fill_rectangle_on_bitmap(destination: bitmap, clr: color, rect: &rectangle)"
        ],
        "python": [
          "def fill_rectangle_on_bitmap_record(destination, clr, rect):"
        ],
        "pascal": [
          "procedure FillRectangleOnBitmap(destination: Bitmap; clr: Color; const rect: Rectangle)"
        ],
        "csharp": [
          "public void Bitmap.FillRectangleOnBitmap(Color clr, Rectangle rect);",
          "public static void SplashKit.FillRectangleOnBitmap(Bitmap destination, Color clr, Rectangle rect);"
        ]
      }
    },
    {
      "signature": "void fill_rectangle_on_bitmap(bitmap destination,color clr,const rectangle &rect,const drawing_options &opts);",
      "name": "fill_rectangle_on_bitmap",
      "method_name": "fill_rectangle",
      "unique_global_name": "fill_rectangle_on_bitmap_record_with_options",
      "unique_method_name": "bitmap.fill_rectangle_record_with_options",
      "suffix_name": null,
      "description": "Fills a rectangle on the supplied bitmap using the supplied drawing options.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "bitmap",
          "description": "The destination bitmap",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The color of the rectangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "rect": {
          "type": "rectangle",
          "description": "The rectangle to draw",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "The drawing options",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "bitmap",
        "method": "fill_rectangle",
        "suffix": "record_with_options",
        "group": "graphics",
        "self": "destination"
      },
      "signatures": {
        "cpp": [
          "void fill_rectangle_on_bitmap(bitmap destination, color clr, const rectangle &rect, const drawing_options &opts)"
        ],
        "rust": [
          "pub fn fill_rectangle_on_bitmap(destination: bitmap, clr: color, rect: &rectangle, opts: &drawing_options)"
        ],
        "python": [
          "def fill_rectangle_on_bitmap_record_with_options(destination, clr, rect, opts):"
        ],
        "pascal": [
          "procedure FillRectangleOnBitmap(destination: Bitmap; clr: Color; const rect: Rectangle; const opts: DrawingOptions)"
        ],
        "csharp": [
          "public void Bitmap.FillRectangleOnBitmap(Color clr, Rectangle rect, DrawingOptions opts);",
          "public static void SplashKit.FillRectangleOnBitmap(Bitmap destination, Color clr, Rectangle rect, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "void fill_rectangle_on_bitmap(bitmap destination,color clr,double x,double y,double width,double height);",
      "name": "fill_rectangle_on_bitmap",
      "method_name": "fill_rectangle",
      "unique_global_name": "fill_rectangle_on_bitmap",
      "unique_method_name": "bitmap.fill_rectangle",
      "suffix_name": null,
      "description": "Fills a rectangle on the supplied bitmap to the current bitmap.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "bitmap",
          "description": "The destination bitmap",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The color of the rectangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x": {
          "type": "double",
          "description": "The distance from the left of the bitmap/bitmap to the\nrectangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y": {
          "type": "double",
          "description": "The distance from the top of the bitmap/bitmap to the\nrectangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "width": {
          "type": "double",
          "description": "The width of the rectangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "height": {
          "type": "double",
          "description": "The height of the rectangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "bitmap",
        "method": "fill_rectangle",
        "group": "graphics",
        "self": "destination"
      },
      "signatures": {
        "cpp": [
          "void fill_rectangle_on_bitmap(bitmap destination, color clr, double x, double y, double width, double height)"
        ],
        "rust": [
          "pub fn fill_rectangle_on_bitmap(destination: bitmap, clr: color, x: f64, y: f64, width: f64, height: f64)"
        ],
        "python": [
          "def fill_rectangle_on_bitmap(destination, clr, x, y, width, height):"
        ],
        "pascal": [
          "procedure FillRectangleOnBitmap(destination: Bitmap; clr: Color; x: Double; y: Double; width: Double; height: Double)"
        ],
        "csharp": [
          "public void Bitmap.FillRectangleOnBitmap(Color clr, double x, double y, double width, double height);",
          "public static void SplashKit.FillRectangleOnBitmap(Bitmap destination, Color clr, double x, double y, double width, double height);"
        ]
      }
    },
    {
      "signature": "void fill_rectangle_on_bitmap(bitmap destination,color clr,double x,double y,double width,double height,const drawing_options &opts);",
      "name": "fill_rectangle_on_bitmap",
      "method_name": "fill_rectangle",
      "unique_global_name": "fill_rectangle_on_bitmap_with_options",
      "unique_method_name": "bitmap.fill_rectangle_with_options",
      "suffix_name": null,
      "description": "Fills a rectangle on the supplied bitmap, using the supplied drawing options.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "bitmap",
          "description": "The destination bitmap",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The color of the rectangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x": {
          "type": "double",
          "description": "The distance from the left of the bitmap/bitmap to the\nrectangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y": {
          "type": "double",
          "description": "The distance from the top of the bitmap/bitmap to the\nrectangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "width": {
          "type": "double",
          "description": "The width of the rectangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "height": {
          "type": "double",
          "description": "The height of the rectangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "The drawing options",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "bitmap",
        "method": "fill_rectangle",
        "suffix": "with_options",
        "group": "graphics",
        "self": "destination"
      },
      "signatures": {
        "cpp": [
          "void fill_rectangle_on_bitmap(bitmap destination, color clr, double x, double y, double width, double height, const drawing_options &opts)"
        ],
        "rust": [
          "pub fn fill_rectangle_on_bitmap(destination: bitmap, clr: color, x: f64, y: f64, width: f64, height: f64, opts: &drawing_options)"
        ],
        "python": [
          "def fill_rectangle_on_bitmap_with_options(destination, clr, x, y, width, height, opts):"
        ],
        "pascal": [
          "procedure FillRectangleOnBitmap(destination: Bitmap; clr: Color; x: Double; y: Double; width: Double; height: Double; const opts: DrawingOptions)"
        ],
        "csharp": [
          "public void Bitmap.FillRectangleOnBitmap(Color clr, double x, double y, double width, double height, DrawingOptions opts);",
          "public static void SplashKit.FillRectangleOnBitmap(Bitmap destination, Color clr, double x, double y, double width, double height, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "void fill_rectangle_on_window(window destination,color clr,const rectangle &rect);",
      "name": "fill_rectangle_on_window",
      "method_name": "fill_rectangle",
      "unique_global_name": "fill_rectangle_on_window_record",
      "unique_method_name": "window.fill_rectangle_record",
      "suffix_name": null,
      "description": "Fill a rectangle on the supplied window onto the current window.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "window",
          "description": "The destination window",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The color of the rectangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "rect": {
          "type": "rectangle",
          "description": "The rectangle to draw",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "window",
        "method": "fill_rectangle",
        "suffix": "record",
        "group": "graphics",
        "self": "destination"
      },
      "signatures": {
        "cpp": [
          "void fill_rectangle_on_window(window destination, color clr, const rectangle &rect)"
        ],
        "rust": [
          "pub fn fill_rectangle_on_window(destination: window, clr: color, rect: &rectangle)"
        ],
        "python": [
          "def fill_rectangle_on_window_record(destination, clr, rect):"
        ],
        "pascal": [
          "procedure FillRectangleOnWindow(destination: Window; clr: Color; const rect: Rectangle)"
        ],
        "csharp": [
          "public void Window.FillRectangleOnWindow(Color clr, Rectangle rect);",
          "public static void SplashKit.FillRectangleOnWindow(Window destination, Color clr, Rectangle rect);"
        ]
      }
    },
    {
      "signature": "void fill_rectangle_on_window(window destination,color clr,const rectangle &rect,const drawing_options &opts);",
      "name": "fill_rectangle_on_window",
      "method_name": "fill_rectangle",
      "unique_global_name": "fill_rectangle_on_window_record_with_options",
      "unique_method_name": "window.fill_rectangle_record_with_options",
      "suffix_name": null,
      "description": "Fills a rectangle on the supplied window using the supplied drawing options.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "window",
          "description": "The destination window",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The color of the rectangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "rect": {
          "type": "rectangle",
          "description": "The rectangle to draw",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "The drawing options",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "window",
        "method": "fill_rectangle",
        "suffix": "record_with_options",
        "group": "graphics",
        "self": "destination"
      },
      "signatures": {
        "cpp": [
          "void fill_rectangle_on_window(window destination, color clr, const rectangle &rect, const drawing_options &opts)"
        ],
        "rust": [
          "pub fn fill_rectangle_on_window(destination: window, clr: color, rect: &rectangle, opts: &drawing_options)"
        ],
        "python": [
          "def fill_rectangle_on_window_record_with_options(destination, clr, rect, opts):"
        ],
        "pascal": [
          "procedure FillRectangleOnWindow(destination: Window; clr: Color; const rect: Rectangle; const opts: DrawingOptions)"
        ],
        "csharp": [
          "public void Window.FillRectangleOnWindow(Color clr, Rectangle rect, DrawingOptions opts);",
          "public static void SplashKit.FillRectangleOnWindow(Window destination, Color clr, Rectangle rect, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "void fill_rectangle_on_window(window destination,color clr,double x,double y,double width,double height);",
      "name": "fill_rectangle_on_window",
      "method_name": "fill_rectangle",
      "unique_global_name": "fill_rectangle_on_window",
      "unique_method_name": "window.fill_rectangle",
      "suffix_name": null,
      "description": "Fills a rectangle on the supplied window to the current window.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "window",
          "description": "The destination window",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The color of the rectangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x": {
          "type": "double",
          "description": "The distance from the left of the window/bitmap to the\nrectangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y": {
          "type": "double",
          "description": "The distance from the top of the window/bitmap to the\nrectangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "width": {
          "type": "double",
          "description": "The width of the rectangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "height": {
          "type": "double",
          "description": "The height of the rectangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "window",
        "method": "fill_rectangle",
        "group": "graphics",
        "self": "destination"
      },
      "signatures": {
        "cpp": [
          "void fill_rectangle_on_window(window destination, color clr, double x, double y, double width, double height)"
        ],
        "rust": [
          "pub fn fill_rectangle_on_window(destination: window, clr: color, x: f64, y: f64, width: f64, height: f64)"
        ],
        "python": [
          "def fill_rectangle_on_window(destination, clr, x, y, width, height):"
        ],
        "pascal": [
          "procedure FillRectangleOnWindow(destination: Window; clr: Color; x: Double; y: Double; width: Double; height: Double)"
        ],
        "csharp": [
          "public void Window.FillRectangleOnWindow(Color clr, double x, double y, double width, double height);",
          "public static void SplashKit.FillRectangleOnWindow(Window destination, Color clr, double x, double y, double width, double height);"
        ]
      }
    },
    {
      "signature": "void fill_rectangle_on_window(window destination,color clr,double x,double y,double width,double height,const drawing_options &opts);",
      "name": "fill_rectangle_on_window",
      "method_name": "fill_rectangle",
      "unique_global_name": "fill_rectangle_on_window_with_options",
      "unique_method_name": "window.fill_rectangle_with_options",
      "suffix_name": null,
      "description": "Fills a rectangle on the supplied window, using the supplied drawing options.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "window",
          "description": "The destination window",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The color of the rectangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x": {
          "type": "double",
          "description": "The distance from the left of the window/bitmap to the\nrectangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y": {
          "type": "double",
          "description": "The distance from the top of the window/bitmap to the\nrectangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "width": {
          "type": "double",
          "description": "The width of the rectangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "height": {
          "type": "double",
          "description": "The height of the rectangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "The drawing options",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "window",
        "method": "fill_rectangle",
        "suffix": "with_options",
        "group": "graphics",
        "self": "destination"
      },
      "signatures": {
        "cpp": [
          "void fill_rectangle_on_window(window destination, color clr, double x, double y, double width, double height, const drawing_options &opts)"
        ],
        "rust": [
          "pub fn fill_rectangle_on_window(destination: window, clr: color, x: f64, y: f64, width: f64, height: f64, opts: &drawing_options)"
        ],
        "python": [
          "def fill_rectangle_on_window_with_options(destination, clr, x, y, width, height, opts):"
        ],
        "pascal": [
          "procedure FillRectangleOnWindow(destination: Window; clr: Color; x: Double; y: Double; width: Double; height: Double; const opts: DrawingOptions)"
        ],
        "csharp": [
          "public void Window.FillRectangleOnWindow(Color clr, double x, double y, double width, double height, DrawingOptions opts);",
          "public static void SplashKit.FillRectangleOnWindow(Window destination, Color clr, double x, double y, double width, double height, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "void draw_text(const string &text,const color &clr,const string &fnt,int font_size,double x,double y);",
      "name": "draw_text",
      "method_name": null,
      "unique_global_name": "draw_text_font_as_string",
      "unique_method_name": null,
      "suffix_name": null,
      "description": null,
      "brief": "Draws the text string provided to the screen with the supplied color, font and size at x and y to the current window.",
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "text": {
          "type": "string",
          "description": "The text string to be written to the window.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The desired `color` of the text to be written.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "fnt": {
          "type": "string",
          "description": "The name of the `font` which will be used to draw the text",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "font_size": {
          "type": "int",
          "description": "The size of the font which will be drawn.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x": {
          "type": "double",
          "description": "The x location to draw the text.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y": {
          "type": "double",
          "description": "The y location to draw the text.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "font_as_string",
        "group": "graphics",
        "static": "text"
      },
      "signatures": {
        "cpp": [
          "void draw_text(const string &text, const color &clr, const string &fnt, int font_size, double x, double y)"
        ],
        "rust": [
          "pub fn draw_text(text: &String, clr: &color, fnt: &String, font_size: i32, x: f64, y: f64)"
        ],
        "python": [
          "def draw_text_font_as_string(text, clr, fnt, font_size, x, y):"
        ],
        "pascal": [
          "procedure DrawText(const text: String; const clr: Color; const fnt: String; fontSize: Integer; x: Double; y: Double)"
        ],
        "csharp": [
          "public static void Text.DrawText(string text, Color clr, string fnt, int fontSize, double x, double y);",
          "public static void SplashKit.DrawText(string text, Color clr, string fnt, int fontSize, double x, double y);"
        ]
      }
    },
    {
      "signature": "void draw_text(const string &text,const color &clr,const string &fnt,int font_size,double x,double y,const drawing_options &opts);",
      "name": "draw_text",
      "method_name": null,
      "unique_global_name": "draw_text_with_options_font_as_string",
      "unique_method_name": null,
      "suffix_name": null,
      "description": null,
      "brief": "Draws the text string provided to the screen with the supplied color, font and size at x and y to the current window.",
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "text": {
          "type": "string",
          "description": "The text string to be written to the window.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The desired `color` of the text to be written.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "fnt": {
          "type": "string",
          "description": "The name of the `font` which will be used to draw the text",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "font_size": {
          "type": "int",
          "description": "The size of the font which will be drawn.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x": {
          "type": "double",
          "description": "The x location to draw the text.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y": {
          "type": "double",
          "description": "The y location to draw the text.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "The `drawing_options` which provide extra information for how to draw the text.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "with_options_font_as_string",
        "group": "graphics",
        "static": "text"
      },
      "signatures": {
        "cpp": [
          "void draw_text(const string &text, const color &clr, const string &fnt, int font_size, double x, double y, const drawing_options &opts)"
        ],
        "rust": [
          "pub fn draw_text(text: &String, clr: &color, fnt: &String, font_size: i32, x: f64, y: f64, opts: &drawing_options)"
        ],
        "python": [
          "def draw_text_with_options_font_as_string(text, clr, fnt, font_size, x, y, opts):"
        ],
        "pascal": [
          "procedure DrawText(const text: String; const clr: Color; const fnt: String; fontSize: Integer; x: Double; y: Double; const opts: DrawingOptions)"
        ],
        "csharp": [
          "public static void Text.DrawText(string text, Color clr, string fnt, int fontSize, double x, double y, DrawingOptions opts);",
          "public static void SplashKit.DrawText(string text, Color clr, string fnt, int fontSize, double x, double y, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "void draw_text(const string &text,const color &clr,double x,double y);",
      "name": "draw_text",
      "method_name": null,
      "unique_global_name": "draw_text_no_font_no_size",
      "unique_method_name": null,
      "suffix_name": null,
      "description": null,
      "brief": "Draws the text string provided to the screen with the supplied color at x and y to the current window.",
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "text": {
          "type": "string",
          "description": "The text string to be written to the window.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The desired `color` of the text to be written.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x": {
          "type": "double",
          "description": "The x location to draw the text.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y": {
          "type": "double",
          "description": "The y location to draw the text.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "no_font_no_size",
        "group": "graphics",
        "static": "text"
      },
      "signatures": {
        "cpp": [
          "void draw_text(const string &text, const color &clr, double x, double y)"
        ],
        "rust": [
          "pub fn draw_text(text: &String, clr: &color, x: f64, y: f64)"
        ],
        "python": [
          "def draw_text_no_font_no_size(text, clr, x, y):"
        ],
        "pascal": [
          "procedure DrawText(const text: String; const clr: Color; x: Double; y: Double)"
        ],
        "csharp": [
          "public static void Text.DrawText(string text, Color clr, double x, double y);",
          "public static void SplashKit.DrawText(string text, Color clr, double x, double y);"
        ]
      }
    },
    {
      "signature": "void draw_text(const string &text,const color &clr,double x,double y,const drawing_options &opts);",
      "name": "draw_text",
      "method_name": null,
      "unique_global_name": "draw_text_no_font_no_size_with_options",
      "unique_method_name": null,
      "suffix_name": null,
      "description": null,
      "brief": "Draws the text string provided to the screen with the supplied color at x and y to the current window.",
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "text": {
          "type": "string",
          "description": "The text string to be written to the window.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The desired `color` of the text to be written.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x": {
          "type": "double",
          "description": "The x location to draw the text.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y": {
          "type": "double",
          "description": "The y location to draw the text.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "The `drawing_options` which provide extra information for how to draw the text.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "no_font_no_size_with_options",
        "group": "graphics",
        "static": "text"
      },
      "signatures": {
        "cpp": [
          "void draw_text(const string &text, const color &clr, double x, double y, const drawing_options &opts)"
        ],
        "rust": [
          "pub fn draw_text(text: &String, clr: &color, x: f64, y: f64, opts: &drawing_options)"
        ],
        "python": [
          "def draw_text_no_font_no_size_with_options(text, clr, x, y, opts):"
        ],
        "pascal": [
          "procedure DrawText(const text: String; const clr: Color; x: Double; y: Double; const opts: DrawingOptions)"
        ],
        "csharp": [
          "public static void Text.DrawText(string text, Color clr, double x, double y, DrawingOptions opts);",
          "public static void SplashKit.DrawText(string text, Color clr, double x, double y, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "void draw_text(const string &text,const color &clr,font fnt,int font_size,double x,double y);",
      "name": "draw_text",
      "method_name": null,
      "unique_global_name": "draw_text",
      "unique_method_name": null,
      "suffix_name": null,
      "description": null,
      "brief": "Draws the text string provided to the screen with the supplied color, font, size at x and y to the current window.",
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "text": {
          "type": "string",
          "description": "The text string to be written to the window.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The desired `color` of the text to be written.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "fnt": {
          "type": "font",
          "description": "The `font` to be used to draw the text.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "font_size": {
          "type": "int",
          "description": "The size of the font which will be drawn.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x": {
          "type": "double",
          "description": "The x location to draw the text.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y": {
          "type": "double",
          "description": "The y location to draw the text.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "graphics",
        "static": "text"
      },
      "signatures": {
        "cpp": [
          "void draw_text(const string &text, const color &clr, font fnt, int font_size, double x, double y)"
        ],
        "rust": [
          "pub fn draw_text(text: &String, clr: &color, fnt: font, font_size: i32, x: f64, y: f64)"
        ],
        "python": [
          "def draw_text(text, clr, fnt, font_size, x, y):"
        ],
        "pascal": [
          "procedure DrawText(const text: String; const clr: Color; fnt: Font; fontSize: Integer; x: Double; y: Double)"
        ],
        "csharp": [
          "public static void Text.DrawText(string text, Color clr, Font fnt, int fontSize, double x, double y);",
          "public static void SplashKit.DrawText(string text, Color clr, Font fnt, int fontSize, double x, double y);"
        ]
      }
    },
    {
      "signature": "void draw_text(const string &text,const color &clr,font fnt,int font_size,double x,double y,const drawing_options &opts);",
      "name": "draw_text",
      "method_name": null,
      "unique_global_name": "draw_text_with_options",
      "unique_method_name": null,
      "suffix_name": null,
      "description": null,
      "brief": "Draws the text string provided to the screen with the supplied color, font, size at x and y to the current window.",
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "text": {
          "type": "string",
          "description": "The text string to be written to the window.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The desired `color` of the text to be written.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "fnt": {
          "type": "font",
          "description": "The `font` to be used to draw the text.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "font_size": {
          "type": "int",
          "description": "The desired size of the font.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x": {
          "type": "double",
          "description": "The x location to draw the text.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y": {
          "type": "double",
          "description": "The y location to draw the text.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "The `drawing_options` which provide extra information for how to draw the text.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "with_options",
        "group": "graphics",
        "static": "text"
      },
      "signatures": {
        "cpp": [
          "void draw_text(const string &text, const color &clr, font fnt, int font_size, double x, double y, const drawing_options &opts)"
        ],
        "rust": [
          "pub fn draw_text(text: &String, clr: &color, fnt: font, font_size: i32, x: f64, y: f64, opts: &drawing_options)"
        ],
        "python": [
          "def draw_text_with_options(text, clr, fnt, font_size, x, y, opts):"
        ],
        "pascal": [
          "procedure DrawText(const text: String; const clr: Color; fnt: Font; fontSize: Integer; x: Double; y: Double; const opts: DrawingOptions)"
        ],
        "csharp": [
          "public static void Text.DrawText(string text, Color clr, Font fnt, int fontSize, double x, double y, DrawingOptions opts);",
          "public static void SplashKit.DrawText(string text, Color clr, Font fnt, int fontSize, double x, double y, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "void draw_text_on_bitmap(bitmap bmp,const string &text,const color &clr,const string &fnt,int font_size,double x,double y);",
      "name": "draw_text_on_bitmap",
      "method_name": "draw_text",
      "unique_global_name": "draw_text_on_bitmap_font_as_string",
      "unique_method_name": "bitmap.draw_text_font_as_string",
      "suffix_name": null,
      "description": null,
      "brief": "Draws the text string provided to the screen with the supplied color, font and size at x and y to the current bitmap.",
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "bmp": {
          "type": "bitmap",
          "description": "The bitmap to draw to",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "text": {
          "type": "string",
          "description": "The text string to be written to the bitmap.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The desired `color` of the text to be written.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "fnt": {
          "type": "string",
          "description": "The name of the `font` which will be used to draw the text",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "font_size": {
          "type": "int",
          "description": "The size of the font which will be drawn.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x": {
          "type": "double",
          "description": "The x location to draw the text.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y": {
          "type": "double",
          "description": "The y location to draw the text.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "bitmap",
        "method": "draw_text",
        "suffix": "font_as_string",
        "group": "graphics",
        "static": "text",
        "self": "bmp"
      },
      "signatures": {
        "cpp": [
          "void draw_text_on_bitmap(bitmap bmp, const string &text, const color &clr, const string &fnt, int font_size, double x, double y)"
        ],
        "rust": [
          "pub fn draw_text_on_bitmap(bmp: bitmap, text: &String, clr: &color, fnt: &String, font_size: i32, x: f64, y: f64)"
        ],
        "python": [
          "def draw_text_on_bitmap_font_as_string(bmp, text, clr, fnt, font_size, x, y):"
        ],
        "pascal": [
          "procedure DrawTextOnBitmap(bmp: Bitmap; const text: String; const clr: Color; const fnt: String; fontSize: Integer; x: Double; y: Double)"
        ],
        "csharp": [
          "public void Bitmap.DrawTextOnBitmap(string text, Color clr, string fnt, int fontSize, double x, double y);",
          "public static void SplashKit.DrawTextOnBitmap(Bitmap bmp, string text, Color clr, string fnt, int fontSize, double x, double y);"
        ]
      }
    },
    {
      "signature": "void draw_text_on_bitmap(bitmap bmp,const string &text,const color &clr,const string &fnt,int font_size,double x,double y,const drawing_options &opts);",
      "name": "draw_text_on_bitmap",
      "method_name": "draw_text",
      "unique_global_name": "draw_text_on_bitmap_with_options_font_as_string",
      "unique_method_name": "bitmap.draw_text_with_options_font_as_string",
      "suffix_name": null,
      "description": null,
      "brief": "Draws the text string provided to the bitmap with the supplied color, font and size at x and y.",
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "bmp": {
          "type": "bitmap",
          "description": "The bitmap to draw to",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "text": {
          "type": "string",
          "description": "The text string to be written to the bitmap.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The desired `color` of the text to be written.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "fnt": {
          "type": "string",
          "description": "The name of the `font` which will be used to draw the text",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "font_size": {
          "type": "int",
          "description": "The size of the font which will be drawn.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x": {
          "type": "double",
          "description": "The x location to draw the text.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y": {
          "type": "double",
          "description": "The y location to draw the text.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "The `drawing_options` which provide extra information for how to draw the text.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "bitmap",
        "method": "draw_text",
        "suffix": "with_options_font_as_string",
        "group": "graphics",
        "static": "text",
        "self": "bmp"
      },
      "signatures": {
        "cpp": [
          "void draw_text_on_bitmap(bitmap bmp, const string &text, const color &clr, const string &fnt, int font_size, double x, double y, const drawing_options &opts)"
        ],
        "rust": [
          "pub fn draw_text_on_bitmap(bmp: bitmap, text: &String, clr: &color, fnt: &String, font_size: i32, x: f64, y: f64, opts: &drawing_options)"
        ],
        "python": [
          "def draw_text_on_bitmap_with_options_font_as_string(bmp, text, clr, fnt, font_size, x, y, opts):"
        ],
        "pascal": [
          "procedure DrawTextOnBitmap(bmp: Bitmap; const text: String; const clr: Color; const fnt: String; fontSize: Integer; x: Double; y: Double; const opts: DrawingOptions)"
        ],
        "csharp": [
          "public void Bitmap.DrawTextOnBitmap(string text, Color clr, string fnt, int fontSize, double x, double y, DrawingOptions opts);",
          "public static void SplashKit.DrawTextOnBitmap(Bitmap bmp, string text, Color clr, string fnt, int fontSize, double x, double y, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "void draw_text_on_bitmap(bitmap bmp,const string &text,const color &clr,double x,double y);",
      "name": "draw_text_on_bitmap",
      "method_name": "draw_text",
      "unique_global_name": "draw_text_on_bitmap_no_font_no_size",
      "unique_method_name": "bitmap.draw_text_no_font_no_size",
      "suffix_name": null,
      "description": null,
      "brief": "Draws the text string provided to the screen with the supplied color at x and y.",
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "bmp": {
          "type": "bitmap",
          "description": "The bitmap to draw to",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "text": {
          "type": "string",
          "description": "The text string to be written to the bitmap.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The desired `color` of the text to be written.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x": {
          "type": "double",
          "description": "The x location to draw the text.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y": {
          "type": "double",
          "description": "The y location to draw the text.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "bitmap",
        "method": "draw_text",
        "suffix": "no_font_no_size",
        "group": "graphics",
        "static": "text",
        "self": "bmp"
      },
      "signatures": {
        "cpp": [
          "void draw_text_on_bitmap(bitmap bmp, const string &text, const color &clr, double x, double y)"
        ],
        "rust": [
          "pub fn draw_text_on_bitmap(bmp: bitmap, text: &String, clr: &color, x: f64, y: f64)"
        ],
        "python": [
          "def draw_text_on_bitmap_no_font_no_size(bmp, text, clr, x, y):"
        ],
        "pascal": [
          "procedure DrawTextOnBitmap(bmp: Bitmap; const text: String; const clr: Color; x: Double; y: Double)"
        ],
        "csharp": [
          "public void Bitmap.DrawTextOnBitmap(string text, Color clr, double x, double y);",
          "public static void SplashKit.DrawTextOnBitmap(Bitmap bmp, string text, Color clr, double x, double y);"
        ]
      }
    },
    {
      "signature": "void draw_text_on_bitmap(bitmap bmp,const string &text,const color &clr,double x,double y,const drawing_options &opts);",
      "name": "draw_text_on_bitmap",
      "method_name": "draw_text",
      "unique_global_name": "draw_text_on_bitmap_no_font_no_size_with_options",
      "unique_method_name": "bitmap.draw_text_no_font_no_size_with_options",
      "suffix_name": null,
      "description": null,
      "brief": "Draws the text string provided to the bitmap with the supplied color at x and y.",
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "bmp": {
          "type": "bitmap",
          "description": "The bitmap to draw to",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "text": {
          "type": "string",
          "description": "The text string to be written to the bitmap.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The desired `color` of the text to be written.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x": {
          "type": "double",
          "description": "The x location to draw the text.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y": {
          "type": "double",
          "description": "The y location to draw the text.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "The `drawing_options` which provide extra information for how to draw the text.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "bitmap",
        "method": "draw_text",
        "suffix": "no_font_no_size_with_options",
        "group": "graphics",
        "static": "text",
        "self": "bmp"
      },
      "signatures": {
        "cpp": [
          "void draw_text_on_bitmap(bitmap bmp, const string &text, const color &clr, double x, double y, const drawing_options &opts)"
        ],
        "rust": [
          "pub fn draw_text_on_bitmap(bmp: bitmap, text: &String, clr: &color, x: f64, y: f64, opts: &drawing_options)"
        ],
        "python": [
          "def draw_text_on_bitmap_no_font_no_size_with_options(bmp, text, clr, x, y, opts):"
        ],
        "pascal": [
          "procedure DrawTextOnBitmap(bmp: Bitmap; const text: String; const clr: Color; x: Double; y: Double; const opts: DrawingOptions)"
        ],
        "csharp": [
          "public void Bitmap.DrawTextOnBitmap(string text, Color clr, double x, double y, DrawingOptions opts);",
          "public static void SplashKit.DrawTextOnBitmap(Bitmap bmp, string text, Color clr, double x, double y, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "void draw_text_on_bitmap(bitmap bmp,const string &text,const color &clr,font fnt,int font_size,double x,double y);",
      "name": "draw_text_on_bitmap",
      "method_name": "draw_text",
      "unique_global_name": "draw_text_on_bitmap",
      "unique_method_name": "bitmap.draw_text",
      "suffix_name": null,
      "description": null,
      "brief": "Draws the text string provided to the bitmap with the supplied color, font, size at x and y.",
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "bmp": {
          "type": "bitmap",
          "description": "The bitmap to draw to",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "text": {
          "type": "string",
          "description": "The text string to be written to the bitmap.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The desired `color` of the text to be written.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "fnt": {
          "type": "font",
          "description": "The `font` to be used to draw the text.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "font_size": {
          "type": "int",
          "description": "The size of the font which will be drawn.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x": {
          "type": "double",
          "description": "The x location to draw the text.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y": {
          "type": "double",
          "description": "The y location to draw the text.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "bitmap",
        "method": "draw_text",
        "group": "graphics",
        "static": "text",
        "self": "bmp"
      },
      "signatures": {
        "cpp": [
          "void draw_text_on_bitmap(bitmap bmp, const string &text, const color &clr, font fnt, int font_size, double x, double y)"
        ],
        "rust": [
          "pub fn draw_text_on_bitmap(bmp: bitmap, text: &String, clr: &color, fnt: font, font_size: i32, x: f64, y: f64)"
        ],
        "python": [
          "def draw_text_on_bitmap(bmp, text, clr, fnt, font_size, x, y):"
        ],
        "pascal": [
          "procedure DrawTextOnBitmap(bmp: Bitmap; const text: String; const clr: Color; fnt: Font; fontSize: Integer; x: Double; y: Double)"
        ],
        "csharp": [
          "public void Bitmap.DrawTextOnBitmap(string text, Color clr, Font fnt, int fontSize, double x, double y);",
          "public static void SplashKit.DrawTextOnBitmap(Bitmap bmp, string text, Color clr, Font fnt, int fontSize, double x, double y);"
        ]
      }
    },
    {
      "signature": "void draw_text_on_bitmap(bitmap bmp,const string &text,const color &clr,font fnt,int font_size,double x,double y,const drawing_options &opts);",
      "name": "draw_text_on_bitmap",
      "method_name": "draw_text",
      "unique_global_name": "draw_text_on_bitmap_with_options",
      "unique_method_name": "bitmap.draw_text_with_options",
      "suffix_name": null,
      "description": null,
      "brief": "Draws the text string provided to the bitmap with the supplied color, font, size at x and y.",
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "bmp": {
          "type": "bitmap",
          "description": "The bitmap to draw to",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "text": {
          "type": "string",
          "description": "The text string to be written to the bitmap.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The desired `color` of the text to be written.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "fnt": {
          "type": "font",
          "description": "The `font` to be used to draw the text.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "font_size": {
          "type": "int",
          "description": "The desired size of the font.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x": {
          "type": "double",
          "description": "The x location to draw the text.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y": {
          "type": "double",
          "description": "The y location to draw the text.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "The `drawing_options` which provide extra information for how to draw the text.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "bitmap",
        "method": "draw_text",
        "suffix": "with_options",
        "group": "graphics",
        "static": "text",
        "self": "bmp"
      },
      "signatures": {
        "cpp": [
          "void draw_text_on_bitmap(bitmap bmp, const string &text, const color &clr, font fnt, int font_size, double x, double y, const drawing_options &opts)"
        ],
        "rust": [
          "pub fn draw_text_on_bitmap(bmp: bitmap, text: &String, clr: &color, fnt: font, font_size: i32, x: f64, y: f64, opts: &drawing_options)"
        ],
        "python": [
          "def draw_text_on_bitmap_with_options(bmp, text, clr, fnt, font_size, x, y, opts):"
        ],
        "pascal": [
          "procedure DrawTextOnBitmap(bmp: Bitmap; const text: String; const clr: Color; fnt: Font; fontSize: Integer; x: Double; y: Double; const opts: DrawingOptions)"
        ],
        "csharp": [
          "public void Bitmap.DrawTextOnBitmap(string text, Color clr, Font fnt, int fontSize, double x, double y, DrawingOptions opts);",
          "public static void SplashKit.DrawTextOnBitmap(Bitmap bmp, string text, Color clr, Font fnt, int fontSize, double x, double y, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "void draw_text_on_window(window wnd,const string &text,const color &clr,const string &fnt,int font_size,double x,double y);",
      "name": "draw_text_on_window",
      "method_name": "draw_text",
      "unique_global_name": "draw_text_on_window_font_as_string",
      "unique_method_name": "window.draw_text_font_as_string",
      "suffix_name": null,
      "description": null,
      "brief": "Draws the text string provided to the screen with the supplied color, font and size at x and y to the current window.",
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "wnd": {
          "type": "window",
          "description": "The window to draw to",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "text": {
          "type": "string",
          "description": "The text string to be written to the window.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The desired `color` of the text to be written.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "fnt": {
          "type": "string",
          "description": "The name of the `font` which will be used to draw the text",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "font_size": {
          "type": "int",
          "description": "The size of the font which will be drawn.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x": {
          "type": "double",
          "description": "The x location to draw the text.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y": {
          "type": "double",
          "description": "The y location to draw the text.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "window",
        "method": "draw_text",
        "suffix": "font_as_string",
        "group": "graphics",
        "static": "text",
        "self": "wnd"
      },
      "signatures": {
        "cpp": [
          "void draw_text_on_window(window wnd, const string &text, const color &clr, const string &fnt, int font_size, double x, double y)"
        ],
        "rust": [
          "pub fn draw_text_on_window(wnd: window, text: &String, clr: &color, fnt: &String, font_size: i32, x: f64, y: f64)"
        ],
        "python": [
          "def draw_text_on_window_font_as_string(wnd, text, clr, fnt, font_size, x, y):"
        ],
        "pascal": [
          "procedure DrawTextOnWindow(wnd: Window; const text: String; const clr: Color; const fnt: String; fontSize: Integer; x: Double; y: Double)"
        ],
        "csharp": [
          "public void Window.DrawTextOnWindow(string text, Color clr, string fnt, int fontSize, double x, double y);",
          "public static void SplashKit.DrawTextOnWindow(Window wnd, string text, Color clr, string fnt, int fontSize, double x, double y);"
        ]
      }
    },
    {
      "signature": "void draw_text_on_window(window wnd,const string &text,const color &clr,const string &fnt,int font_size,double x,double y,const drawing_options &opts);",
      "name": "draw_text_on_window",
      "method_name": "draw_text",
      "unique_global_name": "draw_text_on_window_with_options_font_as_string",
      "unique_method_name": "window.draw_text_with_options_font_as_string",
      "suffix_name": null,
      "description": null,
      "brief": "Draws the text string provided to the window with the supplied color, font and size at x and y.",
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "wnd": {
          "type": "window",
          "description": "The window to draw to",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "text": {
          "type": "string",
          "description": "The text string to be written to the window.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The desired `color` of the text to be written.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "fnt": {
          "type": "string",
          "description": "The name of the `font` which will be used to draw the text",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "font_size": {
          "type": "int",
          "description": "The size of the font which will be drawn.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x": {
          "type": "double",
          "description": "The x location to draw the text.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y": {
          "type": "double",
          "description": "The y location to draw the text.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "The `drawing_options` which provide extra information for how to draw the text.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "window",
        "method": "draw_text",
        "suffix": "with_options_font_as_string",
        "group": "graphics",
        "static": "text",
        "self": "wnd"
      },
      "signatures": {
        "cpp": [
          "void draw_text_on_window(window wnd, const string &text, const color &clr, const string &fnt, int font_size, double x, double y, const drawing_options &opts)"
        ],
        "rust": [
          "pub fn draw_text_on_window(wnd: window, text: &String, clr: &color, fnt: &String, font_size: i32, x: f64, y: f64, opts: &drawing_options)"
        ],
        "python": [
          "def draw_text_on_window_with_options_font_as_string(wnd, text, clr, fnt, font_size, x, y, opts):"
        ],
        "pascal": [
          "procedure DrawTextOnWindow(wnd: Window; const text: String; const clr: Color; const fnt: String; fontSize: Integer; x: Double; y: Double; const opts: DrawingOptions)"
        ],
        "csharp": [
          "public void Window.DrawTextOnWindow(string text, Color clr, string fnt, int fontSize, double x, double y, DrawingOptions opts);",
          "public static void SplashKit.DrawTextOnWindow(Window wnd, string text, Color clr, string fnt, int fontSize, double x, double y, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "void draw_text_on_window(window wnd,const string &text,const color &clr,double x,double y);",
      "name": "draw_text_on_window",
      "method_name": "draw_text",
      "unique_global_name": "draw_text_on_window_no_font_no_size",
      "unique_method_name": "window.draw_text_no_font_no_size",
      "suffix_name": null,
      "description": null,
      "brief": "Draws the text string provided to the screen with the supplied color at x and y to the current window.",
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "wnd": {
          "type": "window",
          "description": "The window to draw to",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "text": {
          "type": "string",
          "description": "The text string to be written to the window.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The desired `color` of the text to be written.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x": {
          "type": "double",
          "description": "The x location to draw the text.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y": {
          "type": "double",
          "description": "The y location to draw the text.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "window",
        "method": "draw_text",
        "suffix": "no_font_no_size",
        "group": "graphics",
        "static": "text",
        "self": "wnd"
      },
      "signatures": {
        "cpp": [
          "void draw_text_on_window(window wnd, const string &text, const color &clr, double x, double y)"
        ],
        "rust": [
          "pub fn draw_text_on_window(wnd: window, text: &String, clr: &color, x: f64, y: f64)"
        ],
        "python": [
          "def draw_text_on_window_no_font_no_size(wnd, text, clr, x, y):"
        ],
        "pascal": [
          "procedure DrawTextOnWindow(wnd: Window; const text: String; const clr: Color; x: Double; y: Double)"
        ],
        "csharp": [
          "public void Window.DrawTextOnWindow(string text, Color clr, double x, double y);",
          "public static void SplashKit.DrawTextOnWindow(Window wnd, string text, Color clr, double x, double y);"
        ]
      }
    },
    {
      "signature": "void draw_text_on_window(window wnd,const string &text,const color &clr,double x,double y,const drawing_options &opts);",
      "name": "draw_text_on_window",
      "method_name": "draw_text",
      "unique_global_name": "draw_text_on_window_no_font_no_size_with_options",
      "unique_method_name": "window.draw_text_no_font_no_size_with_options",
      "suffix_name": null,
      "description": null,
      "brief": "Draws the text string provided to the window with the supplied color at x and y.",
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "wnd": {
          "type": "window",
          "description": "The window to draw to",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "text": {
          "type": "string",
          "description": "The text string to be written to the window.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The desired `color` of the text to be written.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x": {
          "type": "double",
          "description": "The x location to draw the text.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y": {
          "type": "double",
          "description": "The y location to draw the text.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "The `drawing_options` which provide extra information for how to draw the text.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "window",
        "method": "draw_text",
        "suffix": "no_font_no_size_with_options",
        "group": "graphics",
        "static": "text",
        "self": "wnd"
      },
      "signatures": {
        "cpp": [
          "void draw_text_on_window(window wnd, const string &text, const color &clr, double x, double y, const drawing_options &opts)"
        ],
        "rust": [
          "pub fn draw_text_on_window(wnd: window, text: &String, clr: &color, x: f64, y: f64, opts: &drawing_options)"
        ],
        "python": [
          "def draw_text_on_window_no_font_no_size_with_options(wnd, text, clr, x, y, opts):"
        ],
        "pascal": [
          "procedure DrawTextOnWindow(wnd: Window; const text: String; const clr: Color; x: Double; y: Double; const opts: DrawingOptions)"
        ],
        "csharp": [
          "public void Window.DrawTextOnWindow(string text, Color clr, double x, double y, DrawingOptions opts);",
          "public static void SplashKit.DrawTextOnWindow(Window wnd, string text, Color clr, double x, double y, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "void draw_text_on_window(window wnd,const string &text,const color &clr,font fnt,int font_size,double x,double y);",
      "name": "draw_text_on_window",
      "method_name": "draw_text",
      "unique_global_name": "draw_text_on_window",
      "unique_method_name": "window.draw_text",
      "suffix_name": null,
      "description": null,
      "brief": "Draws the text string provided to the window with the supplied color, font, size at x and y.",
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "wnd": {
          "type": "window",
          "description": "The window to draw to",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "text": {
          "type": "string",
          "description": "The text string to be written to the window.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The desired `color` of the text to be written.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "fnt": {
          "type": "font",
          "description": "The `font` to be used to draw the text.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "font_size": {
          "type": "int",
          "description": "The size of the font which will be drawn.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x": {
          "type": "double",
          "description": "The x location to draw the text.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y": {
          "type": "double",
          "description": "The y location to draw the text.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "window",
        "method": "draw_text",
        "group": "graphics",
        "static": "text",
        "self": "wnd"
      },
      "signatures": {
        "cpp": [
          "void draw_text_on_window(window wnd, const string &text, const color &clr, font fnt, int font_size, double x, double y)"
        ],
        "rust": [
          "pub fn draw_text_on_window(wnd: window, text: &String, clr: &color, fnt: font, font_size: i32, x: f64, y: f64)"
        ],
        "python": [
          "def draw_text_on_window(wnd, text, clr, fnt, font_size, x, y):"
        ],
        "pascal": [
          "procedure DrawTextOnWindow(wnd: Window; const text: String; const clr: Color; fnt: Font; fontSize: Integer; x: Double; y: Double)"
        ],
        "csharp": [
          "public void Window.DrawTextOnWindow(string text, Color clr, Font fnt, int fontSize, double x, double y);",
          "public static void SplashKit.DrawTextOnWindow(Window wnd, string text, Color clr, Font fnt, int fontSize, double x, double y);"
        ]
      }
    },
    {
      "signature": "void draw_text_on_window(window wnd,const string &text,const color &clr,font fnt,int font_size,double x,double y,const drawing_options &opts);",
      "name": "draw_text_on_window",
      "method_name": "draw_text",
      "unique_global_name": "draw_text_on_window_with_options",
      "unique_method_name": "window.draw_text_with_options",
      "suffix_name": null,
      "description": null,
      "brief": "Draws the text string provided to the window with the supplied color, font, size at x and y.",
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "wnd": {
          "type": "window",
          "description": "The window to draw to",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "text": {
          "type": "string",
          "description": "The text string to be written to the window.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The desired `color` of the text to be written.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "fnt": {
          "type": "font",
          "description": "The `font` to be used to draw the text.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "font_size": {
          "type": "int",
          "description": "The desired size of the font.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x": {
          "type": "double",
          "description": "The x location to draw the text.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y": {
          "type": "double",
          "description": "The y location to draw the text.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "The `drawing_options` which provide extra information for how to draw the text.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "window",
        "method": "draw_text",
        "suffix": "with_options",
        "group": "graphics",
        "static": "text",
        "self": "wnd"
      },
      "signatures": {
        "cpp": [
          "void draw_text_on_window(window wnd, const string &text, const color &clr, font fnt, int font_size, double x, double y, const drawing_options &opts)"
        ],
        "rust": [
          "pub fn draw_text_on_window(wnd: window, text: &String, clr: &color, fnt: font, font_size: i32, x: f64, y: f64, opts: &drawing_options)"
        ],
        "python": [
          "def draw_text_on_window_with_options(wnd, text, clr, fnt, font_size, x, y, opts):"
        ],
        "pascal": [
          "procedure DrawTextOnWindow(wnd: Window; const text: String; const clr: Color; fnt: Font; fontSize: Integer; x: Double; y: Double; const opts: DrawingOptions)"
        ],
        "csharp": [
          "public void Window.DrawTextOnWindow(string text, Color clr, Font fnt, int fontSize, double x, double y, DrawingOptions opts);",
          "public static void SplashKit.DrawTextOnWindow(Window wnd, string text, Color clr, Font fnt, int fontSize, double x, double y, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "bool font_has_size(const string &name,int font_size);",
      "name": "font_has_size",
      "method_name": null,
      "unique_global_name": "font_has_size_name_as_string",
      "unique_method_name": null,
      "suffix_name": null,
      "description": null,
      "brief": "Checks if the supplied `font` has the supplied size.",
      "return": {
        "type": "bool",
        "description": "Returns true if there is a font with the supplied name that has the supplied size.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name of the `font` to be checked.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "font_size": {
          "type": "int",
          "description": "The size to check.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "name_as_string",
        "group": "graphics",
        "static": "text"
      },
      "signatures": {
        "cpp": [
          "bool font_has_size(const string &name, int font_size)"
        ],
        "rust": [
          "pub fn font_has_size(name: &String, font_size: i32) -> bool"
        ],
        "python": [
          "def font_has_size_name_as_string(name, font_size):"
        ],
        "pascal": [
          "function FontHasSize(const name: String; fontSize: Integer): Boolean"
        ],
        "csharp": [
          "public static bool Text.FontHasSize(string name, int fontSize);",
          "public static bool SplashKit.FontHasSize(string name, int fontSize);"
        ]
      }
    },
    {
      "signature": "bool font_has_size(font fnt,int font_size);",
      "name": "font_has_size",
      "method_name": "has_size",
      "unique_global_name": "font_has_size",
      "unique_method_name": "font.has_size",
      "suffix_name": null,
      "description": null,
      "brief": "Checks if the supplied `font` has the supplied size.",
      "return": {
        "type": "bool",
        "description": "Returns true if the supplied `font` has the supplied size.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "fnt": {
          "type": "font",
          "description": "The `font` to be checked.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "font_size": {
          "type": "int",
          "description": "The size to check.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "font",
        "method": "has_size",
        "self": "fnt",
        "group": "graphics",
        "static": "text"
      },
      "signatures": {
        "cpp": [
          "bool font_has_size(font fnt, int font_size)"
        ],
        "rust": [
          "pub fn font_has_size(fnt: font, font_size: i32) -> bool"
        ],
        "python": [
          "def font_has_size(fnt, font_size):"
        ],
        "pascal": [
          "function FontHasSize(fnt: Font; fontSize: Integer): Boolean"
        ],
        "csharp": [
          "public bool Font.FontHasSize(int fontSize);",
          "public static bool SplashKit.FontHasSize(Font fnt, int fontSize);"
        ]
      }
    },
    {
      "signature": "void font_load_size(const string &name,int font_size);",
      "name": "font_load_size",
      "method_name": null,
      "unique_global_name": "font_load_size_name_as_string",
      "unique_method_name": null,
      "suffix_name": null,
      "description": null,
      "brief": "Loads a new size for an already loaded `font`.",
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name of the `font` to load the size for.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "font_size": {
          "type": "int",
          "description": "The desired size of the `font`.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "name_as_string",
        "group": "graphics",
        "static": "text"
      },
      "signatures": {
        "cpp": [
          "void font_load_size(const string &name, int font_size)"
        ],
        "rust": [
          "pub fn font_load_size(name: &String, font_size: i32)"
        ],
        "python": [
          "def font_load_size_name_as_string(name, font_size):"
        ],
        "pascal": [
          "procedure FontLoadSize(const name: String; fontSize: Integer)"
        ],
        "csharp": [
          "public static void Text.FontLoadSize(string name, int fontSize);",
          "public static void SplashKit.FontLoadSize(string name, int fontSize);"
        ]
      }
    },
    {
      "signature": "void font_load_size(font fnt,int font_size);",
      "name": "font_load_size",
      "method_name": "load_size",
      "unique_global_name": "font_load_size",
      "unique_method_name": "font.load_size",
      "suffix_name": null,
      "description": null,
      "brief": "Loads a new size for an already loaded `font`.",
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "fnt": {
          "type": "font",
          "description": "The `font` to load the size for.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "font_size": {
          "type": "int",
          "description": "The desired size of the `font`.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "font",
        "method": "load_size",
        "self": "fnt",
        "group": "graphics",
        "static": "text"
      },
      "signatures": {
        "cpp": [
          "void font_load_size(font fnt, int font_size)"
        ],
        "rust": [
          "pub fn font_load_size(fnt: font, font_size: i32)"
        ],
        "python": [
          "def font_load_size(fnt, font_size):"
        ],
        "pascal": [
          "procedure FontLoadSize(fnt: Font; fontSize: Integer)"
        ],
        "csharp": [
          "public void Font.FontLoadSize(int fontSize);",
          "public static void SplashKit.FontLoadSize(Font fnt, int fontSize);"
        ]
      }
    },
    {
      "signature": "font font_named(string name);",
      "name": "font_named",
      "method_name": null,
      "unique_global_name": "font_named",
      "unique_method_name": null,
      "suffix_name": null,
      "description": null,
      "brief": "Finds a loaded font that has the supplied name and returns it.",
      "return": {
        "type": "font",
        "description": "Returns the font that has the supplied name.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name of the font to find.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "graphics",
        "static": "text"
      },
      "signatures": {
        "cpp": [
          "font font_named(string name)"
        ],
        "rust": [
          "pub fn font_named(name: String) -> font"
        ],
        "python": [
          "def font_named(name):"
        ],
        "pascal": [
          "function FontNamed(name: String): Font"
        ],
        "csharp": [
          "public static Font Text.FontNamed(string name);",
          "public static Font SplashKit.FontNamed(string name);"
        ]
      }
    },
    {
      "signature": "void free_all_fonts();",
      "name": "free_all_fonts",
      "method_name": "free_all",
      "unique_global_name": "free_all_fonts",
      "unique_method_name": ".free_all",
      "suffix_name": null,
      "description": null,
      "brief": "Frees all loaded fonts.",
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "method": "free_all",
        "static": "text",
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "void free_all_fonts()"
        ],
        "rust": [
          "pub fn free_all_fonts()"
        ],
        "python": [
          "def free_all_fonts():"
        ],
        "pascal": [
          "procedure FreeAllFonts()"
        ],
        "csharp": [
          "public static void Text.FreeAllFonts();",
          "public static void SplashKit.FreeAllFonts();"
        ]
      }
    },
    {
      "signature": "void free_font(font fnt);",
      "name": "free_font",
      "method_name": "free",
      "unique_global_name": "free_font",
      "unique_method_name": "font.free",
      "suffix_name": null,
      "description": null,
      "brief": "Frees a loaded font.",
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "fnt": {
          "type": "font",
          "description": "The font to be freed.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "font",
        "destructor": true,
        "method": "free",
        "self": "fnt",
        "group": "graphics",
        "static": "text"
      },
      "signatures": {
        "cpp": [
          "void free_font(font fnt)"
        ],
        "rust": [
          "pub fn free_font(fnt: font)"
        ],
        "python": [
          "def free_font(fnt):"
        ],
        "pascal": [
          "procedure FreeFont(fnt: Font)"
        ],
        "csharp": [
          "public void Font.FreeFont();",
          "public static void SplashKit.FreeFont(Font fnt);"
        ]
      }
    },
    {
      "signature": "font_style get_font_style(const string &name);",
      "name": "get_font_style",
      "method_name": null,
      "unique_global_name": "get_font_style_name_as_string",
      "unique_method_name": null,
      "suffix_name": null,
      "description": null,
      "brief": "Gets the font style for given `font`.",
      "return": {
        "type": "font_style",
        "description": "Returns the current `font_style` for the `font`.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name of the font to return the style of.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "name_as_string",
        "group": "graphics",
        "static": "text"
      },
      "signatures": {
        "cpp": [
          "font_style get_font_style(const string &name)"
        ],
        "rust": [
          "pub fn get_font_style(name: &String) -> font_style"
        ],
        "python": [
          "def get_font_style_name_as_string(name):"
        ],
        "pascal": [
          "function GetFontStyle(const name: String): FontStyle"
        ],
        "csharp": [
          "public static FontStyle Text.GetFontStyle(string name);",
          "public static FontStyle SplashKit.GetFontStyle(string name);"
        ]
      }
    },
    {
      "signature": "font_style get_font_style(font fnt);",
      "name": "get_font_style",
      "method_name": null,
      "unique_global_name": "get_font_style",
      "unique_method_name": null,
      "suffix_name": null,
      "description": null,
      "brief": "Gets the font style for given `font`.",
      "return": {
        "type": "font_style",
        "description": "Returns the current `font_style` for the `font`.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "fnt": {
          "type": "font",
          "description": "The `font` to return the style of.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "font",
        "getter": "style",
        "self": "fnt",
        "group": "graphics",
        "static": "text"
      },
      "signatures": {
        "cpp": [
          "font_style get_font_style(font fnt)"
        ],
        "rust": [
          "pub fn get_font_style(fnt: font) -> font_style"
        ],
        "python": [
          "def get_font_style(fnt):"
        ],
        "pascal": [
          "function GetFontStyle(fnt: Font): FontStyle"
        ],
        "csharp": [
          "public FontStyle Font.Style { get }",
          "public static FontStyle SplashKit.GetFontStyle(Font fnt);"
        ]
      }
    },
    {
      "signature": "font get_system_font();",
      "name": "get_system_font",
      "method_name": null,
      "unique_global_name": "get_system_font",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Searches for and (if found) returns a default system font. Otherwise defaults to the in-built font.",
      "brief": "Searches for and (if found) returns a default system font. Otherwise defaults to the in-built font.",
      "return": {
        "type": "font",
        "description": "Returns the `font` found, or the in-built font if not",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "group": "graphics",
        "static": "text"
      },
      "signatures": {
        "cpp": [
          "font get_system_font()"
        ],
        "rust": [
          "pub fn get_system_font() -> font"
        ],
        "python": [
          "def get_system_font():"
        ],
        "pascal": [
          "function GetSystemFont(): Font"
        ],
        "csharp": [
          "public static Font Text.GetSystemFont();",
          "public static Font SplashKit.GetSystemFont();"
        ]
      }
    },
    {
      "signature": "bool has_font(font fnt);",
      "name": "has_font",
      "method_name": null,
      "unique_global_name": "has_font",
      "unique_method_name": null,
      "suffix_name": null,
      "description": null,
      "brief": "Checks if the supplied `font` has been loaded.",
      "return": {
        "type": "bool",
        "description": "Returns true if the specified `font` is loaded.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "fnt": {
          "type": "font",
          "description": "The `font` to check if loaded.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "graphics",
        "static": "text"
      },
      "signatures": {
        "cpp": [
          "bool has_font(font fnt)"
        ],
        "rust": [
          "pub fn has_font(fnt: font) -> bool"
        ],
        "python": [
          "def has_font(fnt):"
        ],
        "pascal": [
          "function HasFont(fnt: Font): Boolean"
        ],
        "csharp": [
          "public static bool Text.HasFont(Font fnt);",
          "public static bool SplashKit.HasFont(Font fnt);"
        ]
      }
    },
    {
      "signature": "bool has_font(string name);",
      "name": "has_font",
      "method_name": null,
      "unique_global_name": "has_font_name_as_string",
      "unique_method_name": null,
      "suffix_name": null,
      "description": null,
      "brief": "Checks if there exists a loaded font with the supplied name.",
      "return": {
        "type": "bool",
        "description": "Returns whether there is a loaded font with the supplied name.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name of `font` to check if loaded.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "name_as_string",
        "group": "graphics",
        "static": "text"
      },
      "signatures": {
        "cpp": [
          "bool has_font(string name)"
        ],
        "rust": [
          "pub fn has_font(name: String) -> bool"
        ],
        "python": [
          "def has_font_name_as_string(name):"
        ],
        "pascal": [
          "function HasFont(name: String): Boolean"
        ],
        "csharp": [
          "public static bool Text.HasFont(string name);",
          "public static bool SplashKit.HasFont(string name);"
        ]
      }
    },
    {
      "signature": "font load_font(const string &name,const string &filename);",
      "name": "load_font",
      "method_name": null,
      "unique_global_name": "load_font",
      "unique_method_name": null,
      "suffix_name": null,
      "description": null,
      "brief": "Loads a new font from a file.",
      "return": {
        "type": "font",
        "description": "Returns a new `font` object.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name of the `font` to be loaded from file.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "filename": {
          "type": "string",
          "description": "The name of the file to load the `font` from.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "font",
        "constructor": true,
        "group": "graphics",
        "static": "text"
      },
      "signatures": {
        "cpp": [
          "font load_font(const string &name, const string &filename)"
        ],
        "rust": [
          "pub fn load_font(name: &String, filename: &String) -> font"
        ],
        "python": [
          "def load_font(name, filename):"
        ],
        "pascal": [
          "function LoadFont(const name: String; const filename: String): Font"
        ],
        "csharp": [
          "public static Font SplashKit.LoadFont(string name, string filename);",
          "public Font(string name, string filename);"
        ]
      }
    },
    {
      "signature": "void set_font_style(const string &name,font_style style);",
      "name": "set_font_style",
      "method_name": null,
      "unique_global_name": "set_font_style_name_as_string",
      "unique_method_name": null,
      "suffix_name": null,
      "description": null,
      "brief": "Sets the style for a `font` by name.",
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name of the `font` to set the style of.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "style": {
          "type": "font_style",
          "description": "The new style for the `font`.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "name_as_string",
        "group": "graphics",
        "static": "text"
      },
      "signatures": {
        "cpp": [
          "void set_font_style(const string &name, font_style style)"
        ],
        "rust": [
          "pub fn set_font_style(name: &String, style: font_style)"
        ],
        "python": [
          "def set_font_style_name_as_string(name, style):"
        ],
        "pascal": [
          "procedure SetFontStyle(const name: String; style: FontStyle)"
        ],
        "csharp": [
          "public static void Text.SetFontStyle(string name, FontStyle style);",
          "public static void SplashKit.SetFontStyle(string name, FontStyle style);"
        ]
      }
    },
    {
      "signature": "void set_font_style(font fnt,font_style style);",
      "name": "set_font_style",
      "method_name": null,
      "unique_global_name": "set_font_style",
      "unique_method_name": null,
      "suffix_name": null,
      "description": null,
      "brief": "Sets the style for a `font`.",
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "fnt": {
          "type": "font",
          "description": "The `font` to set the style of.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "style": {
          "type": "font_style",
          "description": "The new style for the `font`.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "font",
        "self": "fnt",
        "setter": "style",
        "group": "graphics",
        "static": "text"
      },
      "signatures": {
        "cpp": [
          "void set_font_style(font fnt, font_style style)"
        ],
        "rust": [
          "pub fn set_font_style(fnt: font, style: font_style)"
        ],
        "python": [
          "def set_font_style(fnt, style):"
        ],
        "pascal": [
          "procedure SetFontStyle(fnt: Font; style: FontStyle)"
        ],
        "csharp": [
          "public void Font.Style { set }",
          "public static void SplashKit.SetFontStyle(Font fnt, FontStyle style);"
        ]
      }
    },
    {
      "signature": "int text_height(const string &text,const string& fnt,int font_size);",
      "name": "text_height",
      "method_name": "height",
      "unique_global_name": "text_height_font_named",
      "unique_method_name": ".height_font_named",
      "suffix_name": null,
      "description": null,
      "brief": "Returns the height of the supplied text string.",
      "return": {
        "type": "int",
        "description": "Returns the height of the text as an integer.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "text": {
          "type": "string",
          "description": "The text string to check the length of.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "fnt": {
          "type": "string",
          "description": "The font used for the text.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "font_size": {
          "type": "int",
          "description": "The size of the font used for the text.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "method": "height",
        "static": "text",
        "suffix": "font_named",
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "int text_height(const string &text, const string &fnt, int font_size)"
        ],
        "rust": [
          "pub fn text_height(text: &String, fnt: &String, font_size: i32) -> i32"
        ],
        "python": [
          "def text_height_font_named(text, fnt, font_size):"
        ],
        "pascal": [
          "function TextHeight(const text: String; const fnt: String; fontSize: Integer): Integer"
        ],
        "csharp": [
          "public static int Text.TextHeight(string text, string fnt, int fontSize);",
          "public static int SplashKit.TextHeight(string text, string fnt, int fontSize);"
        ]
      }
    },
    {
      "signature": "int text_height(const string &text,font fnt,int font_size);",
      "name": "text_height",
      "method_name": "height",
      "unique_global_name": "text_height",
      "unique_method_name": ".height",
      "suffix_name": null,
      "description": null,
      "brief": "Returns the height of the supplied text string.",
      "return": {
        "type": "int",
        "description": "Returns the height of the text as an integer.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "text": {
          "type": "string",
          "description": "The text string to check the length of.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "fnt": {
          "type": "font",
          "description": "The font used for the text.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "font_size": {
          "type": "int",
          "description": "The size of the font used for the text.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "method": "height",
        "static": "text",
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "int text_height(const string &text, font fnt, int font_size)"
        ],
        "rust": [
          "pub fn text_height(text: &String, fnt: font, font_size: i32) -> i32"
        ],
        "python": [
          "def text_height(text, fnt, font_size):"
        ],
        "pascal": [
          "function TextHeight(const text: String; fnt: Font; fontSize: Integer): Integer"
        ],
        "csharp": [
          "public static int Text.TextHeight(string text, Font fnt, int fontSize);",
          "public static int SplashKit.TextHeight(string text, Font fnt, int fontSize);"
        ]
      }
    },
    {
      "signature": "int text_width(const string &text,const string& fnt,int font_size);",
      "name": "text_width",
      "method_name": "width",
      "unique_global_name": "text_width_font_named",
      "unique_method_name": ".width_font_named",
      "suffix_name": null,
      "description": null,
      "brief": "Returns the width of the supplied text string.",
      "return": {
        "type": "int",
        "description": "Returns the width of the text as an integer.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "text": {
          "type": "string",
          "description": "The text string to check the length of.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "fnt": {
          "type": "string",
          "description": "The font used for the text.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "font_size": {
          "type": "int",
          "description": "The size of the font used for the text.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "method": "width",
        "static": "text",
        "suffix": "font_named",
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "int text_width(const string &text, const string &fnt, int font_size)"
        ],
        "rust": [
          "pub fn text_width(text: &String, fnt: &String, font_size: i32) -> i32"
        ],
        "python": [
          "def text_width_font_named(text, fnt, font_size):"
        ],
        "pascal": [
          "function TextWidth(const text: String; const fnt: String; fontSize: Integer): Integer"
        ],
        "csharp": [
          "public static int Text.TextWidth(string text, string fnt, int fontSize);",
          "public static int SplashKit.TextWidth(string text, string fnt, int fontSize);"
        ]
      }
    },
    {
      "signature": "int text_width(const string &text,font fnt,int font_size);",
      "name": "text_width",
      "method_name": "width",
      "unique_global_name": "text_width",
      "unique_method_name": ".width",
      "suffix_name": null,
      "description": null,
      "brief": "Returns the width of the supplied text string.",
      "return": {
        "type": "int",
        "description": "Returns the width of the text as an integer.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "text": {
          "type": "string",
          "description": "The text string to check the length of.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "fnt": {
          "type": "font",
          "description": "The font used for the text.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "font_size": {
          "type": "int",
          "description": "The size of the font used for the text.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "method": "width",
        "static": "text",
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "int text_width(const string &text, font fnt, int font_size)"
        ],
        "rust": [
          "pub fn text_width(text: &String, fnt: font, font_size: i32) -> i32"
        ],
        "python": [
          "def text_width(text, fnt, font_size):"
        ],
        "pascal": [
          "function TextWidth(const text: String; fnt: Font; fontSize: Integer): Integer"
        ],
        "csharp": [
          "public static int Text.TextWidth(string text, Font fnt, int fontSize);",
          "public static int SplashKit.TextWidth(string text, Font fnt, int fontSize);"
        ]
      }
    },
    {
      "signature": "void draw_triangle(color clr,const triangle &tri);",
      "name": "draw_triangle",
      "method_name": null,
      "unique_global_name": "draw_triangle_record",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Draw a triangle onto the current window.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "clr": {
          "type": "color",
          "description": "The color for the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "tri": {
          "type": "triangle",
          "description": "The triangles details",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "record",
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "void draw_triangle(color clr, const triangle &tri)"
        ],
        "rust": [
          "pub fn draw_triangle(clr: color, tri: &triangle)"
        ],
        "python": [
          "def draw_triangle_record(clr, tri):"
        ],
        "pascal": [
          "procedure DrawTriangle(clr: Color; const tri: Triangle)"
        ],
        "csharp": [
          "public static void SplashKit.DrawTriangle(Color clr, Triangle tri);"
        ]
      }
    },
    {
      "signature": "void draw_triangle(color clr,const triangle &tri,drawing_options opts);",
      "name": "draw_triangle",
      "method_name": null,
      "unique_global_name": "draw_triangle_record_with_options",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Draw a triangle using the supplied drawing options.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "clr": {
          "type": "color",
          "description": "The color for the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "tri": {
          "type": "triangle",
          "description": "The triangles details",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "The drawing options",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "record_with_options",
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "void draw_triangle(color clr, const triangle &tri, drawing_options opts)"
        ],
        "rust": [
          "pub fn draw_triangle(clr: color, tri: &triangle, opts: drawing_options)"
        ],
        "python": [
          "def draw_triangle_record_with_options(clr, tri, opts):"
        ],
        "pascal": [
          "procedure DrawTriangle(clr: Color; const tri: Triangle; opts: DrawingOptions)"
        ],
        "csharp": [
          "public static void SplashKit.DrawTriangle(Color clr, Triangle tri, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "void draw_triangle(color clr,double x1,double y1,double x2,double y2,double x3,double y3);",
      "name": "draw_triangle",
      "method_name": null,
      "unique_global_name": "draw_triangle",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Draw a triangle to the current window.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "clr": {
          "type": "color",
          "description": "The color for the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x1": {
          "type": "double",
          "description": "The distance from the left side of the window to the\nfirst point of the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y1": {
          "type": "double",
          "description": "The distance from the top of the window to the\nfirst point of the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x2": {
          "type": "double",
          "description": "The distance from the left side of the window to the\nsecond point of the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y2": {
          "type": "double",
          "description": "The distance from the top of the window to the\nsecond point of the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x3": {
          "type": "double",
          "description": "The distance from the left side of the window to the\nthird point of the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y3": {
          "type": "double",
          "description": "The distance from the top of the window to the\nthird point of the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "void draw_triangle(color clr, double x1, double y1, double x2, double y2, double x3, double y3)"
        ],
        "rust": [
          "pub fn draw_triangle(clr: color, x1: f64, y1: f64, x2: f64, y2: f64, x3: f64, y3: f64)"
        ],
        "python": [
          "def draw_triangle(clr, x1, y1, x2, y2, x3, y3):"
        ],
        "pascal": [
          "procedure DrawTriangle(clr: Color; x1: Double; y1: Double; x2: Double; y2: Double; x3: Double; y3: Double)"
        ],
        "csharp": [
          "public static void SplashKit.DrawTriangle(Color clr, double x1, double y1, double x2, double y2, double x3, double y3);"
        ]
      }
    },
    {
      "signature": "void draw_triangle(color clr,double x1,double y1,double x2,double y2,double x3,double y3,drawing_options opts);",
      "name": "draw_triangle",
      "method_name": null,
      "unique_global_name": "draw_triangle_with_options",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Draw a triangle using the supplied drawing options.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "clr": {
          "type": "color",
          "description": "The color for the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x1": {
          "type": "double",
          "description": "The distance from the left side of the bitmap/window to the\nfirst point of the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y1": {
          "type": "double",
          "description": "The distance from the top of the bitmap/window to the\nfirst point of the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x2": {
          "type": "double",
          "description": "The distance from the left side of the bitmap/window to the\nsecond point of the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y2": {
          "type": "double",
          "description": "The distance from the top of the bitmap/window to the\nsecond point of the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x3": {
          "type": "double",
          "description": "The distance from the left side of the bitmap/window to the\nthird point of the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y3": {
          "type": "double",
          "description": "The distance from the top of the bitmap/window to the\nthird point of the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "The drawing options",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "with_options",
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "void draw_triangle(color clr, double x1, double y1, double x2, double y2, double x3, double y3, drawing_options opts)"
        ],
        "rust": [
          "pub fn draw_triangle(clr: color, x1: f64, y1: f64, x2: f64, y2: f64, x3: f64, y3: f64, opts: drawing_options)"
        ],
        "python": [
          "def draw_triangle_with_options(clr, x1, y1, x2, y2, x3, y3, opts):"
        ],
        "pascal": [
          "procedure DrawTriangle(clr: Color; x1: Double; y1: Double; x2: Double; y2: Double; x3: Double; y3: Double; opts: DrawingOptions)"
        ],
        "csharp": [
          "public static void SplashKit.DrawTriangle(Color clr, double x1, double y1, double x2, double y2, double x3, double y3, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "void draw_triangle_on_bitmap(bitmap destination,color clr,const triangle &tri);",
      "name": "draw_triangle_on_bitmap",
      "method_name": "draw_triangle",
      "unique_global_name": "draw_triangle_on_bitmap_record",
      "unique_method_name": "bitmap.draw_triangle_record",
      "suffix_name": null,
      "description": "Draw a triangle on a given bitmap, using the supplied drawing options.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "bitmap",
          "description": "The bitmap which the triangle will be drawn on.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The color for the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "tri": {
          "type": "triangle",
          "description": "The triangles details",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "bitmap",
        "method": "draw_triangle",
        "suffix": "record",
        "group": "graphics",
        "self": "destination"
      },
      "signatures": {
        "cpp": [
          "void draw_triangle_on_bitmap(bitmap destination, color clr, const triangle &tri)"
        ],
        "rust": [
          "pub fn draw_triangle_on_bitmap(destination: bitmap, clr: color, tri: &triangle)"
        ],
        "python": [
          "def draw_triangle_on_bitmap_record(destination, clr, tri):"
        ],
        "pascal": [
          "procedure DrawTriangleOnBitmap(destination: Bitmap; clr: Color; const tri: Triangle)"
        ],
        "csharp": [
          "public void Bitmap.DrawTriangleOnBitmap(Color clr, Triangle tri);",
          "public static void SplashKit.DrawTriangleOnBitmap(Bitmap destination, Color clr, Triangle tri);"
        ]
      }
    },
    {
      "signature": "void draw_triangle_on_bitmap(bitmap destination,color clr,const triangle &tri,drawing_options opts);",
      "name": "draw_triangle_on_bitmap",
      "method_name": "draw_triangle",
      "unique_global_name": "draw_triangle_on_bitmap_record_with_options",
      "unique_method_name": "bitmap.draw_triangle_record_with_options",
      "suffix_name": null,
      "description": "Draw a triangle on a given bitmap, using the supplied drawing options.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "bitmap",
          "description": "The bitmap which the triangle will be drawn on.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The color for the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "tri": {
          "type": "triangle",
          "description": "The triangles details",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "The drawing options",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "bitmap",
        "method": "draw_triangle",
        "suffix": "record_with_options",
        "group": "graphics",
        "self": "destination"
      },
      "signatures": {
        "cpp": [
          "void draw_triangle_on_bitmap(bitmap destination, color clr, const triangle &tri, drawing_options opts)"
        ],
        "rust": [
          "pub fn draw_triangle_on_bitmap(destination: bitmap, clr: color, tri: &triangle, opts: drawing_options)"
        ],
        "python": [
          "def draw_triangle_on_bitmap_record_with_options(destination, clr, tri, opts):"
        ],
        "pascal": [
          "procedure DrawTriangleOnBitmap(destination: Bitmap; clr: Color; const tri: Triangle; opts: DrawingOptions)"
        ],
        "csharp": [
          "public void Bitmap.DrawTriangleOnBitmap(Color clr, Triangle tri, DrawingOptions opts);",
          "public static void SplashKit.DrawTriangleOnBitmap(Bitmap destination, Color clr, Triangle tri, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "void draw_triangle_on_bitmap(bitmap destination,color clr,double x1,double y1,double x2,double y2,double x3,double y3);",
      "name": "draw_triangle_on_bitmap",
      "method_name": "draw_triangle",
      "unique_global_name": "draw_triangle_on_bitmap",
      "unique_method_name": "bitmap.draw_triangle",
      "suffix_name": null,
      "description": "Draw a triangle to the given bitmap.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "bitmap",
          "description": "The bitmap which the triangle will be drawn on.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The color for the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x1": {
          "type": "double",
          "description": "The distance from the left side of the bitmap to the\nfirst point of the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y1": {
          "type": "double",
          "description": "The distance from the top of the bitmap to the\nfirst point of the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x2": {
          "type": "double",
          "description": "The distance from the left side of the bitmap to the\nsecond point of the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y2": {
          "type": "double",
          "description": "The distance from the top of the bitmap to the\nsecond point of the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x3": {
          "type": "double",
          "description": "The distance from the left side of the bitmap to the\nthird point of the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y3": {
          "type": "double",
          "description": "The distance from the top of the bitmap to the\nthird point of the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "bitmap",
        "method": "draw_triangle",
        "group": "graphics",
        "self": "destination"
      },
      "signatures": {
        "cpp": [
          "void draw_triangle_on_bitmap(bitmap destination, color clr, double x1, double y1, double x2, double y2, double x3, double y3)"
        ],
        "rust": [
          "pub fn draw_triangle_on_bitmap(destination: bitmap, clr: color, x1: f64, y1: f64, x2: f64, y2: f64, x3: f64, y3: f64)"
        ],
        "python": [
          "def draw_triangle_on_bitmap(destination, clr, x1, y1, x2, y2, x3, y3):"
        ],
        "pascal": [
          "procedure DrawTriangleOnBitmap(destination: Bitmap; clr: Color; x1: Double; y1: Double; x2: Double; y2: Double; x3: Double; y3: Double)"
        ],
        "csharp": [
          "public void Bitmap.DrawTriangleOnBitmap(Color clr, double x1, double y1, double x2, double y2, double x3, double y3);",
          "public static void SplashKit.DrawTriangleOnBitmap(Bitmap destination, Color clr, double x1, double y1, double x2, double y2, double x3, double y3);"
        ]
      }
    },
    {
      "signature": "void draw_triangle_on_bitmap(bitmap destination,color clr,double x1,double y1,double x2,double y2,double x3,double y3,drawing_options opts);",
      "name": "draw_triangle_on_bitmap",
      "method_name": "draw_triangle",
      "unique_global_name": "draw_triangle_on_bitmap_with_options",
      "unique_method_name": "bitmap.draw_triangle_with_options",
      "suffix_name": null,
      "description": "Draw a triangle to the given bitmap, using the supplied drawing options.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "bitmap",
          "description": "The bitmap which the triangle will be drawn on.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The color for the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x1": {
          "type": "double",
          "description": "The distance from the left side of the bitmap/bitmap to the\nfirst point of the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y1": {
          "type": "double",
          "description": "The distance from the top of the bitmap/bitmap to the\nfirst point of the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x2": {
          "type": "double",
          "description": "The distance from the left side of the bitmap/bitmap to the\nsecond point of the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y2": {
          "type": "double",
          "description": "The distance from the top of the bitmap/bitmap to the\nsecond point of the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x3": {
          "type": "double",
          "description": "The distance from the left side of the bitmap/bitmap to the\nthird point of the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y3": {
          "type": "double",
          "description": "The distance from the top of the bitmap/bitmap to the\nthird point of the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "The drawing options",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "bitmap",
        "method": "draw_triangle",
        "suffix": "with_options",
        "group": "graphics",
        "self": "destination"
      },
      "signatures": {
        "cpp": [
          "void draw_triangle_on_bitmap(bitmap destination, color clr, double x1, double y1, double x2, double y2, double x3, double y3, drawing_options opts)"
        ],
        "rust": [
          "pub fn draw_triangle_on_bitmap(destination: bitmap, clr: color, x1: f64, y1: f64, x2: f64, y2: f64, x3: f64, y3: f64, opts: drawing_options)"
        ],
        "python": [
          "def draw_triangle_on_bitmap_with_options(destination, clr, x1, y1, x2, y2, x3, y3, opts):"
        ],
        "pascal": [
          "procedure DrawTriangleOnBitmap(destination: Bitmap; clr: Color; x1: Double; y1: Double; x2: Double; y2: Double; x3: Double; y3: Double; opts: DrawingOptions)"
        ],
        "csharp": [
          "public void Bitmap.DrawTriangleOnBitmap(Color clr, double x1, double y1, double x2, double y2, double x3, double y3, DrawingOptions opts);",
          "public static void SplashKit.DrawTriangleOnBitmap(Bitmap destination, Color clr, double x1, double y1, double x2, double y2, double x3, double y3, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "void draw_triangle_on_window(window destination,color clr,const triangle &tri);",
      "name": "draw_triangle_on_window",
      "method_name": "draw_triangle",
      "unique_global_name": "draw_triangle_on_window_record",
      "unique_method_name": "window.draw_triangle_record",
      "suffix_name": null,
      "description": "Draw a triangle on a given window, using the supplied drawing options.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "window",
          "description": "The window which the triangle will be drawn on.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The color for the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "tri": {
          "type": "triangle",
          "description": "The triangles details",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "window",
        "method": "draw_triangle",
        "suffix": "record",
        "group": "graphics",
        "self": "destination"
      },
      "signatures": {
        "cpp": [
          "void draw_triangle_on_window(window destination, color clr, const triangle &tri)"
        ],
        "rust": [
          "pub fn draw_triangle_on_window(destination: window, clr: color, tri: &triangle)"
        ],
        "python": [
          "def draw_triangle_on_window_record(destination, clr, tri):"
        ],
        "pascal": [
          "procedure DrawTriangleOnWindow(destination: Window; clr: Color; const tri: Triangle)"
        ],
        "csharp": [
          "public void Window.DrawTriangleOnWindow(Color clr, Triangle tri);",
          "public static void SplashKit.DrawTriangleOnWindow(Window destination, Color clr, Triangle tri);"
        ]
      }
    },
    {
      "signature": "void draw_triangle_on_window(window destination,color clr,const triangle &tri,drawing_options opts);",
      "name": "draw_triangle_on_window",
      "method_name": "draw_triangle",
      "unique_global_name": "draw_triangle_on_window_record_with_options",
      "unique_method_name": "window.draw_triangle_record_with_options",
      "suffix_name": null,
      "description": "Draw a triangle on a given window, using the supplied drawing options.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "window",
          "description": "The window which the triangle will be drawn on.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The color for the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "tri": {
          "type": "triangle",
          "description": "The triangles details",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "The drawing options",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "window",
        "method": "draw_triangle",
        "suffix": "record_with_options",
        "group": "graphics",
        "self": "destination"
      },
      "signatures": {
        "cpp": [
          "void draw_triangle_on_window(window destination, color clr, const triangle &tri, drawing_options opts)"
        ],
        "rust": [
          "pub fn draw_triangle_on_window(destination: window, clr: color, tri: &triangle, opts: drawing_options)"
        ],
        "python": [
          "def draw_triangle_on_window_record_with_options(destination, clr, tri, opts):"
        ],
        "pascal": [
          "procedure DrawTriangleOnWindow(destination: Window; clr: Color; const tri: Triangle; opts: DrawingOptions)"
        ],
        "csharp": [
          "public void Window.DrawTriangleOnWindow(Color clr, Triangle tri, DrawingOptions opts);",
          "public static void SplashKit.DrawTriangleOnWindow(Window destination, Color clr, Triangle tri, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "void draw_triangle_on_window(window destination,color clr,double x1,double y1,double x2,double y2,double x3,double y3);",
      "name": "draw_triangle_on_window",
      "method_name": "draw_triangle",
      "unique_global_name": "draw_triangle_on_window",
      "unique_method_name": "window.draw_triangle",
      "suffix_name": null,
      "description": "Draw a triangle to the given window.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "window",
          "description": "The window which the triangle will be drawn on.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The color for the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x1": {
          "type": "double",
          "description": "The distance from the left side of the window to the\nfirst point of the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y1": {
          "type": "double",
          "description": "The distance from the top of the window to the\nfirst point of the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x2": {
          "type": "double",
          "description": "The distance from the left side of the window to the\nsecond point of the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y2": {
          "type": "double",
          "description": "The distance from the top of the window to the\nsecond point of the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x3": {
          "type": "double",
          "description": "The distance from the left side of the window to the\nthird point of the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y3": {
          "type": "double",
          "description": "The distance from the top of the window to the\nthird point of the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "window",
        "method": "draw_triangle",
        "group": "graphics",
        "self": "destination"
      },
      "signatures": {
        "cpp": [
          "void draw_triangle_on_window(window destination, color clr, double x1, double y1, double x2, double y2, double x3, double y3)"
        ],
        "rust": [
          "pub fn draw_triangle_on_window(destination: window, clr: color, x1: f64, y1: f64, x2: f64, y2: f64, x3: f64, y3: f64)"
        ],
        "python": [
          "def draw_triangle_on_window(destination, clr, x1, y1, x2, y2, x3, y3):"
        ],
        "pascal": [
          "procedure DrawTriangleOnWindow(destination: Window; clr: Color; x1: Double; y1: Double; x2: Double; y2: Double; x3: Double; y3: Double)"
        ],
        "csharp": [
          "public void Window.DrawTriangleOnWindow(Color clr, double x1, double y1, double x2, double y2, double x3, double y3);",
          "public static void SplashKit.DrawTriangleOnWindow(Window destination, Color clr, double x1, double y1, double x2, double y2, double x3, double y3);"
        ]
      }
    },
    {
      "signature": "void draw_triangle_on_window(window destination,color clr,double x1,double y1,double x2,double y2,double x3,double y3,drawing_options opts);",
      "name": "draw_triangle_on_window",
      "method_name": "draw_triangle",
      "unique_global_name": "draw_triangle_on_window_with_options",
      "unique_method_name": "window.draw_triangle_with_options",
      "suffix_name": null,
      "description": "Draw a triangle to the given window, using the supplied drawing options.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "window",
          "description": "The window which the triangle will be drawn on.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The color for the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x1": {
          "type": "double",
          "description": "The distance from the left side of the bitmap/window to the\nfirst point of the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y1": {
          "type": "double",
          "description": "The distance from the top of the bitmap/window to the\nfirst point of the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x2": {
          "type": "double",
          "description": "The distance from the left side of the bitmap/window to the\nsecond point of the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y2": {
          "type": "double",
          "description": "The distance from the top of the bitmap/window to the\nsecond point of the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x3": {
          "type": "double",
          "description": "The distance from the left side of the bitmap/window to the\nthird point of the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y3": {
          "type": "double",
          "description": "The distance from the top of the bitmap/window to the\nthird point of the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "The drawing options",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "window",
        "method": "draw_triangle",
        "suffix": "with_options",
        "group": "graphics",
        "self": "destination"
      },
      "signatures": {
        "cpp": [
          "void draw_triangle_on_window(window destination, color clr, double x1, double y1, double x2, double y2, double x3, double y3, drawing_options opts)"
        ],
        "rust": [
          "pub fn draw_triangle_on_window(destination: window, clr: color, x1: f64, y1: f64, x2: f64, y2: f64, x3: f64, y3: f64, opts: drawing_options)"
        ],
        "python": [
          "def draw_triangle_on_window_with_options(destination, clr, x1, y1, x2, y2, x3, y3, opts):"
        ],
        "pascal": [
          "procedure DrawTriangleOnWindow(destination: Window; clr: Color; x1: Double; y1: Double; x2: Double; y2: Double; x3: Double; y3: Double; opts: DrawingOptions)"
        ],
        "csharp": [
          "public void Window.DrawTriangleOnWindow(Color clr, double x1, double y1, double x2, double y2, double x3, double y3, DrawingOptions opts);",
          "public static void SplashKit.DrawTriangleOnWindow(Window destination, Color clr, double x1, double y1, double x2, double y2, double x3, double y3, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "void fill_triangle(color clr,const triangle &tri);",
      "name": "fill_triangle",
      "method_name": null,
      "unique_global_name": "fill_triangle_record",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Draw a triangle onto the current window.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "clr": {
          "type": "color",
          "description": "The color for the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "tri": {
          "type": "triangle",
          "description": "The triangles details",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "record",
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "void fill_triangle(color clr, const triangle &tri)"
        ],
        "rust": [
          "pub fn fill_triangle(clr: color, tri: &triangle)"
        ],
        "python": [
          "def fill_triangle_record(clr, tri):"
        ],
        "pascal": [
          "procedure FillTriangle(clr: Color; const tri: Triangle)"
        ],
        "csharp": [
          "public static void SplashKit.FillTriangle(Color clr, Triangle tri);"
        ]
      }
    },
    {
      "signature": "void fill_triangle(color clr,const triangle &tri,drawing_options opts);",
      "name": "fill_triangle",
      "method_name": null,
      "unique_global_name": "fill_triangle_record_with_options",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Fill a triangle using the supplied drawing options.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "clr": {
          "type": "color",
          "description": "The color for the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "tri": {
          "type": "triangle",
          "description": "The triangles details",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "The drawing options",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "record_with_options",
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "void fill_triangle(color clr, const triangle &tri, drawing_options opts)"
        ],
        "rust": [
          "pub fn fill_triangle(clr: color, tri: &triangle, opts: drawing_options)"
        ],
        "python": [
          "def fill_triangle_record_with_options(clr, tri, opts):"
        ],
        "pascal": [
          "procedure FillTriangle(clr: Color; const tri: Triangle; opts: DrawingOptions)"
        ],
        "csharp": [
          "public static void SplashKit.FillTriangle(Color clr, Triangle tri, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "void fill_triangle(color clr,double x1,double y1,double x2,double y2,double x3,double y3);",
      "name": "fill_triangle",
      "method_name": null,
      "unique_global_name": "fill_triangle",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Fills a triangle on the current window.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "clr": {
          "type": "color",
          "description": "The color for the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x1": {
          "type": "double",
          "description": "The distance from the left side of the window to the\nfirst point of the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y1": {
          "type": "double",
          "description": "The distance from the top of the window to the\nfirst point of the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x2": {
          "type": "double",
          "description": "The distance from the left side of the window to the\nsecond point of the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y2": {
          "type": "double",
          "description": "The distance from the top of the window to the\nsecond point of the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x3": {
          "type": "double",
          "description": "The distance from the left side of the window to the\nthird point of the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y3": {
          "type": "double",
          "description": "The distance from the top of the window to the\nthird point of the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "void fill_triangle(color clr, double x1, double y1, double x2, double y2, double x3, double y3)"
        ],
        "rust": [
          "pub fn fill_triangle(clr: color, x1: f64, y1: f64, x2: f64, y2: f64, x3: f64, y3: f64)"
        ],
        "python": [
          "def fill_triangle(clr, x1, y1, x2, y2, x3, y3):"
        ],
        "pascal": [
          "procedure FillTriangle(clr: Color; x1: Double; y1: Double; x2: Double; y2: Double; x3: Double; y3: Double)"
        ],
        "csharp": [
          "public static void SplashKit.FillTriangle(Color clr, double x1, double y1, double x2, double y2, double x3, double y3);"
        ]
      }
    },
    {
      "signature": "void fill_triangle(color clr,double x1,double y1,double x2,double y2,double x3,double y3,drawing_options opts);",
      "name": "fill_triangle",
      "method_name": null,
      "unique_global_name": "fill_triangle_with_options",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Fills a triangle using the supplied drawing options.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "clr": {
          "type": "color",
          "description": "The color for the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x1": {
          "type": "double",
          "description": "The distance from the left side of the bitmap/window to the\nfirst point of the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y1": {
          "type": "double",
          "description": "The distance from the top of the bitmap/window to the\nfirst point of the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x2": {
          "type": "double",
          "description": "The distance from the left side of the bitmap/window to the\nsecond point of the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y2": {
          "type": "double",
          "description": "The distance from the top of the bitmap/window to the\nsecond point of the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x3": {
          "type": "double",
          "description": "The distance from the left side of the bitmap/window to the\nthird point of the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y3": {
          "type": "double",
          "description": "The distance from the top of the bitmap/window to the\nthird point of the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "The drawing options",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "with_options",
        "group": "graphics"
      },
      "signatures": {
        "cpp": [
          "void fill_triangle(color clr, double x1, double y1, double x2, double y2, double x3, double y3, drawing_options opts)"
        ],
        "rust": [
          "pub fn fill_triangle(clr: color, x1: f64, y1: f64, x2: f64, y2: f64, x3: f64, y3: f64, opts: drawing_options)"
        ],
        "python": [
          "def fill_triangle_with_options(clr, x1, y1, x2, y2, x3, y3, opts):"
        ],
        "pascal": [
          "procedure FillTriangle(clr: Color; x1: Double; y1: Double; x2: Double; y2: Double; x3: Double; y3: Double; opts: DrawingOptions)"
        ],
        "csharp": [
          "public static void SplashKit.FillTriangle(Color clr, double x1, double y1, double x2, double y2, double x3, double y3, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "void fill_triangle_on_bitmap(bitmap destination,color clr,const triangle &tri);",
      "name": "fill_triangle_on_bitmap",
      "method_name": "fill_triangle",
      "unique_global_name": "fill_triangle_on_bitmap_record",
      "unique_method_name": "bitmap.fill_triangle_record",
      "suffix_name": null,
      "description": "Fill a triangle on a given bitmap",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "bitmap",
          "description": "The bitmap which the triangle will be drawn on.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The color for the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "tri": {
          "type": "triangle",
          "description": "The triangles details",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "bitmap",
        "method": "fill_triangle",
        "suffix": "record",
        "group": "graphics",
        "self": "destination"
      },
      "signatures": {
        "cpp": [
          "void fill_triangle_on_bitmap(bitmap destination, color clr, const triangle &tri)"
        ],
        "rust": [
          "pub fn fill_triangle_on_bitmap(destination: bitmap, clr: color, tri: &triangle)"
        ],
        "python": [
          "def fill_triangle_on_bitmap_record(destination, clr, tri):"
        ],
        "pascal": [
          "procedure FillTriangleOnBitmap(destination: Bitmap; clr: Color; const tri: Triangle)"
        ],
        "csharp": [
          "public void Bitmap.FillTriangleOnBitmap(Color clr, Triangle tri);",
          "public static void SplashKit.FillTriangleOnBitmap(Bitmap destination, Color clr, Triangle tri);"
        ]
      }
    },
    {
      "signature": "void fill_triangle_on_bitmap(bitmap destination,color clr,const triangle &tri,drawing_options opts);",
      "name": "fill_triangle_on_bitmap",
      "method_name": "fill_triangle",
      "unique_global_name": "fill_triangle_on_bitmap_record_with_options",
      "unique_method_name": "bitmap.fill_triangle_record_with_options",
      "suffix_name": null,
      "description": "Fill a triangle on a given bitmap, using given drawing options",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "bitmap",
          "description": "The bitmap which the triangle will be drawn on.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The color for the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "tri": {
          "type": "triangle",
          "description": "The triangles details",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "The drawing options",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "bitmap",
        "method": "fill_triangle",
        "suffix": "record_with_options",
        "group": "graphics",
        "self": "destination"
      },
      "signatures": {
        "cpp": [
          "void fill_triangle_on_bitmap(bitmap destination, color clr, const triangle &tri, drawing_options opts)"
        ],
        "rust": [
          "pub fn fill_triangle_on_bitmap(destination: bitmap, clr: color, tri: &triangle, opts: drawing_options)"
        ],
        "python": [
          "def fill_triangle_on_bitmap_record_with_options(destination, clr, tri, opts):"
        ],
        "pascal": [
          "procedure FillTriangleOnBitmap(destination: Bitmap; clr: Color; const tri: Triangle; opts: DrawingOptions)"
        ],
        "csharp": [
          "public void Bitmap.FillTriangleOnBitmap(Color clr, Triangle tri, DrawingOptions opts);",
          "public static void SplashKit.FillTriangleOnBitmap(Bitmap destination, Color clr, Triangle tri, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "void fill_triangle_on_bitmap(bitmap destination,color clr,double x1,double y1,double x2,double y2,double x3,double y3);",
      "name": "fill_triangle_on_bitmap",
      "method_name": "fill_triangle",
      "unique_global_name": "fill_triangle_on_bitmap",
      "unique_method_name": "bitmap.fill_triangle",
      "suffix_name": null,
      "description": "Fill a triangle on a given bitmap",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "bitmap",
          "description": "The bitmap which the triangle will be drawn on.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The color for the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x1": {
          "type": "double",
          "description": "The distance from the left side of the bitmap to the\nfirst point of the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y1": {
          "type": "double",
          "description": "The distance from the top of the bitmap to the\nfirst point of the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x2": {
          "type": "double",
          "description": "The distance from the left side of the bitmap to the\nsecond point of the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y2": {
          "type": "double",
          "description": "The distance from the top of the bitmap to the\nsecond point of the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x3": {
          "type": "double",
          "description": "The distance from the left side of the bitmap to the\nthird point of the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y3": {
          "type": "double",
          "description": "The distance from the top of the bitmap to the\nthird point of the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "bitmap",
        "method": "fill_triangle",
        "group": "graphics",
        "self": "destination"
      },
      "signatures": {
        "cpp": [
          "void fill_triangle_on_bitmap(bitmap destination, color clr, double x1, double y1, double x2, double y2, double x3, double y3)"
        ],
        "rust": [
          "pub fn fill_triangle_on_bitmap(destination: bitmap, clr: color, x1: f64, y1: f64, x2: f64, y2: f64, x3: f64, y3: f64)"
        ],
        "python": [
          "def fill_triangle_on_bitmap(destination, clr, x1, y1, x2, y2, x3, y3):"
        ],
        "pascal": [
          "procedure FillTriangleOnBitmap(destination: Bitmap; clr: Color; x1: Double; y1: Double; x2: Double; y2: Double; x3: Double; y3: Double)"
        ],
        "csharp": [
          "public void Bitmap.FillTriangleOnBitmap(Color clr, double x1, double y1, double x2, double y2, double x3, double y3);",
          "public static void SplashKit.FillTriangleOnBitmap(Bitmap destination, Color clr, double x1, double y1, double x2, double y2, double x3, double y3);"
        ]
      }
    },
    {
      "signature": "void fill_triangle_on_bitmap(bitmap destination,color clr,double x1,double y1,double x2,double y2,double x3,double y3,drawing_options opts);",
      "name": "fill_triangle_on_bitmap",
      "method_name": "fill_triangle",
      "unique_global_name": "fill_triangle_on_bitmap_with_options",
      "unique_method_name": "bitmap.fill_triangle_with_options",
      "suffix_name": null,
      "description": "Fill a triangle on a given bitmap, using the supplied drawing options.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "bitmap",
          "description": "The bitmap which the triangle will be drawn on.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The color for the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x1": {
          "type": "double",
          "description": "The distance from the left side of the bitmap/bitmap to the\nfirst point of the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y1": {
          "type": "double",
          "description": "The distance from the top of the bitmap/bitmap to the\nfirst point of the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x2": {
          "type": "double",
          "description": "The distance from the left side of the bitmap/bitmap to the\nsecond point of the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y2": {
          "type": "double",
          "description": "The distance from the top of the bitmap/bitmap to the\nsecond point of the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x3": {
          "type": "double",
          "description": "The distance from the left side of the bitmap/bitmap to the\nthird point of the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y3": {
          "type": "double",
          "description": "The distance from the top of the bitmap/bitmap to the\nthird point of the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "The drawing options",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "bitmap",
        "method": "fill_triangle",
        "suffix": "with_options",
        "group": "graphics",
        "self": "destination"
      },
      "signatures": {
        "cpp": [
          "void fill_triangle_on_bitmap(bitmap destination, color clr, double x1, double y1, double x2, double y2, double x3, double y3, drawing_options opts)"
        ],
        "rust": [
          "pub fn fill_triangle_on_bitmap(destination: bitmap, clr: color, x1: f64, y1: f64, x2: f64, y2: f64, x3: f64, y3: f64, opts: drawing_options)"
        ],
        "python": [
          "def fill_triangle_on_bitmap_with_options(destination, clr, x1, y1, x2, y2, x3, y3, opts):"
        ],
        "pascal": [
          "procedure FillTriangleOnBitmap(destination: Bitmap; clr: Color; x1: Double; y1: Double; x2: Double; y2: Double; x3: Double; y3: Double; opts: DrawingOptions)"
        ],
        "csharp": [
          "public void Bitmap.FillTriangleOnBitmap(Color clr, double x1, double y1, double x2, double y2, double x3, double y3, DrawingOptions opts);",
          "public static void SplashKit.FillTriangleOnBitmap(Bitmap destination, Color clr, double x1, double y1, double x2, double y2, double x3, double y3, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "void fill_triangle_on_window(window destination,color clr,const triangle &tri);",
      "name": "fill_triangle_on_window",
      "method_name": "fill_triangle",
      "unique_global_name": "fill_triangle_on_window_record",
      "unique_method_name": "window.fill_triangle_record",
      "suffix_name": null,
      "description": "Fill a triangle on a given window",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "window",
          "description": "The window which the triangle will be drawn on.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The color for the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "tri": {
          "type": "triangle",
          "description": "The triangles details",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "window",
        "method": "fill_triangle",
        "suffix": "record",
        "group": "graphics",
        "self": "destination"
      },
      "signatures": {
        "cpp": [
          "void fill_triangle_on_window(window destination, color clr, const triangle &tri)"
        ],
        "rust": [
          "pub fn fill_triangle_on_window(destination: window, clr: color, tri: &triangle)"
        ],
        "python": [
          "def fill_triangle_on_window_record(destination, clr, tri):"
        ],
        "pascal": [
          "procedure FillTriangleOnWindow(destination: Window; clr: Color; const tri: Triangle)"
        ],
        "csharp": [
          "public void Window.FillTriangleOnWindow(Color clr, Triangle tri);",
          "public static void SplashKit.FillTriangleOnWindow(Window destination, Color clr, Triangle tri);"
        ]
      }
    },
    {
      "signature": "void fill_triangle_on_window(window destination,color clr,const triangle &tri,drawing_options opts);",
      "name": "fill_triangle_on_window",
      "method_name": "fill_triangle",
      "unique_global_name": "fill_triangle_on_window_record_with_options",
      "unique_method_name": "window.fill_triangle_record_with_options",
      "suffix_name": null,
      "description": "Fill a triangle on a given window, using given drawing options",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "window",
          "description": "The window which the triangle will be drawn on.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The color for the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "tri": {
          "type": "triangle",
          "description": "The triangles details",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "The drawing options",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "window",
        "method": "fill_triangle",
        "suffix": "record_with_options",
        "group": "graphics",
        "self": "destination"
      },
      "signatures": {
        "cpp": [
          "void fill_triangle_on_window(window destination, color clr, const triangle &tri, drawing_options opts)"
        ],
        "rust": [
          "pub fn fill_triangle_on_window(destination: window, clr: color, tri: &triangle, opts: drawing_options)"
        ],
        "python": [
          "def fill_triangle_on_window_record_with_options(destination, clr, tri, opts):"
        ],
        "pascal": [
          "procedure FillTriangleOnWindow(destination: Window; clr: Color; const tri: Triangle; opts: DrawingOptions)"
        ],
        "csharp": [
          "public void Window.FillTriangleOnWindow(Color clr, Triangle tri, DrawingOptions opts);",
          "public static void SplashKit.FillTriangleOnWindow(Window destination, Color clr, Triangle tri, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "void fill_triangle_on_window(window destination,color clr,double x1,double y1,double x2,double y2,double x3,double y3);",
      "name": "fill_triangle_on_window",
      "method_name": "fill_triangle",
      "unique_global_name": "fill_triangle_on_window",
      "unique_method_name": "window.fill_triangle",
      "suffix_name": null,
      "description": "Fill a triangle on a given window",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "window",
          "description": "The window which the triangle will be drawn on.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The color for the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x1": {
          "type": "double",
          "description": "The distance from the left side of the window to the\nfirst point of the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y1": {
          "type": "double",
          "description": "The distance from the top of the window to the\nfirst point of the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x2": {
          "type": "double",
          "description": "The distance from the left side of the window to the\nsecond point of the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y2": {
          "type": "double",
          "description": "The distance from the top of the window to the\nsecond point of the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x3": {
          "type": "double",
          "description": "The distance from the left side of the window to the\nthird point of the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y3": {
          "type": "double",
          "description": "The distance from the top of the window to the\nthird point of the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "window",
        "method": "fill_triangle",
        "group": "graphics",
        "self": "destination"
      },
      "signatures": {
        "cpp": [
          "void fill_triangle_on_window(window destination, color clr, double x1, double y1, double x2, double y2, double x3, double y3)"
        ],
        "rust": [
          "pub fn fill_triangle_on_window(destination: window, clr: color, x1: f64, y1: f64, x2: f64, y2: f64, x3: f64, y3: f64)"
        ],
        "python": [
          "def fill_triangle_on_window(destination, clr, x1, y1, x2, y2, x3, y3):"
        ],
        "pascal": [
          "procedure FillTriangleOnWindow(destination: Window; clr: Color; x1: Double; y1: Double; x2: Double; y2: Double; x3: Double; y3: Double)"
        ],
        "csharp": [
          "public void Window.FillTriangleOnWindow(Color clr, double x1, double y1, double x2, double y2, double x3, double y3);",
          "public static void SplashKit.FillTriangleOnWindow(Window destination, Color clr, double x1, double y1, double x2, double y2, double x3, double y3);"
        ]
      }
    },
    {
      "signature": "void fill_triangle_on_window(window destination,color clr,double x1,double y1,double x2,double y2,double x3,double y3,drawing_options opts);",
      "name": "fill_triangle_on_window",
      "method_name": "fill_triangle",
      "unique_global_name": "fill_triangle_on_window_with_options",
      "unique_method_name": "window.fill_triangle_with_options",
      "suffix_name": null,
      "description": "Fill a triangle on a given window, using the supplied drawing options.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "destination": {
          "type": "window",
          "description": "The window which the triangle will be drawn on.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The color for the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x1": {
          "type": "double",
          "description": "The distance from the left side of the bitmap/window to the\nfirst point of the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y1": {
          "type": "double",
          "description": "The distance from the top of the bitmap/window to the\nfirst point of the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x2": {
          "type": "double",
          "description": "The distance from the left side of the bitmap/window to the\nsecond point of the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y2": {
          "type": "double",
          "description": "The distance from the top of the bitmap/window to the\nsecond point of the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x3": {
          "type": "double",
          "description": "The distance from the left side of the bitmap/window to the\nthird point of the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y3": {
          "type": "double",
          "description": "The distance from the top of the bitmap/window to the\nthird point of the triangle",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "The drawing options",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "window",
        "method": "fill_triangle",
        "suffix": "with_options",
        "group": "graphics",
        "self": "destination"
      },
      "signatures": {
        "cpp": [
          "void fill_triangle_on_window(window destination, color clr, double x1, double y1, double x2, double y2, double x3, double y3, drawing_options opts)"
        ],
        "rust": [
          "pub fn fill_triangle_on_window(destination: window, clr: color, x1: f64, y1: f64, x2: f64, y2: f64, x3: f64, y3: f64, opts: drawing_options)"
        ],
        "python": [
          "def fill_triangle_on_window_with_options(destination, clr, x1, y1, x2, y2, x3, y3, opts):"
        ],
        "pascal": [
          "procedure FillTriangleOnWindow(destination: Window; clr: Color; x1: Double; y1: Double; x2: Double; y2: Double; x3: Double; y3: Double; opts: DrawingOptions)"
        ],
        "csharp": [
          "public void Window.FillTriangleOnWindow(Color clr, double x1, double y1, double x2, double y2, double x3, double y3, DrawingOptions opts);",
          "public static void SplashKit.FillTriangleOnWindow(Window destination, Color clr, double x1, double y1, double x2, double y2, double x3, double y3, DrawingOptions opts);"
        ]
      }
    }
  ]
}