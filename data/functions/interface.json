{
  "functions": [
    {
      "signature": "void add_column(int width);",
      "name": "add_column",
      "method_name": null,
      "unique_global_name": "add_column",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Adds a column to the current layout with width `width`.\n\n- Positive values of width just specify the width in pixels.\n- 0 means use the default control width - not always a good choice.\n- Negative values specify filling to the right _until_ `width + 1` pixels away from the edge.\n- e.g -1 fills entirely to the right, while -20 leaves a 19 pixel gap on the right.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "width": {
          "type": "int",
          "description": "Width of the column in pixels",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "interface",
        "static": "interface"
      },
      "signatures": {
        "cpp": ["void add_column(int width)"],
        "rust": ["pub fn add_column(width: i32)"],
        "python": ["def add_column(width):"],
        "pascal": ["procedure AddColumn(width: Integer)"],
        "csharp": [
          "public static void Interface.AddColumn(int width);",
          "public static void SplashKit.AddColumn(int width);"
        ]
      }
    },
    {
      "signature": "void add_column_relative(double width);",
      "name": "add_column_relative",
      "method_name": null,
      "unique_global_name": "add_column_relative",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Adds a column to the current layout with width `width` percentage of the container's width.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "width": {
          "type": "double",
          "description": "Percentage of the container's width (between 0 and 1)",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "interface",
        "static": "interface"
      },
      "signatures": {
        "cpp": ["void add_column_relative(double width)"],
        "rust": ["pub fn add_column_relative(width: f64)"],
        "python": ["def add_column_relative(width):"],
        "pascal": ["procedure AddColumnRelative(width: Double)"],
        "csharp": [
          "public static void Interface.AddColumnRelative(double width);",
          "public static void SplashKit.AddColumnRelative(double width);"
        ]
      }
    },
    {
      "signature": "bool bitmap_button(bitmap bmp);",
      "name": "bitmap_button",
      "method_name": null,
      "unique_global_name": "bitmap_button",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Creates a button with a bitmap in it, and no label.\nReturns whether the button was clicked.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "Whether the button was clicked",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "bmp": {
          "type": "bitmap",
          "description": "The bitmap to show inside the button",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "interface",
        "static": "interface"
      },
      "signatures": {
        "cpp": ["bool bitmap_button(bitmap bmp)"],
        "rust": ["pub fn bitmap_button(bmp: bitmap) -> bool"],
        "python": ["def bitmap_button(bmp):"],
        "pascal": ["function BitmapButton(bmp: Bitmap): Boolean"],
        "csharp": [
          "public static bool Interface.BitmapButton(Bitmap bmp);",
          "public static bool SplashKit.BitmapButton(Bitmap bmp);"
        ]
      }
    },
    {
      "signature": "bool bitmap_button(bitmap bmp,const rectangle& rect);",
      "name": "bitmap_button",
      "method_name": null,
      "unique_global_name": "bitmap_button_at_position",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Creates a button with a bitmap in it at a specific position on screen.\nReturns whether the button was clicked.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "Whether the button was clicked",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "bmp": {
          "type": "bitmap",
          "description": "The bitmap to show inside the button",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "rect": {
          "type": "rectangle",
          "description": "The rectangle to display the button in",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "at_position",
        "group": "interface",
        "static": "interface"
      },
      "signatures": {
        "cpp": ["bool bitmap_button(bitmap bmp, const rectangle &rect)"],
        "rust": ["pub fn bitmap_button(bmp: bitmap, rect: &rectangle) -> bool"],
        "python": ["def bitmap_button_at_position(bmp, rect):"],
        "pascal": ["function BitmapButton(bmp: Bitmap; const rect: Rectangle): Boolean"],
        "csharp": [
          "public static bool Interface.BitmapButton(Bitmap bmp, Rectangle rect);",
          "public static bool SplashKit.BitmapButton(Bitmap bmp, Rectangle rect);"
        ]
      }
    },
    {
      "signature": "bool bitmap_button(bitmap bmp,const rectangle& rect,drawing_options opts);",
      "name": "bitmap_button",
      "method_name": null,
      "unique_global_name": "bitmap_button_at_position_with_options",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Creates a button with a bitmap in it at a specific position on screen.\nReturns whether the button was clicked.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "Whether the button was clicked",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "bmp": {
          "type": "bitmap",
          "description": "The bitmap to show inside the button",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "rect": {
          "type": "rectangle",
          "description": "The rectangle to display the button in",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "The drawing options",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "at_position_with_options",
        "group": "interface",
        "static": "interface"
      },
      "signatures": {
        "cpp": ["bool bitmap_button(bitmap bmp, const rectangle &rect, drawing_options opts)"],
        "rust": ["pub fn bitmap_button(bmp: bitmap, rect: &rectangle, opts: drawing_options) -> bool"],
        "python": ["def bitmap_button_at_position_with_options(bmp, rect, opts):"],
        "pascal": ["function BitmapButton(bmp: Bitmap; const rect: Rectangle; opts: DrawingOptions): Boolean"],
        "csharp": [
          "public static bool Interface.BitmapButton(Bitmap bmp, Rectangle rect, DrawingOptions opts);",
          "public static bool SplashKit.BitmapButton(Bitmap bmp, Rectangle rect, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "bool bitmap_button(bitmap bmp,drawing_options opts);",
      "name": "bitmap_button",
      "method_name": null,
      "unique_global_name": "bitmap_button_with_options",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Creates a button with a bitmap in it, and no label.\nReturns whether the button was clicked.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "Whether the button was clicked",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "bmp": {
          "type": "bitmap",
          "description": "The bitmap to show inside the button",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "The drawing options",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "with_options",
        "group": "interface",
        "static": "interface"
      },
      "signatures": {
        "cpp": ["bool bitmap_button(bitmap bmp, drawing_options opts)"],
        "rust": ["pub fn bitmap_button(bmp: bitmap, opts: drawing_options) -> bool"],
        "python": ["def bitmap_button_with_options(bmp, opts):"],
        "pascal": ["function BitmapButton(bmp: Bitmap; opts: DrawingOptions): Boolean"],
        "csharp": [
          "public static bool Interface.BitmapButton(Bitmap bmp, DrawingOptions opts);",
          "public static bool SplashKit.BitmapButton(Bitmap bmp, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "bool bitmap_button(const string& label_text,bitmap bmp);",
      "name": "bitmap_button",
      "method_name": null,
      "unique_global_name": "bitmap_button_labeled",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Creates a button with a bitmap in it and a label.\nReturns whether the button was clicked.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "Whether the button was clicked",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "label_text": {
          "type": "string",
          "description": "The label to show in front of the button",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "bmp": {
          "type": "bitmap",
          "description": "The bitmap to show inside the button",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "labeled",
        "group": "interface",
        "static": "interface"
      },
      "signatures": {
        "cpp": ["bool bitmap_button(const string &label_text, bitmap bmp)"],
        "rust": ["pub fn bitmap_button(label_text: &String, bmp: bitmap) -> bool"],
        "python": ["def bitmap_button_labeled(label_text, bmp):"],
        "pascal": ["function BitmapButton(const labelText: String; bmp: Bitmap): Boolean"],
        "csharp": [
          "public static bool Interface.BitmapButton(string labelText, Bitmap bmp);",
          "public static bool SplashKit.BitmapButton(string labelText, Bitmap bmp);"
        ]
      }
    },
    {
      "signature": "bool bitmap_button(const string& label_text,bitmap bmp,drawing_options opts);",
      "name": "bitmap_button",
      "method_name": null,
      "unique_global_name": "bitmap_button_labeled_with_options",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Creates a button with a bitmap in it and a label.\nReturns whether the button was clicked.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "Whether the button was clicked",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "label_text": {
          "type": "string",
          "description": "The label to show in front of the button",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "bmp": {
          "type": "bitmap",
          "description": "The bitmap to show inside the button",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "opts": {
          "type": "drawing_options",
          "description": "The drawing options",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "labeled_with_options",
        "group": "interface",
        "static": "interface"
      },
      "signatures": {
        "cpp": ["bool bitmap_button(const string &label_text, bitmap bmp, drawing_options opts)"],
        "rust": ["pub fn bitmap_button(label_text: &String, bmp: bitmap, opts: drawing_options) -> bool"],
        "python": ["def bitmap_button_labeled_with_options(label_text, bmp, opts):"],
        "pascal": ["function BitmapButton(const labelText: String; bmp: Bitmap; opts: DrawingOptions): Boolean"],
        "csharp": [
          "public static bool Interface.BitmapButton(string labelText, Bitmap bmp, DrawingOptions opts);",
          "public static bool SplashKit.BitmapButton(string labelText, Bitmap bmp, DrawingOptions opts);"
        ]
      }
    },
    {
      "signature": "bool button(const string& text,const rectangle& rect);",
      "name": "button",
      "method_name": null,
      "unique_global_name": "button_at_position",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Creates a button at a specific position on screen.\nReturns whether the button was clicked.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "Whether the button was clicked",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "text": {
          "type": "string",
          "description": "The text to show inside the button",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "rect": {
          "type": "rectangle",
          "description": "The rectangle to display the button in",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "at_position",
        "group": "interface",
        "static": "interface"
      },
      "signatures": {
        "cpp": ["bool button(const string &text, const rectangle &rect)"],
        "rust": ["pub fn button(text: &String, rect: &rectangle) -> bool"],
        "python": ["def button_at_position(text, rect):"],
        "pascal": ["function Button(const text: String; const rect: Rectangle): Boolean"],
        "csharp": [
          "public static bool Interface.Button(string text, Rectangle rect);",
          "public static bool SplashKit.Button(string text, Rectangle rect);"
        ]
      }
    },
    {
      "signature": "bool button(const string& text);",
      "name": "button",
      "method_name": null,
      "unique_global_name": "button",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Creates a button without a label.\nReturns whether the button was clicked.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "Whether the button was clicked",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "text": {
          "type": "string",
          "description": "The text to show inside the button",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "interface",
        "static": "interface"
      },
      "signatures": {
        "cpp": ["bool button(const string &text)"],
        "rust": ["pub fn button(text: &String) -> bool"],
        "python": ["def button(text):"],
        "pascal": ["function Button(const text: String): Boolean"],
        "csharp": [
          "public static bool Interface.Button(string text);",
          "public static bool SplashKit.Button(string text);"
        ]
      }
    },
    {
      "signature": "bool button(const string& label_text,const string& text);",
      "name": "button",
      "method_name": null,
      "unique_global_name": "button_labeled",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Creates a button with a label.\nReturns whether the button was clicked.\n\nExample usage:\n```c++\n// Test if clicked:\nif (button(\"Button 1\", \"Click me!\"))\n{\n// do stuff..\n}\n```",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "Whether the button was clicked",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "label_text": {
          "type": "string",
          "description": "The label to show in front of the button",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "text": {
          "type": "string",
          "description": "The text to show inside the button",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "labeled",
        "group": "interface",
        "static": "interface"
      },
      "signatures": {
        "cpp": ["bool button(const string &label_text, const string &text)"],
        "rust": ["pub fn button(label_text: &String, text: &String) -> bool"],
        "python": ["def button_labeled(label_text, text):"],
        "pascal": ["function Button(const labelText: String; const text: String): Boolean"],
        "csharp": [
          "public static bool Interface.Button(string labelText, string text);",
          "public static bool SplashKit.Button(string labelText, string text);"
        ]
      }
    },
    {
      "signature": "bool checkbox(const string& text,const bool& value,const rectangle& rect);",
      "name": "checkbox",
      "method_name": null,
      "unique_global_name": "checkbox_at_position",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Creates a checkbox at a specific position on screen.\nReturns the updated value of the checkbox.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "The updated value of the checkbox",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "text": {
          "type": "string",
          "description": "The text to show next to the checkbox",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "value": {
          "type": "bool",
          "description": "The current value of the checkbox",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "rect": {
          "type": "rectangle",
          "description": "The rectangle to display the checkbox in",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "at_position",
        "group": "interface",
        "static": "interface"
      },
      "signatures": {
        "cpp": ["bool checkbox(const string &text, const bool &value, const rectangle &rect)"],
        "rust": ["pub fn checkbox(text: &String, value: &bool, rect: &rectangle) -> bool"],
        "python": ["def checkbox_at_position(text, value, rect):"],
        "pascal": ["function Checkbox(const text: String; const value: Boolean; const rect: Rectangle): Boolean"],
        "csharp": [
          "public static bool Interface.Checkbox(string text, bool value, Rectangle rect);",
          "public static bool SplashKit.Checkbox(string text, bool value, Rectangle rect);"
        ]
      }
    },
    {
      "signature": "bool checkbox(const string& text,const bool& value);",
      "name": "checkbox",
      "method_name": null,
      "unique_global_name": "checkbox",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Creates a checkbox.\nReturns the updated value of the checkbox.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "The updated value of the checkbox",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "text": {
          "type": "string",
          "description": "The text to show next to the checkbox",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "value": {
          "type": "bool",
          "description": "The current value of the checkbox",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "interface",
        "static": "interface"
      },
      "signatures": {
        "cpp": ["bool checkbox(const string &text, const bool &value)"],
        "rust": ["pub fn checkbox(text: &String, value: &bool) -> bool"],
        "python": ["def checkbox(text, value):"],
        "pascal": ["function Checkbox(const text: String; const value: Boolean): Boolean"],
        "csharp": [
          "public static bool Interface.Checkbox(string text, bool value);",
          "public static bool SplashKit.Checkbox(string text, bool value);"
        ]
      }
    },
    {
      "signature": "bool checkbox(const string& label_text,const string& text,const bool& value);",
      "name": "checkbox",
      "method_name": null,
      "unique_global_name": "checkbox_labeled",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Creates a checkbox with a label.\nReturns the updated value of the checkbox.\n\nExample usage:\n```c++\nmy_bool = checkbox(\"Checkbox 1\", \"Enabled?\", my_bool);\n```",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "The updated value of the checkbox",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "label_text": {
          "type": "string",
          "description": "The label to show in front of the checkbox",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "text": {
          "type": "string",
          "description": "The text to show next to the checkbox",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "value": {
          "type": "bool",
          "description": "The current value of the checkbox",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "labeled",
        "group": "interface",
        "static": "interface"
      },
      "signatures": {
        "cpp": ["bool checkbox(const string &label_text, const string &text, const bool &value)"],
        "rust": ["pub fn checkbox(label_text: &String, text: &String, value: &bool) -> bool"],
        "python": ["def checkbox_labeled(label_text, text, value):"],
        "pascal": ["function Checkbox(const labelText: String; const text: String; const value: Boolean): Boolean"],
        "csharp": [
          "public static bool Interface.Checkbox(string labelText, string text, bool value);",
          "public static bool SplashKit.Checkbox(string labelText, string text, bool value);"
        ]
      }
    },
    {
      "signature": "color color_slider(const color& clr,const rectangle& rect);",
      "name": "color_slider",
      "method_name": null,
      "unique_global_name": "color_slider_at_position",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Creates a set of RGBA sliders to adjust a color, at a specific position on screen.\nReturns the updated color value of the slider.",
      "brief": null,
      "return": {
        "type": "color",
        "description": "The updated value of the slider",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "clr": {
          "type": "color",
          "description": "The current value of the color slider",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "rect": {
          "type": "rectangle",
          "description": "The rectangle to display the slider in.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "at_position",
        "group": "interface",
        "static": "interface"
      },
      "signatures": {
        "cpp": ["color color_slider(const color &clr, const rectangle &rect)"],
        "rust": ["pub fn color_slider(clr: &color, rect: &rectangle) -> color"],
        "python": ["def color_slider_at_position(clr, rect):"],
        "pascal": ["function ColorSlider(const clr: Color; const rect: Rectangle): Color"],
        "csharp": [
          "public static Color Interface.ColorSlider(Color clr, Rectangle rect);",
          "public static Color SplashKit.ColorSlider(Color clr, Rectangle rect);"
        ]
      }
    },
    {
      "signature": "color color_slider(const color& clr);",
      "name": "color_slider",
      "method_name": null,
      "unique_global_name": "color_slider",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Creates a set of RGBA sliders to adjust a color.\nReturns the updated color value of the slider.",
      "brief": null,
      "return": {
        "type": "color",
        "description": "The updated value of the slider",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "clr": {
          "type": "color",
          "description": "The current value of the color slider",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "interface",
        "static": "interface"
      },
      "signatures": {
        "cpp": ["color color_slider(const color &clr)"],
        "rust": ["pub fn color_slider(clr: &color) -> color"],
        "python": ["def color_slider(clr):"],
        "pascal": ["function ColorSlider(const clr: Color): Color"],
        "csharp": [
          "public static Color Interface.ColorSlider(Color clr);",
          "public static Color SplashKit.ColorSlider(Color clr);"
        ]
      }
    },
    {
      "signature": "color color_slider(const string& label_text,const color& clr);",
      "name": "color_slider",
      "method_name": null,
      "unique_global_name": "color_slider_labeled",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Creates a set of RGBA sliders to adjust a color, with a label.\nReturns the updated color value of the slider.\n\nExample usage:\n```c++\nmy_color = color_slider(\"Player Color\", my_color);\n```",
      "brief": null,
      "return": {
        "type": "color",
        "description": "The updated value of the slider",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "label_text": {
          "type": "string",
          "description": "The label to show in front of the slider",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The current value of the color slider",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "labeled",
        "group": "interface",
        "static": "interface"
      },
      "signatures": {
        "cpp": ["color color_slider(const string &label_text, const color &clr)"],
        "rust": ["pub fn color_slider(label_text: &String, clr: &color) -> color"],
        "python": ["def color_slider_labeled(label_text, clr):"],
        "pascal": ["function ColorSlider(const labelText: String; const clr: Color): Color"],
        "csharp": [
          "public static Color Interface.ColorSlider(string labelText, Color clr);",
          "public static Color SplashKit.ColorSlider(string labelText, Color clr);"
        ]
      }
    },
    {
      "signature": "void disable_interface();",
      "name": "disable_interface",
      "method_name": null,
      "unique_global_name": "disable_interface",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Disables the interface temporarily. Elements created after this function will appear disabled and cannot be interacted with.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "group": "interface",
        "static": "interface"
      },
      "signatures": {
        "cpp": ["void disable_interface()"],
        "rust": ["pub fn disable_interface()"],
        "python": ["def disable_interface():"],
        "pascal": ["procedure DisableInterface()"],
        "csharp": [
          "public static void Interface.DisableInterface();",
          "public static void SplashKit.DisableInterface();"
        ]
      }
    },
    {
      "signature": "void draw_interface();",
      "name": "draw_interface",
      "method_name": null,
      "unique_global_name": "draw_interface",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Draws the user interface that all the previous calls (such as `start_panel`, `button`, etc) have created.\n\n**Make sure to call this!** Without calling it, the interface won't be visible.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "group": "interface",
        "static": "interface"
      },
      "signatures": {
        "cpp": ["void draw_interface()"],
        "rust": ["pub fn draw_interface()"],
        "python": ["def draw_interface():"],
        "pascal": ["procedure DrawInterface()"],
        "csharp": ["public static void Interface.DrawInterface();", "public static void SplashKit.DrawInterface();"]
      }
    },
    {
      "signature": "void enable_interface();",
      "name": "enable_interface",
      "method_name": null,
      "unique_global_name": "enable_interface",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Re-enables the interface, reverses the effects of disabling the interface.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "group": "interface",
        "static": "interface"
      },
      "signatures": {
        "cpp": ["void enable_interface()"],
        "rust": ["pub fn enable_interface()"],
        "python": ["def enable_interface():"],
        "pascal": ["procedure EnableInterface()"],
        "csharp": ["public static void Interface.EnableInterface();", "public static void SplashKit.EnableInterface();"]
      }
    },
    {
      "signature": "void end_inset(const string& name);",
      "name": "end_inset",
      "method_name": null,
      "unique_global_name": "end_inset",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Finishes the creation of an inset area.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The area's name - must match with `start_inset`",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "interface",
        "static": "interface"
      },
      "signatures": {
        "cpp": ["void end_inset(const string &name)"],
        "rust": ["pub fn end_inset(name: &String)"],
        "python": ["def end_inset(name):"],
        "pascal": ["procedure EndInset(const name: String)"],
        "csharp": [
          "public static void Interface.EndInset(string name);",
          "public static void SplashKit.EndInset(string name);"
        ]
      }
    },
    {
      "signature": "void end_panel(const string& name);",
      "name": "end_panel",
      "method_name": null,
      "unique_global_name": "end_panel",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Finishes the creation of a panel.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name shown in the panel's titlebar - must match with `start_panel`",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "interface",
        "static": "interface"
      },
      "signatures": {
        "cpp": ["void end_panel(const string &name)"],
        "rust": ["pub fn end_panel(name: &String)"],
        "python": ["def end_panel(name):"],
        "pascal": ["procedure EndPanel(const name: String)"],
        "csharp": [
          "public static void Interface.EndPanel(string name);",
          "public static void SplashKit.EndPanel(string name);"
        ]
      }
    },
    {
      "signature": "void end_popup(const string& name);",
      "name": "end_popup",
      "method_name": null,
      "unique_global_name": "end_popup",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Finishes the creation of a popup.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The popup's name - must match with `start_popup`",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "interface",
        "static": "interface"
      },
      "signatures": {
        "cpp": ["void end_popup(const string &name)"],
        "rust": ["pub fn end_popup(name: &String)"],
        "python": ["def end_popup(name):"],
        "pascal": ["procedure EndPopup(const name: String)"],
        "csharp": [
          "public static void Interface.EndPopup(string name);",
          "public static void SplashKit.EndPopup(string name);"
        ]
      }
    },
    {
      "signature": "void end_treenode(const string& label_text);",
      "name": "end_treenode",
      "method_name": null,
      "unique_global_name": "end_treenode",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Finishes the creation of a tree node.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "label_text": {
          "type": "string",
          "description": "The node's name - must match with `start_treenode`",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "interface",
        "static": "interface"
      },
      "signatures": {
        "cpp": ["void end_treenode(const string &label_text)"],
        "rust": ["pub fn end_treenode(label_text: &String)"],
        "python": ["def end_treenode(label_text):"],
        "pascal": ["procedure EndTreenode(const labelText: String)"],
        "csharp": [
          "public static void Interface.EndTreenode(string labelText);",
          "public static void SplashKit.EndTreenode(string labelText);"
        ]
      }
    },
    {
      "signature": "void enter_column();",
      "name": "enter_column",
      "method_name": null,
      "unique_global_name": "enter_column",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Begins placing elements inside the current column. Must be paired with a call to `leave_column`.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "group": "interface",
        "static": "interface"
      },
      "signatures": {
        "cpp": ["void enter_column()"],
        "rust": ["pub fn enter_column()"],
        "python": ["def enter_column():"],
        "pascal": ["procedure EnterColumn()"],
        "csharp": ["public static void Interface.EnterColumn();", "public static void SplashKit.EnterColumn();"]
      }
    },
    {
      "signature": "int get_interface_label_width();",
      "name": "get_interface_label_width",
      "method_name": null,
      "unique_global_name": "get_interface_label_width",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the width of element labels.\n\nDefault is 60 pixels.",
      "brief": null,
      "return": {
        "type": "int",
        "description": "The width of labels",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "group": "interface",
        "static": "interface"
      },
      "signatures": {
        "cpp": ["int get_interface_label_width()"],
        "rust": ["pub fn get_interface_label_width() -> i32"],
        "python": ["def get_interface_label_width():"],
        "pascal": ["function GetInterfaceLabelWidth(): Integer"],
        "csharp": [
          "public static int Interface.GetInterfaceLabelWidth();",
          "public static int SplashKit.GetInterfaceLabelWidth();"
        ]
      }
    },
    {
      "signature": "bool header(const string& label_text);",
      "name": "header",
      "method_name": null,
      "unique_global_name": "header",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Creates a collapsable header with a label.\nReturns whether the header is expanded or not.\n\nNote: Unlike `start_panel` and other similar functions, there is\nno need to 'end' this one. Example usage:\n```c++\nif (header(\"Section A\"))\n{\n// elements inside header go here\n}\n```",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "Whether the header is expanded or not",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "label_text": {
          "type": "string",
          "description": "The label to show in the header",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "interface",
        "static": "interface"
      },
      "signatures": {
        "cpp": ["bool header(const string &label_text)"],
        "rust": ["pub fn header(label_text: &String) -> bool"],
        "python": ["def header(label_text):"],
        "pascal": ["function Header(const labelText: String): Boolean"],
        "csharp": [
          "public static bool Interface.Header(string labelText);",
          "public static bool SplashKit.Header(string labelText);"
        ]
      }
    },
    {
      "signature": "color hsb_color_slider(const color& clr,const rectangle& rect);",
      "name": "hsb_color_slider",
      "method_name": null,
      "unique_global_name": "hsb_color_slider_at_position",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Creates a set of HSBA (hue, saturation, brightness, alpha) sliders to adjust a color, at a specific position on screen.\nReturns the updated color value of the slider.",
      "brief": null,
      "return": {
        "type": "color",
        "description": "The updated value of the slider",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "clr": {
          "type": "color",
          "description": "The current value of the color slider",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "rect": {
          "type": "rectangle",
          "description": "The rectangle to display the slider in.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "at_position",
        "group": "interface",
        "static": "interface"
      },
      "signatures": {
        "cpp": ["color hsb_color_slider(const color &clr, const rectangle &rect)"],
        "rust": ["pub fn hsb_color_slider(clr: &color, rect: &rectangle) -> color"],
        "python": ["def hsb_color_slider_at_position(clr, rect):"],
        "pascal": ["function HSBColorSlider(const clr: Color; const rect: Rectangle): Color"],
        "csharp": [
          "public static Color Interface.HSBColorSlider(Color clr, Rectangle rect);",
          "public static Color SplashKit.HSBColorSlider(Color clr, Rectangle rect);"
        ]
      }
    },
    {
      "signature": "color hsb_color_slider(const color& clr);",
      "name": "hsb_color_slider",
      "method_name": null,
      "unique_global_name": "hsb_color_slider",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Creates a set of HSBA (hue, saturation, brightness, alpha) sliders to adjust a color.\nReturns the updated color value of the slider.",
      "brief": null,
      "return": {
        "type": "color",
        "description": "The updated value of the slider",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "clr": {
          "type": "color",
          "description": "The current value of the color slider",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "interface",
        "static": "interface"
      },
      "signatures": {
        "cpp": ["color hsb_color_slider(const color &clr)"],
        "rust": ["pub fn hsb_color_slider(clr: &color) -> color"],
        "python": ["def hsb_color_slider(clr):"],
        "pascal": ["function HSBColorSlider(const clr: Color): Color"],
        "csharp": [
          "public static Color Interface.HSBColorSlider(Color clr);",
          "public static Color SplashKit.HSBColorSlider(Color clr);"
        ]
      }
    },
    {
      "signature": "color hsb_color_slider(const string& label_text,const color& clr);",
      "name": "hsb_color_slider",
      "method_name": null,
      "unique_global_name": "hsb_color_slider_labeled",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Creates a set of HSBA (hue, saturation, brightness, alpha) sliders to adjust a color, with a label.\nReturns the updated color value of the slider.\n\nExample usage:\n```c++\nmy_color = hsb_color_slider(\"Player Color\", my_color);\n```",
      "brief": null,
      "return": {
        "type": "color",
        "description": "The updated value of the slider",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "label_text": {
          "type": "string",
          "description": "The label to show in front of the slider",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The current value of the color slider",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "labeled",
        "group": "interface",
        "static": "interface"
      },
      "signatures": {
        "cpp": ["color hsb_color_slider(const string &label_text, const color &clr)"],
        "rust": ["pub fn hsb_color_slider(label_text: &String, clr: &color) -> color"],
        "python": ["def hsb_color_slider_labeled(label_text, clr):"],
        "pascal": ["function HSBColorSlider(const labelText: String; const clr: Color): Color"],
        "csharp": [
          "public static Color Interface.HSBColorSlider(string labelText, Color clr);",
          "public static Color SplashKit.HSBColorSlider(string labelText, Color clr);"
        ]
      }
    },
    {
      "signature": "bool interface_enabled();",
      "name": "interface_enabled",
      "method_name": null,
      "unique_global_name": "interface_enabled",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns if the interface is currently enabled or not.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "Whether the interface is currently enabled or not",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "group": "interface",
        "static": "interface"
      },
      "signatures": {
        "cpp": ["bool interface_enabled()"],
        "rust": ["pub fn interface_enabled() -> bool"],
        "python": ["def interface_enabled():"],
        "pascal": ["function InterfaceEnabled(): Boolean"],
        "csharp": [
          "public static bool Interface.InterfaceEnabled();",
          "public static bool SplashKit.InterfaceEnabled();"
        ]
      }
    },
    {
      "signature": "void interface_style_panel(const rectangle& initial_rectangle);",
      "name": "interface_style_panel",
      "method_name": null,
      "unique_global_name": "interface_style_panel",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "A utility function to show a 'Style Panel', which will allows you to experiment with different interface styles.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "initial_rectangle": {
          "type": "rectangle",
          "description": "The initial position/size the panel starts off in",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "interface",
        "static": "interface"
      },
      "signatures": {
        "cpp": ["void interface_style_panel(const rectangle &initial_rectangle)"],
        "rust": ["pub fn interface_style_panel(initial_rectangle: &rectangle)"],
        "python": ["def interface_style_panel(initial_rectangle):"],
        "pascal": ["procedure InterfaceStylePanel(const initialRectangle: Rectangle)"],
        "csharp": [
          "public static void Interface.InterfaceStylePanel(Rectangle initialRectangle);",
          "public static void SplashKit.InterfaceStylePanel(Rectangle initialRectangle);"
        ]
      }
    },
    {
      "signature": "void label_element(const string& text);",
      "name": "label_element",
      "method_name": null,
      "unique_global_name": "label_element",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Creates a label with the given text.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "text": {
          "type": "string",
          "description": "The label to show",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "interface",
        "static": "interface"
      },
      "signatures": {
        "cpp": ["void label_element(const string &text)"],
        "rust": ["pub fn label_element(text: &String)"],
        "python": ["def label_element(text):"],
        "pascal": ["procedure LabelElement(const text: String)"],
        "csharp": [
          "public static void Interface.LabelElement(string text);",
          "public static void SplashKit.LabelElement(string text);"
        ]
      }
    },
    {
      "signature": "void label_element(const string& text,const rectangle& rect);",
      "name": "label_element",
      "method_name": null,
      "unique_global_name": "label_element_at_position",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Creates a label at a specific position on screen.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "text": {
          "type": "string",
          "description": "The label to show",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "rect": {
          "type": "rectangle",
          "description": "The rectangle to display the label in",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "at_position",
        "group": "interface",
        "static": "interface"
      },
      "signatures": {
        "cpp": ["void label_element(const string &text, const rectangle &rect)"],
        "rust": ["pub fn label_element(text: &String, rect: &rectangle)"],
        "python": ["def label_element_at_position(text, rect):"],
        "pascal": ["procedure LabelElement(const text: String; const rect: Rectangle)"],
        "csharp": [
          "public static void Interface.LabelElement(string text, Rectangle rect);",
          "public static void SplashKit.LabelElement(string text, Rectangle rect);"
        ]
      }
    },
    {
      "signature": "bool last_element_changed();",
      "name": "last_element_changed",
      "method_name": null,
      "unique_global_name": "last_element_changed",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns if the last created element was changed at all (such as dragged, typed in, etc)",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "Whether the last created element was changed",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "group": "interface",
        "static": "interface"
      },
      "signatures": {
        "cpp": ["bool last_element_changed()"],
        "rust": ["pub fn last_element_changed() -> bool"],
        "python": ["def last_element_changed():"],
        "pascal": ["function LastElementChanged(): Boolean"],
        "csharp": [
          "public static bool Interface.LastElementChanged();",
          "public static bool SplashKit.LastElementChanged();"
        ]
      }
    },
    {
      "signature": "bool last_element_confirmed();",
      "name": "last_element_confirmed",
      "method_name": null,
      "unique_global_name": "last_element_confirmed",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns if the last created element was 'confirmed' (such as clicking a button, or hitting enter in a text box)",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "Whether the last created element was confirmed",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "group": "interface",
        "static": "interface"
      },
      "signatures": {
        "cpp": ["bool last_element_confirmed()"],
        "rust": ["pub fn last_element_confirmed() -> bool"],
        "python": ["def last_element_confirmed():"],
        "pascal": ["function LastElementConfirmed(): Boolean"],
        "csharp": [
          "public static bool Interface.LastElementConfirmed();",
          "public static bool SplashKit.LastElementConfirmed();"
        ]
      }
    },
    {
      "signature": "void leave_column();",
      "name": "leave_column",
      "method_name": null,
      "unique_global_name": "leave_column",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Stops placing elements inside the current column and moves to the next one.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "group": "interface",
        "static": "interface"
      },
      "signatures": {
        "cpp": ["void leave_column()"],
        "rust": ["pub fn leave_column()"],
        "python": ["def leave_column():"],
        "pascal": ["procedure LeaveColumn()"],
        "csharp": ["public static void Interface.LeaveColumn();", "public static void SplashKit.LeaveColumn();"]
      }
    },
    {
      "signature": "float number_box(const float& value,float step,const rectangle& rect);",
      "name": "number_box",
      "method_name": null,
      "unique_global_name": "number_box_at_position",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Creates a number entry box at a specific position on screen.\nReturns the updated value of the number box.",
      "brief": null,
      "return": {
        "type": "float",
        "description": "The updated value of the slider",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "value": {
          "type": "float",
          "description": "The current value of the number box",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "step": {
          "type": "float",
          "description": "The amount incremented when dragging on the box",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "rect": {
          "type": "rectangle",
          "description": "The rectangle to display the slider in",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "at_position",
        "group": "interface",
        "static": "interface"
      },
      "signatures": {
        "cpp": ["float number_box(const float &value, float step, const rectangle &rect)"],
        "rust": ["pub fn number_box(value: &f32, step: f32, rect: &rectangle) -> f32"],
        "python": ["def number_box_at_position(value, step, rect):"],
        "pascal": ["function NumberBox(const value: Single; step: Single; const rect: Rectangle): Single"],
        "csharp": [
          "public static float Interface.NumberBox(float value, float step, Rectangle rect);",
          "public static float SplashKit.NumberBox(float value, float step, Rectangle rect);"
        ]
      }
    },
    {
      "signature": "float number_box(const float& value,float step);",
      "name": "number_box",
      "method_name": null,
      "unique_global_name": "number_box",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Creates a number entry box with a label.\nReturns the updated value of the number box.",
      "brief": null,
      "return": {
        "type": "float",
        "description": "The updated value of the slider",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "value": {
          "type": "float",
          "description": "The current value of the number box",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "step": {
          "type": "float",
          "description": "The amount incremented when dragging on the box",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "interface",
        "static": "interface"
      },
      "signatures": {
        "cpp": ["float number_box(const float &value, float step)"],
        "rust": ["pub fn number_box(value: &f32, step: f32) -> f32"],
        "python": ["def number_box(value, step):"],
        "pascal": ["function NumberBox(const value: Single; step: Single): Single"],
        "csharp": [
          "public static float Interface.NumberBox(float value, float step);",
          "public static float SplashKit.NumberBox(float value, float step);"
        ]
      }
    },
    {
      "signature": "float number_box(const string& label_text,const float& value,float step);",
      "name": "number_box",
      "method_name": null,
      "unique_global_name": "number_box_labeled",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Creates a number entry box with a label.\nReturns the updated value of the number box.\n\nExample usage:\n```c++\nmy_float = number_box(\"Percentage\", my_float, 1);\n```",
      "brief": null,
      "return": {
        "type": "float",
        "description": "The updated value of the slider",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "label_text": {
          "type": "string",
          "description": "The label to show in front of the number box",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "value": {
          "type": "float",
          "description": "The current value of the number box",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "step": {
          "type": "float",
          "description": "The amount incremented when dragging on the box",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "labeled",
        "group": "interface",
        "static": "interface"
      },
      "signatures": {
        "cpp": ["float number_box(const string &label_text, const float &value, float step)"],
        "rust": ["pub fn number_box(label_text: &String, value: &f32, step: f32) -> f32"],
        "python": ["def number_box_labeled(label_text, value, step):"],
        "pascal": ["function NumberBox(const labelText: String; const value: Single; step: Single): Single"],
        "csharp": [
          "public static float Interface.NumberBox(string labelText, float value, float step);",
          "public static float SplashKit.NumberBox(string labelText, float value, float step);"
        ]
      }
    },
    {
      "signature": "void open_popup(const string& name);",
      "name": "open_popup",
      "method_name": null,
      "unique_global_name": "open_popup",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Makes the popup named `name` open/popup at the cursor's position.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The popup's name. Must match with the same name used in `start_popup`",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "interface",
        "static": "interface"
      },
      "signatures": {
        "cpp": ["void open_popup(const string &name)"],
        "rust": ["pub fn open_popup(name: &String)"],
        "python": ["def open_popup(name):"],
        "pascal": ["procedure OpenPopup(const name: String)"],
        "csharp": [
          "public static void Interface.OpenPopup(string name);",
          "public static void SplashKit.OpenPopup(string name);"
        ]
      }
    },
    {
      "signature": "void paragraph(const string& text);",
      "name": "paragraph",
      "method_name": null,
      "unique_global_name": "paragraph",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Creates a paragraph of text that auto-wraps.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "text": {
          "type": "string",
          "description": "The text to show",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "interface",
        "static": "interface"
      },
      "signatures": {
        "cpp": ["void paragraph(const string &text)"],
        "rust": ["pub fn paragraph(text: &String)"],
        "python": ["def paragraph(text):"],
        "pascal": ["procedure Paragraph(const text: String)"],
        "csharp": [
          "public static void Interface.Paragraph(string text);",
          "public static void SplashKit.Paragraph(string text);"
        ]
      }
    },
    {
      "signature": "void paragraph(const string& text,const rectangle& rect);",
      "name": "paragraph",
      "method_name": null,
      "unique_global_name": "paragraph_at_position",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Creates a paragraph of text that auto-wraps at a specific position on screen.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "text": {
          "type": "string",
          "description": "The text to show",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "rect": {
          "type": "rectangle",
          "description": "The rectangle to display the label in",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "at_position",
        "group": "interface",
        "static": "interface"
      },
      "signatures": {
        "cpp": ["void paragraph(const string &text, const rectangle &rect)"],
        "rust": ["pub fn paragraph(text: &String, rect: &rectangle)"],
        "python": ["def paragraph_at_position(text, rect):"],
        "pascal": ["procedure Paragraph(const text: String; const rect: Rectangle)"],
        "csharp": [
          "public static void Interface.Paragraph(string text, Rectangle rect);",
          "public static void SplashKit.Paragraph(string text, Rectangle rect);"
        ]
      }
    },
    {
      "signature": "void reset_layout();",
      "name": "reset_layout",
      "method_name": null,
      "unique_global_name": "reset_layout",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Resets to the default layout of a single column with default height.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "group": "interface",
        "static": "interface"
      },
      "signatures": {
        "cpp": ["void reset_layout()"],
        "rust": ["pub fn reset_layout()"],
        "python": ["def reset_layout():"],
        "pascal": ["procedure ResetLayout()"],
        "csharp": ["public static void Interface.ResetLayout();", "public static void SplashKit.ResetLayout();"]
      }
    },
    {
      "signature": "void set_interface_accent_color(color clr,float contrast);",
      "name": "set_interface_accent_color",
      "method_name": null,
      "unique_global_name": "set_interface_accent_color",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Sets the color of accents in the interface, and the contrast of how strongly they appear when hovering/interacting.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "clr": {
          "type": "color",
          "description": "The color of accents",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "contrast": {
          "type": "float",
          "description": "The strength of how much the accents show (between 0 and 1)",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "interface",
        "static": "interface"
      },
      "signatures": {
        "cpp": ["void set_interface_accent_color(color clr, float contrast)"],
        "rust": ["pub fn set_interface_accent_color(clr: color, contrast: f32)"],
        "python": ["def set_interface_accent_color(clr, contrast):"],
        "pascal": ["procedure SetInterfaceAccentColor(clr: Color; contrast: Single)"],
        "csharp": [
          "public static void Interface.SetInterfaceAccentColor(Color clr, float contrast);",
          "public static void SplashKit.SetInterfaceAccentColor(Color clr, float contrast);"
        ]
      }
    },
    {
      "signature": "void set_interface_border_color(color clr);",
      "name": "set_interface_border_color",
      "method_name": null,
      "unique_global_name": "set_interface_border_color",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Sets the interface's border color.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "clr": {
          "type": "color",
          "description": "The color to set borders to",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "interface",
        "static": "interface"
      },
      "signatures": {
        "cpp": ["void set_interface_border_color(color clr)"],
        "rust": ["pub fn set_interface_border_color(clr: color)"],
        "python": ["def set_interface_border_color(clr):"],
        "pascal": ["procedure SetInterfaceBorderColor(clr: Color)"],
        "csharp": [
          "public static void Interface.SetInterfaceBorderColor(Color clr);",
          "public static void SplashKit.SetInterfaceBorderColor(Color clr);"
        ]
      }
    },
    {
      "signature": "void set_interface_colors_auto(color main_clr,color accent_clr,float contrast,float accent_contrast,float border_contrast);",
      "name": "set_interface_colors_auto",
      "method_name": null,
      "unique_global_name": "set_interface_colors_auto",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "A convenience function to set the majority of the interface's colors in one go.\nSome colors will be automatically chosen based on the parameters (such as text color).",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "main_clr": {
          "type": "color",
          "description": "The main color of the interface - also decides if the interface is light or dark mode",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "accent_clr": {
          "type": "color",
          "description": "The color used to accent the interface - this will appear in highlighted areas",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "contrast": {
          "type": "float",
          "description": "The contrast between the frames of elements/containers and their internal elements",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "accent_contrast": {
          "type": "float",
          "description": "How strongly the accent color is used, for instance when highlighting elements",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "border_contrast": {
          "type": "float",
          "description": "Simply the opacity of the borders",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "interface",
        "static": "interface"
      },
      "signatures": {
        "cpp": [
          "void set_interface_colors_auto(color main_clr, color accent_clr, float contrast, float accent_contrast, float border_contrast)"
        ],
        "rust": [
          "pub fn set_interface_colors_auto(main_clr: color, accent_clr: color, contrast: f32, accent_contrast: f32, border_contrast: f32)"
        ],
        "python": ["def set_interface_colors_auto(main_clr, accent_clr, contrast, accent_contrast, border_contrast):"],
        "pascal": [
          "procedure SetInterfaceColorsAuto(mainClr: Color; accentClr: Color; contrast: Single; accentContrast: Single; borderContrast: Single)"
        ],
        "csharp": [
          "public static void Interface.SetInterfaceColorsAuto(Color mainClr, Color accentClr, float contrast, float accentContrast, float borderContrast);",
          "public static void SplashKit.SetInterfaceColorsAuto(Color mainClr, Color accentClr, float contrast, float accentContrast, float borderContrast);"
        ]
      }
    },
    {
      "signature": "void set_interface_element_color(color clr,float contrast);",
      "name": "set_interface_element_color",
      "method_name": null,
      "unique_global_name": "set_interface_element_color",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Sets the main color of elements in the interface, and the contrast between their frame and internal pieces.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "clr": {
          "type": "color",
          "description": "The color of elements",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "contrast": {
          "type": "float",
          "description": "The contrast between the frame of elements and their internal pieces (between 0 and 1)",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "interface",
        "static": "interface"
      },
      "signatures": {
        "cpp": ["void set_interface_element_color(color clr, float contrast)"],
        "rust": ["pub fn set_interface_element_color(clr: color, contrast: f32)"],
        "python": ["def set_interface_element_color(clr, contrast):"],
        "pascal": ["procedure SetInterfaceElementColor(clr: Color; contrast: Single)"],
        "csharp": [
          "public static void Interface.SetInterfaceElementColor(Color clr, float contrast);",
          "public static void SplashKit.SetInterfaceElementColor(Color clr, float contrast);"
        ]
      }
    },
    {
      "signature": "void set_interface_element_shadows(int radius,color clr,point_2d offset);",
      "name": "set_interface_element_shadows",
      "method_name": null,
      "unique_global_name": "set_interface_element_shadows",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Sets the style of element's shadows. Use a fully transparent color to disable them.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "radius": {
          "type": "int",
          "description": "The radius of the shadow's blur",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The color of the shadows (commonly black, but can do coloured and semi-transparent too)",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "offset": {
          "type": "point_2d",
          "description": "The offset in x/y coordinates of the shadows from their casting elements",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "interface",
        "static": "interface"
      },
      "signatures": {
        "cpp": ["void set_interface_element_shadows(int radius, color clr, point_2d offset)"],
        "rust": ["pub fn set_interface_element_shadows(radius: i32, clr: color, offset: point_2d)"],
        "python": ["def set_interface_element_shadows(radius, clr, offset):"],
        "pascal": ["procedure SetInterfaceElementShadows(radius: Integer; clr: Color; offset: Point2D)"],
        "csharp": [
          "public static void Interface.SetInterfaceElementShadows(int radius, Color clr, Point2D offset);",
          "public static void SplashKit.SetInterfaceElementShadows(int radius, Color clr, Point2D offset);"
        ]
      }
    },
    {
      "signature": "void set_interface_font(const string& fnt);",
      "name": "set_interface_font",
      "method_name": null,
      "unique_global_name": "set_interface_font_font_as_string",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Sets the interface's font.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "fnt": {
          "type": "string",
          "description": "The name of the font to be used",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "font_as_string",
        "group": "interface",
        "static": "interface"
      },
      "signatures": {
        "cpp": ["void set_interface_font(const string &fnt)"],
        "rust": ["pub fn set_interface_font(fnt: &String)"],
        "python": ["def set_interface_font_font_as_string(fnt):"],
        "pascal": ["procedure SetInterfaceFont(const fnt: String)"],
        "csharp": [
          "public static void Interface.SetInterfaceFont(string fnt);",
          "public static void SplashKit.SetInterfaceFont(string fnt);"
        ]
      }
    },
    {
      "signature": "void set_interface_font(font fnt);",
      "name": "set_interface_font",
      "method_name": null,
      "unique_global_name": "set_interface_font",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Sets the interface's font.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "fnt": {
          "type": "font",
          "description": "The font to be used",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "interface",
        "static": "interface"
      },
      "signatures": {
        "cpp": ["void set_interface_font(font fnt)"],
        "rust": ["pub fn set_interface_font(fnt: font)"],
        "python": ["def set_interface_font(fnt):"],
        "pascal": ["procedure SetInterfaceFont(fnt: Font)"],
        "csharp": [
          "public static void Interface.SetInterfaceFont(Font fnt);",
          "public static void SplashKit.SetInterfaceFont(Font fnt);"
        ]
      }
    },
    {
      "signature": "void set_interface_font_size(int size);",
      "name": "set_interface_font_size",
      "method_name": null,
      "unique_global_name": "set_interface_font_size",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Sets the interface's font size.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "size": {
          "type": "int",
          "description": "The font size to be used",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "interface",
        "static": "interface"
      },
      "signatures": {
        "cpp": ["void set_interface_font_size(int size)"],
        "rust": ["pub fn set_interface_font_size(size: i32)"],
        "python": ["def set_interface_font_size(size):"],
        "pascal": ["procedure SetInterfaceFontSize(size: Integer)"],
        "csharp": [
          "public static void Interface.SetInterfaceFontSize(int size);",
          "public static void SplashKit.SetInterfaceFontSize(int size);"
        ]
      }
    },
    {
      "signature": "void set_interface_label_width(int width);",
      "name": "set_interface_label_width",
      "method_name": null,
      "unique_global_name": "set_interface_label_width",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Sets the width of element labels. This is the maximum width\nin pixels that a label can span in front of an element.\n\nDefault is 60 pixels.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "width": {
          "type": "int",
          "description": "The width of labels",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "interface",
        "static": "interface"
      },
      "signatures": {
        "cpp": ["void set_interface_label_width(int width)"],
        "rust": ["pub fn set_interface_label_width(width: i32)"],
        "python": ["def set_interface_label_width(width):"],
        "pascal": ["procedure SetInterfaceLabelWidth(width: Integer)"],
        "csharp": [
          "public static void Interface.SetInterfaceLabelWidth(int width);",
          "public static void SplashKit.SetInterfaceLabelWidth(int width);"
        ]
      }
    },
    {
      "signature": "void set_interface_panel_shadows(int radius,color clr,point_2d offset);",
      "name": "set_interface_panel_shadows",
      "method_name": null,
      "unique_global_name": "set_interface_panel_shadows",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Sets the style of panel's shadows. Use a fully transparent color to disable them.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "radius": {
          "type": "int",
          "description": "The radius of the shadow's blur",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The color of the shadows (commonly black, but can do coloured and semi-transparent too)",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "offset": {
          "type": "point_2d",
          "description": "The offset in x/y coordinates of the shadows from their casting elements",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "interface",
        "static": "interface"
      },
      "signatures": {
        "cpp": ["void set_interface_panel_shadows(int radius, color clr, point_2d offset)"],
        "rust": ["pub fn set_interface_panel_shadows(radius: i32, clr: color, offset: point_2d)"],
        "python": ["def set_interface_panel_shadows(radius, clr, offset):"],
        "pascal": ["procedure SetInterfacePanelShadows(radius: Integer; clr: Color; offset: Point2D)"],
        "csharp": [
          "public static void Interface.SetInterfacePanelShadows(int radius, Color clr, Point2D offset);",
          "public static void SplashKit.SetInterfacePanelShadows(int radius, Color clr, Point2D offset);"
        ]
      }
    },
    {
      "signature": "void set_interface_root_text_color(color clr);",
      "name": "set_interface_root_text_color",
      "method_name": null,
      "unique_global_name": "set_interface_root_text_color",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Sets color of text drawn directly onto the main window",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "clr": {
          "type": "color",
          "description": "The color to set text drawn on the main window to",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "interface",
        "static": "interface"
      },
      "signatures": {
        "cpp": ["void set_interface_root_text_color(color clr)"],
        "rust": ["pub fn set_interface_root_text_color(clr: color)"],
        "python": ["def set_interface_root_text_color(clr):"],
        "pascal": ["procedure SetInterfaceRootTextColor(clr: Color)"],
        "csharp": [
          "public static void Interface.SetInterfaceRootTextColor(Color clr);",
          "public static void SplashKit.SetInterfaceRootTextColor(Color clr);"
        ]
      }
    },
    {
      "signature": "void set_interface_shadows(int radius,color clr,point_2d offset);",
      "name": "set_interface_shadows",
      "method_name": null,
      "unique_global_name": "set_interface_shadows",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Sets the style of all interface shadows. Use a fully transparent color to disable them.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "radius": {
          "type": "int",
          "description": "The radius of the shadow's blur",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The color of the shadows (commonly black, but can do coloured and semi-transparent too)",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "offset": {
          "type": "point_2d",
          "description": "The offset in x/y coordinates of the shadows from their casting elements",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "interface",
        "static": "interface"
      },
      "signatures": {
        "cpp": ["void set_interface_shadows(int radius, color clr, point_2d offset)"],
        "rust": ["pub fn set_interface_shadows(radius: i32, clr: color, offset: point_2d)"],
        "python": ["def set_interface_shadows(radius, clr, offset):"],
        "pascal": ["procedure SetInterfaceShadows(radius: Integer; clr: Color; offset: Point2D)"],
        "csharp": [
          "public static void Interface.SetInterfaceShadows(int radius, Color clr, Point2D offset);",
          "public static void SplashKit.SetInterfaceShadows(int radius, Color clr, Point2D offset);"
        ]
      }
    },
    {
      "signature": "void set_interface_spacing(int spacing,int padding);",
      "name": "set_interface_spacing",
      "method_name": null,
      "unique_global_name": "set_interface_spacing",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Sets the spacing within the interface.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "spacing": {
          "type": "int",
          "description": "The distance between elements",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "padding": {
          "type": "int",
          "description": "The padding within elements",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "interface",
        "static": "interface"
      },
      "signatures": {
        "cpp": ["void set_interface_spacing(int spacing, int padding)"],
        "rust": ["pub fn set_interface_spacing(spacing: i32, padding: i32)"],
        "python": ["def set_interface_spacing(spacing, padding):"],
        "pascal": ["procedure SetInterfaceSpacing(spacing: Integer; padding: Integer)"],
        "csharp": [
          "public static void Interface.SetInterfaceSpacing(int spacing, int padding);",
          "public static void SplashKit.SetInterfaceSpacing(int spacing, int padding);"
        ]
      }
    },
    {
      "signature": "void set_interface_style(interface_style style);",
      "name": "set_interface_style",
      "method_name": null,
      "unique_global_name": "set_interface_style",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Sets the interface style to one of the presets in the interface_style enum.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "style": {
          "type": "interface_style",
          "description": "The preset style to use",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "interface",
        "static": "interface"
      },
      "signatures": {
        "cpp": ["void set_interface_style(interface_style style)"],
        "rust": ["pub fn set_interface_style(style: interface_style)"],
        "python": ["def set_interface_style(style):"],
        "pascal": ["procedure SetInterfaceStyle(style: InterfaceStyle)"],
        "csharp": [
          "public static void Interface.SetInterfaceStyle(InterfaceStyle style);",
          "public static void SplashKit.SetInterfaceStyle(InterfaceStyle style);"
        ]
      }
    },
    {
      "signature": "void set_interface_style(interface_style style,color clr);",
      "name": "set_interface_style",
      "method_name": null,
      "unique_global_name": "set_interface_style_with_color",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Sets the interface style to one of the presets in the interface_style enum.\nAlso accepts a color used to customize the interface.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "style": {
          "type": "interface_style",
          "description": "The preset style to use",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "The color to style the interface after",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "with_color",
        "group": "interface",
        "static": "interface"
      },
      "signatures": {
        "cpp": ["void set_interface_style(interface_style style, color clr)"],
        "rust": ["pub fn set_interface_style(style: interface_style, clr: color)"],
        "python": ["def set_interface_style_with_color(style, clr):"],
        "pascal": ["procedure SetInterfaceStyle(style: InterfaceStyle; clr: Color)"],
        "csharp": [
          "public static void Interface.SetInterfaceStyle(InterfaceStyle style, Color clr);",
          "public static void SplashKit.SetInterfaceStyle(InterfaceStyle style, Color clr);"
        ]
      }
    },
    {
      "signature": "void set_interface_text_color(color clr);",
      "name": "set_interface_text_color",
      "method_name": null,
      "unique_global_name": "set_interface_text_color",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Sets the interface's text color.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "clr": {
          "type": "color",
          "description": "The color to set text to",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "interface",
        "static": "interface"
      },
      "signatures": {
        "cpp": ["void set_interface_text_color(color clr)"],
        "rust": ["pub fn set_interface_text_color(clr: color)"],
        "python": ["def set_interface_text_color(clr):"],
        "pascal": ["procedure SetInterfaceTextColor(clr: Color)"],
        "csharp": [
          "public static void Interface.SetInterfaceTextColor(Color clr);",
          "public static void SplashKit.SetInterfaceTextColor(Color clr);"
        ]
      }
    },
    {
      "signature": "void set_layout_height(int height);",
      "name": "set_layout_height",
      "method_name": null,
      "unique_global_name": "set_layout_height",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Sets the height of each row in the interface in pixels.\n0 resets to default.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "height": {
          "type": "int",
          "description": "Height of rows in pixels",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "interface",
        "static": "interface"
      },
      "signatures": {
        "cpp": ["void set_layout_height(int height)"],
        "rust": ["pub fn set_layout_height(height: i32)"],
        "python": ["def set_layout_height(height):"],
        "pascal": ["procedure SetLayoutHeight(height: Integer)"],
        "csharp": [
          "public static void Interface.SetLayoutHeight(int height);",
          "public static void SplashKit.SetLayoutHeight(int height);"
        ]
      }
    },
    {
      "signature": "void single_line_layout();",
      "name": "single_line_layout",
      "method_name": null,
      "unique_global_name": "single_line_layout",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Starts layouting all elements onto a single row. Reset with `reset_layout()`.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "group": "interface",
        "static": "interface"
      },
      "signatures": {
        "cpp": ["void single_line_layout()"],
        "rust": ["pub fn single_line_layout()"],
        "python": ["def single_line_layout():"],
        "pascal": ["procedure SingleLineLayout()"],
        "csharp": [
          "public static void Interface.SingleLineLayout();",
          "public static void SplashKit.SingleLineLayout();"
        ]
      }
    },
    {
      "signature": "float slider(const float& value,float min_value,float max_value,const rectangle& rect);",
      "name": "slider",
      "method_name": null,
      "unique_global_name": "slider_at_position",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Creates a slider at a specific position on screen.\nReturns the updated value of the slider.",
      "brief": null,
      "return": {
        "type": "float",
        "description": "The updated value of the slider",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "value": {
          "type": "float",
          "description": "The current value of the slider",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "min_value": {
          "type": "float",
          "description": "The minimum value of the slider",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "max_value": {
          "type": "float",
          "description": "The maximum value of the slider",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "rect": {
          "type": "rectangle",
          "description": "The rectangle to display the slider in",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "at_position",
        "group": "interface",
        "static": "interface"
      },
      "signatures": {
        "cpp": ["float slider(const float &value, float min_value, float max_value, const rectangle &rect)"],
        "rust": ["pub fn slider(value: &f32, min_value: f32, max_value: f32, rect: &rectangle) -> f32"],
        "python": ["def slider_at_position(value, min_value, max_value, rect):"],
        "pascal": [
          "function Slider(const value: Single; minValue: Single; maxValue: Single; const rect: Rectangle): Single"
        ],
        "csharp": [
          "public static float Interface.Slider(float value, float minValue, float maxValue, Rectangle rect);",
          "public static float SplashKit.Slider(float value, float minValue, float maxValue, Rectangle rect);"
        ]
      }
    },
    {
      "signature": "float slider(const float& value,float min_value,float max_value);",
      "name": "slider",
      "method_name": null,
      "unique_global_name": "slider",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Creates a slider without a label.\nReturns the updated value of the slider.",
      "brief": null,
      "return": {
        "type": "float",
        "description": "The updated value of the slider",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "value": {
          "type": "float",
          "description": "The current value of the slider",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "min_value": {
          "type": "float",
          "description": "The minimum value of the slider",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "max_value": {
          "type": "float",
          "description": "The maximum value of the slider",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "interface",
        "static": "interface"
      },
      "signatures": {
        "cpp": ["float slider(const float &value, float min_value, float max_value)"],
        "rust": ["pub fn slider(value: &f32, min_value: f32, max_value: f32) -> f32"],
        "python": ["def slider(value, min_value, max_value):"],
        "pascal": ["function Slider(const value: Single; minValue: Single; maxValue: Single): Single"],
        "csharp": [
          "public static float Interface.Slider(float value, float minValue, float maxValue);",
          "public static float SplashKit.Slider(float value, float minValue, float maxValue);"
        ]
      }
    },
    {
      "signature": "float slider(const string& label_text,const float& value,float min_value,float max_value);",
      "name": "slider",
      "method_name": null,
      "unique_global_name": "slider_labeled",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Creates a slider with a label.\nReturns the updated value of the slider.\n\nExample usage:\n```c++\nmy_float = slider(\"Percentage\", my_float, 0, 100);\n```",
      "brief": null,
      "return": {
        "type": "float",
        "description": "The updated value of the slider",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "label_text": {
          "type": "string",
          "description": "The label to show in front of the slider",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "value": {
          "type": "float",
          "description": "The current value of the slider",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "min_value": {
          "type": "float",
          "description": "The minimum value of the slider",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "max_value": {
          "type": "float",
          "description": "The maximum value of the slider",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "labeled",
        "group": "interface",
        "static": "interface"
      },
      "signatures": {
        "cpp": ["float slider(const string &label_text, const float &value, float min_value, float max_value)"],
        "rust": ["pub fn slider(label_text: &String, value: &f32, min_value: f32, max_value: f32) -> f32"],
        "python": ["def slider_labeled(label_text, value, min_value, max_value):"],
        "pascal": [
          "function Slider(const labelText: String; const value: Single; minValue: Single; maxValue: Single): Single"
        ],
        "csharp": [
          "public static float Interface.Slider(string labelText, float value, float minValue, float maxValue);",
          "public static float SplashKit.Slider(string labelText, float value, float minValue, float maxValue);"
        ]
      }
    },
    {
      "signature": "void split_into_columns(int count);",
      "name": "split_into_columns",
      "method_name": null,
      "unique_global_name": "split_into_columns",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Adds `count` columns to the current layout, with equal widths",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "count": {
          "type": "int",
          "description": "Number of columns to add",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "interface",
        "static": "interface"
      },
      "signatures": {
        "cpp": ["void split_into_columns(int count)"],
        "rust": ["pub fn split_into_columns(count: i32)"],
        "python": ["def split_into_columns(count):"],
        "pascal": ["procedure SplitIntoColumns(count: Integer)"],
        "csharp": [
          "public static void Interface.SplitIntoColumns(int count);",
          "public static void SplashKit.SplitIntoColumns(int count);"
        ]
      }
    },
    {
      "signature": "void split_into_columns(int count,int last_width);",
      "name": "split_into_columns",
      "method_name": null,
      "unique_global_name": "split_into_columns_with_last_width",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Adds `count` columns to the current layout, with equal widths.\nHas extra parameter `last_width`, which lets you specify a specific\nwidth (in pixels) for the last column.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "count": {
          "type": "int",
          "description": "Number of columns to add",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "last_width": {
          "type": "int",
          "description": "The width of the last column in pixels",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "with_last_width",
        "group": "interface",
        "static": "interface"
      },
      "signatures": {
        "cpp": ["void split_into_columns(int count, int last_width)"],
        "rust": ["pub fn split_into_columns(count: i32, last_width: i32)"],
        "python": ["def split_into_columns_with_last_width(count, last_width):"],
        "pascal": ["procedure SplitIntoColumns(count: Integer; lastWidth: Integer)"],
        "csharp": [
          "public static void Interface.SplitIntoColumns(int count, int lastWidth);",
          "public static void SplashKit.SplitIntoColumns(int count, int lastWidth);"
        ]
      }
    },
    {
      "signature": "void split_into_columns_relative(int count,double last_width);",
      "name": "split_into_columns_relative",
      "method_name": null,
      "unique_global_name": "split_into_columns_relative_with_last_width",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Adds `count` columns to the current layout, with equal widths.\nHas extra parameter `last_width`, which lets you specify a specific\nwidth (relative to the width of the container, between 0 and 1) for the last column.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "count": {
          "type": "int",
          "description": "Number of columns to add",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "last_width": {
          "type": "double",
          "description": "The width of the last column as percentage of the container's width (between 0 and 1)",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "with_last_width",
        "group": "interface",
        "static": "interface"
      },
      "signatures": {
        "cpp": ["void split_into_columns_relative(int count, double last_width)"],
        "rust": ["pub fn split_into_columns_relative(count: i32, last_width: f64)"],
        "python": ["def split_into_columns_relative_with_last_width(count, last_width):"],
        "pascal": ["procedure SplitIntoColumnsRelative(count: Integer; lastWidth: Double)"],
        "csharp": [
          "public static void Interface.SplitIntoColumnsRelative(int count, double lastWidth);",
          "public static void SplashKit.SplitIntoColumnsRelative(int count, double lastWidth);"
        ]
      }
    },
    {
      "signature": "void start_custom_layout();",
      "name": "start_custom_layout",
      "method_name": null,
      "unique_global_name": "start_custom_layout",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Clears the default layout so that a custom layout can be made.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "group": "interface",
        "static": "interface"
      },
      "signatures": {
        "cpp": ["void start_custom_layout()"],
        "rust": ["pub fn start_custom_layout()"],
        "python": ["def start_custom_layout():"],
        "pascal": ["procedure StartCustomLayout()"],
        "csharp": [
          "public static void Interface.StartCustomLayout();",
          "public static void SplashKit.StartCustomLayout();"
        ]
      }
    },
    {
      "signature": "void start_inset(const string& name,const rectangle& rect);",
      "name": "start_inset",
      "method_name": null,
      "unique_global_name": "start_inset_at_position",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Starts the creation of an inset area inside an arbitrary rectangle.\n\nThe function **must** be accompanied by a call to `end_inset`\nwith the same name.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name of the area",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "rect": {
          "type": "rectangle",
          "description": "The rectangle for the inset",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "at_position",
        "group": "interface",
        "static": "interface"
      },
      "signatures": {
        "cpp": ["void start_inset(const string &name, const rectangle &rect)"],
        "rust": ["pub fn start_inset(name: &String, rect: &rectangle)"],
        "python": ["def start_inset_at_position(name, rect):"],
        "pascal": ["procedure StartInset(const name: String; const rect: Rectangle)"],
        "csharp": [
          "public static void Interface.StartInset(string name, Rectangle rect);",
          "public static void SplashKit.StartInset(string name, Rectangle rect);"
        ]
      }
    },
    {
      "signature": "void start_inset(const string& name,int height);",
      "name": "start_inset",
      "method_name": null,
      "unique_global_name": "start_inset",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Starts the creation of an inset area inside a panel/popup.\n\nUse as follows:\n```c++\nstart_inset(\"Inset area\", 60);\n// elements inside area goes here\nend_inset(\"Inset area\");\n\n```\nThe function **must** be accompanied by a call to `end_inset`\nwith the same name.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name of the area",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "height": {
          "type": "int",
          "description": "Height of the inset area in pixels. -1 fills entire space. Use negative heights to fill _up to_ `height` away from the bottom",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "interface",
        "static": "interface"
      },
      "signatures": {
        "cpp": ["void start_inset(const string &name, int height)"],
        "rust": ["pub fn start_inset(name: &String, height: i32)"],
        "python": ["def start_inset(name, height):"],
        "pascal": ["procedure StartInset(const name: String; height: Integer)"],
        "csharp": [
          "public static void Interface.StartInset(string name, int height);",
          "public static void SplashKit.StartInset(string name, int height);"
        ]
      }
    },
    {
      "signature": "bool start_panel(const string& name,rectangle initial_rectangle);",
      "name": "start_panel",
      "method_name": null,
      "unique_global_name": "start_panel",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Starts the creation of a draggable panel with a title bar.\nReturns whether the panel is visible or not.\n\nUse as follows:\n```c++\nif (start_panel(\"My panel\", rectangle_from(0,0,100,100)))\n{\n// Rest of interface goes here\nend_panel(\"My panel\");\n}\n```\nAfter calling this, you can then call functions to\nadd elements such as buttons and text boxes inside the panel.\nThe function **must** be accompanied by a call to `end_panel`,\nthat is only called if the panel is visible, and is passed the same `name`.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "Whether the panel is visible or not",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name shown in the panel's titlebar",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "initial_rectangle": {
          "type": "rectangle",
          "description": "The initial position/size the panel starts off in",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "interface",
        "static": "interface"
      },
      "signatures": {
        "cpp": ["bool start_panel(const string &name, rectangle initial_rectangle)"],
        "rust": ["pub fn start_panel(name: &String, initial_rectangle: rectangle) -> bool"],
        "python": ["def start_panel(name, initial_rectangle):"],
        "pascal": ["function StartPanel(const name: String; initialRectangle: Rectangle): Boolean"],
        "csharp": [
          "public static bool Interface.StartPanel(string name, Rectangle initialRectangle);",
          "public static bool SplashKit.StartPanel(string name, Rectangle initialRectangle);"
        ]
      }
    },
    {
      "signature": "bool start_popup(const string& name);",
      "name": "start_popup",
      "method_name": null,
      "unique_global_name": "start_popup",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Starts the creation of a popup.\nReturns whether the popup is visible or not.\n\nUsage is the same as `start_panel`, other than the 'starting rectangle' will be automatically calculated.\nThe function **must** be accompanied by a call to `end_popup`\nwith the same name.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "Whether the popup is visible or not",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name of the popup",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "interface",
        "static": "interface"
      },
      "signatures": {
        "cpp": ["bool start_popup(const string &name)"],
        "rust": ["pub fn start_popup(name: &String) -> bool"],
        "python": ["def start_popup(name):"],
        "pascal": ["function StartPopup(const name: String): Boolean"],
        "csharp": [
          "public static bool Interface.StartPopup(string name);",
          "public static bool SplashKit.StartPopup(string name);"
        ]
      }
    },
    {
      "signature": "bool start_treenode(const string& label_text);",
      "name": "start_treenode",
      "method_name": null,
      "unique_global_name": "start_treenode",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Starts the creation of a tree node (such as those in a file tree view).\nReturns whether the tree node is expanded or not.\n\nUsage is the same as `start_panel`.\nThe function **must** be accompanied by a call to `end_treenode`\nwith the same name.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "Whether the tree node is expanded or not",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "label_text": {
          "type": "string",
          "description": "The name of the node",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "interface",
        "static": "interface"
      },
      "signatures": {
        "cpp": ["bool start_treenode(const string &label_text)"],
        "rust": ["pub fn start_treenode(label_text: &String) -> bool"],
        "python": ["def start_treenode(label_text):"],
        "pascal": ["function StartTreenode(const labelText: String): Boolean"],
        "csharp": [
          "public static bool Interface.StartTreenode(string labelText);",
          "public static bool SplashKit.StartTreenode(string labelText);"
        ]
      }
    },
    {
      "signature": "string text_box(const string& value);",
      "name": "text_box",
      "method_name": null,
      "unique_global_name": "text_box",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Creates a text entry box with a label.\nReturns the updated value of the text box.",
      "brief": null,
      "return": {
        "type": "string",
        "description": "The updated value of the text box",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "value": {
          "type": "string",
          "description": "The current value of the text box",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "interface",
        "static": "interface"
      },
      "signatures": {
        "cpp": ["string text_box(const string &value)"],
        "rust": ["pub fn text_box(value: &String) -> String"],
        "python": ["def text_box(value):"],
        "pascal": ["function TextBox(const value: String): String"],
        "csharp": [
          "public static string Interface.TextBox(string value);",
          "public static string SplashKit.TextBox(string value);"
        ]
      }
    },
    {
      "signature": "string text_box(const string& value,const rectangle& rect);",
      "name": "text_box",
      "method_name": null,
      "unique_global_name": "text_box_at_position",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Creates a text entry box at a specific position on screen.\nReturns the updated value of the text box.\n\nExample usage:\n```c++\nmy_string = text_box(\"Name\", my_string);\n```",
      "brief": null,
      "return": {
        "type": "string",
        "description": "The updated value of the text box",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "value": {
          "type": "string",
          "description": "The current value of the text box",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "rect": {
          "type": "rectangle",
          "description": "The rectangle to display the button in",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "at_position",
        "group": "interface",
        "static": "interface"
      },
      "signatures": {
        "cpp": ["string text_box(const string &value, const rectangle &rect)"],
        "rust": ["pub fn text_box(value: &String, rect: &rectangle) -> String"],
        "python": ["def text_box_at_position(value, rect):"],
        "pascal": ["function TextBox(const value: String; const rect: Rectangle): String"],
        "csharp": [
          "public static string Interface.TextBox(string value, Rectangle rect);",
          "public static string SplashKit.TextBox(string value, Rectangle rect);"
        ]
      }
    },
    {
      "signature": "string text_box(const string& label_text,const string& value);",
      "name": "text_box",
      "method_name": null,
      "unique_global_name": "text_box_labeled",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Creates a text entry box with a label.\nReturns the updated value of the text box.\n\nExample usage:\n```c++\nmy_string = text_box(\"Name\", my_string);\n```",
      "brief": null,
      "return": {
        "type": "string",
        "description": "The updated value of the text box",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "label_text": {
          "type": "string",
          "description": "The label to show in front of the text box",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "value": {
          "type": "string",
          "description": "The current value of the text box",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "labeled",
        "group": "interface",
        "static": "interface"
      },
      "signatures": {
        "cpp": ["string text_box(const string &label_text, const string &value)"],
        "rust": ["pub fn text_box(label_text: &String, value: &String) -> String"],
        "python": ["def text_box_labeled(label_text, value):"],
        "pascal": ["function TextBox(const labelText: String; const value: String): String"],
        "csharp": [
          "public static string Interface.TextBox(string labelText, string value);",
          "public static string SplashKit.TextBox(string labelText, string value);"
        ]
      }
    }
  ]
}
