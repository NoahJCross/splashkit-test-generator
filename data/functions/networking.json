{
  "functions": [
    {
      "signature": "bool accept_all_new_connections();",
      "name": "accept_all_new_connections",
      "method_name": null,
      "unique_global_name": "accept_all_new_connections",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Accept new connections for all servers.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True if there were accepted connections",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "group": "networking",
        "static": "networking"
      },
      "signatures": {
        "cpp": [
          "bool accept_all_new_connections()"
        ],
        "rust": [
          "pub fn accept_all_new_connections() -> bool"
        ],
        "python": [
          "def accept_all_new_connections():"
        ],
        "pascal": [
          "function AcceptAllNewConnections(): Boolean"
        ],
        "csharp": [
          "public static bool Networking.AcceptAllNewConnections();",
          "public static bool SplashKit.AcceptAllNewConnections();"
        ]
      }
    },
    {
      "signature": "bool accept_new_connection(server_socket server);",
      "name": "accept_new_connection",
      "method_name": "accept_new_connection",
      "unique_global_name": "accept_new_connection",
      "unique_method_name": "server_socket.accept_new_connection",
      "suffix_name": null,
      "description": "Accept new connections for a server",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True if a connection was accepted",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "server": {
          "type": "server_socket",
          "description": "The server to check",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "server_socket",
        "method": "accept_new_connection",
        "group": "networking",
        "static": "networking",
        "self": "server"
      },
      "signatures": {
        "cpp": [
          "bool accept_new_connection(server_socket server)"
        ],
        "rust": [
          "pub fn accept_new_connection(server: server_socket) -> bool"
        ],
        "python": [
          "def accept_new_connection(server):"
        ],
        "pascal": [
          "function AcceptNewConnection(server: ServerSocket): Boolean"
        ],
        "csharp": [
          "public bool ServerSocket.AcceptNewConnection();",
          "public static bool SplashKit.AcceptNewConnection(ServerSocket server);"
        ]
      }
    },
    {
      "signature": "void broadcast_message(const string &a_msg,server_socket svr);",
      "name": "broadcast_message",
      "method_name": "broadcast_message",
      "unique_global_name": "broadcast_message",
      "unique_method_name": "server_socket.broadcast_message",
      "suffix_name": null,
      "description": "Broadcast a message to all connections of a server.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "a_msg": {
          "type": "string",
          "description": "The message to send",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "svr": {
          "type": "server_socket",
          "description": "The server to send the message to.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "server_socket",
        "method": "broadcast_message",
        "self": "svr",
        "group": "networking",
        "static": "networking"
      },
      "signatures": {
        "cpp": [
          "void broadcast_message(const string &a_msg, server_socket svr)"
        ],
        "rust": [
          "pub fn broadcast_message(a_msg: &String, svr: server_socket)"
        ],
        "python": [
          "def broadcast_message(a_msg, svr):"
        ],
        "pascal": [
          "procedure BroadcastMessage(const aMsg: String; svr: ServerSocket)"
        ],
        "csharp": [
          "public void ServerSocket.BroadcastMessage(string aMsg);",
          "public static void SplashKit.BroadcastMessage(string aMsg, ServerSocket svr);"
        ]
      }
    },
    {
      "signature": "void broadcast_message(const string &a_msg);",
      "name": "broadcast_message",
      "method_name": null,
      "unique_global_name": "broadcast_message_to_all",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Broadcase a message to all of the connections.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "a_msg": {
          "type": "string",
          "description": "The message to send",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "to_all",
        "group": "networking",
        "static": "networking"
      },
      "signatures": {
        "cpp": [
          "void broadcast_message(const string &a_msg)"
        ],
        "rust": [
          "pub fn broadcast_message(a_msg: &String)"
        ],
        "python": [
          "def broadcast_message_to_all(a_msg):"
        ],
        "pascal": [
          "procedure BroadcastMessage(const aMsg: String)"
        ],
        "csharp": [
          "public static void Networking.BroadcastMessage(string aMsg);",
          "public static void SplashKit.BroadcastMessage(string aMsg);"
        ]
      }
    },
    {
      "signature": "void broadcast_message(const string &a_msg,const string &name);",
      "name": "broadcast_message",
      "method_name": null,
      "unique_global_name": "broadcast_message_to_server_named",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Broadcast a message to all connections of a server.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "a_msg": {
          "type": "string",
          "description": "The message to send",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "name": {
          "type": "string",
          "description": "The name of the server to send the message to.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "to_server_named",
        "group": "networking",
        "static": "networking"
      },
      "signatures": {
        "cpp": [
          "void broadcast_message(const string &a_msg, const string &name)"
        ],
        "rust": [
          "pub fn broadcast_message(a_msg: &String, name: &String)"
        ],
        "python": [
          "def broadcast_message_to_server_named(a_msg, name):"
        ],
        "pascal": [
          "procedure BroadcastMessage(const aMsg: String; const name: String)"
        ],
        "csharp": [
          "public static void Networking.BroadcastMessage(string aMsg, string name);",
          "public static void SplashKit.BroadcastMessage(string aMsg, string name);"
        ]
      }
    },
    {
      "signature": "void check_network_activity();",
      "name": "check_network_activity",
      "method_name": null,
      "unique_global_name": "check_network_activity",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Check network activity, looking for new connections and messages.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "group": "networking",
        "static": "networking"
      },
      "signatures": {
        "cpp": [
          "void check_network_activity()"
        ],
        "rust": [
          "pub fn check_network_activity()"
        ],
        "python": [
          "def check_network_activity():"
        ],
        "pascal": [
          "procedure CheckNetworkActivity()"
        ],
        "csharp": [
          "public static void Networking.CheckNetworkActivity();",
          "public static void SplashKit.CheckNetworkActivity();"
        ]
      }
    },
    {
      "signature": "void clear_messages(const string &name);",
      "name": "clear_messages",
      "method_name": null,
      "unique_global_name": "clear_messages_from_name",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Clear all of the messages from a server or connection with the supplied name.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name of the connection or the server to clear.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "from_name",
        "group": "networking",
        "static": "networking"
      },
      "signatures": {
        "cpp": [
          "void clear_messages(const string &name)"
        ],
        "rust": [
          "pub fn clear_messages(name: &String)"
        ],
        "python": [
          "def clear_messages_from_name(name):"
        ],
        "pascal": [
          "procedure ClearMessages(const name: String)"
        ],
        "csharp": [
          "public static void Networking.ClearMessages(string name);",
          "public static void SplashKit.ClearMessages(string name);"
        ]
      }
    },
    {
      "signature": "void clear_messages(connection a_connection);",
      "name": "clear_messages",
      "method_name": "clear_messages",
      "unique_global_name": "clear_messages_from_connection",
      "unique_method_name": "connection.clear_messages_from_connection",
      "suffix_name": null,
      "description": "Clear all of the messages from a connection.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "a_connection": {
          "type": "connection",
          "description": "The connection",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "connection",
        "method": "clear_messages",
        "suffix": "from_connection",
        "group": "networking",
        "static": "networking",
        "self": "a_connection"
      },
      "signatures": {
        "cpp": [
          "void clear_messages(connection a_connection)"
        ],
        "rust": [
          "pub fn clear_messages(a_connection: connection)"
        ],
        "python": [
          "def clear_messages_from_connection(a_connection):"
        ],
        "pascal": [
          "procedure ClearMessages(aConnection: Connection)"
        ],
        "csharp": [
          "public void Connection.ClearMessages();",
          "public static void SplashKit.ClearMessages(Connection aConnection);"
        ]
      }
    },
    {
      "signature": "void clear_messages(server_socket svr);",
      "name": "clear_messages",
      "method_name": "clear_messages",
      "unique_global_name": "clear_messages_from_server",
      "unique_method_name": "server_socket.clear_messages_from_server",
      "suffix_name": null,
      "description": "Clear all of the messages from a server.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "svr": {
          "type": "server_socket",
          "description": "The server to clear the messages from",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "server_socket",
        "method": "clear_messages",
        "suffix": "from_server",
        "group": "networking",
        "static": "networking",
        "self": "svr"
      },
      "signatures": {
        "cpp": [
          "void clear_messages(server_socket svr)"
        ],
        "rust": [
          "pub fn clear_messages(svr: server_socket)"
        ],
        "python": [
          "def clear_messages_from_server(svr):"
        ],
        "pascal": [
          "procedure ClearMessages(svr: ServerSocket)"
        ],
        "csharp": [
          "public void ServerSocket.ClearMessages();",
          "public static void SplashKit.ClearMessages(ServerSocket svr);"
        ]
      }
    },
    {
      "signature": "void close_all_connections();",
      "name": "close_all_connections",
      "method_name": null,
      "unique_global_name": "close_all_connections",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Close all of the connections you have opened. This does not close\nconnections to servers.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "group": "networking",
        "static": "networking"
      },
      "signatures": {
        "cpp": [
          "void close_all_connections()"
        ],
        "rust": [
          "pub fn close_all_connections()"
        ],
        "python": [
          "def close_all_connections():"
        ],
        "pascal": [
          "procedure CloseAllConnections()"
        ],
        "csharp": [
          "public static void Networking.CloseAllConnections();",
          "public static void SplashKit.CloseAllConnections();"
        ]
      }
    },
    {
      "signature": "void close_all_servers();",
      "name": "close_all_servers",
      "method_name": null,
      "unique_global_name": "close_all_servers",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Close all of the servers that are currently open.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "group": "networking",
        "static": "networking"
      },
      "signatures": {
        "cpp": [
          "void close_all_servers()"
        ],
        "rust": [
          "pub fn close_all_servers()"
        ],
        "python": [
          "def close_all_servers():"
        ],
        "pascal": [
          "procedure CloseAllServers()"
        ],
        "csharp": [
          "public static void Networking.CloseAllServers();",
          "public static void SplashKit.CloseAllServers();"
        ]
      }
    },
    {
      "signature": "bool close_connection(connection a_connection);",
      "name": "close_connection",
      "method_name": "close",
      "unique_global_name": "close_connection",
      "unique_method_name": "connection.close",
      "suffix_name": null,
      "description": "Close the connection",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True if this succeeds.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "a_connection": {
          "type": "connection",
          "description": "The connection to close",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "connection",
        "destructor": true,
        "method": "close",
        "group": "networking",
        "static": "networking",
        "self": "a_connection"
      },
      "signatures": {
        "cpp": [
          "bool close_connection(connection a_connection)"
        ],
        "rust": [
          "pub fn close_connection(a_connection: connection) -> bool"
        ],
        "python": [
          "def close_connection(a_connection):"
        ],
        "pascal": [
          "function CloseConnection(aConnection: Connection): Boolean"
        ],
        "csharp": [
          "public bool Connection.CloseConnection();",
          "public static bool SplashKit.CloseConnection(Connection aConnection);"
        ]
      }
    },
    {
      "signature": "bool close_connection(const string &name);",
      "name": "close_connection",
      "method_name": null,
      "unique_global_name": "close_connection_named",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Close the connection",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True if this succeeds.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name of the connection to close",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "named",
        "group": "networking",
        "static": "networking"
      },
      "signatures": {
        "cpp": [
          "bool close_connection(const string &name)"
        ],
        "rust": [
          "pub fn close_connection(name: &String) -> bool"
        ],
        "python": [
          "def close_connection_named(name):"
        ],
        "pascal": [
          "function CloseConnection(const name: String): Boolean"
        ],
        "csharp": [
          "public static bool Networking.CloseConnection(string name);",
          "public static bool SplashKit.CloseConnection(string name);"
        ]
      }
    },
    {
      "signature": "void close_message(message msg);",
      "name": "close_message",
      "method_name": "close",
      "unique_global_name": "close_message",
      "unique_method_name": "message.close",
      "suffix_name": null,
      "description": "Closes the message.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "msg": {
          "type": "message",
          "description": "The message to close",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "message",
        "destructor": true,
        "method": "close",
        "group": "networking",
        "static": "networking",
        "self": "msg"
      },
      "signatures": {
        "cpp": [
          "void close_message(message msg)"
        ],
        "rust": [
          "pub fn close_message(msg: message)"
        ],
        "python": [
          "def close_message(msg):"
        ],
        "pascal": [
          "procedure CloseMessage(msg: Message)"
        ],
        "csharp": [
          "public void Message.CloseMessage();",
          "public static void SplashKit.CloseMessage(Message msg);"
        ]
      }
    },
    {
      "signature": "bool close_server(const string &name);",
      "name": "close_server",
      "method_name": null,
      "unique_global_name": "close_server_named",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Closes the server with the indicated name.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True if the server was closed successfully",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name of the server to close",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "named",
        "group": "networking",
        "static": "networking"
      },
      "signatures": {
        "cpp": [
          "bool close_server(const string &name)"
        ],
        "rust": [
          "pub fn close_server(name: &String) -> bool"
        ],
        "python": [
          "def close_server_named(name):"
        ],
        "pascal": [
          "function CloseServer(const name: String): Boolean"
        ],
        "csharp": [
          "public static bool Networking.CloseServer(string name);",
          "public static bool SplashKit.CloseServer(string name);"
        ]
      }
    },
    {
      "signature": "bool close_server(server_socket svr);",
      "name": "close_server",
      "method_name": "close",
      "unique_global_name": "close_server",
      "unique_method_name": "server_socket.close",
      "suffix_name": null,
      "description": "Closes the server, all connections with clients will be shut and\nthe port will be closed.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True if the close was successful",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "svr": {
          "type": "server_socket",
          "description": "The server to close",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "server_socket",
        "destructor": true,
        "method": "close",
        "group": "networking",
        "static": "networking",
        "self": "svr"
      },
      "signatures": {
        "cpp": [
          "bool close_server(server_socket svr)"
        ],
        "rust": [
          "pub fn close_server(svr: server_socket) -> bool"
        ],
        "python": [
          "def close_server(svr):"
        ],
        "pascal": [
          "function CloseServer(svr: ServerSocket): Boolean"
        ],
        "csharp": [
          "public bool ServerSocket.CloseServer();",
          "public static bool SplashKit.CloseServer(ServerSocket svr);"
        ]
      }
    },
    {
      "signature": "unsigned int connection_count(const string &name);",
      "name": "connection_count",
      "method_name": null,
      "unique_global_name": "connection_count_named",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the number of clients connected to a server.",
      "brief": null,
      "return": {
        "type": "unsigned int",
        "description": "The number of connected clients",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name of the server to check",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "named",
        "group": "networking",
        "static": "networking"
      },
      "signatures": {
        "cpp": [
          "unsigned int connection_count(const string &name)"
        ],
        "rust": [
          "pub fn connection_count(name: &String) -> u32"
        ],
        "python": [
          "def connection_count_named(name):"
        ],
        "pascal": [
          "function ConnectionCount(const name: String): Cardinal"
        ],
        "csharp": [
          "public static uint Networking.ConnectionCount(string name);",
          "public static uint SplashKit.ConnectionCount(string name);"
        ]
      }
    },
    {
      "signature": "unsigned int connection_count(server_socket server);",
      "name": "connection_count",
      "method_name": null,
      "unique_global_name": "connection_count",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the number of clients connected to a server.",
      "brief": null,
      "return": {
        "type": "unsigned int",
        "description": "The number of connected clients",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "server": {
          "type": "server_socket",
          "description": "The server to check",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "server_socket",
        "getter": "connection_count",
        "group": "networking",
        "static": "networking",
        "self": "server"
      },
      "signatures": {
        "cpp": [
          "unsigned int connection_count(server_socket server)"
        ],
        "rust": [
          "pub fn connection_count(server: server_socket) -> u32"
        ],
        "python": [
          "def connection_count(server):"
        ],
        "pascal": [
          "function ConnectionCount(server: ServerSocket): Cardinal"
        ],
        "csharp": [
          "public uint ServerSocket.ConnectionCount { get }",
          "public static uint SplashKit.ConnectionCount(ServerSocket server);"
        ]
      }
    },
    {
      "signature": "unsigned int connection_ip(connection a_connection);",
      "name": "connection_ip",
      "method_name": null,
      "unique_global_name": "connection_ip",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Gets the ip address of the passed in connection.",
      "brief": null,
      "return": {
        "type": "unsigned int",
        "description": "The ip addres of the connection",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "a_connection": {
          "type": "connection",
          "description": "The connection",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "connection",
        "getter": "ip",
        "group": "networking",
        "static": "networking",
        "self": "a_connection"
      },
      "signatures": {
        "cpp": [
          "unsigned int connection_ip(connection a_connection)"
        ],
        "rust": [
          "pub fn connection_ip(a_connection: connection) -> u32"
        ],
        "python": [
          "def connection_ip(a_connection):"
        ],
        "pascal": [
          "function ConnectionIP(aConnection: Connection): Cardinal"
        ],
        "csharp": [
          "public uint Connection.IP { get }",
          "public static uint SplashKit.ConnectionIP(Connection aConnection);"
        ]
      }
    },
    {
      "signature": "unsigned int connection_ip(const string &name);",
      "name": "connection_ip",
      "method_name": null,
      "unique_global_name": "connection_ip_from_name",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Gets the ip address of the connection with the supplied name.",
      "brief": null,
      "return": {
        "type": "unsigned int",
        "description": "The connection's ip address",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name of the connection",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "from_name",
        "group": "networking",
        "static": "networking"
      },
      "signatures": {
        "cpp": [
          "unsigned int connection_ip(const string &name)"
        ],
        "rust": [
          "pub fn connection_ip(name: &String) -> u32"
        ],
        "python": [
          "def connection_ip_from_name(name):"
        ],
        "pascal": [
          "function ConnectionIP(const name: String): Cardinal"
        ],
        "csharp": [
          "public static uint Networking.ConnectionIP(string name);",
          "public static uint SplashKit.ConnectionIP(string name);"
        ]
      }
    },
    {
      "signature": "connection connection_named(const string &name);",
      "name": "connection_named",
      "method_name": null,
      "unique_global_name": "connection_named",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Fetch the connection with the indicated name.",
      "brief": null,
      "return": {
        "type": "connection",
        "description": "The connection with that name",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name of the connection to fetch",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "networking",
        "static": "networking"
      },
      "signatures": {
        "cpp": [
          "connection connection_named(const string &name)"
        ],
        "rust": [
          "pub fn connection_named(name: &String) -> connection"
        ],
        "python": [
          "def connection_named(name):"
        ],
        "pascal": [
          "function ConnectionNamed(const name: String): Connection"
        ],
        "csharp": [
          "public static Connection Networking.ConnectionNamed(string name);",
          "public static Connection SplashKit.ConnectionNamed(string name);"
        ]
      }
    },
    {
      "signature": "unsigned short int connection_port(connection a_connection);",
      "name": "connection_port",
      "method_name": null,
      "unique_global_name": "connection_port",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Gets the port of the connection.",
      "brief": null,
      "return": {
        "type": "unsigned short",
        "description": "The port of the connection.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "a_connection": {
          "type": "connection",
          "description": "The connection",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "connection",
        "getter": "port",
        "group": "networking",
        "static": "networking",
        "self": "a_connection"
      },
      "signatures": {
        "cpp": [
          "unsigned short connection_port(connection a_connection)"
        ],
        "rust": [
          "pub fn connection_port(a_connection: connection) -> u16"
        ],
        "python": [
          "def connection_port(a_connection):"
        ],
        "pascal": [
          "function ConnectionPort(aConnection: Connection): Word"
        ],
        "csharp": [
          "public ushort Connection.Port { get }",
          "public static ushort SplashKit.ConnectionPort(Connection aConnection);"
        ]
      }
    },
    {
      "signature": "unsigned short int connection_port(const string &name);",
      "name": "connection_port",
      "method_name": null,
      "unique_global_name": "connection_port_from_name",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Gets the part of the connection.",
      "brief": null,
      "return": {
        "type": "unsigned short",
        "description": "The port of the connection",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name of the connection",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "from_name",
        "group": "networking",
        "static": "networking"
      },
      "signatures": {
        "cpp": [
          "unsigned short connection_port(const string &name)"
        ],
        "rust": [
          "pub fn connection_port(name: &String) -> u16"
        ],
        "python": [
          "def connection_port_from_name(name):"
        ],
        "pascal": [
          "function ConnectionPort(const name: String): Word"
        ],
        "csharp": [
          "public static ushort Networking.ConnectionPort(string name);",
          "public static ushort SplashKit.ConnectionPort(string name);"
        ]
      }
    },
    {
      "signature": "server_socket create_server(const string &name,unsigned short int port);",
      "name": "create_server",
      "method_name": null,
      "unique_global_name": "create_server_with_port",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Creates a new TCP server that can accept connections from other programs.",
      "brief": null,
      "return": {
        "type": "server_socket",
        "description": "A new server with the indicated details",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name used to access the Server in splashkit",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "port": {
          "type": "unsigned short",
          "description": "The port that clients will use to connect to the server",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "server_socket",
        "constructor": true,
        "suffix": "with_port",
        "group": "networking",
        "static": "networking"
      },
      "signatures": {
        "cpp": [
          "server_socket create_server(const string &name, unsigned short port)"
        ],
        "rust": [
          "pub fn create_server(name: &String, port: u16) -> server_socket"
        ],
        "python": [
          "def create_server_with_port(name, port):"
        ],
        "pascal": [
          "function CreateServer(const name: String; port: Word): ServerSocket"
        ],
        "csharp": [
          "public static ServerSocket SplashKit.CreateServer(string name, ushort port);",
          "public ServerSocket(string name, ushort port);"
        ]
      }
    },
    {
      "signature": "server_socket create_server(const string &name,unsigned short int port,connection_type protocol);",
      "name": "create_server",
      "method_name": null,
      "unique_global_name": "create_server_with_port_and_protocol",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Creates a new server that can accept connections from other programs.",
      "brief": null,
      "return": {
        "type": "server_socket",
        "description": "A new server with the indicated details",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name used to access the Server in splashkit",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "port": {
          "type": "unsigned short",
          "description": "The port that clients will use to connect to the server",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "protocol": {
          "type": "connection_type",
          "description": "The protocol used by the server",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "server_socket",
        "constructor": true,
        "suffix": "with_port_and_protocol",
        "group": "networking",
        "static": "networking"
      },
      "signatures": {
        "cpp": [
          "server_socket create_server(const string &name, unsigned short port, connection_type protocol)"
        ],
        "rust": [
          "pub fn create_server(name: &String, port: u16, protocol: connection_type) -> server_socket"
        ],
        "python": [
          "def create_server_with_port_and_protocol(name, port, protocol):"
        ],
        "pascal": [
          "function CreateServer(const name: String; port: Word; protocol: ConnectionType): ServerSocket"
        ],
        "csharp": [
          "public static ServerSocket SplashKit.CreateServer(string name, ushort port, ConnectionType protocol);",
          "public ServerSocket(string name, ushort port, ConnectionType protocol);"
        ]
      }
    },
    {
      "signature": "string dec_to_hex(unsigned int a_dec);",
      "name": "dec_to_hex",
      "method_name": null,
      "unique_global_name": "dec_to_hex",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Converts the supplied decimal integer into it's hexadecimal representation.\ne.g. 0x7F000001 from 2130706433",
      "brief": "Converts a decimal integer into a hexadecimal string",
      "return": {
        "type": "string",
        "description": "hexadecimal representation of the supplied decimal integer",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "a_dec": {
          "type": "unsigned int",
          "description": "decimal to be converted to a hexadecimal number string",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "networking",
        "static": "networking"
      },
      "signatures": {
        "cpp": [
          "string dec_to_hex(unsigned int a_dec)"
        ],
        "rust": [
          "pub fn dec_to_hex(a_dec: u32) -> String"
        ],
        "python": [
          "def dec_to_hex(a_dec):"
        ],
        "pascal": [
          "function DecToHex(aDec: Cardinal): String"
        ],
        "csharp": [
          "public static string Networking.DecToHex(uint aDec);",
          "public static string SplashKit.DecToHex(uint aDec);"
        ]
      }
    },
    {
      "signature": "connection fetch_new_connection(server_socket server);",
      "name": "fetch_new_connection",
      "method_name": "fetch_new_connection",
      "unique_global_name": "fetch_new_connection",
      "unique_method_name": "server_socket.fetch_new_connection",
      "suffix_name": null,
      "description": "Get the oldest new connections made to the server, and\nreduces the new connection count by 1.",
      "brief": null,
      "return": {
        "type": "connection",
        "description": "The oldest new connection",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "server": {
          "type": "server_socket",
          "description": "The server to check",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "server_socket",
        "method": "fetch_new_connection",
        "group": "networking",
        "static": "networking",
        "self": "server"
      },
      "signatures": {
        "cpp": [
          "connection fetch_new_connection(server_socket server)"
        ],
        "rust": [
          "pub fn fetch_new_connection(server: server_socket) -> connection"
        ],
        "python": [
          "def fetch_new_connection(server):"
        ],
        "pascal": [
          "function FetchNewConnection(server: ServerSocket): Connection"
        ],
        "csharp": [
          "public Connection ServerSocket.FetchNewConnection();",
          "public static Connection SplashKit.FetchNewConnection(ServerSocket server);"
        ]
      }
    },
    {
      "signature": "bool has_connection(const string &name);",
      "name": "has_connection",
      "method_name": null,
      "unique_global_name": "has_connection",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Does the connection with the supplied name exist?",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True if there is a connection with the supplied name",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name of the connection to check.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "networking",
        "static": "networking"
      },
      "signatures": {
        "cpp": [
          "bool has_connection(const string &name)"
        ],
        "rust": [
          "pub fn has_connection(name: &String) -> bool"
        ],
        "python": [
          "def has_connection(name):"
        ],
        "pascal": [
          "function HasConnection(const name: String): Boolean"
        ],
        "csharp": [
          "public static bool Networking.HasConnection(string name);",
          "public static bool SplashKit.HasConnection(string name);"
        ]
      }
    },
    {
      "signature": "bool has_messages();",
      "name": "has_messages",
      "method_name": null,
      "unique_global_name": "has_messages",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Checks if there are any messages waiting to be read.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True if there are any messages waiting to be read",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "getter": "has_messages",
        "group": "networking",
        "static": "networking"
      },
      "signatures": {
        "cpp": [
          "bool has_messages()"
        ],
        "rust": [
          "pub fn has_messages() -> bool"
        ],
        "python": [
          "def has_messages():"
        ],
        "pascal": [
          "function HasMessages(): Boolean"
        ],
        "csharp": [
          "public static bool Networking.HasMessages { get }",
          "public static bool SplashKit.HasMessages();"
        ]
      }
    },
    {
      "signature": "bool has_messages(connection con);",
      "name": "has_messages",
      "method_name": null,
      "unique_global_name": "has_messages_on_connection",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Checks if a connection has messages waiting to be read.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True if there are any messages on the connection.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "con": {
          "type": "connection",
          "description": "The connection",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "connection",
        "getter": "has_messages",
        "suffix": "on_connection",
        "group": "networking",
        "static": "networking",
        "self": "con"
      },
      "signatures": {
        "cpp": [
          "bool has_messages(connection con)"
        ],
        "rust": [
          "pub fn has_messages(con: connection) -> bool"
        ],
        "python": [
          "def has_messages_on_connection(con):"
        ],
        "pascal": [
          "function HasMessages(con: Connection): Boolean"
        ],
        "csharp": [
          "public bool Connection.HasMessages { get }",
          "public static bool SplashKit.HasMessages(Connection con);"
        ]
      }
    },
    {
      "signature": "bool has_messages(const string &name);",
      "name": "has_messages",
      "method_name": null,
      "unique_global_name": "has_messages_on_name",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Checks if a server or connection has any messages.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "[description]",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name of the server or connection to check.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "on_name",
        "group": "networking",
        "static": "networking"
      },
      "signatures": {
        "cpp": [
          "bool has_messages(const string &name)"
        ],
        "rust": [
          "pub fn has_messages(name: &String) -> bool"
        ],
        "python": [
          "def has_messages_on_name(name):"
        ],
        "pascal": [
          "function HasMessages(const name: String): Boolean"
        ],
        "csharp": [
          "public static bool Networking.HasMessages(string name);",
          "public static bool SplashKit.HasMessages(string name);"
        ]
      }
    },
    {
      "signature": "bool has_messages(server_socket svr);",
      "name": "has_messages",
      "method_name": null,
      "unique_global_name": "has_messages_on_server",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Checks if a server has any messages waiting to be read.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True if there are messages on the server.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "svr": {
          "type": "server_socket",
          "description": "The server to check",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "server_socket",
        "getter": "has_messages",
        "suffix": "on_server",
        "group": "networking",
        "static": "networking",
        "self": "svr"
      },
      "signatures": {
        "cpp": [
          "bool has_messages(server_socket svr)"
        ],
        "rust": [
          "pub fn has_messages(svr: server_socket) -> bool"
        ],
        "python": [
          "def has_messages_on_server(svr):"
        ],
        "pascal": [
          "function HasMessages(svr: ServerSocket): Boolean"
        ],
        "csharp": [
          "public bool ServerSocket.HasMessages { get }",
          "public static bool SplashKit.HasMessages(ServerSocket svr);"
        ]
      }
    },
    {
      "signature": "bool has_new_connections();",
      "name": "has_new_connections",
      "method_name": null,
      "unique_global_name": "has_new_connections",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Checks if any of the servers have new connections.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True if there is one or more servers with new connections.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "group": "networking",
        "static": "networking"
      },
      "signatures": {
        "cpp": [
          "bool has_new_connections()"
        ],
        "rust": [
          "pub fn has_new_connections() -> bool"
        ],
        "python": [
          "def has_new_connections():"
        ],
        "pascal": [
          "function HasNewConnections(): Boolean"
        ],
        "csharp": [
          "public static bool Networking.HasNewConnections();",
          "public static bool SplashKit.HasNewConnections();"
        ]
      }
    },
    {
      "signature": "bool has_server(const string &name);",
      "name": "has_server",
      "method_name": null,
      "unique_global_name": "has_server",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Checks if there is a server with the indicated name.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True if there is a server with that name",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name of the server to check",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "networking",
        "static": "networking"
      },
      "signatures": {
        "cpp": [
          "bool has_server(const string &name)"
        ],
        "rust": [
          "pub fn has_server(name: &String) -> bool"
        ],
        "python": [
          "def has_server(name):"
        ],
        "pascal": [
          "function HasServer(const name: String): Boolean"
        ],
        "csharp": [
          "public static bool Networking.HasServer(string name);",
          "public static bool SplashKit.HasServer(string name);"
        ]
      }
    },
    {
      "signature": "string hex_str_to_ipv4(const string &a_hex);",
      "name": "hex_str_to_ipv4",
      "method_name": null,
      "unique_global_name": "hex_str_to_ipv4",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "The supplied hexadecimal string is translated into ipv4 standard address string.\nFunction handles hex strings starting with or without 0x.\ne.g. 127.0.0.1 from 0x7F000001",
      "brief": "Converts a hexadecimal ipv4 string to standard ipv4 address string x.x.x.x",
      "return": {
        "type": "string",
        "description": "standard ipv4 address using format X.X.X.X",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "a_hex": {
          "type": "string",
          "description": "hexadecimal ipv4 string to convert",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "networking",
        "static": "networking"
      },
      "signatures": {
        "cpp": [
          "string hex_str_to_ipv4(const string &a_hex)"
        ],
        "rust": [
          "pub fn hex_str_to_ipv4(a_hex: &String) -> String"
        ],
        "python": [
          "def hex_str_to_ipv4(a_hex):"
        ],
        "pascal": [
          "function HexStrToIpv4(const aHex: String): String"
        ],
        "csharp": [
          "public static string Networking.HexStrToIpv4(string aHex);",
          "public static string SplashKit.HexStrToIpv4(string aHex);"
        ]
      }
    },
    {
      "signature": "string hex_to_dec_string(const string &a_hex);",
      "name": "hex_to_dec_string",
      "method_name": null,
      "unique_global_name": "hex_to_dec_string",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "The supplied hexadecimal string is converted into it's decimal representation\ne.g. 7F into 127",
      "brief": "Converts a hexadecimal string to a decimal string",
      "return": {
        "type": "string",
        "description": "decimal representation of supplied hex string",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "a_hex": {
          "type": "string",
          "description": "hexadecimal string to convert",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "networking",
        "static": "networking"
      },
      "signatures": {
        "cpp": [
          "string hex_to_dec_string(const string &a_hex)"
        ],
        "rust": [
          "pub fn hex_to_dec_string(a_hex: &String) -> String"
        ],
        "python": [
          "def hex_to_dec_string(a_hex):"
        ],
        "pascal": [
          "function HexToDecString(const aHex: String): String"
        ],
        "csharp": [
          "public static string Networking.HexToDecString(string aHex);",
          "public static string SplashKit.HexToDecString(string aHex);"
        ]
      }
    },
    {
      "signature": "unsigned int ipv4_to_dec(const string &a_ip);",
      "name": "ipv4_to_dec",
      "method_name": null,
      "unique_global_name": "ipv4_to_dec",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Encodes the supplied ipv4 address string (in format X.X.X.X) into a single integer\ne.g. 127.0.0.1 into 2130706433",
      "brief": "Encodes ipv4 string into single integer",
      "return": {
        "type": "unsigned int",
        "description": "encoded ipv4 string",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "a_ip": {
          "type": "string",
          "description": "ipv4 address to encode",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "networking",
        "static": "networking"
      },
      "signatures": {
        "cpp": [
          "unsigned int ipv4_to_dec(const string &a_ip)"
        ],
        "rust": [
          "pub fn ipv4_to_dec(a_ip: &String) -> u32"
        ],
        "python": [
          "def ipv4_to_dec(a_ip):"
        ],
        "pascal": [
          "function Ipv4ToDec(const aIP: String): Cardinal"
        ],
        "csharp": [
          "public static uint Networking.Ipv4ToDec(string aIP);",
          "public static uint SplashKit.Ipv4ToDec(string aIP);"
        ]
      }
    },
    {
      "signature": "string ipv4_to_hex(const string& a_ip);",
      "name": "ipv4_to_hex",
      "method_name": null,
      "unique_global_name": "ipv4_to_hex",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Converts an ipv4 address into it's hexadecimal representation\ne.g. 0x7F000001 from 127.0.0.1",
      "brief": "Converts an ipv4 address string to hex representation",
      "return": {
        "type": "string",
        "description": "hexadecimal representation of ipc4 string",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "a_ip": {
          "type": "string",
          "description": "ip address to convert",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "networking",
        "static": "networking"
      },
      "signatures": {
        "cpp": [
          "string ipv4_to_hex(const string &a_ip)"
        ],
        "rust": [
          "pub fn ipv4_to_hex(a_ip: &String) -> String"
        ],
        "python": [
          "def ipv4_to_hex(a_ip):"
        ],
        "pascal": [
          "function Ipv4ToHex(const aIP: String): String"
        ],
        "csharp": [
          "public static string Networking.Ipv4ToHex(string aIP);",
          "public static string SplashKit.Ipv4ToHex(string aIP);"
        ]
      }
    },
    {
      "signature": "string ipv4_to_str(unsigned int ip);",
      "name": "ipv4_to_str",
      "method_name": null,
      "unique_global_name": "ipv4_to_str",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Decodes the supplied unsigned 32 bit integer into it's ipv4 address form\ne.g. 2130706433 into 127.0.0.1",
      "brief": "Decodes an integer into it's ipv4 address representation",
      "return": {
        "type": "string",
        "description": "ipv4 address string in X.X.X.X format",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "ip": {
          "type": "unsigned int",
          "description": "integer to be decoded",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "networking",
        "static": "networking"
      },
      "signatures": {
        "cpp": [
          "string ipv4_to_str(unsigned int ip)"
        ],
        "rust": [
          "pub fn ipv4_to_str(ip: u32) -> String"
        ],
        "python": [
          "def ipv4_to_str(ip):"
        ],
        "pascal": [
          "function Ipv4ToStr(ip: Cardinal): String"
        ],
        "csharp": [
          "public static string Networking.Ipv4ToStr(uint ip);",
          "public static string SplashKit.Ipv4ToStr(uint ip);"
        ]
      }
    },
    {
      "signature": "bool is_connection_open(connection con);",
      "name": "is_connection_open",
      "method_name": null,
      "unique_global_name": "is_connection_open",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Checks if the connection currently is open.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True if the connection is open.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "con": {
          "type": "connection",
          "description": "The connection",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "connection",
        "getter": "is_open",
        "group": "networking",
        "static": "networking",
        "self": "con"
      },
      "signatures": {
        "cpp": [
          "bool is_connection_open(connection con)"
        ],
        "rust": [
          "pub fn is_connection_open(con: connection) -> bool"
        ],
        "python": [
          "def is_connection_open(con):"
        ],
        "pascal": [
          "function IsConnectionOpen(con: Connection): Boolean"
        ],
        "csharp": [
          "public bool Connection.IsOpen { get }",
          "public static bool SplashKit.IsConnectionOpen(Connection con);"
        ]
      }
    },
    {
      "signature": "bool is_connection_open(const string &name);",
      "name": "is_connection_open",
      "method_name": null,
      "unique_global_name": "is_connection_open_from_name",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Checks if the connection with the supplied name currently is open.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True if the connection is open.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name of the connection",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "from_name",
        "group": "networking",
        "static": "networking"
      },
      "signatures": {
        "cpp": [
          "bool is_connection_open(const string &name)"
        ],
        "rust": [
          "pub fn is_connection_open(name: &String) -> bool"
        ],
        "python": [
          "def is_connection_open_from_name(name):"
        ],
        "pascal": [
          "function IsConnectionOpen(const name: String): Boolean"
        ],
        "csharp": [
          "public static bool Networking.IsConnectionOpen(string name);",
          "public static bool SplashKit.IsConnectionOpen(string name);"
        ]
      }
    },
    {
      "signature": "connection last_connection(const string &name);",
      "name": "last_connection",
      "method_name": null,
      "unique_global_name": "last_connection_named",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Gets the last client that connected to a server.",
      "brief": null,
      "return": {
        "type": "connection",
        "description": "The last connection made to that server",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name of the server to check",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "named",
        "group": "networking",
        "static": "networking"
      },
      "signatures": {
        "cpp": [
          "connection last_connection(const string &name)"
        ],
        "rust": [
          "pub fn last_connection(name: &String) -> connection"
        ],
        "python": [
          "def last_connection_named(name):"
        ],
        "pascal": [
          "function LastConnection(const name: String): Connection"
        ],
        "csharp": [
          "public static Connection Networking.LastConnection(string name);",
          "public static Connection SplashKit.LastConnection(string name);"
        ]
      }
    },
    {
      "signature": "connection last_connection(server_socket server);",
      "name": "last_connection",
      "method_name": null,
      "unique_global_name": "last_connection",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Gets the last client that connected to a server.",
      "brief": null,
      "return": {
        "type": "connection",
        "description": "The last connection made to that server",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "server": {
          "type": "server_socket",
          "description": "The server to check",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "server_socket",
        "getter": "last_connection",
        "group": "networking",
        "static": "networking",
        "self": "server"
      },
      "signatures": {
        "cpp": [
          "connection last_connection(server_socket server)"
        ],
        "rust": [
          "pub fn last_connection(server: server_socket) -> connection"
        ],
        "python": [
          "def last_connection(server):"
        ],
        "pascal": [
          "function LastConnection(server: ServerSocket): Connection"
        ],
        "csharp": [
          "public Connection ServerSocket.LastConnection { get }",
          "public static Connection SplashKit.LastConnection(ServerSocket server);"
        ]
      }
    },
    {
      "signature": "connection message_connection(message msg);",
      "name": "message_connection",
      "method_name": null,
      "unique_global_name": "message_connection",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the connection that sent a message.",
      "brief": null,
      "return": {
        "type": "connection",
        "description": "The connection that sent the message",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "msg": {
          "type": "message",
          "description": "The message",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "networking",
        "static": "networking"
      },
      "signatures": {
        "cpp": [
          "connection message_connection(message msg)"
        ],
        "rust": [
          "pub fn message_connection(msg: message) -> connection"
        ],
        "python": [
          "def message_connection(msg):"
        ],
        "pascal": [
          "function MessageConnection(msg: Message): Connection"
        ],
        "csharp": [
          "public static Connection Networking.MessageConnection(Message msg);",
          "public static Connection SplashKit.MessageConnection(Message msg);"
        ]
      }
    },
    {
      "signature": "unsigned int message_count(server_socket svr);",
      "name": "message_count",
      "method_name": null,
      "unique_global_name": "message_count_on_server",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the number of messages on a server.",
      "brief": null,
      "return": {
        "type": "unsigned int",
        "description": "The number of messages on the server",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "svr": {
          "type": "server_socket",
          "description": "The server to check",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "server_socket",
        "getter": "message_count",
        "suffix": "on_server",
        "group": "networking",
        "static": "networking",
        "self": "svr"
      },
      "signatures": {
        "cpp": [
          "unsigned int message_count(server_socket svr)"
        ],
        "rust": [
          "pub fn message_count(svr: server_socket) -> u32"
        ],
        "python": [
          "def message_count_on_server(svr):"
        ],
        "pascal": [
          "function MessageCount(svr: ServerSocket): Cardinal"
        ],
        "csharp": [
          "public uint ServerSocket.MessageCount { get }",
          "public static uint SplashKit.MessageCount(ServerSocket svr);"
        ]
      }
    },
    {
      "signature": "unsigned int message_count(connection a_connection);",
      "name": "message_count",
      "method_name": null,
      "unique_global_name": "message_count_on_connection",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the number of messages on a connection.",
      "brief": null,
      "return": {
        "type": "unsigned int",
        "description": "The number of messages to be read from the connection",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "a_connection": {
          "type": "connection",
          "description": "The connection",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "connection",
        "getter": "message_count",
        "suffix": "on_connection",
        "group": "networking",
        "static": "networking",
        "self": "a_connection"
      },
      "signatures": {
        "cpp": [
          "unsigned int message_count(connection a_connection)"
        ],
        "rust": [
          "pub fn message_count(a_connection: connection) -> u32"
        ],
        "python": [
          "def message_count_on_connection(a_connection):"
        ],
        "pascal": [
          "function MessageCount(aConnection: Connection): Cardinal"
        ],
        "csharp": [
          "public uint Connection.MessageCount { get }",
          "public static uint SplashKit.MessageCount(Connection aConnection);"
        ]
      }
    },
    {
      "signature": "unsigned int message_count(const string &name);",
      "name": "message_count",
      "method_name": null,
      "unique_global_name": "message_count_from_name",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the number of messages on a server or connection.",
      "brief": null,
      "return": {
        "type": "unsigned int",
        "description": "The number of messages on the server or connection",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name of the server or connection",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "from_name",
        "group": "networking",
        "static": "networking"
      },
      "signatures": {
        "cpp": [
          "unsigned int message_count(const string &name)"
        ],
        "rust": [
          "pub fn message_count(name: &String) -> u32"
        ],
        "python": [
          "def message_count_from_name(name):"
        ],
        "pascal": [
          "function MessageCount(const name: String): Cardinal"
        ],
        "csharp": [
          "public static uint Networking.MessageCount(string name);",
          "public static uint SplashKit.MessageCount(string name);"
        ]
      }
    },
    {
      "signature": "string message_data(message msg);",
      "name": "message_data",
      "method_name": null,
      "unique_global_name": "message_data",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Gets the body of a message as a string.",
      "brief": null,
      "return": {
        "type": "string",
        "description": "The string body of the message",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "msg": {
          "type": "message",
          "description": "The message to check",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "message",
        "getter": "data",
        "group": "networking",
        "static": "networking",
        "self": "msg"
      },
      "signatures": {
        "cpp": [
          "string message_data(message msg)"
        ],
        "rust": [
          "pub fn message_data(msg: message) -> String"
        ],
        "python": [
          "def message_data(msg):"
        ],
        "pascal": [
          "function MessageData(msg: Message): String"
        ],
        "csharp": [
          "public string Message.Data { get }",
          "public static string SplashKit.MessageData(Message msg);"
        ]
      }
    },
    {
      "signature": "vector<int8_t> message_data_bytes(message msg);",
      "name": "message_data_bytes",
      "method_name": null,
      "unique_global_name": "message_data_bytes",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Gets the body of a message as a list of bytes.",
      "brief": null,
      "return": {
        "type": "vector",
        "description": "The body of the message as bytes",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": true,
        "type_parameter": "int8_t"
      },
      "parameters": {
        "msg": {
          "type": "message",
          "description": "The message to check",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "message",
        "getter": "data_bytes",
        "group": "networking",
        "static": "networking",
        "self": "msg"
      },
      "signatures": {
        "cpp": [
          "vector<int8_t> message_data_bytes(message msg)"
        ],
        "rust": [
          "pub fn message_data_bytes(msg: message) -> Vec<i8>"
        ],
        "python": [
          "def message_data_bytes(msg):"
        ],
        "pascal": [
          "function MessageDataBytes(msg: Message): ArrayOfChar"
        ],
        "csharp": [
          "public List<byte> Message.DataBytes { get }",
          "public static List<byte> SplashKit.MessageDataBytes(Message msg);"
        ]
      }
    },
    {
      "signature": "string message_host(message msg);",
      "name": "message_host",
      "method_name": null,
      "unique_global_name": "message_host",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the host who made the message.",
      "brief": null,
      "return": {
        "type": "string",
        "description": "The host who sent the message",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "msg": {
          "type": "message",
          "description": "The message to check",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "message",
        "getter": "host",
        "group": "networking",
        "static": "networking",
        "self": "msg"
      },
      "signatures": {
        "cpp": [
          "string message_host(message msg)"
        ],
        "rust": [
          "pub fn message_host(msg: message) -> String"
        ],
        "python": [
          "def message_host(msg):"
        ],
        "pascal": [
          "function MessageHost(msg: Message): String"
        ],
        "csharp": [
          "public string Message.Host { get }",
          "public static string SplashKit.MessageHost(Message msg);"
        ]
      }
    },
    {
      "signature": "unsigned short int message_port(message msg);",
      "name": "message_port",
      "method_name": null,
      "unique_global_name": "message_port",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the port used to send a message.",
      "brief": null,
      "return": {
        "type": "unsigned short",
        "description": "The port of the message",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "msg": {
          "type": "message",
          "description": "The message to check",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "message",
        "getter": "port",
        "group": "networking",
        "static": "networking",
        "self": "msg"
      },
      "signatures": {
        "cpp": [
          "unsigned short message_port(message msg)"
        ],
        "rust": [
          "pub fn message_port(msg: message) -> u16"
        ],
        "python": [
          "def message_port(msg):"
        ],
        "pascal": [
          "function MessagePort(msg: Message): Word"
        ],
        "csharp": [
          "public ushort Message.Port { get }",
          "public static ushort SplashKit.MessagePort(Message msg);"
        ]
      }
    },
    {
      "signature": "connection_type message_protocol(message msg);",
      "name": "message_protocol",
      "method_name": null,
      "unique_global_name": "message_protocol",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the protocol used to send a message.",
      "brief": null,
      "return": {
        "type": "connection_type",
        "description": "The protocol used to sent the message",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "msg": {
          "type": "message",
          "description": "The message to check",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "message",
        "getter": "protocol",
        "group": "networking",
        "static": "networking",
        "self": "msg"
      },
      "signatures": {
        "cpp": [
          "connection_type message_protocol(message msg)"
        ],
        "rust": [
          "pub fn message_protocol(msg: message) -> connection_type"
        ],
        "python": [
          "def message_protocol(msg):"
        ],
        "pascal": [
          "function MessageProtocol(msg: Message): ConnectionType"
        ],
        "csharp": [
          "public ConnectionType Message.Protocol { get }",
          "public static ConnectionType SplashKit.MessageProtocol(Message msg);"
        ]
      }
    },
    {
      "signature": "string my_ip();",
      "name": "my_ip",
      "method_name": null,
      "unique_global_name": "my_ip",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the ipv4 string of the localhost loopback for the current computer.",
      "brief": "Returns the ipv4 string for the current computer's ip",
      "return": {
        "type": "string",
        "description": "ipv4 address string in X.X.X.X format",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "group": "networking",
        "static": "networking"
      },
      "signatures": {
        "cpp": [
          "string my_ip()"
        ],
        "rust": [
          "pub fn my_ip() -> String"
        ],
        "python": [
          "def my_ip():"
        ],
        "pascal": [
          "function MyIP(): String"
        ],
        "csharp": [
          "public static string Networking.MyIP();",
          "public static string SplashKit.MyIP();"
        ]
      }
    },
    {
      "signature": "string name_for_connection(const string host,const unsigned int port);",
      "name": "name_for_connection",
      "method_name": null,
      "unique_global_name": "name_for_connection",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the name SplashKit would use for a connection made to a server\nfrom a host to a port.",
      "brief": null,
      "return": {
        "type": "string",
        "description": "The name SplashKit would use for this connection",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "host": {
          "type": "string",
          "description": "The host name",
          "is_pointer": false,
          "is_const": true,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "port": {
          "type": "unsigned int",
          "description": "The port",
          "is_pointer": false,
          "is_const": true,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "networking",
        "static": "networking"
      },
      "signatures": {
        "cpp": [
          "string name_for_connection(const string host, const unsigned int port)"
        ],
        "rust": [
          "pub fn name_for_connection(host: String, port: u32) -> String"
        ],
        "python": [
          "def name_for_connection(host, port):"
        ],
        "pascal": [
          "function NameForConnection(host: String; port: Cardinal): String"
        ],
        "csharp": [
          "public static string Networking.NameForConnection(string host, uint port);",
          "public static string SplashKit.NameForConnection(string host, uint port);"
        ]
      }
    },
    {
      "signature": "int new_connection_count(server_socket server);",
      "name": "new_connection_count",
      "method_name": null,
      "unique_global_name": "new_connection_count",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Get the number of new connections made to the server.\nThe count will increase as the server accepts new connections.\nThe count decreases each time you fetch a new connection, or\ncan be set to 0 if you reset the new connection count.",
      "brief": null,
      "return": {
        "type": "int",
        "description": "The number of new connections",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "server": {
          "type": "server_socket",
          "description": "The server to check",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "server_socket",
        "getter": "new_connection_count",
        "group": "networking",
        "static": "networking",
        "self": "server"
      },
      "signatures": {
        "cpp": [
          "int new_connection_count(server_socket server)"
        ],
        "rust": [
          "pub fn new_connection_count(server: server_socket) -> i32"
        ],
        "python": [
          "def new_connection_count(server):"
        ],
        "pascal": [
          "function NewConnectionCount(server: ServerSocket): Integer"
        ],
        "csharp": [
          "public int ServerSocket.NewConnectionCount { get }",
          "public static int SplashKit.NewConnectionCount(ServerSocket server);"
        ]
      }
    },
    {
      "signature": "connection open_connection(const string &name,const string &host,unsigned short int port);",
      "name": "open_connection",
      "method_name": null,
      "unique_global_name": "open_connection",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Opens a TCP connection to a server using the supplied details.",
      "brief": null,
      "return": {
        "type": "connection",
        "description": "A new connection to the indicated server",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name for the connection",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "host": {
          "type": "string",
          "description": "The address of the server",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "port": {
          "type": "unsigned short",
          "description": "The server's port",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "connection",
        "constructor": true,
        "group": "networking",
        "static": "networking"
      },
      "signatures": {
        "cpp": [
          "connection open_connection(const string &name, const string &host, unsigned short port)"
        ],
        "rust": [
          "pub fn open_connection(name: &String, host: &String, port: u16) -> connection"
        ],
        "python": [
          "def open_connection(name, host, port):"
        ],
        "pascal": [
          "function OpenConnection(const name: String; const host: String; port: Word): Connection"
        ],
        "csharp": [
          "public static Connection SplashKit.OpenConnection(string name, string host, ushort port);",
          "public Connection(string name, string host, ushort port);"
        ]
      }
    },
    {
      "signature": "connection open_connection(const string &name,const string &host,unsigned short int port,connection_type protocol);",
      "name": "open_connection",
      "method_name": null,
      "unique_global_name": "open_connection_with_protocol",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Opens a connection to a server using the supplied details.",
      "brief": null,
      "return": {
        "type": "connection",
        "description": "A new connection to the indicated server",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name for the connection",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "host": {
          "type": "string",
          "description": "The address of the server",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "port": {
          "type": "unsigned short",
          "description": "The server's port",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "protocol": {
          "type": "connection_type",
          "description": "The protocol used to connect to the server",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "connection",
        "constructor": true,
        "suffix": "with_protocol",
        "group": "networking",
        "static": "networking"
      },
      "signatures": {
        "cpp": [
          "connection open_connection(const string &name, const string &host, unsigned short port, connection_type protocol)"
        ],
        "rust": [
          "pub fn open_connection(name: &String, host: &String, port: u16, protocol: connection_type) -> connection"
        ],
        "python": [
          "def open_connection_with_protocol(name, host, port, protocol):"
        ],
        "pascal": [
          "function OpenConnection(const name: String; const host: String; port: Word; protocol: ConnectionType): Connection"
        ],
        "csharp": [
          "public static Connection SplashKit.OpenConnection(string name, string host, ushort port, ConnectionType protocol);",
          "public Connection(string name, string host, ushort port, ConnectionType protocol);"
        ]
      }
    },
    {
      "signature": "message read_message();",
      "name": "read_message",
      "method_name": null,
      "unique_global_name": "read_message",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Read a message from the network (from a server or connection).",
      "brief": null,
      "return": {
        "type": "message",
        "description": "The first message from the network.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "group": "networking",
        "static": "networking"
      },
      "signatures": {
        "cpp": [
          "message read_message()"
        ],
        "rust": [
          "pub fn read_message() -> message"
        ],
        "python": [
          "def read_message():"
        ],
        "pascal": [
          "function ReadMessage(): Message"
        ],
        "csharp": [
          "public static Message Networking.ReadMessage();",
          "public static Message SplashKit.ReadMessage();"
        ]
      }
    },
    {
      "signature": "message read_message(connection a_connection);",
      "name": "read_message",
      "method_name": "read_message",
      "unique_global_name": "read_message_from_connection",
      "unique_method_name": "connection.read_message_from_connection",
      "suffix_name": null,
      "description": "Reads the first message from the connection.",
      "brief": null,
      "return": {
        "type": "message",
        "description": "The first message read from the connection",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "a_connection": {
          "type": "connection",
          "description": "A connection",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "connection",
        "method": "read_message",
        "suffix": "from_connection",
        "group": "networking",
        "static": "networking",
        "self": "a_connection"
      },
      "signatures": {
        "cpp": [
          "message read_message(connection a_connection)"
        ],
        "rust": [
          "pub fn read_message(a_connection: connection) -> message"
        ],
        "python": [
          "def read_message_from_connection(a_connection):"
        ],
        "pascal": [
          "function ReadMessage(aConnection: Connection): Message"
        ],
        "csharp": [
          "public Message Connection.ReadMessage();",
          "public static Message SplashKit.ReadMessage(Connection aConnection);"
        ]
      }
    },
    {
      "signature": "message read_message(const string &name);",
      "name": "read_message",
      "method_name": null,
      "unique_global_name": "read_message_from_name",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Reads the first message from a connection or server.",
      "brief": null,
      "return": {
        "type": "message",
        "description": "The first message read from the connection or server",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name of a connection or server",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "from_name",
        "group": "networking",
        "static": "networking"
      },
      "signatures": {
        "cpp": [
          "message read_message(const string &name)"
        ],
        "rust": [
          "pub fn read_message(name: &String) -> message"
        ],
        "python": [
          "def read_message_from_name(name):"
        ],
        "pascal": [
          "function ReadMessage(const name: String): Message"
        ],
        "csharp": [
          "public static Message Networking.ReadMessage(string name);",
          "public static Message SplashKit.ReadMessage(string name);"
        ]
      }
    },
    {
      "signature": "message read_message(server_socket svr);",
      "name": "read_message",
      "method_name": "read_message",
      "unique_global_name": "read_message_from_server",
      "unique_method_name": "server_socket.read_message_from_server",
      "suffix_name": null,
      "description": "Reads the first message from the server.",
      "brief": null,
      "return": {
        "type": "message",
        "description": "The first message read from the server",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "svr": {
          "type": "server_socket",
          "description": "A server",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "server_socket",
        "method": "read_message",
        "suffix": "from_server",
        "group": "networking",
        "static": "networking",
        "self": "svr"
      },
      "signatures": {
        "cpp": [
          "message read_message(server_socket svr)"
        ],
        "rust": [
          "pub fn read_message(svr: server_socket) -> message"
        ],
        "python": [
          "def read_message_from_server(svr):"
        ],
        "pascal": [
          "function ReadMessage(svr: ServerSocket): Message"
        ],
        "csharp": [
          "public Message ServerSocket.ReadMessage();",
          "public static Message SplashKit.ReadMessage(ServerSocket svr);"
        ]
      }
    },
    {
      "signature": "string read_message_data(const string &name);",
      "name": "read_message_data",
      "method_name": null,
      "unique_global_name": "read_message_data_from_name",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Read message data from a connection or server.",
      "brief": null,
      "return": {
        "type": "string",
        "description": "The data from the first message from the server or connection",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name of the connection or server",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "from_name",
        "group": "networking",
        "static": "networking"
      },
      "signatures": {
        "cpp": [
          "string read_message_data(const string &name)"
        ],
        "rust": [
          "pub fn read_message_data(name: &String) -> String"
        ],
        "python": [
          "def read_message_data_from_name(name):"
        ],
        "pascal": [
          "function ReadMessageData(const name: String): String"
        ],
        "csharp": [
          "public static string Networking.ReadMessageData(string name);",
          "public static string SplashKit.ReadMessageData(string name);"
        ]
      }
    },
    {
      "signature": "string read_message_data(connection a_connection);",
      "name": "read_message_data",
      "method_name": "read_message_data",
      "unique_global_name": "read_message_data_from_connection",
      "unique_method_name": "connection.read_message_data_from_connection",
      "suffix_name": null,
      "description": "Read message data from a connection.",
      "brief": null,
      "return": {
        "type": "string",
        "description": "The data from the first message on the connection",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "a_connection": {
          "type": "connection",
          "description": "The connection",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "connection",
        "method": "read_message_data",
        "suffix": "from_connection",
        "group": "networking",
        "static": "networking",
        "self": "a_connection"
      },
      "signatures": {
        "cpp": [
          "string read_message_data(connection a_connection)"
        ],
        "rust": [
          "pub fn read_message_data(a_connection: connection) -> String"
        ],
        "python": [
          "def read_message_data_from_connection(a_connection):"
        ],
        "pascal": [
          "function ReadMessageData(aConnection: Connection): String"
        ],
        "csharp": [
          "public string Connection.ReadMessageData();",
          "public static string SplashKit.ReadMessageData(Connection aConnection);"
        ]
      }
    },
    {
      "signature": "string read_message_data(server_socket svr);",
      "name": "read_message_data",
      "method_name": "read_message_data",
      "unique_global_name": "read_message_data_from_server",
      "unique_method_name": "server_socket.read_message_data_from_server",
      "suffix_name": null,
      "description": "Read message data from a server.",
      "brief": null,
      "return": {
        "type": "string",
        "description": "The data from the first message on the server",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "svr": {
          "type": "server_socket",
          "description": "The server",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "server_socket",
        "method": "read_message_data",
        "suffix": "from_server",
        "group": "networking",
        "static": "networking",
        "self": "svr"
      },
      "signatures": {
        "cpp": [
          "string read_message_data(server_socket svr)"
        ],
        "rust": [
          "pub fn read_message_data(svr: server_socket) -> String"
        ],
        "python": [
          "def read_message_data_from_server(svr):"
        ],
        "pascal": [
          "function ReadMessageData(svr: ServerSocket): String"
        ],
        "csharp": [
          "public string ServerSocket.ReadMessageData();",
          "public static string SplashKit.ReadMessageData(ServerSocket svr);"
        ]
      }
    },
    {
      "signature": "void reconnect(connection a_connection);",
      "name": "reconnect",
      "method_name": "reconnect",
      "unique_global_name": "reconnect",
      "unique_method_name": "connection.reconnect",
      "suffix_name": null,
      "description": "Attempt to reconnect the connection.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "a_connection": {
          "type": "connection",
          "description": "The connection to reconnect",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "connection",
        "method": "reconnect",
        "group": "networking",
        "static": "networking",
        "self": "a_connection"
      },
      "signatures": {
        "cpp": [
          "void reconnect(connection a_connection)"
        ],
        "rust": [
          "pub fn reconnect(a_connection: connection)"
        ],
        "python": [
          "def reconnect(a_connection):"
        ],
        "pascal": [
          "procedure Reconnect(aConnection: Connection)"
        ],
        "csharp": [
          "public void Connection.Reconnect();",
          "public static void SplashKit.Reconnect(Connection aConnection);"
        ]
      }
    },
    {
      "signature": "void reconnect(const string &name);",
      "name": "reconnect",
      "method_name": null,
      "unique_global_name": "reconnect_from_name",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Attempt to reconnect the connection.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name of the connection to reconnect.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "from_name",
        "group": "networking",
        "static": "networking"
      },
      "signatures": {
        "cpp": [
          "void reconnect(const string &name)"
        ],
        "rust": [
          "pub fn reconnect(name: &String)"
        ],
        "python": [
          "def reconnect_from_name(name):"
        ],
        "pascal": [
          "procedure Reconnect(const name: String)"
        ],
        "csharp": [
          "public static void Networking.Reconnect(string name);",
          "public static void SplashKit.Reconnect(string name);"
        ]
      }
    },
    {
      "signature": "void release_all_connections();",
      "name": "release_all_connections",
      "method_name": null,
      "unique_global_name": "release_all_connections",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Close and release the resources used by all of the connections.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "group": "networking",
        "static": "networking"
      },
      "signatures": {
        "cpp": [
          "void release_all_connections()"
        ],
        "rust": [
          "pub fn release_all_connections()"
        ],
        "python": [
          "def release_all_connections():"
        ],
        "pascal": [
          "procedure ReleaseAllConnections()"
        ],
        "csharp": [
          "public static void Networking.ReleaseAllConnections();",
          "public static void SplashKit.ReleaseAllConnections();"
        ]
      }
    },
    {
      "signature": "void reset_new_connection_count(server_socket server);",
      "name": "reset_new_connection_count",
      "method_name": "reset_new_connection_count",
      "unique_global_name": "reset_new_connection_count",
      "unique_method_name": "server_socket.reset_new_connection_count",
      "suffix_name": null,
      "description": "Allows you to reset the new connection count to 0.\n(The connections are kept)",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "server": {
          "type": "server_socket",
          "description": "The server to check",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "server_socket",
        "method": "reset_new_connection_count",
        "group": "networking",
        "static": "networking",
        "self": "server"
      },
      "signatures": {
        "cpp": [
          "void reset_new_connection_count(server_socket server)"
        ],
        "rust": [
          "pub fn reset_new_connection_count(server: server_socket)"
        ],
        "python": [
          "def reset_new_connection_count(server):"
        ],
        "pascal": [
          "procedure ResetNewConnectionCount(server: ServerSocket)"
        ],
        "csharp": [
          "public void ServerSocket.ResetNewConnectionCount();",
          "public static void SplashKit.ResetNewConnectionCount(ServerSocket server);"
        ]
      }
    },
    {
      "signature": "connection retrieve_connection(const string &name,int idx);",
      "name": "retrieve_connection",
      "method_name": null,
      "unique_global_name": "retrieve_connection_named",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Get a connection from the server.",
      "brief": null,
      "return": {
        "type": "connection",
        "description": "The connection at the supplied index",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name of the server",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "idx": {
          "type": "int",
          "description": "The index of the connection",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "named",
        "group": "networking",
        "static": "networking"
      },
      "signatures": {
        "cpp": [
          "connection retrieve_connection(const string &name, int idx)"
        ],
        "rust": [
          "pub fn retrieve_connection(name: &String, idx: i32) -> connection"
        ],
        "python": [
          "def retrieve_connection_named(name, idx):"
        ],
        "pascal": [
          "function RetrieveConnection(const name: String; idx: Integer): Connection"
        ],
        "csharp": [
          "public static Connection Networking.RetrieveConnection(string name, int idx);",
          "public static Connection SplashKit.RetrieveConnection(string name, int idx);"
        ]
      }
    },
    {
      "signature": "connection retrieve_connection(server_socket server,int idx);",
      "name": "retrieve_connection",
      "method_name": "retrieve_connection",
      "unique_global_name": "retrieve_connection",
      "unique_method_name": "server_socket.retrieve_connection",
      "suffix_name": null,
      "description": "Get a connection from the server.",
      "brief": null,
      "return": {
        "type": "connection",
        "description": "The connection at the supplied index",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "server": {
          "type": "server_socket",
          "description": "The server",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "idx": {
          "type": "int",
          "description": "The index of the connection",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "server_socket",
        "method": "retrieve_connection",
        "group": "networking",
        "static": "networking",
        "self": "server"
      },
      "signatures": {
        "cpp": [
          "connection retrieve_connection(server_socket server, int idx)"
        ],
        "rust": [
          "pub fn retrieve_connection(server: server_socket, idx: i32) -> connection"
        ],
        "python": [
          "def retrieve_connection(server, idx):"
        ],
        "pascal": [
          "function RetrieveConnection(server: ServerSocket; idx: Integer): Connection"
        ],
        "csharp": [
          "public Connection ServerSocket.RetrieveConnection(int idx);",
          "public static Connection SplashKit.RetrieveConnection(ServerSocket server, int idx);"
        ]
      }
    },
    {
      "signature": "bool send_message_to(const string &a_msg,connection a_connection);",
      "name": "send_message_to",
      "method_name": "send_message",
      "unique_global_name": "send_message_to_connection",
      "unique_method_name": "connection.send_message_connection",
      "suffix_name": null,
      "description": "Send a message to the connection.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True if the message sends.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "a_msg": {
          "type": "string",
          "description": "The message to send",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "a_connection": {
          "type": "connection",
          "description": "The connection to send the message to",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "connection",
        "method": "send_message",
        "self": "a_connection",
        "suffix": "connection",
        "group": "networking",
        "static": "networking"
      },
      "signatures": {
        "cpp": [
          "bool send_message_to(const string &a_msg, connection a_connection)"
        ],
        "rust": [
          "pub fn send_message_to(a_msg: &String, a_connection: connection) -> bool"
        ],
        "python": [
          "def send_message_to_connection(a_msg, a_connection):"
        ],
        "pascal": [
          "function SendMessageTo(const aMsg: String; aConnection: Connection): Boolean"
        ],
        "csharp": [
          "public bool Connection.SendMessageTo(string aMsg);",
          "public static bool SplashKit.SendMessageTo(string aMsg, Connection aConnection);"
        ]
      }
    },
    {
      "signature": "bool send_message_to(const string &a_msg,const string &name);",
      "name": "send_message_to",
      "method_name": null,
      "unique_global_name": "send_message_to_name",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Send a message to the connection with the given name.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True if the message sends",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "a_msg": {
          "type": "string",
          "description": "The message to send",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "name": {
          "type": "string",
          "description": "The name of the connection to send the message to",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "name",
        "group": "networking",
        "static": "networking"
      },
      "signatures": {
        "cpp": [
          "bool send_message_to(const string &a_msg, const string &name)"
        ],
        "rust": [
          "pub fn send_message_to(a_msg: &String, name: &String) -> bool"
        ],
        "python": [
          "def send_message_to_name(a_msg, name):"
        ],
        "pascal": [
          "function SendMessageTo(const aMsg: String; const name: String): Boolean"
        ],
        "csharp": [
          "public static bool Networking.SendMessageTo(string aMsg, string name);",
          "public static bool SplashKit.SendMessageTo(string aMsg, string name);"
        ]
      }
    },
    {
      "signature": "bool server_has_new_connection(const string &name);",
      "name": "server_has_new_connection",
      "method_name": null,
      "unique_global_name": "server_has_new_connection_named",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Checks of there are new connections waiting for a server.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True if the server has new connections",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name of the server to check",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "named",
        "group": "networking",
        "static": "networking"
      },
      "signatures": {
        "cpp": [
          "bool server_has_new_connection(const string &name)"
        ],
        "rust": [
          "pub fn server_has_new_connection(name: &String) -> bool"
        ],
        "python": [
          "def server_has_new_connection_named(name):"
        ],
        "pascal": [
          "function ServerHasNewConnection(const name: String): Boolean"
        ],
        "csharp": [
          "public static bool Networking.ServerHasNewConnection(string name);",
          "public static bool SplashKit.ServerHasNewConnection(string name);"
        ]
      }
    },
    {
      "signature": "bool server_has_new_connection(server_socket server);",
      "name": "server_has_new_connection",
      "method_name": null,
      "unique_global_name": "server_has_new_connection",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Checks of there are new connections waiting for a server.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True if the server has new connections",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "server": {
          "type": "server_socket",
          "description": "The server to check",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "server_socket",
        "getter": "has_new_connections",
        "group": "networking",
        "static": "networking",
        "self": "server"
      },
      "signatures": {
        "cpp": [
          "bool server_has_new_connection(server_socket server)"
        ],
        "rust": [
          "pub fn server_has_new_connection(server: server_socket) -> bool"
        ],
        "python": [
          "def server_has_new_connection(server):"
        ],
        "pascal": [
          "function ServerHasNewConnection(server: ServerSocket): Boolean"
        ],
        "csharp": [
          "public bool ServerSocket.HasNewConnections { get }",
          "public static bool SplashKit.ServerHasNewConnection(ServerSocket server);"
        ]
      }
    },
    {
      "signature": "server_socket server_named(const string &name);",
      "name": "server_named",
      "method_name": null,
      "unique_global_name": "server_named",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Gets the server with the indicated name.",
      "brief": null,
      "return": {
        "type": "server_socket",
        "description": "The server",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name of the server to get",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "networking",
        "static": "networking"
      },
      "signatures": {
        "cpp": [
          "server_socket server_named(const string &name)"
        ],
        "rust": [
          "pub fn server_named(name: &String) -> server_socket"
        ],
        "python": [
          "def server_named(name):"
        ],
        "pascal": [
          "function ServerNamed(const name: String): ServerSocket"
        ],
        "csharp": [
          "public static ServerSocket Networking.ServerNamed(string name);",
          "public static ServerSocket SplashKit.ServerNamed(string name);"
        ]
      }
    },
    {
      "signature": "void set_udp_packet_size(unsigned int udp_packet_size);",
      "name": "set_udp_packet_size",
      "method_name": null,
      "unique_global_name": "set_udp_packet_size",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Change the size of the UDP packets.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "udp_packet_size": {
          "type": "unsigned int",
          "description": "The new packet size.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "setter": "udp_packet_size",
        "group": "networking",
        "static": "networking"
      },
      "signatures": {
        "cpp": [
          "void set_udp_packet_size(unsigned int udp_packet_size)"
        ],
        "rust": [
          "pub fn set_udp_packet_size(udp_packet_size: u32)"
        ],
        "python": [
          "def set_udp_packet_size(udp_packet_size):"
        ],
        "pascal": [
          "procedure SetUDPPacketSize(udpPacketSize: Cardinal)"
        ],
        "csharp": [
          "public static void Networking.UDPPacketSize { set }",
          "public static void SplashKit.SetUDPPacketSize(uint udpPacketSize);"
        ]
      }
    },
    {
      "signature": "unsigned int udp_packet_size();",
      "name": "udp_packet_size",
      "method_name": null,
      "unique_global_name": "udp_packet_size",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the size SplashKit is using for UDP packets.",
      "brief": null,
      "return": {
        "type": "unsigned int",
        "description": "The size of UDP packets.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "getter": "udp_packet_size",
        "group": "networking",
        "static": "networking"
      },
      "signatures": {
        "cpp": [
          "unsigned int udp_packet_size()"
        ],
        "rust": [
          "pub fn udp_packet_size() -> u32"
        ],
        "python": [
          "def udp_packet_size():"
        ],
        "pascal": [
          "function UDPPacketSize(): Cardinal"
        ],
        "csharp": [
          "public static uint Networking.UDPPacketSize { get }",
          "public static uint SplashKit.UDPPacketSize();"
        ]
      }
    },
    {
      "signature": "bitmap download_bitmap(const string &name,const string &url,unsigned short port);",
      "name": "download_bitmap",
      "method_name": null,
      "unique_global_name": "download_bitmap",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Download an image from a web server and load it into SplashKit so that\nyou can use it.",
      "brief": null,
      "return": {
        "type": "bitmap",
        "description": "The bitmap that was loaded",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name of the bitmap resource when it is loaded",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "url": {
          "type": "string",
          "description": "The URL path to the image resoure",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "port": {
          "type": "unsigned short",
          "description": "The port to connect to on the server",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "networking"
      },
      "signatures": {
        "cpp": [
          "bitmap download_bitmap(const string &name, const string &url, unsigned short port)"
        ],
        "rust": [
          "pub fn download_bitmap(name: &String, url: &String, port: u16) -> bitmap"
        ],
        "python": [
          "def download_bitmap(name, url, port):"
        ],
        "pascal": [
          "function DownloadBitmap(const name: String; const url: String; port: Word): Bitmap"
        ],
        "csharp": [
          "public static Bitmap SplashKit.DownloadBitmap(string name, string url, ushort port);"
        ]
      }
    },
    {
      "signature": "font download_font(const string &name,const string &url,unsigned short port);",
      "name": "download_font",
      "method_name": null,
      "unique_global_name": "download_font",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Download a font from a web server and load it into SplashKit so that\nyou can use it.",
      "brief": null,
      "return": {
        "type": "font",
        "description": "The font that was loaded",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name of the font resource when it is loaded",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "url": {
          "type": "string",
          "description": "The URL path to the font resoure",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "port": {
          "type": "unsigned short",
          "description": "The port to connect to on the server",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "networking"
      },
      "signatures": {
        "cpp": [
          "font download_font(const string &name, const string &url, unsigned short port)"
        ],
        "rust": [
          "pub fn download_font(name: &String, url: &String, port: u16) -> font"
        ],
        "python": [
          "def download_font(name, url, port):"
        ],
        "pascal": [
          "function DownloadFont(const name: String; const url: String; port: Word): Font"
        ],
        "csharp": [
          "public static Font SplashKit.DownloadFont(string name, string url, ushort port);"
        ]
      }
    },
    {
      "signature": "music download_music(const string &name,const string &url,unsigned short port);",
      "name": "download_music",
      "method_name": null,
      "unique_global_name": "download_music",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Download a music file from a web server and load it into SplashKit so\nthat you can use it.",
      "brief": null,
      "return": {
        "type": "music",
        "description": "The music that was loaded",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name of the music resource when it is loaded",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "url": {
          "type": "string",
          "description": "The URL path to the music resoure",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "port": {
          "type": "unsigned short",
          "description": "The port to connect to on the server",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "networking"
      },
      "signatures": {
        "cpp": [
          "music download_music(const string &name, const string &url, unsigned short port)"
        ],
        "rust": [
          "pub fn download_music(name: &String, url: &String, port: u16) -> music"
        ],
        "python": [
          "def download_music(name, url, port):"
        ],
        "pascal": [
          "function DownloadMusic(const name: String; const url: String; port: Word): Music"
        ],
        "csharp": [
          "public static Music SplashKit.DownloadMusic(string name, string url, ushort port);"
        ]
      }
    },
    {
      "signature": "sound_effect download_sound_effect(const string &name,const string &url,unsigned short port);",
      "name": "download_sound_effect",
      "method_name": null,
      "unique_global_name": "download_sound_effect",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Download a sound effect from a web server and load it into SplashKit so\nthat you can use it.",
      "brief": null,
      "return": {
        "type": "sound_effect",
        "description": "The sound effect that was loaded",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name of the sound effect resource when it is loaded",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "url": {
          "type": "string",
          "description": "The URL path to the sound effect resoure",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "port": {
          "type": "unsigned short",
          "description": "The port to connect to on the server",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "networking"
      },
      "signatures": {
        "cpp": [
          "sound_effect download_sound_effect(const string &name, const string &url, unsigned short port)"
        ],
        "rust": [
          "pub fn download_sound_effect(name: &String, url: &String, port: u16) -> sound_effect"
        ],
        "python": [
          "def download_sound_effect(name, url, port):"
        ],
        "pascal": [
          "function DownloadSoundEffect(const name: String; const url: String; port: Word): SoundEffect"
        ],
        "csharp": [
          "public static SoundEffect SplashKit.DownloadSoundEffect(string name, string url, ushort port);"
        ]
      }
    },
    {
      "signature": "void free_response (http_response response);",
      "name": "free_response",
      "method_name": "free",
      "unique_global_name": "free_response",
      "unique_method_name": "http_response.free",
      "suffix_name": null,
      "description": "Free the response resource.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "response": {
          "type": "http_response",
          "description": "The response to free",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "http_response",
        "destructor": true,
        "method": "free",
        "group": "networking",
        "self": "response"
      },
      "signatures": {
        "cpp": [
          "void free_response(http_response response)"
        ],
        "rust": [
          "pub fn free_response(response: http_response)"
        ],
        "python": [
          "def free_response(response):"
        ],
        "pascal": [
          "procedure FreeResponse(response: HttpResponse)"
        ],
        "csharp": [
          "public void HttpResponse.FreeResponse();",
          "public static void SplashKit.FreeResponse(HttpResponse response);"
        ]
      }
    },
    {
      "signature": "http_response http_get(const string &url,unsigned short port);",
      "name": "http_get",
      "method_name": null,
      "unique_global_name": "http_get",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Make a get request to access a resource on the internet.",
      "brief": null,
      "return": {
        "type": "http_response",
        "description": "The response with all of the data received",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "url": {
          "type": "string",
          "description": "The path to the resource, for example http://splashkit.io",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "port": {
          "type": "unsigned short",
          "description": "The port on the server (80 for http, 443 for https)",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "networking"
      },
      "signatures": {
        "cpp": [
          "http_response http_get(const string &url, unsigned short port)"
        ],
        "rust": [
          "pub fn http_get(url: &String, port: u16) -> http_response"
        ],
        "python": [
          "def http_get(url, port):"
        ],
        "pascal": [
          "function HttpGet(const url: String; port: Word): HttpResponse"
        ],
        "csharp": [
          "public static HttpResponse SplashKit.HttpGet(string url, ushort port);"
        ]
      }
    },
    {
      "signature": "http_response http_post(const string &url,unsigned short port,const string &body,const vector<string> &headers);",
      "name": "http_post",
      "method_name": null,
      "unique_global_name": "http_post_with_headers",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Post the supplied information to the indicated url with the given headers.",
      "brief": null,
      "return": {
        "type": "http_response",
        "description": "The response from the server",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "url": {
          "type": "string",
          "description": "The url of the server to post the data to",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "port": {
          "type": "unsigned short",
          "description": "The port to connect to on the server",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "body": {
          "type": "string",
          "description": "The body of the message to post",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "headers": {
          "type": "vector",
          "description": "The headers of the request",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": true,
          "type_parameter": "string"
        }
      },
      "attributes": {
        "suffix": "with_headers",
        "group": "networking"
      },
      "signatures": {
        "cpp": [
          "http_response http_post(const string &url, unsigned short port, const string &body, const vector<string> &headers)"
        ],
        "rust": [
          "pub fn http_post(url: &String, port: u16, body: &String, headers: &Vec<String>) -> http_response"
        ],
        "python": [
          "def http_post_with_headers(url, port, body, headers):"
        ],
        "pascal": [
          "function HttpPost(const url: String; port: Word; const body: String; const headers: ArrayOfString): HttpResponse"
        ],
        "csharp": [
          "public static HttpResponse SplashKit.HttpPost(string url, ushort port, string body, List<string> headers);"
        ]
      }
    },
    {
      "signature": "http_response http_post(const string &url,unsigned short port,string body);",
      "name": "http_post",
      "method_name": null,
      "unique_global_name": "http_post",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Post the supplied information to the indicated url.",
      "brief": null,
      "return": {
        "type": "http_response",
        "description": "The response from the server",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "url": {
          "type": "string",
          "description": "The url of the server to post the data to",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "port": {
          "type": "unsigned short",
          "description": "The port to connect to on the server",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "body": {
          "type": "string",
          "description": "The body of the message to post",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "networking"
      },
      "signatures": {
        "cpp": [
          "http_response http_post(const string &url, unsigned short port, string body)"
        ],
        "rust": [
          "pub fn http_post(url: &String, port: u16, body: String) -> http_response"
        ],
        "python": [
          "def http_post(url, port, body):"
        ],
        "pascal": [
          "function HttpPost(const url: String; port: Word; body: String): HttpResponse"
        ],
        "csharp": [
          "public static HttpResponse SplashKit.HttpPost(string url, ushort port, string body);"
        ]
      }
    },
    {
      "signature": "string http_response_to_string(http_response response);",
      "name": "http_response_to_string",
      "method_name": null,
      "unique_global_name": "http_response_to_string",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Read the HTTP response and convert it to text",
      "brief": null,
      "return": {
        "type": "string",
        "description": "The data from the response as text",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "response": {
          "type": "http_response",
          "description": "The response from the server",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "networking"
      },
      "signatures": {
        "cpp": [
          "string http_response_to_string(http_response response)"
        ],
        "rust": [
          "pub fn http_response_to_string(response: http_response) -> String"
        ],
        "python": [
          "def http_response_to_string(response):"
        ],
        "pascal": [
          "function HttpResponseToString(response: HttpResponse): String"
        ],
        "csharp": [
          "public static string SplashKit.HttpResponseToString(HttpResponse response);"
        ]
      }
    },
    {
      "signature": "void save_response_to_file(http_response response,string path);",
      "name": "save_response_to_file",
      "method_name": null,
      "unique_global_name": "save_response_to_file",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Save the HTTP response downloaded into a file.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "response": {
          "type": "http_response",
          "description": "The response from the server",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "path": {
          "type": "string",
          "description": "The path to the file where the response should be saved",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "networking"
      },
      "signatures": {
        "cpp": [
          "void save_response_to_file(http_response response, string path)"
        ],
        "rust": [
          "pub fn save_response_to_file(response: http_response, path: String)"
        ],
        "python": [
          "def save_response_to_file(response, path):"
        ],
        "pascal": [
          "procedure SaveResponseToFile(response: HttpResponse; path: String)"
        ],
        "csharp": [
          "public static void SplashKit.SaveResponseToFile(HttpResponse response, string path);"
        ]
      }
    },
    {
      "signature": "bool has_incoming_requests(web_server server);",
      "name": "has_incoming_requests",
      "method_name": null,
      "unique_global_name": "has_incoming_requests",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns true if the given `web_sever` has pending requests.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "Returns a `bool` denoting whether the `web_server` has pending requests.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "server": {
          "type": "web_server",
          "description": "The `web_server` to check for waiting requests.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "web_server",
        "getter": "has_incoming_requests",
        "self": "server",
        "group": "networking",
        "static": "web_server"
      },
      "signatures": {
        "cpp": [
          "bool has_incoming_requests(web_server server)"
        ],
        "rust": [
          "pub fn has_incoming_requests(server: web_server) -> bool"
        ],
        "python": [
          "def has_incoming_requests(server):"
        ],
        "pascal": [
          "function HasIncomingRequests(server: WebServer): Boolean"
        ],
        "csharp": [
          "public bool WebServer.HasIncomingRequests { get }",
          "public static bool SplashKit.HasIncomingRequests(WebServer server);"
        ]
      }
    },
    {
      "signature": "bool is_delete_request_for(http_request request,const string &path);",
      "name": "is_delete_request_for",
      "method_name": "is_delete_request_for",
      "unique_global_name": "is_delete_request_for",
      "unique_method_name": "http_request.is_delete_request_for",
      "suffix_name": null,
      "description": "Checks if a request wants to delete a given resource.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True if the request is a HTTP DELETE request for `path`",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "request": {
          "type": "http_request",
          "description": "The request to check",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "path": {
          "type": "string",
          "description": "The resource/route path",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "http_request",
        "method": "is_delete_request_for",
        "group": "networking",
        "static": "web_server",
        "self": "request"
      },
      "signatures": {
        "cpp": [
          "bool is_delete_request_for(http_request request, const string &path)"
        ],
        "rust": [
          "pub fn is_delete_request_for(request: http_request, path: &String) -> bool"
        ],
        "python": [
          "def is_delete_request_for(request, path):"
        ],
        "pascal": [
          "function IsDeleteRequestFor(request: HttpRequest; const path: String): Boolean"
        ],
        "csharp": [
          "public bool HttpRequest.IsDeleteRequestFor(string path);",
          "public static bool SplashKit.IsDeleteRequestFor(HttpRequest request, string path);"
        ]
      }
    },
    {
      "signature": "bool is_get_request_for(http_request request,const string &path);",
      "name": "is_get_request_for",
      "method_name": "is_get_request_for",
      "unique_global_name": "is_get_request_for",
      "unique_method_name": "http_request.is_get_request_for",
      "suffix_name": null,
      "description": "Checks if a request wants to get a given resource.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True if the request is a HTTP GET request for `path`",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "request": {
          "type": "http_request",
          "description": "The request to check",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "path": {
          "type": "string",
          "description": "The resource/route path",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "http_request",
        "method": "is_get_request_for",
        "group": "networking",
        "static": "web_server",
        "self": "request"
      },
      "signatures": {
        "cpp": [
          "bool is_get_request_for(http_request request, const string &path)"
        ],
        "rust": [
          "pub fn is_get_request_for(request: http_request, path: &String) -> bool"
        ],
        "python": [
          "def is_get_request_for(request, path):"
        ],
        "pascal": [
          "function IsGetRequestFor(request: HttpRequest; const path: String): Boolean"
        ],
        "csharp": [
          "public bool HttpRequest.IsGetRequestFor(string path);",
          "public static bool SplashKit.IsGetRequestFor(HttpRequest request, string path);"
        ]
      }
    },
    {
      "signature": "bool is_options_request_for(http_request request,const string &path);",
      "name": "is_options_request_for",
      "method_name": "is_options_request_for",
      "unique_global_name": "is_options_request_for",
      "unique_method_name": "http_request.is_options_request_for",
      "suffix_name": null,
      "description": "Checks if a request wants to check options for given resource.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True if the request is a HTTP OPTIONS request for `path`",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "request": {
          "type": "http_request",
          "description": "The request to check",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "path": {
          "type": "string",
          "description": "The resource/route path",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "http_request",
        "method": "is_options_request_for",
        "group": "networking",
        "static": "web_server",
        "self": "request"
      },
      "signatures": {
        "cpp": [
          "bool is_options_request_for(http_request request, const string &path)"
        ],
        "rust": [
          "pub fn is_options_request_for(request: http_request, path: &String) -> bool"
        ],
        "python": [
          "def is_options_request_for(request, path):"
        ],
        "pascal": [
          "function IsOptionsRequestFor(request: HttpRequest; const path: String): Boolean"
        ],
        "csharp": [
          "public bool HttpRequest.IsOptionsRequestFor(string path);",
          "public static bool SplashKit.IsOptionsRequestFor(HttpRequest request, string path);"
        ]
      }
    },
    {
      "signature": "bool is_post_request_for(http_request request,const string &path);",
      "name": "is_post_request_for",
      "method_name": "is_post_request_for",
      "unique_global_name": "is_post_request_for",
      "unique_method_name": "http_request.is_post_request_for",
      "suffix_name": null,
      "description": "Checks if a request wants to create (post) a given resource.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True if the request is a HTTP POST request for `path`",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "request": {
          "type": "http_request",
          "description": "The request to check",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "path": {
          "type": "string",
          "description": "The resource/route path",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "http_request",
        "method": "is_post_request_for",
        "group": "networking",
        "static": "web_server",
        "self": "request"
      },
      "signatures": {
        "cpp": [
          "bool is_post_request_for(http_request request, const string &path)"
        ],
        "rust": [
          "pub fn is_post_request_for(request: http_request, path: &String) -> bool"
        ],
        "python": [
          "def is_post_request_for(request, path):"
        ],
        "pascal": [
          "function IsPostRequestFor(request: HttpRequest; const path: String): Boolean"
        ],
        "csharp": [
          "public bool HttpRequest.IsPostRequestFor(string path);",
          "public static bool SplashKit.IsPostRequestFor(HttpRequest request, string path);"
        ]
      }
    },
    {
      "signature": "bool is_put_request_for(http_request request,const string &path);",
      "name": "is_put_request_for",
      "method_name": "is_put_request_for",
      "unique_global_name": "is_put_request_for",
      "unique_method_name": "http_request.is_put_request_for",
      "suffix_name": null,
      "description": "Checks if a request wants to update (put) a given resource.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True if the request is a HTTP PUT request for `path`",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "request": {
          "type": "http_request",
          "description": "The request to check",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "path": {
          "type": "string",
          "description": "The resource/route path",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "http_request",
        "method": "is_put_request_for",
        "group": "networking",
        "static": "web_server",
        "self": "request"
      },
      "signatures": {
        "cpp": [
          "bool is_put_request_for(http_request request, const string &path)"
        ],
        "rust": [
          "pub fn is_put_request_for(request: http_request, path: &String) -> bool"
        ],
        "python": [
          "def is_put_request_for(request, path):"
        ],
        "pascal": [
          "function IsPutRequestFor(request: HttpRequest; const path: String): Boolean"
        ],
        "csharp": [
          "public bool HttpRequest.IsPutRequestFor(string path);",
          "public static bool SplashKit.IsPutRequestFor(HttpRequest request, string path);"
        ]
      }
    },
    {
      "signature": "bool is_request_for(http_request request,http_method method,const string &path);",
      "name": "is_request_for",
      "method_name": "is_request_for",
      "unique_global_name": "is_request_for",
      "unique_method_name": "http_request.is_request_for",
      "suffix_name": null,
      "description": "Checks if a request is after a given resource.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True if the request is for the indicated method and path",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "request": {
          "type": "http_request",
          "description": "The request to check",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "method": {
          "type": "http_method",
          "description": "The kind of request",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "path": {
          "type": "string",
          "description": "The resource/route path",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "http_request",
        "method": "is_request_for",
        "group": "networking",
        "static": "web_server",
        "self": "request"
      },
      "signatures": {
        "cpp": [
          "bool is_request_for(http_request request, http_method method, const string &path)"
        ],
        "rust": [
          "pub fn is_request_for(request: http_request, method: http_method, path: &String) -> bool"
        ],
        "python": [
          "def is_request_for(request, method, path):"
        ],
        "pascal": [
          "function IsRequestFor(request: HttpRequest; method: HttpMethod; const path: String): Boolean"
        ],
        "csharp": [
          "public bool HttpRequest.IsRequestFor(HttpMethod method, string path);",
          "public static bool SplashKit.IsRequestFor(HttpRequest request, HttpMethod method, string path);"
        ]
      }
    },
    {
      "signature": "bool is_trace_request_for(http_request request,const string &path);",
      "name": "is_trace_request_for",
      "method_name": "is_trace_request_for",
      "unique_global_name": "is_trace_request_for",
      "unique_method_name": "http_request.is_trace_request_for",
      "suffix_name": null,
      "description": "Checks if a request wants to trace a given resource.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True if the request is a HTTP TRACE request for `path`",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "request": {
          "type": "http_request",
          "description": "The request to check",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "path": {
          "type": "string",
          "description": "The resource/route path",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "http_request",
        "method": "is_trace_request_for",
        "group": "networking",
        "static": "web_server",
        "self": "request"
      },
      "signatures": {
        "cpp": [
          "bool is_trace_request_for(http_request request, const string &path)"
        ],
        "rust": [
          "pub fn is_trace_request_for(request: http_request, path: &String) -> bool"
        ],
        "python": [
          "def is_trace_request_for(request, path):"
        ],
        "pascal": [
          "function IsTraceRequestFor(request: HttpRequest; const path: String): Boolean"
        ],
        "csharp": [
          "public bool HttpRequest.IsTraceRequestFor(string path);",
          "public static bool SplashKit.IsTraceRequestFor(HttpRequest request, string path);"
        ]
      }
    },
    {
      "signature": "http_request next_web_request(web_server server);",
      "name": "next_web_request",
      "method_name": null,
      "unique_global_name": "next_web_request",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the next request on a given `web_server` instance",
      "brief": null,
      "return": {
        "type": "http_request",
        "description": "Returns the next request on the given `web_server` instance.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "server": {
          "type": "web_server",
          "description": "The `web_server` to get the `http_request` from.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "web_server",
        "getter": "next_web_request",
        "self": "server",
        "group": "networking",
        "static": "web_server"
      },
      "signatures": {
        "cpp": [
          "http_request next_web_request(web_server server)"
        ],
        "rust": [
          "pub fn next_web_request(server: web_server) -> http_request"
        ],
        "python": [
          "def next_web_request(server):"
        ],
        "pascal": [
          "function NextWebRequest(server: WebServer): HttpRequest"
        ],
        "csharp": [
          "public HttpRequest WebServer.NextWebRequest { get }",
          "public static HttpRequest SplashKit.NextWebRequest(WebServer server);"
        ]
      }
    },
    {
      "signature": "string request_body(http_request r);",
      "name": "request_body",
      "method_name": null,
      "unique_global_name": "request_body",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the body of the request.",
      "brief": null,
      "return": {
        "type": "string",
        "description": "The body of the request.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "r": {
          "type": "http_request",
          "description": "A request object.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "http_request",
        "getter": "body",
        "group": "networking",
        "static": "web_server",
        "self": "r"
      },
      "signatures": {
        "cpp": [
          "string request_body(http_request r)"
        ],
        "rust": [
          "pub fn request_body(r: http_request) -> String"
        ],
        "python": [
          "def request_body(r):"
        ],
        "pascal": [
          "function RequestBody(r: HttpRequest): String"
        ],
        "csharp": [
          "public string HttpRequest.Body { get }",
          "public static string SplashKit.RequestBody(HttpRequest r);"
        ]
      }
    },
    {
      "signature": "bool request_has_query_parameter(http_request r,const string &name);",
      "name": "request_has_query_parameter",
      "method_name": "has_query_parameter",
      "unique_global_name": "request_has_query_parameter",
      "unique_method_name": "http_request.has_query_parameter",
      "suffix_name": null,
      "description": "Returns true if the parameter exists in the query string.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True if the parameter exists in the user's request.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "r": {
          "type": "http_request",
          "description": "A request object.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "name": {
          "type": "string",
          "description": "The name of the parameter to check",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "http_request",
        "method": "has_query_parameter",
        "group": "networking",
        "static": "web_server",
        "self": "r"
      },
      "signatures": {
        "cpp": [
          "bool request_has_query_parameter(http_request r, const string &name)"
        ],
        "rust": [
          "pub fn request_has_query_parameter(r: http_request, name: &String) -> bool"
        ],
        "python": [
          "def request_has_query_parameter(r, name):"
        ],
        "pascal": [
          "function RequestHasQueryParameter(r: HttpRequest; const name: String): Boolean"
        ],
        "csharp": [
          "public bool HttpRequest.RequestHasQueryParameter(string name);",
          "public static bool SplashKit.RequestHasQueryParameter(HttpRequest r, string name);"
        ]
      }
    },
    {
      "signature": "vector<string> request_headers(http_request r);",
      "name": "request_headers",
      "method_name": null,
      "unique_global_name": "request_headers",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the headers of the request.",
      "brief": null,
      "return": {
        "type": "vector",
        "description": "The headers of the request.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": true,
        "type_parameter": "string"
      },
      "parameters": {
        "r": {
          "type": "http_request",
          "description": "A request object.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "http_request",
        "getter": "headers",
        "group": "networking",
        "static": "web_server",
        "self": "r"
      },
      "signatures": {
        "cpp": [
          "vector<string> request_headers(http_request r)"
        ],
        "rust": [
          "pub fn request_headers(r: http_request) -> Vec<String>"
        ],
        "python": [
          "def request_headers(r):"
        ],
        "pascal": [
          "function RequestHeaders(r: HttpRequest): ArrayOfString"
        ],
        "csharp": [
          "public List<string> HttpRequest.Headers { get }",
          "public static List<string> SplashKit.RequestHeaders(HttpRequest r);"
        ]
      }
    },
    {
      "signature": "http_method request_method(http_request r);",
      "name": "request_method",
      "method_name": null,
      "unique_global_name": "request_method",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the HTTP method of the client request.",
      "brief": null,
      "return": {
        "type": "http_method",
        "description": "Returns the request method.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "r": {
          "type": "http_request",
          "description": "A request object.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "http_request",
        "getter": "method",
        "group": "networking",
        "static": "web_server",
        "self": "r"
      },
      "signatures": {
        "cpp": [
          "http_method request_method(http_request r)"
        ],
        "rust": [
          "pub fn request_method(r: http_request) -> http_method"
        ],
        "python": [
          "def request_method(r):"
        ],
        "pascal": [
          "function RequestMethod(r: HttpRequest): HttpMethod"
        ],
        "csharp": [
          "public HttpMethod HttpRequest.Method { get }",
          "public static HttpMethod SplashKit.RequestMethod(HttpRequest r);"
        ]
      }
    },
    {
      "signature": "string request_query_parameter(http_request r,const string &name,const string &default_value);",
      "name": "request_query_parameter",
      "method_name": "query_parameter",
      "unique_global_name": "request_query_parameter",
      "unique_method_name": "http_request.query_parameter",
      "suffix_name": null,
      "description": "Returns the value of a parameter from within the query string, or the supplied default\nif no matching parameter is found.",
      "brief": null,
      "return": {
        "type": "string",
        "description": "Returns value of the parameter from the query string, or the default value if the parameter is not found.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "r": {
          "type": "http_request",
          "description": "A request object.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "name": {
          "type": "string",
          "description": "The name of the parameter to fetch",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "default_value": {
          "type": "string",
          "description": "The value to return if the named parameter is not in the query string.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "http_request",
        "method": "query_parameter",
        "group": "networking",
        "static": "web_server",
        "self": "r"
      },
      "signatures": {
        "cpp": [
          "string request_query_parameter(http_request r, const string &name, const string &default_value)"
        ],
        "rust": [
          "pub fn request_query_parameter(r: http_request, name: &String, default_value: &String) -> String"
        ],
        "python": [
          "def request_query_parameter(r, name, default_value):"
        ],
        "pascal": [
          "function RequestQueryParameter(r: HttpRequest; const name: String; const defaultValue: String): String"
        ],
        "csharp": [
          "public string HttpRequest.RequestQueryParameter(string name, string defaultValue);",
          "public static string SplashKit.RequestQueryParameter(HttpRequest r, string name, string defaultValue);"
        ]
      }
    },
    {
      "signature": "string request_query_string(http_request r);",
      "name": "request_query_string",
      "method_name": null,
      "unique_global_name": "request_query_string",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the URI query string of the client request.",
      "brief": null,
      "return": {
        "type": "string",
        "description": "Returns the requested URI queries in the form of a string.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "r": {
          "type": "http_request",
          "description": "A request object.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "http_request",
        "getter": "query_string",
        "group": "networking",
        "static": "web_server",
        "self": "r"
      },
      "signatures": {
        "cpp": [
          "string request_query_string(http_request r)"
        ],
        "rust": [
          "pub fn request_query_string(r: http_request) -> String"
        ],
        "python": [
          "def request_query_string(r):"
        ],
        "pascal": [
          "function RequestQueryString(r: HttpRequest): String"
        ],
        "csharp": [
          "public string HttpRequest.QueryString { get }",
          "public static string SplashKit.RequestQueryString(HttpRequest r);"
        ]
      }
    },
    {
      "signature": "string request_uri(http_request r);",
      "name": "request_uri",
      "method_name": null,
      "unique_global_name": "request_uri",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the server URI of the client request.",
      "brief": null,
      "return": {
        "type": "string",
        "description": "Returns the requested URI in the form of a string.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "r": {
          "type": "http_request",
          "description": "A request object.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "http_request",
        "getter": "uri",
        "group": "networking",
        "static": "web_server",
        "self": "r"
      },
      "signatures": {
        "cpp": [
          "string request_uri(http_request r)"
        ],
        "rust": [
          "pub fn request_uri(r: http_request) -> String"
        ],
        "python": [
          "def request_uri(r):"
        ],
        "pascal": [
          "function RequestURI(r: HttpRequest): String"
        ],
        "csharp": [
          "public string HttpRequest.URI { get }",
          "public static string SplashKit.RequestURI(HttpRequest r);"
        ]
      }
    },
    {
      "signature": "vector<string> request_uri_stubs(http_request r);",
      "name": "request_uri_stubs",
      "method_name": null,
      "unique_global_name": "request_uri_stubs",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns an array of strings representing each stub of the URI.\n\nFor example a request sent to http://localhost:8080/names/0 returns...\n\n[\"names\", \"0\"]",
      "brief": null,
      "return": {
        "type": "vector",
        "description": "The array of stubs as strings.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": true,
        "type_parameter": "string"
      },
      "parameters": {
        "r": {
          "type": "http_request",
          "description": "The request for retrieving URI to split into stubs.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "http_request",
        "getter": "uri_stubs",
        "group": "networking",
        "static": "web_server",
        "self": "r"
      },
      "signatures": {
        "cpp": [
          "vector<string> request_uri_stubs(http_request r)"
        ],
        "rust": [
          "pub fn request_uri_stubs(r: http_request) -> Vec<String>"
        ],
        "python": [
          "def request_uri_stubs(r):"
        ],
        "pascal": [
          "function RequestURIStubs(r: HttpRequest): ArrayOfString"
        ],
        "csharp": [
          "public List<string> HttpRequest.URIStubs { get }",
          "public static List<string> SplashKit.RequestURIStubs(HttpRequest r);"
        ]
      }
    },
    {
      "signature": "void send_css_file_response(http_request r,const string &filename);",
      "name": "send_css_file_response",
      "method_name": "send_css_file_response",
      "unique_global_name": "send_css_file_response",
      "unique_method_name": "http_request.send_css_file_response",
      "suffix_name": null,
      "description": "Serves a css file to the given `http_request`.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "r": {
          "type": "http_request",
          "description": "The request which is asking for the resource.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "filename": {
          "type": "string",
          "description": "The name of the file in Resources/server",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "http_request",
        "method": "send_css_file_response",
        "group": "networking",
        "static": "web_server",
        "self": "r"
      },
      "signatures": {
        "cpp": [
          "void send_css_file_response(http_request r, const string &filename)"
        ],
        "rust": [
          "pub fn send_css_file_response(r: http_request, filename: &String)"
        ],
        "python": [
          "def send_css_file_response(r, filename):"
        ],
        "pascal": [
          "procedure SendCSSFileResponse(r: HttpRequest; const filename: String)"
        ],
        "csharp": [
          "public void HttpRequest.SendCSSFileResponse(string filename);",
          "public static void SplashKit.SendCSSFileResponse(HttpRequest r, string filename);"
        ]
      }
    },
    {
      "signature": "void send_file_response(http_request r,const string &filename,const string &content_type);",
      "name": "send_file_response",
      "method_name": "send_file_response",
      "unique_global_name": "send_file_response",
      "unique_method_name": "http_request.send_file_response",
      "suffix_name": null,
      "description": "Serves a file to the given `http_request`.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "r": {
          "type": "http_request",
          "description": "The request which is asking for the resource.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "filename": {
          "type": "string",
          "description": "The name of the file in Resources/server",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "content_type": {
          "type": "string",
          "description": "The type of content being send:",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "http_request",
        "method": "send_file_response",
        "group": "networking",
        "static": "web_server",
        "self": "r"
      },
      "signatures": {
        "cpp": [
          "void send_file_response(http_request r, const string &filename, const string &content_type)"
        ],
        "rust": [
          "pub fn send_file_response(r: http_request, filename: &String, content_type: &String)"
        ],
        "python": [
          "def send_file_response(r, filename, content_type):"
        ],
        "pascal": [
          "procedure SendFileResponse(r: HttpRequest; const filename: String; const contentType: String)"
        ],
        "csharp": [
          "public void HttpRequest.SendFileResponse(string filename, string contentType);",
          "public static void SplashKit.SendFileResponse(HttpRequest r, string filename, string contentType);"
        ]
      }
    },
    {
      "signature": "void send_html_file_response(http_request r,const string &filename);",
      "name": "send_html_file_response",
      "method_name": "send_html_file_response",
      "unique_global_name": "send_html_file_response",
      "unique_method_name": "http_request.send_html_file_response",
      "suffix_name": null,
      "description": "Serves a HTML file to the given `http_request`.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "r": {
          "type": "http_request",
          "description": "The request which is asking for the resource.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "filename": {
          "type": "string",
          "description": "The name of the file in Resources/server",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "http_request",
        "method": "send_html_file_response",
        "group": "networking",
        "static": "web_server",
        "self": "r"
      },
      "signatures": {
        "cpp": [
          "void send_html_file_response(http_request r, const string &filename)"
        ],
        "rust": [
          "pub fn send_html_file_response(r: http_request, filename: &String)"
        ],
        "python": [
          "def send_html_file_response(r, filename):"
        ],
        "pascal": [
          "procedure SendHtmlFileResponse(r: HttpRequest; const filename: String)"
        ],
        "csharp": [
          "public void HttpRequest.SendHtmlFileResponse(string filename);",
          "public static void SplashKit.SendHtmlFileResponse(HttpRequest r, string filename);"
        ]
      }
    },
    {
      "signature": "void send_javascript_file_response(http_request r,const string &filename);",
      "name": "send_javascript_file_response",
      "method_name": "send_javascript_file_response",
      "unique_global_name": "send_javascript_file_response",
      "unique_method_name": "http_request.send_javascript_file_response",
      "suffix_name": null,
      "description": "Serves a javascript file to the given `http_request`.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "r": {
          "type": "http_request",
          "description": "The request which is asking for the resource.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "filename": {
          "type": "string",
          "description": "The name of the file in Resources/server",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "http_request",
        "method": "send_javascript_file_response",
        "group": "networking",
        "static": "web_server",
        "self": "r"
      },
      "signatures": {
        "cpp": [
          "void send_javascript_file_response(http_request r, const string &filename)"
        ],
        "rust": [
          "pub fn send_javascript_file_response(r: http_request, filename: &String)"
        ],
        "python": [
          "def send_javascript_file_response(r, filename):"
        ],
        "pascal": [
          "procedure SendJavascriptFileResponse(r: HttpRequest; const filename: String)"
        ],
        "csharp": [
          "public void HttpRequest.SendJavascriptFileResponse(string filename);",
          "public static void SplashKit.SendJavascriptFileResponse(HttpRequest r, string filename);"
        ]
      }
    },
    {
      "signature": "void send_response(http_request r);",
      "name": "send_response",
      "method_name": "send_response",
      "unique_global_name": "send_response_empty",
      "unique_method_name": "http_request.send_response_empty",
      "suffix_name": null,
      "description": "Sends a response with no content to a `http_request`.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "r": {
          "type": "http_request",
          "description": "The `http_request` to send the response to",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "http_request",
        "method": "send_response",
        "self": "r",
        "suffix": "empty",
        "group": "networking",
        "static": "web_server"
      },
      "signatures": {
        "cpp": [
          "void send_response(http_request r)"
        ],
        "rust": [
          "pub fn send_response(r: http_request)"
        ],
        "python": [
          "def send_response_empty(r):"
        ],
        "pascal": [
          "procedure SendResponse(r: HttpRequest)"
        ],
        "csharp": [
          "public void HttpRequest.SendResponse();",
          "public static void SplashKit.SendResponse(HttpRequest r);"
        ]
      }
    },
    {
      "signature": "void send_response(http_request r,const string &message);",
      "name": "send_response",
      "method_name": "send_response",
      "unique_global_name": "send_response",
      "unique_method_name": "http_request.send_response",
      "suffix_name": null,
      "description": "Sends a message to a given `http_request`.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "r": {
          "type": "http_request",
          "description": "The request to be sent.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "message": {
          "type": "string",
          "description": "The message to be sent",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "http_request",
        "method": "send_response",
        "group": "networking",
        "static": "web_server",
        "self": "r"
      },
      "signatures": {
        "cpp": [
          "void send_response(http_request r, const string &message)"
        ],
        "rust": [
          "pub fn send_response(r: http_request, message: &String)"
        ],
        "python": [
          "def send_response(r, message):"
        ],
        "pascal": [
          "procedure SendResponse(r: HttpRequest; const message: String)"
        ],
        "csharp": [
          "public void HttpRequest.SendResponse(string message);",
          "public static void SplashKit.SendResponse(HttpRequest r, string message);"
        ]
      }
    },
    {
      "signature": "void send_response(http_request r,http_status_code code);",
      "name": "send_response",
      "method_name": "send_response",
      "unique_global_name": "send_response_json_with_status",
      "unique_method_name": "http_request.send_response_json_with_status",
      "suffix_name": null,
      "description": "Sends a response code to a given `http_request`.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "r": {
          "type": "http_request",
          "description": "The `http_request` to send the response to",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "code": {
          "type": "http_status_code",
          "description": "The [HTTP status code](See https://en.wikipedia.org/wiki/List_of_HTTP_status_codes) to be sent.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "http_request",
        "method": "send_response",
        "self": "r",
        "suffix": "json_with_status",
        "group": "networking",
        "static": "web_server"
      },
      "signatures": {
        "cpp": [
          "void send_response(http_request r, http_status_code code)"
        ],
        "rust": [
          "pub fn send_response(r: http_request, code: http_status_code)"
        ],
        "python": [
          "def send_response_json_with_status(r, code):"
        ],
        "pascal": [
          "procedure SendResponse(r: HttpRequest; code: HttpStatusCode)"
        ],
        "csharp": [
          "public void HttpRequest.SendResponse(HttpStatusCode code);",
          "public static void SplashKit.SendResponse(HttpRequest r, HttpStatusCode code);"
        ]
      }
    },
    {
      "signature": "void send_response(http_request r,http_status_code code,const string &message);",
      "name": "send_response",
      "method_name": "send_response",
      "unique_global_name": "send_response_with_status",
      "unique_method_name": "http_request.send_response_with_status",
      "suffix_name": null,
      "description": "Sends a message to a given `http_request` with the specified content type.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "r": {
          "type": "http_request",
          "description": "The `http_request` to send the response to",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "code": {
          "type": "http_status_code",
          "description": "The [HTTP status code](See https://en.wikipedia.org/wiki/List_of_HTTP_status_codes) to be sent.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "message": {
          "type": "string",
          "description": "The messsage, in the form of a `http_response`, to be sent.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "http_request",
        "method": "send_response",
        "self": "r",
        "suffix": "with_status",
        "group": "networking",
        "static": "web_server"
      },
      "signatures": {
        "cpp": [
          "void send_response(http_request r, http_status_code code, const string &message)"
        ],
        "rust": [
          "pub fn send_response(r: http_request, code: http_status_code, message: &String)"
        ],
        "python": [
          "def send_response_with_status(r, code, message):"
        ],
        "pascal": [
          "procedure SendResponse(r: HttpRequest; code: HttpStatusCode; const message: String)"
        ],
        "csharp": [
          "public void HttpRequest.SendResponse(HttpStatusCode code, string message);",
          "public static void SplashKit.SendResponse(HttpRequest r, HttpStatusCode code, string message);"
        ]
      }
    },
    {
      "signature": "void send_response(http_request r,http_status_code code,const string &message,const string &content_type);",
      "name": "send_response",
      "method_name": "send_response",
      "unique_global_name": "send_response_with_status_and_content_type",
      "unique_method_name": "http_request.send_response_with_status_and_content_type",
      "suffix_name": null,
      "description": "Sends a message to a given `http_request` with the specified content type.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "r": {
          "type": "http_request",
          "description": "The `http_request` to send the response to",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "code": {
          "type": "http_status_code",
          "description": "The [HTTP status code](See https://en.wikipedia.org/wiki/List_of_HTTP_status_codes) to be sent.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "message": {
          "type": "string",
          "description": "The messsage, in the form of a `http_response`, to be sent.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "content_type": {
          "type": "string",
          "description": "The content type of the response.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "http_request",
        "method": "send_response",
        "self": "r",
        "suffix": "with_status_and_content_type",
        "group": "networking",
        "static": "web_server"
      },
      "signatures": {
        "cpp": [
          "void send_response(http_request r, http_status_code code, const string &message, const string &content_type)"
        ],
        "rust": [
          "pub fn send_response(r: http_request, code: http_status_code, message: &String, content_type: &String)"
        ],
        "python": [
          "def send_response_with_status_and_content_type(r, code, message, content_type):"
        ],
        "pascal": [
          "procedure SendResponse(r: HttpRequest; code: HttpStatusCode; const message: String; const contentType: String)"
        ],
        "csharp": [
          "public void HttpRequest.SendResponse(HttpStatusCode code, string message, string contentType);",
          "public static void SplashKit.SendResponse(HttpRequest r, HttpStatusCode code, string message, string contentType);"
        ]
      }
    },
    {
      "signature": "void send_response(http_request r,http_status_code code,const string &message,const string &content_type,const vector<string> &headers);",
      "name": "send_response",
      "method_name": "send_response",
      "unique_global_name": "send_response_with_status_and_content_type_and_headers",
      "unique_method_name": "http_request.send_response_with_status_and_content_type_and_headers",
      "suffix_name": null,
      "description": "Sends a message to a given `http_request` with the specified content type.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "r": {
          "type": "http_request",
          "description": "The `http_request` to send the response to",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "code": {
          "type": "http_status_code",
          "description": "The [HTTP status code](See https://en.wikipedia.org/wiki/List_of_HTTP_status_codes) to be sent.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "message": {
          "type": "string",
          "description": "The messsage, in the form of a `http_response`, to be sent.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "content_type": {
          "type": "string",
          "description": "The content type of the response.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "headers": {
          "type": "vector",
          "description": "The response headers",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": true,
          "type_parameter": "string"
        }
      },
      "attributes": {
        "class": "http_request",
        "method": "send_response",
        "self": "r",
        "suffix": "with_status_and_content_type_and_headers",
        "group": "networking",
        "static": "web_server"
      },
      "signatures": {
        "cpp": [
          "void send_response(http_request r, http_status_code code, const string &message, const string &content_type, const vector<string> &headers)"
        ],
        "rust": [
          "pub fn send_response(r: http_request, code: http_status_code, message: &String, content_type: &String, headers: &Vec<String>)"
        ],
        "python": [
          "def send_response_with_status_and_content_type_and_headers(r, code, message, content_type, headers):"
        ],
        "pascal": [
          "procedure SendResponse(r: HttpRequest; code: HttpStatusCode; const message: String; const contentType: String; const headers: ArrayOfString)"
        ],
        "csharp": [
          "public void HttpRequest.SendResponse(HttpStatusCode code, string message, string contentType, List<string> headers);",
          "public static void SplashKit.SendResponse(HttpRequest r, HttpStatusCode code, string message, string contentType, List<string> headers);"
        ]
      }
    },
    {
      "signature": "void send_response(http_request r,json j);",
      "name": "send_response",
      "method_name": "send_response",
      "unique_global_name": "send_response_json",
      "unique_method_name": "http_request.send_response_json",
      "suffix_name": null,
      "description": "Send a JSON response to a given `http_request`",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "r": {
          "type": "http_request",
          "description": "The request the response belongs to.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "j": {
          "type": "json",
          "description": "The json to be sent.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "http_request",
        "method": "send_response",
        "suffix": "json",
        "group": "networking",
        "static": "web_server",
        "self": "r"
      },
      "signatures": {
        "cpp": [
          "void send_response(http_request r, json j)"
        ],
        "rust": [
          "pub fn send_response(r: http_request, j: json)"
        ],
        "python": [
          "def send_response_json(r, j):"
        ],
        "pascal": [
          "procedure SendResponse(r: HttpRequest; j: Json)"
        ],
        "csharp": [
          "public void HttpRequest.SendResponse(Json j);",
          "public static void SplashKit.SendResponse(HttpRequest r, Json j);"
        ]
      }
    },
    {
      "signature": "vector<string> split_uri_stubs(const string &uri);",
      "name": "split_uri_stubs",
      "method_name": null,
      "unique_global_name": "split_uri_stubs",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns an array of strings representing each stub of the URI.\n\nFor example a request sent to http://localhost:8080/names/0 returns...\n\n[\"names\", \"0\"]",
      "brief": null,
      "return": {
        "type": "vector",
        "description": "The array of stubs as strings.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": true,
        "type_parameter": "string"
      },
      "parameters": {
        "uri": {
          "type": "string",
          "description": "The URI to split into stubs.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "networking",
        "static": "web_server"
      },
      "signatures": {
        "cpp": [
          "vector<string> split_uri_stubs(const string &uri)"
        ],
        "rust": [
          "pub fn split_uri_stubs(uri: &String) -> Vec<String>"
        ],
        "python": [
          "def split_uri_stubs(uri):"
        ],
        "pascal": [
          "function SplitURIStubs(const uri: String): ArrayOfString"
        ],
        "csharp": [
          "public static List<string> WebServer.SplitURIStubs(string uri);",
          "public static List<string> SplashKit.SplitURIStubs(string uri);"
        ]
      }
    },
    {
      "signature": "web_server start_web_server();",
      "name": "start_web_server",
      "method_name": null,
      "unique_global_name": "start_web_server_with_default_port",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Creates a new web server listening for connections on port 8080.",
      "brief": null,
      "return": {
        "type": "web_server",
        "description": "Returns a new `web_sever` instance.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "class": "web_server",
        "constructor": true,
        "suffix": "with_default_port",
        "group": "networking",
        "static": "web_server"
      },
      "signatures": {
        "cpp": [
          "web_server start_web_server()"
        ],
        "rust": [
          "pub fn start_web_server() -> web_server"
        ],
        "python": [
          "def start_web_server_with_default_port():"
        ],
        "pascal": [
          "function StartWebServer(): WebServer"
        ],
        "csharp": [
          "public static WebServer SplashKit.StartWebServer();",
          "public WebServer();"
        ]
      }
    },
    {
      "signature": "web_server start_web_server(unsigned short port);",
      "name": "start_web_server",
      "method_name": null,
      "unique_global_name": "start_web_server",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Starts the web server on a given port number.",
      "brief": null,
      "return": {
        "type": "web_server",
        "description": "Returns a new `web_server` instance.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "port": {
          "type": "unsigned short",
          "description": "The port number to connect through.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "web_server",
        "constructor": true,
        "group": "networking",
        "static": "web_server"
      },
      "signatures": {
        "cpp": [
          "web_server start_web_server(unsigned short port)"
        ],
        "rust": [
          "pub fn start_web_server(port: u16) -> web_server"
        ],
        "python": [
          "def start_web_server(port):"
        ],
        "pascal": [
          "function StartWebServer(port: Word): WebServer"
        ],
        "csharp": [
          "public static WebServer SplashKit.StartWebServer(ushort port);",
          "public WebServer(ushort port);"
        ]
      }
    },
    {
      "signature": "void stop_web_server(web_server server);",
      "name": "stop_web_server",
      "method_name": "stop",
      "unique_global_name": "stop_web_server",
      "unique_method_name": "web_server.stop",
      "suffix_name": null,
      "description": "Stops a given `web_server` instance.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "server": {
          "type": "web_server",
          "description": "The server instance to stop.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "web_server",
        "destructor": true,
        "method": "stop",
        "self": "server",
        "group": "networking",
        "static": "web_server"
      },
      "signatures": {
        "cpp": [
          "void stop_web_server(web_server server)"
        ],
        "rust": [
          "pub fn stop_web_server(server: web_server)"
        ],
        "python": [
          "def stop_web_server(server):"
        ],
        "pascal": [
          "procedure StopWebServer(server: WebServer)"
        ],
        "csharp": [
          "public void WebServer.StopWebServer();",
          "public static void SplashKit.StopWebServer(WebServer server);"
        ]
      }
    }
  ]
}