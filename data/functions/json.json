{
  "functions": [
    {
      "signature": "json create_json();",
      "name": "create_json",
      "method_name": null,
      "unique_global_name": "create_json",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "The empty `json` object returned can be filled with data and read by the\nfunctions and procedures prefixed with `json_add_` and `json_read_`",
      "brief": "Creates an empty `json` object.",
      "return": {
        "type": "json",
        "description": "Returns an empty `json` object.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "class": "json",
        "constructor": true,
        "group": "json",
        "static": "json"
      },
      "signatures": {
        "cpp": [
          "json create_json()"
        ],
        "rust": [
          "pub fn create_json() -> json"
        ],
        "python": [
          "def create_json():"
        ],
        "pascal": [
          "function CreateJson(): Json"
        ],
        "csharp": [
          "public static Json SplashKit.CreateJson();",
          "public Json();"
        ]
      }
    },
    {
      "signature": "json create_json(string json_string);",
      "name": "create_json",
      "method_name": null,
      "unique_global_name": "create_json_from_string",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "`string json_string` must be valid JSON.\nThe `json` object returned can be filled with data and read by the functions\nand procedures prefixed with `json_add_` and `json_read_`",
      "brief": "Creates a `json` object filled with JSON fields from `json_string`.",
      "return": {
        "type": "json",
        "description": "Returns a `json` object filled with data from the parameter `string`.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "json_string": {
          "type": "string",
          "description": "The JSON formatted `string` to be converted to a `json` object.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "json",
        "constructor": true,
        "suffix": "from_string",
        "group": "json",
        "static": "json"
      },
      "signatures": {
        "cpp": [
          "json create_json(string json_string)"
        ],
        "rust": [
          "pub fn create_json(json_string: String) -> json"
        ],
        "python": [
          "def create_json_from_string(json_string):"
        ],
        "pascal": [
          "function CreateJson(jsonString: String): Json"
        ],
        "csharp": [
          "public static Json SplashKit.CreateJson(string jsonString);",
          "public Json(string jsonString);"
        ]
      }
    },
    {
      "signature": "void free_all_json();",
      "name": "free_all_json",
      "method_name": "free_all",
      "unique_global_name": "free_all_json",
      "unique_method_name": ".free_all",
      "suffix_name": null,
      "description": "Releases all of the `json` objects which have been loaded.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "method": "free_all",
        "static": "json",
        "group": "json"
      },
      "signatures": {
        "cpp": [
          "void free_all_json()"
        ],
        "rust": [
          "pub fn free_all_json()"
        ],
        "python": [
          "def free_all_json():"
        ],
        "pascal": [
          "procedure FreeAllJson()"
        ],
        "csharp": [
          "public static void Json.FreeAllJson();",
          "public static void SplashKit.FreeAllJson();"
        ]
      }
    },
    {
      "signature": "void free_json(json j);",
      "name": "free_json",
      "method_name": null,
      "unique_global_name": "free_json",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Frees the SplashKit resources associated with the `json` object.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "j": {
          "type": "json",
          "description": "The `json` object whose resources should be released.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "json",
        "destructor": true,
        "self": "j",
        "group": "json",
        "static": "json"
      },
      "signatures": {
        "cpp": [
          "void free_json(json j)"
        ],
        "rust": [
          "pub fn free_json(j: json)"
        ],
        "python": [
          "def free_json(j):"
        ],
        "pascal": [
          "procedure FreeJson(j: Json)"
        ],
        "csharp": [
          "public void Json.FreeJson();",
          "public static void SplashKit.FreeJson(Json j);"
        ]
      }
    },
    {
      "signature": "int json_count_keys(json j);",
      "name": "json_count_keys",
      "method_name": "count_keys",
      "unique_global_name": "json_count_keys",
      "unique_method_name": "json.count_keys",
      "suffix_name": null,
      "description": "Returns the count of keys in the top-level `json` object.",
      "brief": null,
      "return": {
        "type": "int",
        "description": "The count of keys in the top-level `json` object.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "j": {
          "type": "json",
          "description": "The `json` object to count keys.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "json",
        "method": "count_keys",
        "self": "j",
        "group": "json",
        "static": "json"
      },
      "signatures": {
        "cpp": [
          "int json_count_keys(json j)"
        ],
        "rust": [
          "pub fn json_count_keys(j: json) -> i32"
        ],
        "python": [
          "def json_count_keys(j):"
        ],
        "pascal": [
          "function JsonCountKeys(j: Json): Integer"
        ],
        "csharp": [
          "public int Json.JsonCountKeys();",
          "public static int SplashKit.JsonCountKeys(Json j);"
        ]
      }
    },
    {
      "signature": "json json_from_color(color clr);",
      "name": "json_from_color",
      "method_name": null,
      "unique_global_name": "json_from_color",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Converts a `color` to a `json` object.",
      "brief": null,
      "return": {
        "type": "json",
        "description": "The `color` serialized into a `json` object.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "clr": {
          "type": "color",
          "description": "The `color` to convert to `json`.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "json",
        "static": "json"
      },
      "signatures": {
        "cpp": [
          "json json_from_color(color clr)"
        ],
        "rust": [
          "pub fn json_from_color(clr: color) -> json"
        ],
        "python": [
          "def json_from_color(clr):"
        ],
        "pascal": [
          "function JsonFromColor(clr: Color): Json"
        ],
        "csharp": [
          "public static Json Json.JsonFromColor(Color clr);",
          "public static Json SplashKit.JsonFromColor(Color clr);"
        ]
      }
    },
    {
      "signature": "json json_from_file(const string& filename);",
      "name": "json_from_file",
      "method_name": "from_file",
      "unique_global_name": "json_from_file",
      "unique_method_name": ".from_file",
      "suffix_name": null,
      "description": "Reads a `json` object from a JSON string stored in `Resources/json/filename`\nand loads the data into the returned `json` object.",
      "brief": null,
      "return": {
        "type": "json",
        "description": "Returns the `json` object loaded from the JSON file in `filename`.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "filename": {
          "type": "string",
          "description": "The filename of the file to be written to `Resources/json/`.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "method": "from_file",
        "static": "json",
        "group": "json"
      },
      "signatures": {
        "cpp": [
          "json json_from_file(const string &filename)"
        ],
        "rust": [
          "pub fn json_from_file(filename: &String) -> json"
        ],
        "python": [
          "def json_from_file(filename):"
        ],
        "pascal": [
          "function JsonFromFile(const filename: String): Json"
        ],
        "csharp": [
          "public static Json Json.JsonFromFile(string filename);",
          "public static Json SplashKit.JsonFromFile(string filename);"
        ]
      }
    },
    {
      "signature": "json json_from_string(const string &j_string);",
      "name": "json_from_string",
      "method_name": "from_json_string",
      "unique_global_name": "json_from_string",
      "unique_method_name": ".from_json_string",
      "suffix_name": null,
      "description": "Reads a `json` object from a `string` in the JSON format.",
      "brief": null,
      "return": {
        "type": "json",
        "description": "Returns a `json` object loaded with data from `string j_string`.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "j_string": {
          "type": "string",
          "description": "A `string` in the JSON format.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "method": "from_json_string",
        "static": "json",
        "group": "json"
      },
      "signatures": {
        "cpp": [
          "json json_from_string(const string &j_string)"
        ],
        "rust": [
          "pub fn json_from_string(j_string: &String) -> json"
        ],
        "python": [
          "def json_from_string(j_string):"
        ],
        "pascal": [
          "function JsonFromString(const jString: String): Json"
        ],
        "csharp": [
          "public static Json Json.JsonFromString(string jString);",
          "public static Json SplashKit.JsonFromString(string jString);"
        ]
      }
    },
    {
      "signature": "bool json_has_key(json j,string key);",
      "name": "json_has_key",
      "method_name": "has_key",
      "unique_global_name": "json_has_key",
      "unique_method_name": "json.has_key",
      "suffix_name": null,
      "description": "Checks if the `json` object contains the given `string` key.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "Returns `true` if the `json j` object contains a key for `string` key.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "j": {
          "type": "json",
          "description": "The `json` object to check for the given key.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "key": {
          "type": "string",
          "description": "The `string` key to be checked.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "json",
        "method": "has_key",
        "self": "j",
        "group": "json",
        "static": "json"
      },
      "signatures": {
        "cpp": [
          "bool json_has_key(json j, string key)"
        ],
        "rust": [
          "pub fn json_has_key(j: json, key: String) -> bool"
        ],
        "python": [
          "def json_has_key(j, key):"
        ],
        "pascal": [
          "function JsonHasKey(j: Json; key: String): Boolean"
        ],
        "csharp": [
          "public bool Json.JsonHasKey(string key);",
          "public static bool SplashKit.JsonHasKey(Json j, string key);"
        ]
      }
    },
    {
      "signature": "void json_read_array(json j,string key,vector<double> &out_result);",
      "name": "json_read_array",
      "method_name": "read_array",
      "unique_global_name": "json_read_array_of_double",
      "unique_method_name": "json.read_array_of_double",
      "suffix_name": null,
      "description": "Reads an array of `double` values from the `json` object for\nthe given `string` key.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "j": {
          "type": "json",
          "description": "The `json` object from which data will be returned for the given key.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "key": {
          "type": "string",
          "description": "The `string` key used to find data in the `json` object.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "out_result": {
          "type": "vector",
          "description": "The array which will be filled with the data stored for `string` key.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": true,
          "type_parameter": "double"
        }
      },
      "attributes": {
        "class": "json",
        "method": "read_array",
        "self": "j",
        "suffix": "of_double",
        "group": "json",
        "static": "json"
      },
      "signatures": {
        "cpp": [
          "void json_read_array(json j, string key, vector<double> &out_result)"
        ],
        "rust": [
          "pub fn json_read_array(j: json, key: String, out_result: &mut Vec<f64>)"
        ],
        "python": [
          "def json_read_array_of_double(j, key, out_result):"
        ],
        "pascal": [
          "procedure JsonReadArray(j: Json; key: String; var outResult: ArrayOfDouble)"
        ],
        "csharp": [
          "public void Json.JsonReadArray(string key, ref List<double> outResult);",
          "public static void SplashKit.JsonReadArray(Json j, string key, ref List<double> outResult);"
        ]
      }
    },
    {
      "signature": "void json_read_array(json j,string key,vector<json> &out_result);",
      "name": "json_read_array",
      "method_name": "read_array",
      "unique_global_name": "json_read_array_of_json",
      "unique_method_name": "json.read_array_of_json",
      "suffix_name": null,
      "description": "Reads an array of `json` object values from the `json` object for\nthe given `string` key.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "j": {
          "type": "json",
          "description": "The `json` object from which data will be returned for the given key.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "key": {
          "type": "string",
          "description": "The `string` key used to find data in the `json` object.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "out_result": {
          "type": "vector",
          "description": "The array which will be filled with the data stored for `string` key.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": true,
          "type_parameter": "json"
        }
      },
      "attributes": {
        "class": "json",
        "method": "read_array",
        "self": "j",
        "suffix": "of_json",
        "group": "json",
        "static": "json"
      },
      "signatures": {
        "cpp": [
          "void json_read_array(json j, string key, vector<json> &out_result)"
        ],
        "rust": [
          "pub fn json_read_array(j: json, key: String, out_result: &mut Vec<json>)"
        ],
        "python": [
          "def json_read_array_of_json(j, key, out_result):"
        ],
        "pascal": [
          "procedure JsonReadArray(j: Json; key: String; var outResult: ArrayOfJson)"
        ],
        "csharp": [
          "public void Json.JsonReadArray(string key, ref List<Json> outResult);",
          "public static void SplashKit.JsonReadArray(Json j, string key, ref List<Json> outResult);"
        ]
      }
    },
    {
      "signature": "void json_read_array(json j,string key,vector<string> &out_result);",
      "name": "json_read_array",
      "method_name": "read_array",
      "unique_global_name": "json_read_array_of_string",
      "unique_method_name": "json.read_array_of_string",
      "suffix_name": null,
      "description": "Reads an array of `string` values from the `json` object for\nthe given `string` key.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "j": {
          "type": "json",
          "description": "The `json` object from which data will be returned for the given key.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "key": {
          "type": "string",
          "description": "The `string` key used to find data in the `json` object.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "out_result": {
          "type": "vector",
          "description": "The array which will be filled with the data stored for `string` key.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": true,
          "type_parameter": "string"
        }
      },
      "attributes": {
        "class": "json",
        "method": "read_array",
        "self": "j",
        "suffix": "of_string",
        "group": "json",
        "static": "json"
      },
      "signatures": {
        "cpp": [
          "void json_read_array(json j, string key, vector<string> &out_result)"
        ],
        "rust": [
          "pub fn json_read_array(j: json, key: String, out_result: &mut Vec<String>)"
        ],
        "python": [
          "def json_read_array_of_string(j, key, out_result):"
        ],
        "pascal": [
          "procedure JsonReadArray(j: Json; key: String; var outResult: ArrayOfString)"
        ],
        "csharp": [
          "public void Json.JsonReadArray(string key, ref List<string> outResult);",
          "public static void SplashKit.JsonReadArray(Json j, string key, ref List<string> outResult);"
        ]
      }
    },
    {
      "signature": "void json_read_array(json j,string key,vector<bool> &out_result);",
      "name": "json_read_array",
      "method_name": "read_array",
      "unique_global_name": "json_read_array_of_bool",
      "unique_method_name": "json.read_array_of_bool",
      "suffix_name": null,
      "description": "Reads an array of `bool` values from the `json` object for\nthe given `string` key.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "j": {
          "type": "json",
          "description": "The `json` object from which data will be returned for the given key.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "key": {
          "type": "string",
          "description": "The `string` key used to find data in the `json` object.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "out_result": {
          "type": "vector",
          "description": "The array which will be filled with the data stored for `string` key.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": true,
          "type_parameter": "bool"
        }
      },
      "attributes": {
        "class": "json",
        "method": "read_array",
        "self": "j",
        "suffix": "of_bool",
        "group": "json",
        "static": "json"
      },
      "signatures": {
        "cpp": [
          "void json_read_array(json j, string key, vector<bool> &out_result)"
        ],
        "rust": [
          "pub fn json_read_array(j: json, key: String, out_result: &mut Vec<bool>)"
        ],
        "python": [
          "def json_read_array_of_bool(j, key, out_result):"
        ],
        "pascal": [
          "procedure JsonReadArray(j: Json; key: String; var outResult: ArrayOfBoolean)"
        ],
        "csharp": [
          "public void Json.JsonReadArray(string key, ref List<bool> outResult);",
          "public static void SplashKit.JsonReadArray(Json j, string key, ref List<bool> outResult);"
        ]
      }
    },
    {
      "signature": "bool json_read_bool(json j,string key);",
      "name": "json_read_bool",
      "method_name": "read_bool",
      "unique_global_name": "json_read_bool",
      "unique_method_name": "json.read_bool",
      "suffix_name": null,
      "description": "Reads a `bool` value from the `json` object for the given `string` key.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "Returns the `bool` value stored at the `string` key.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "j": {
          "type": "json",
          "description": "The `json` object from which data will be returned for the given key.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "key": {
          "type": "string",
          "description": "The `string` key used to find data in the `json` object.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "json",
        "method": "read_bool",
        "self": "j",
        "group": "json",
        "static": "json"
      },
      "signatures": {
        "cpp": [
          "bool json_read_bool(json j, string key)"
        ],
        "rust": [
          "pub fn json_read_bool(j: json, key: String) -> bool"
        ],
        "python": [
          "def json_read_bool(j, key):"
        ],
        "pascal": [
          "function JsonReadBool(j: Json; key: String): Boolean"
        ],
        "csharp": [
          "public bool Json.JsonReadBool(string key);",
          "public static bool SplashKit.JsonReadBool(Json j, string key);"
        ]
      }
    },
    {
      "signature": "float json_read_number(json j,string key);",
      "name": "json_read_number",
      "method_name": "read_number",
      "unique_global_name": "json_read_number",
      "unique_method_name": "json.read_number",
      "suffix_name": null,
      "description": "Reads a `float` value from the `json` object for the given `string` key.",
      "brief": null,
      "return": {
        "type": "float",
        "description": "Returns the `float` value stored at the `string` key.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "j": {
          "type": "json",
          "description": "The `json` object from which data will be returned for the given key.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "key": {
          "type": "string",
          "description": "The `string` key used to find data in the `json` object.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "json",
        "method": "read_number",
        "self": "j",
        "group": "json",
        "static": "json"
      },
      "signatures": {
        "cpp": [
          "float json_read_number(json j, string key)"
        ],
        "rust": [
          "pub fn json_read_number(j: json, key: String) -> f32"
        ],
        "python": [
          "def json_read_number(j, key):"
        ],
        "pascal": [
          "function JsonReadNumber(j: Json; key: String): Single"
        ],
        "csharp": [
          "public float Json.JsonReadNumber(string key);",
          "public static float SplashKit.JsonReadNumber(Json j, string key);"
        ]
      }
    },
    {
      "signature": "double json_read_number_as_double(json j,string key);",
      "name": "json_read_number_as_double",
      "method_name": "read_double",
      "unique_global_name": "json_read_number_as_double",
      "unique_method_name": "json.read_double",
      "suffix_name": null,
      "description": "Reads a `double` value from the `json` object for the given `string` key.",
      "brief": null,
      "return": {
        "type": "double",
        "description": "Returns the `double` value stored at the `string` key.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "j": {
          "type": "json",
          "description": "The `json` object from which data will be returned for the given key.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "key": {
          "type": "string",
          "description": "The `string` key used to find data in the `json` object.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "json",
        "method": "read_double",
        "self": "j",
        "group": "json",
        "static": "json"
      },
      "signatures": {
        "cpp": [
          "double json_read_number_as_double(json j, string key)"
        ],
        "rust": [
          "pub fn json_read_number_as_double(j: json, key: String) -> f64"
        ],
        "python": [
          "def json_read_number_as_double(j, key):"
        ],
        "pascal": [
          "function JsonReadNumberAsDouble(j: Json; key: String): Double"
        ],
        "csharp": [
          "public double Json.JsonReadNumberAsDouble(string key);",
          "public static double SplashKit.JsonReadNumberAsDouble(Json j, string key);"
        ]
      }
    },
    {
      "signature": "int json_read_number_as_int(json j,string key);",
      "name": "json_read_number_as_int",
      "method_name": "read_integer",
      "unique_global_name": "json_read_number_as_int",
      "unique_method_name": "json.read_integer",
      "suffix_name": null,
      "description": "Reads a `integer` value from the `json` object for the given `string` key.",
      "brief": null,
      "return": {
        "type": "int",
        "description": "Returns the `integer` value stored at the `string` key.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "j": {
          "type": "json",
          "description": "The `json` object from which data will be returned for the given key.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "key": {
          "type": "string",
          "description": "The `string` key used to find data in the `json` object.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "json",
        "method": "read_integer",
        "self": "j",
        "group": "json",
        "static": "json"
      },
      "signatures": {
        "cpp": [
          "int json_read_number_as_int(json j, string key)"
        ],
        "rust": [
          "pub fn json_read_number_as_int(j: json, key: String) -> i32"
        ],
        "python": [
          "def json_read_number_as_int(j, key):"
        ],
        "pascal": [
          "function JsonReadNumberAsInt(j: Json; key: String): Integer"
        ],
        "csharp": [
          "public int Json.JsonReadNumberAsInt(string key);",
          "public static int SplashKit.JsonReadNumberAsInt(Json j, string key);"
        ]
      }
    },
    {
      "signature": "json json_read_object(json j,string key);",
      "name": "json_read_object",
      "method_name": "read_object",
      "unique_global_name": "json_read_object",
      "unique_method_name": "json.read_object",
      "suffix_name": null,
      "description": "Reads a `json` object value from the `json` object for the given `string` key.",
      "brief": null,
      "return": {
        "type": "json",
        "description": "Returns the `json` object value stored at the `string` key.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "j": {
          "type": "json",
          "description": "The `json` object from which data will be returned for the given key.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "key": {
          "type": "string",
          "description": "The `string` key used to find data in the `json` object.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "json",
        "method": "read_object",
        "self": "j",
        "group": "json",
        "static": "json"
      },
      "signatures": {
        "cpp": [
          "json json_read_object(json j, string key)"
        ],
        "rust": [
          "pub fn json_read_object(j: json, key: String) -> json"
        ],
        "python": [
          "def json_read_object(j, key):"
        ],
        "pascal": [
          "function JsonReadObject(j: Json; key: String): Json"
        ],
        "csharp": [
          "public Json Json.JsonReadObject(string key);",
          "public static Json SplashKit.JsonReadObject(Json j, string key);"
        ]
      }
    },
    {
      "signature": "string json_read_string(json j,string key);",
      "name": "json_read_string",
      "method_name": "read_string",
      "unique_global_name": "json_read_string",
      "unique_method_name": "json.read_string",
      "suffix_name": null,
      "description": "Reads a `string` value from the `json` object for the given `string` key.",
      "brief": null,
      "return": {
        "type": "string",
        "description": "Returns the `string` value stored at the `string` key.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "j": {
          "type": "json",
          "description": "The `json` object from which data will be returned for the given key.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "key": {
          "type": "string",
          "description": "The `string` key used to find data in the `json` object.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "json",
        "method": "read_string",
        "self": "j",
        "group": "json",
        "static": "json"
      },
      "signatures": {
        "cpp": [
          "string json_read_string(json j, string key)"
        ],
        "rust": [
          "pub fn json_read_string(j: json, key: String) -> String"
        ],
        "python": [
          "def json_read_string(j, key):"
        ],
        "pascal": [
          "function JsonReadString(j: Json; key: String): String"
        ],
        "csharp": [
          "public string Json.JsonReadString(string key);",
          "public static string SplashKit.JsonReadString(Json j, string key);"
        ]
      }
    },
    {
      "signature": "void json_set_array(json j,string key,vector<string> value);",
      "name": "json_set_array",
      "method_name": "add_array",
      "unique_global_name": "json_set_array_of_string",
      "unique_method_name": "json.add_array_of_string",
      "suffix_name": null,
      "description": "Adds an array of `string` values to the `json` object for\nthe given `string` key.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "j": {
          "type": "json",
          "description": "The `json` object where data will be inserted for the given key.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "key": {
          "type": "string",
          "description": "The `string` key where data will be stored in the `json` object.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "value": {
          "type": "vector",
          "description": "The value to be inserted into the `json` object.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": true,
          "type_parameter": "string"
        }
      },
      "attributes": {
        "class": "json",
        "method": "add_array",
        "self": "j",
        "suffix": "of_string",
        "group": "json",
        "static": "json"
      },
      "signatures": {
        "cpp": [
          "void json_set_array(json j, string key, vector<string> value)"
        ],
        "rust": [
          "pub fn json_set_array(j: json, key: String, value: Vec<String>)"
        ],
        "python": [
          "def json_set_array_of_string(j, key, value):"
        ],
        "pascal": [
          "procedure JsonSetArray(j: Json; key: String; value: ArrayOfString)"
        ],
        "csharp": [
          "public void Json.JsonSetArray(string key, List<string> value);",
          "public static void SplashKit.JsonSetArray(Json j, string key, List<string> value);"
        ]
      }
    },
    {
      "signature": "void json_set_array(json j,string key,vector<double> value);",
      "name": "json_set_array",
      "method_name": "add_array",
      "unique_global_name": "json_set_array_of_double",
      "unique_method_name": "json.add_array_of_double",
      "suffix_name": null,
      "description": "Adds an array of `double` values to the `json` object for\nthe given `string` key.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "j": {
          "type": "json",
          "description": "The `json` object where data will be inserted for the given key.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "key": {
          "type": "string",
          "description": "The `string` key where data will be stored in the `json` object.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "value": {
          "type": "vector",
          "description": "The value to be inserted into the `json` object.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": true,
          "type_parameter": "double"
        }
      },
      "attributes": {
        "class": "json",
        "method": "add_array",
        "self": "j",
        "suffix": "of_double",
        "group": "json",
        "static": "json"
      },
      "signatures": {
        "cpp": [
          "void json_set_array(json j, string key, vector<double> value)"
        ],
        "rust": [
          "pub fn json_set_array(j: json, key: String, value: Vec<f64>)"
        ],
        "python": [
          "def json_set_array_of_double(j, key, value):"
        ],
        "pascal": [
          "procedure JsonSetArray(j: Json; key: String; value: ArrayOfDouble)"
        ],
        "csharp": [
          "public void Json.JsonSetArray(string key, List<double> value);",
          "public static void SplashKit.JsonSetArray(Json j, string key, List<double> value);"
        ]
      }
    },
    {
      "signature": "void json_set_array(json j,string key,vector<bool> value);",
      "name": "json_set_array",
      "method_name": "add_array",
      "unique_global_name": "json_set_array_of_bool",
      "unique_method_name": "json.add_array_of_bool",
      "suffix_name": null,
      "description": "Adds an array of `bool` values to the `json` object for\nthe given `string` key.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "j": {
          "type": "json",
          "description": "The `json` object where data will be inserted for the given key.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "key": {
          "type": "string",
          "description": "The `string` key where data will be stored in the `json` object.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "value": {
          "type": "vector",
          "description": "The value to be inserted into the `json` object.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": true,
          "type_parameter": "bool"
        }
      },
      "attributes": {
        "class": "json",
        "method": "add_array",
        "self": "j",
        "suffix": "of_bool",
        "group": "json",
        "static": "json"
      },
      "signatures": {
        "cpp": [
          "void json_set_array(json j, string key, vector<bool> value)"
        ],
        "rust": [
          "pub fn json_set_array(j: json, key: String, value: Vec<bool>)"
        ],
        "python": [
          "def json_set_array_of_bool(j, key, value):"
        ],
        "pascal": [
          "procedure JsonSetArray(j: Json; key: String; value: ArrayOfBoolean)"
        ],
        "csharp": [
          "public void Json.JsonSetArray(string key, List<bool> value);",
          "public static void SplashKit.JsonSetArray(Json j, string key, List<bool> value);"
        ]
      }
    },
    {
      "signature": "void json_set_array(json j,string key,vector<json> value);",
      "name": "json_set_array",
      "method_name": "add_array",
      "unique_global_name": "json_set_array_of_json",
      "unique_method_name": "json.add_array_of_json",
      "suffix_name": null,
      "description": "Adds an array of `json` object values to the `json` object for\nthe given `string` key.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "j": {
          "type": "json",
          "description": "The `json` object where data will be inserted for the given key.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "key": {
          "type": "string",
          "description": "The `string` key where data will be stored in the `json` object.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "value": {
          "type": "vector",
          "description": "The value to be inserted into the `json` object.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": true,
          "type_parameter": "json"
        }
      },
      "attributes": {
        "class": "json",
        "method": "add_array",
        "self": "j",
        "suffix": "of_json",
        "group": "json",
        "static": "json"
      },
      "signatures": {
        "cpp": [
          "void json_set_array(json j, string key, vector<json> value)"
        ],
        "rust": [
          "pub fn json_set_array(j: json, key: String, value: Vec<json>)"
        ],
        "python": [
          "def json_set_array_of_json(j, key, value):"
        ],
        "pascal": [
          "procedure JsonSetArray(j: Json; key: String; value: ArrayOfJson)"
        ],
        "csharp": [
          "public void Json.JsonSetArray(string key, List<Json> value);",
          "public static void SplashKit.JsonSetArray(Json j, string key, List<Json> value);"
        ]
      }
    },
    {
      "signature": "void json_set_bool(json j,string key,bool value);",
      "name": "json_set_bool",
      "method_name": "add_bool",
      "unique_global_name": "json_set_bool",
      "unique_method_name": "json.add_bool",
      "suffix_name": null,
      "description": "Adds a `bool` value to the `json` object for the given `string` key.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "j": {
          "type": "json",
          "description": "The `json` object where data will be inserted for the given key.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "key": {
          "type": "string",
          "description": "The `string` key where data will be stored in the `json` object.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "value": {
          "type": "bool",
          "description": "The value to be inserted into the `json` object.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "json",
        "method": "add_bool",
        "self": "j",
        "group": "json",
        "static": "json"
      },
      "signatures": {
        "cpp": [
          "void json_set_bool(json j, string key, bool value)"
        ],
        "rust": [
          "pub fn json_set_bool(j: json, key: String, value: bool)"
        ],
        "python": [
          "def json_set_bool(j, key, value):"
        ],
        "pascal": [
          "procedure JsonSetBool(j: Json; key: String; value: Boolean)"
        ],
        "csharp": [
          "public void Json.JsonSetBool(string key, bool value);",
          "public static void SplashKit.JsonSetBool(Json j, string key, bool value);"
        ]
      }
    },
    {
      "signature": "void json_set_number(json j,string key,int value);",
      "name": "json_set_number",
      "method_name": "add_number",
      "unique_global_name": "json_set_number_integer",
      "unique_method_name": "json.add_number_integer",
      "suffix_name": null,
      "description": "Adds an `int` value to the `json` object for the given `string` key.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "j": {
          "type": "json",
          "description": "The `json` object where data will be inserted for the given key.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "key": {
          "type": "string",
          "description": "The `string` key where data will be stored in the `json` object.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "value": {
          "type": "int",
          "description": "The value to be inserted into the `json` object.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "json",
        "method": "add_number",
        "self": "j",
        "suffix": "integer",
        "group": "json",
        "static": "json"
      },
      "signatures": {
        "cpp": [
          "void json_set_number(json j, string key, int value)"
        ],
        "rust": [
          "pub fn json_set_number(j: json, key: String, value: i32)"
        ],
        "python": [
          "def json_set_number_integer(j, key, value):"
        ],
        "pascal": [
          "procedure JsonSetNumber(j: Json; key: String; value: Integer)"
        ],
        "csharp": [
          "public void Json.JsonSetNumber(string key, int value);",
          "public static void SplashKit.JsonSetNumber(Json j, string key, int value);"
        ]
      }
    },
    {
      "signature": "void json_set_number(json j,string key,double value);",
      "name": "json_set_number",
      "method_name": "add_number",
      "unique_global_name": "json_set_number_double",
      "unique_method_name": "json.add_number_double",
      "suffix_name": null,
      "description": "Adds a `double` value to the `json` object for the given `string` key.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "j": {
          "type": "json",
          "description": "The `json` object where data will be inserted for the given key.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "key": {
          "type": "string",
          "description": "The `string` key where data will be stored in the `json` object.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "value": {
          "type": "double",
          "description": "The value to be inserted into the `json` object.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "json",
        "method": "add_number",
        "self": "j",
        "suffix": "double",
        "group": "json",
        "static": "json"
      },
      "signatures": {
        "cpp": [
          "void json_set_number(json j, string key, double value)"
        ],
        "rust": [
          "pub fn json_set_number(j: json, key: String, value: f64)"
        ],
        "python": [
          "def json_set_number_double(j, key, value):"
        ],
        "pascal": [
          "procedure JsonSetNumber(j: Json; key: String; value: Double)"
        ],
        "csharp": [
          "public void Json.JsonSetNumber(string key, double value);",
          "public static void SplashKit.JsonSetNumber(Json j, string key, double value);"
        ]
      }
    },
    {
      "signature": "void json_set_number(json j,string key,float value);",
      "name": "json_set_number",
      "method_name": "add_number",
      "unique_global_name": "json_set_number_float",
      "unique_method_name": "json.add_number_float",
      "suffix_name": null,
      "description": "Adds a `float` value to the `json` object for the given `string` key.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "j": {
          "type": "json",
          "description": "The `json` object where data will be inserted for the given key.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "key": {
          "type": "string",
          "description": "The `string` key where data will be stored in the `json` object.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "value": {
          "type": "float",
          "description": "The value to be inserted into the `json` object.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "json",
        "method": "add_number",
        "self": "j",
        "suffix": "float",
        "group": "json",
        "static": "json"
      },
      "signatures": {
        "cpp": [
          "void json_set_number(json j, string key, float value)"
        ],
        "rust": [
          "pub fn json_set_number(j: json, key: String, value: f32)"
        ],
        "python": [
          "def json_set_number_float(j, key, value):"
        ],
        "pascal": [
          "procedure JsonSetNumber(j: Json; key: String; value: Single)"
        ],
        "csharp": [
          "public void Json.JsonSetNumber(string key, float value);",
          "public static void SplashKit.JsonSetNumber(Json j, string key, float value);"
        ]
      }
    },
    {
      "signature": "void json_set_object(json j,string key,json obj);",
      "name": "json_set_object",
      "method_name": "add_object",
      "unique_global_name": "json_set_object",
      "unique_method_name": "json.add_object",
      "suffix_name": null,
      "description": "Adds a `json` object to the `json` object for the given `string` key.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "j": {
          "type": "json",
          "description": "The `json` object where data will be inserted for the given key.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "key": {
          "type": "string",
          "description": "The `string` key where data will be stored in the `json` object.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "obj": {
          "type": "json",
          "description": "The value to be inserted into the `json` object.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "json",
        "method": "add_object",
        "self": "j",
        "group": "json",
        "static": "json"
      },
      "signatures": {
        "cpp": [
          "void json_set_object(json j, string key, json obj)"
        ],
        "rust": [
          "pub fn json_set_object(j: json, key: String, obj: json)"
        ],
        "python": [
          "def json_set_object(j, key, obj):"
        ],
        "pascal": [
          "procedure JsonSetObject(j: Json; key: String; obj: Json)"
        ],
        "csharp": [
          "public void Json.JsonSetObject(string key, Json obj);",
          "public static void SplashKit.JsonSetObject(Json j, string key, Json obj);"
        ]
      }
    },
    {
      "signature": "void json_set_string(json j,string key,string value);",
      "name": "json_set_string",
      "method_name": "add_string",
      "unique_global_name": "json_set_string",
      "unique_method_name": "json.add_string",
      "suffix_name": null,
      "description": "Adds a `string` value to the `json` object for the given `string` key.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "j": {
          "type": "json",
          "description": "The `json` object where data will be inserted for the given key.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "key": {
          "type": "string",
          "description": "The `string` key where data will be stored in the `json` object.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "value": {
          "type": "string",
          "description": "The value to be inserted into the `json` object.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "json",
        "method": "add_string",
        "self": "j",
        "group": "json",
        "static": "json"
      },
      "signatures": {
        "cpp": [
          "void json_set_string(json j, string key, string value)"
        ],
        "rust": [
          "pub fn json_set_string(j: json, key: String, value: String)"
        ],
        "python": [
          "def json_set_string(j, key, value):"
        ],
        "pascal": [
          "procedure JsonSetString(j: Json; key: String; value: String)"
        ],
        "csharp": [
          "public void Json.JsonSetString(string key, string value);",
          "public static void SplashKit.JsonSetString(Json j, string key, string value);"
        ]
      }
    },
    {
      "signature": "color json_to_color(json j);",
      "name": "json_to_color",
      "method_name": null,
      "unique_global_name": "json_to_color",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Converts a `json` object to a `color` object.",
      "brief": null,
      "return": {
        "type": "color",
        "description": "The `color` deserialized from the `json` object.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "j": {
          "type": "json",
          "description": "The `json` to convert to a `color`.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "json",
        "static": "json"
      },
      "signatures": {
        "cpp": [
          "color json_to_color(json j)"
        ],
        "rust": [
          "pub fn json_to_color(j: json) -> color"
        ],
        "python": [
          "def json_to_color(j):"
        ],
        "pascal": [
          "function JsonToColor(j: Json): Color"
        ],
        "csharp": [
          "public static Color Json.JsonToColor(Json j);",
          "public static Color SplashKit.JsonToColor(Json j);"
        ]
      }
    },
    {
      "signature": "void json_to_file(json j,const string& filename);",
      "name": "json_to_file",
      "method_name": "to_file",
      "unique_global_name": "json_to_file",
      "unique_method_name": ".to_file",
      "suffix_name": null,
      "description": "Writes the `json` object to a JSON string stored in `Resources/json/filename`.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "j": {
          "type": "json",
          "description": "The `json` object to be written to file.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "filename": {
          "type": "string",
          "description": "The filename of the file to be stored in `Resources/json/`",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "method": "to_file",
        "static": "json",
        "group": "json"
      },
      "signatures": {
        "cpp": [
          "void json_to_file(json j, const string &filename)"
        ],
        "rust": [
          "pub fn json_to_file(j: json, filename: &String)"
        ],
        "python": [
          "def json_to_file(j, filename):"
        ],
        "pascal": [
          "procedure JsonToFile(j: Json; const filename: String)"
        ],
        "csharp": [
          "public static void Json.JsonToFile(Json j, string filename);",
          "public static void SplashKit.JsonToFile(Json j, string filename);"
        ]
      }
    },
    {
      "signature": "string json_to_string(json j);",
      "name": "json_to_string",
      "method_name": "to_json_string",
      "unique_global_name": "json_to_string",
      "unique_method_name": ".to_json_string",
      "suffix_name": null,
      "description": "Converts and returns the `json` object as a `string`.",
      "brief": null,
      "return": {
        "type": "string",
        "description": "Returns the `json` object as a `string`.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "j": {
          "type": "json",
          "description": "The `json` object to be converted to a `string`.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "method": "to_json_string",
        "static": "json",
        "group": "json"
      },
      "signatures": {
        "cpp": [
          "string json_to_string(json j)"
        ],
        "rust": [
          "pub fn json_to_string(j: json) -> String"
        ],
        "python": [
          "def json_to_string(j):"
        ],
        "pascal": [
          "function JsonToString(j: Json): String"
        ],
        "csharp": [
          "public static string Json.JsonToString(Json j);",
          "public static string SplashKit.JsonToString(Json j);"
        ]
      }
    }
  ]
}