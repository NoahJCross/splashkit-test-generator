{
  "functions": [
    {
      "signature": "bool contains(const string &text,const string &subtext);",
      "name": "contains",
      "method_name": null,
      "unique_global_name": "contains",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns true if the string contains the substring.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True if the substring is found in the text.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "text": {
          "type": "string",
          "description": "The text to search",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "subtext": {
          "type": "string",
          "description": "The substring to search for",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "utilities",
        "static": "utilities"
      },
      "signatures": {
        "cpp": [
          "bool contains(const string &text, const string &subtext)"
        ],
        "rust": [
          "pub fn contains(text: &String, subtext: &String) -> bool"
        ],
        "python": [
          "def contains(text, subtext):"
        ],
        "pascal": [
          "function Contains(const text: String; const subtext: String): Boolean"
        ],
        "csharp": [
          "public static bool Utilities.Contains(string text, string subtext);",
          "public static bool SplashKit.Contains(string text, string subtext);"
        ]
      }
    },
    {
      "signature": "double convert_to_double(const string &text);",
      "name": "convert_to_double",
      "method_name": null,
      "unique_global_name": "convert_to_double",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Convert the passed in string into a double. This can fail in an error if\nthe value is not a number, consider using `is_number` to check before\nconverting a string.",
      "brief": null,
      "return": {
        "type": "double",
        "description": "The double value read from the text.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "text": {
          "type": "string",
          "description": "The text to convert.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "utilities",
        "static": "utilities"
      },
      "signatures": {
        "cpp": [
          "double convert_to_double(const string &text)"
        ],
        "rust": [
          "pub fn convert_to_double(text: &String) -> f64"
        ],
        "python": [
          "def convert_to_double(text):"
        ],
        "pascal": [
          "function ConvertToDouble(const text: String): Double"
        ],
        "csharp": [
          "public static double Utilities.ConvertToDouble(string text);",
          "public static double SplashKit.ConvertToDouble(string text);"
        ]
      }
    },
    {
      "signature": "int convert_to_integer(const string &text);",
      "name": "convert_to_integer",
      "method_name": null,
      "unique_global_name": "convert_to_integer",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Convert the passed in string into an integer. This can fail in an error if\nthe value is not an integer, consider using `is_integer` to check before\nconverting a string.",
      "brief": null,
      "return": {
        "type": "int",
        "description": "The integer value read from the text.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "text": {
          "type": "string",
          "description": "The text to convert.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "utilities",
        "static": "utilities"
      },
      "signatures": {
        "cpp": [
          "int convert_to_integer(const string &text)"
        ],
        "rust": [
          "pub fn convert_to_integer(text: &String) -> i32"
        ],
        "python": [
          "def convert_to_integer(text):"
        ],
        "pascal": [
          "function ConvertToInteger(const text: String): Integer"
        ],
        "csharp": [
          "public static int Utilities.ConvertToInteger(string text);",
          "public static int SplashKit.ConvertToInteger(string text);"
        ]
      }
    },
    {
      "signature": "int index_of(const string &text,const string &subtext);",
      "name": "index_of",
      "method_name": null,
      "unique_global_name": "index_of",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the index of the first occurrence of the substring in the text.",
      "brief": null,
      "return": {
        "type": "int",
        "description": "The index of the first occurrence of the substring in the text, or -1 if the substring is not found.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "text": {
          "type": "string",
          "description": "The text to search",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "subtext": {
          "type": "string",
          "description": "The substring to search for",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "utilities",
        "static": "utilities"
      },
      "signatures": {
        "cpp": [
          "int index_of(const string &text, const string &subtext)"
        ],
        "rust": [
          "pub fn index_of(text: &String, subtext: &String) -> i32"
        ],
        "python": [
          "def index_of(text, subtext):"
        ],
        "pascal": [
          "function IndexOf(const text: String; const subtext: String): Integer"
        ],
        "csharp": [
          "public static int Utilities.IndexOf(string text, string subtext);",
          "public static int SplashKit.IndexOf(string text, string subtext);"
        ]
      }
    },
    {
      "signature": "bool is_double(const string &text);",
      "name": "is_double",
      "method_name": null,
      "unique_global_name": "is_double",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Checks if a string contains a number.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True if the text contains a number (and only a number).",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "text": {
          "type": "string",
          "description": "The text to check.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "utilities",
        "static": "utilities"
      },
      "signatures": {
        "cpp": [
          "bool is_double(const string &text)"
        ],
        "rust": [
          "pub fn is_double(text: &String) -> bool"
        ],
        "python": [
          "def is_double(text):"
        ],
        "pascal": [
          "function IsDouble(const text: String): Boolean"
        ],
        "csharp": [
          "public static bool Utilities.IsDouble(string text);",
          "public static bool SplashKit.IsDouble(string text);"
        ]
      }
    },
    {
      "signature": "bool is_integer(const string &text);",
      "name": "is_integer",
      "method_name": null,
      "unique_global_name": "is_integer",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Checks if a string contains an integer value.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True if the text contains a whole number (and only a whole\nnumber).",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "text": {
          "type": "string",
          "description": "The text to check.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "utilities",
        "static": "utilities"
      },
      "signatures": {
        "cpp": [
          "bool is_integer(const string &text)"
        ],
        "rust": [
          "pub fn is_integer(text: &String) -> bool"
        ],
        "python": [
          "def is_integer(text):"
        ],
        "pascal": [
          "function IsInteger(const text: String): Boolean"
        ],
        "csharp": [
          "public static bool Utilities.IsInteger(string text);",
          "public static bool SplashKit.IsInteger(string text);"
        ]
      }
    },
    {
      "signature": "bool is_number(const string &text);",
      "name": "is_number",
      "method_name": null,
      "unique_global_name": "is_number",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Checks if a string contains a number.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True if the text contains a number (and only a number).",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "text": {
          "type": "string",
          "description": "The text to check.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "utilities",
        "static": "utilities"
      },
      "signatures": {
        "cpp": [
          "bool is_number(const string &text)"
        ],
        "rust": [
          "pub fn is_number(text: &String) -> bool"
        ],
        "python": [
          "def is_number(text):"
        ],
        "pascal": [
          "function IsNumber(const text: String): Boolean"
        ],
        "csharp": [
          "public static bool Utilities.IsNumber(string text);",
          "public static bool SplashKit.IsNumber(string text);"
        ]
      }
    },
    {
      "signature": "int length_of(const string &text);",
      "name": "length_of",
      "method_name": null,
      "unique_global_name": "length_of",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the length of a string in characters.",
      "brief": null,
      "return": {
        "type": "int",
        "description": "The number of characters in the string.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "text": {
          "type": "string",
          "description": "The text to get the length of",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "utilities",
        "static": "utilities"
      },
      "signatures": {
        "cpp": [
          "int length_of(const string &text)"
        ],
        "rust": [
          "pub fn length_of(text: &String) -> i32"
        ],
        "python": [
          "def length_of(text):"
        ],
        "pascal": [
          "function LengthOf(const text: String): Integer"
        ],
        "csharp": [
          "public static int Utilities.LengthOf(string text);",
          "public static int SplashKit.LengthOf(string text);"
        ]
      }
    },
    {
      "signature": "string replace_all(const string &text,const string &substr,const string &newText);",
      "name": "replace_all",
      "method_name": null,
      "unique_global_name": "replace_all",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Replace all occurrences of a substring in a string with another string.",
      "brief": null,
      "return": {
        "type": "string",
        "description": "The text with all occurrences of the substring replaced with the new text.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "text": {
          "type": "string",
          "description": "The text to search",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "substr": {
          "type": "string",
          "description": "The substring to find and replace",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "newText": {
          "type": "string",
          "description": "The string to replace the substring with",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "utilities",
        "static": "utilities"
      },
      "signatures": {
        "cpp": [
          "string replace_all(const string &text, const string &substr, const string &newText)"
        ],
        "rust": [
          "pub fn replace_all(text: &String, substr: &String, newtext: &String) -> String"
        ],
        "python": [
          "def replace_all(text, substr, newText):"
        ],
        "pascal": [
          "function ReplaceAll(const text: String; const substr: String; const newtext: String): String"
        ],
        "csharp": [
          "public static string Utilities.ReplaceAll(string text, string substr, string newtext);",
          "public static string SplashKit.ReplaceAll(string text, string substr, string newtext);"
        ]
      }
    },
    {
      "signature": "vector<string> split(const string &text,char delimiter);",
      "name": "split",
      "method_name": null,
      "unique_global_name": "split",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Split a string into an array of strings based on a delimiter.",
      "brief": null,
      "return": {
        "type": "vector",
        "description": "An array of strings",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": true,
        "type_parameter": "string"
      },
      "parameters": {
        "text": {
          "type": "string",
          "description": "The text to split",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "delimiter": {
          "type": "char",
          "description": "The character to split the text on",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "utilities",
        "static": "utilities"
      },
      "signatures": {
        "cpp": [
          "vector<string> split(const string &text, char delimiter)"
        ],
        "rust": [
          "pub fn split(text: &String, delimiter: c_char) -> Vec<String>"
        ],
        "python": [
          "def split(text, delimiter):"
        ],
        "pascal": [
          "function Split(const text: String; delimiter: Char): ArrayOfString"
        ],
        "csharp": [
          "public static List<string> Utilities.Split(string text, char delimiter);",
          "public static List<string> SplashKit.Split(string text, char delimiter);"
        ]
      }
    },
    {
      "signature": "string to_lowercase(const string &text);",
      "name": "to_lowercase",
      "method_name": null,
      "unique_global_name": "to_lowercase",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Return a lowercase version of the passed in string.",
      "brief": null,
      "return": {
        "type": "string",
        "description": "A lower case version of the passed in text.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "text": {
          "type": "string",
          "description": "The text to convert.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "utilities",
        "static": "utilities"
      },
      "signatures": {
        "cpp": [
          "string to_lowercase(const string &text)"
        ],
        "rust": [
          "pub fn to_lowercase(text: &String) -> String"
        ],
        "python": [
          "def to_lowercase(text):"
        ],
        "pascal": [
          "function ToLowercase(const text: String): String"
        ],
        "csharp": [
          "public static string Utilities.ToLowercase(string text);",
          "public static string SplashKit.ToLowercase(string text);"
        ]
      }
    },
    {
      "signature": "string to_uppercase(const string &text);",
      "name": "to_uppercase",
      "method_name": null,
      "unique_global_name": "to_uppercase",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Return a UPPERCASE version of the passed in string.",
      "brief": null,
      "return": {
        "type": "string",
        "description": "An upper case version of the passed in text.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "text": {
          "type": "string",
          "description": "The text to convert.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "utilities",
        "static": "utilities"
      },
      "signatures": {
        "cpp": [
          "string to_uppercase(const string &text)"
        ],
        "rust": [
          "pub fn to_uppercase(text: &String) -> String"
        ],
        "python": [
          "def to_uppercase(text):"
        ],
        "pascal": [
          "function ToUppercase(const text: String): String"
        ],
        "csharp": [
          "public static string Utilities.ToUppercase(string text);",
          "public static string SplashKit.ToUppercase(string text);"
        ]
      }
    },
    {
      "signature": "string trim(const string &text);",
      "name": "trim",
      "method_name": null,
      "unique_global_name": "trim",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Return a new string that removes the spaces from the start and end of\nthe input string.",
      "brief": null,
      "return": {
        "type": "string",
        "description": "A new string with the contents of `text`, after removing spaces\nfrom the start and end.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "text": {
          "type": "string",
          "description": "The string to trim.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "utilities",
        "static": "utilities"
      },
      "signatures": {
        "cpp": [
          "string trim(const string &text)"
        ],
        "rust": [
          "pub fn trim(text: &String) -> String"
        ],
        "python": [
          "def trim(text):"
        ],
        "pascal": [
          "function Trim(const text: String): String"
        ],
        "csharp": [
          "public static string Utilities.Trim(string text);",
          "public static string SplashKit.Trim(string text);"
        ]
      }
    },
    {
      "signature": "int rnd(int min,int max);",
      "name": "rnd",
      "method_name": null,
      "unique_global_name": "rnd_range",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Generates a random number between 'min' and `max`, including 'min' and 'max'.",
      "brief": null,
      "return": {
        "type": "int",
        "description": "Returns an `int` between and including `min` and `max`",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "min": {
          "type": "int",
          "description": "the `int` representing of minimum bound.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "max": {
          "type": "int",
          "description": "the `int` representing of maximum bound.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "range",
        "group": "utilities",
        "static": "random"
      },
      "signatures": {
        "cpp": [
          "int rnd(int min, int max)"
        ],
        "rust": [
          "pub fn rnd(min: i32, max: i32) -> i32"
        ],
        "python": [
          "def rnd_range(min, max):"
        ],
        "pascal": [
          "function Rnd(min: Integer; max: Integer): Integer"
        ],
        "csharp": [
          "public static int Random.Rnd(int min, int max);",
          "public static int SplashKit.Rnd(int min, int max);"
        ]
      }
    },
    {
      "signature": "float rnd();",
      "name": "rnd",
      "method_name": null,
      "unique_global_name": "rnd",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Generates a random number between 0 and 1",
      "brief": null,
      "return": {
        "type": "float",
        "description": "Returns a `float` between `0` and `1`",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "group": "utilities",
        "static": "random"
      },
      "signatures": {
        "cpp": [
          "float rnd()"
        ],
        "rust": [
          "pub fn rnd() -> f32"
        ],
        "python": [
          "def rnd():"
        ],
        "pascal": [
          "function Rnd(): Single"
        ],
        "csharp": [
          "public static float Random.Rnd();",
          "public static float SplashKit.Rnd();"
        ]
      }
    },
    {
      "signature": "int rnd(int ubound);",
      "name": "rnd",
      "method_name": null,
      "unique_global_name": "rnd_int",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Generates a random number between 0 and `ubound`.",
      "brief": null,
      "return": {
        "type": "int",
        "description": "Returns an `int` between `0` and `ubound`",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "ubound": {
          "type": "int",
          "description": "the `int` representing the upper bound.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "int",
        "group": "utilities",
        "static": "random"
      },
      "signatures": {
        "cpp": [
          "int rnd(int ubound)"
        ],
        "rust": [
          "pub fn rnd(ubound: i32) -> i32"
        ],
        "python": [
          "def rnd_int(ubound):"
        ],
        "pascal": [
          "function Rnd(ubound: Integer): Integer"
        ],
        "csharp": [
          "public static int Random.Rnd(int ubound);",
          "public static int SplashKit.Rnd(int ubound);"
        ]
      }
    },
    {
      "signature": "unsigned int current_ticks();",
      "name": "current_ticks",
      "method_name": null,
      "unique_global_name": "current_ticks",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Gets the number of milliseconds that have passed since the program was\nstarted.",
      "brief": null,
      "return": {
        "type": "unsigned int",
        "description": "The number of milliseconds passed",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "group": "utilities",
        "static": "utilities"
      },
      "signatures": {
        "cpp": [
          "unsigned int current_ticks()"
        ],
        "rust": [
          "pub fn current_ticks() -> u32"
        ],
        "python": [
          "def current_ticks():"
        ],
        "pascal": [
          "function CurrentTicks(): Cardinal"
        ],
        "csharp": [
          "public static uint Utilities.CurrentTicks();",
          "public static uint SplashKit.CurrentTicks();"
        ]
      }
    },
    {
      "signature": "void delay(int milliseconds);",
      "name": "delay",
      "method_name": null,
      "unique_global_name": "delay",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Puts the program to sleep for a specified number of milliseconds. If this\nis larger than 1 second, SplashKit will check to see if the user tries to\nquit during the delay. If the user does quit, the delay function returns\nwithout waiting.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "milliseconds": {
          "type": "int",
          "description": "The number of milliseconds to wait",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "utilities",
        "static": "utilities"
      },
      "signatures": {
        "cpp": [
          "void delay(int milliseconds)"
        ],
        "rust": [
          "pub fn delay(milliseconds: i32)"
        ],
        "python": [
          "def delay(milliseconds):"
        ],
        "pascal": [
          "procedure Delay(milliseconds: Integer)"
        ],
        "csharp": [
          "public static void Utilities.Delay(int milliseconds);",
          "public static void SplashKit.Delay(int milliseconds);"
        ]
      }
    },
    {
      "signature": "void display_dialog(const string &title,const string &msg,font output_font,int font_size);",
      "name": "display_dialog",
      "method_name": null,
      "unique_global_name": "display_dialog",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Display a dialog to the screen with a message for the user.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "title": {
          "type": "string",
          "description": "The title of the dialog window.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "msg": {
          "type": "string",
          "description": "The message for the dialog window.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "output_font": {
          "type": "font",
          "description": "The font for the dialog text",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "font_size": {
          "type": "int",
          "description": "The size of the font for the dialog text",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "utilities",
        "static": "utilities"
      },
      "signatures": {
        "cpp": [
          "void display_dialog(const string &title, const string &msg, font output_font, int font_size)"
        ],
        "rust": [
          "pub fn display_dialog(title: &String, msg: &String, output_font: font, font_size: i32)"
        ],
        "python": [
          "def display_dialog(title, msg, output_font, font_size):"
        ],
        "pascal": [
          "procedure DisplayDialog(const title: String; const msg: String; outputFont: Font; fontSize: Integer)"
        ],
        "csharp": [
          "public static void Utilities.DisplayDialog(string title, string msg, Font outputFont, int fontSize);",
          "public static void SplashKit.DisplayDialog(string title, string msg, Font outputFont, int fontSize);"
        ]
      }
    },
    {
      "signature": "string file_as_string(string filename,resource_kind kind);",
      "name": "file_as_string",
      "method_name": null,
      "unique_global_name": "file_as_string",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Return a SplashKit resource of `resource_kind` with name `filename`\nas a string.",
      "brief": null,
      "return": {
        "type": "string",
        "description": "The file loaded into a string.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "filename": {
          "type": "string",
          "description": "The filename of the resource.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "kind": {
          "type": "resource_kind",
          "description": "The kind of resource.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "utilities",
        "static": "utilities"
      },
      "signatures": {
        "cpp": [
          "string file_as_string(string filename, resource_kind kind)"
        ],
        "rust": [
          "pub fn file_as_string(filename: String, kind: resource_kind) -> String"
        ],
        "python": [
          "def file_as_string(filename, kind):"
        ],
        "pascal": [
          "function FileAsString(filename: String; kind: ResourceKind): String"
        ],
        "csharp": [
          "public static string Utilities.FileAsString(string filename, ResourceKind kind);",
          "public static string SplashKit.FileAsString(string filename, ResourceKind kind);"
        ]
      }
    }
  ]
}