{
  "functions": [
    {
      "signature": "void close_log_process ();",
      "name": "close_log_process",
      "method_name": null,
      "unique_global_name": "close_log_process",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Ensures propper memory clean-up prior to exit, if needed.  Used in sk_init_looging ().",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "group": "logging",
        "static": "logging"
      },
      "signatures": {
        "cpp": [
          "void close_log_process()"
        ],
        "rust": [
          "pub fn close_log_process()"
        ],
        "python": [
          "def close_log_process():"
        ],
        "pascal": [
          "procedure CloseLogProcess()"
        ],
        "csharp": [
          "public static void Logging.CloseLogProcess();",
          "public static void SplashKit.CloseLogProcess();"
        ]
      }
    },
    {
      "signature": "void init_custom_logger (log_mode mode);",
      "name": "init_custom_logger",
      "method_name": null,
      "unique_global_name": "init_custom_logger",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Initialises the logging mode for logged messages to be written to the text-based console.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "mode": {
          "type": "log_mode",
          "description": "The mode of log output i.e. whether there should be output to the console, a text file, or both.  Pass your choice of mode variable in by reference.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "logging",
        "static": "logging"
      },
      "signatures": {
        "cpp": [
          "void init_custom_logger(log_mode mode)"
        ],
        "rust": [
          "pub fn init_custom_logger(mode: log_mode)"
        ],
        "python": [
          "def init_custom_logger(mode):"
        ],
        "pascal": [
          "procedure InitCustomLogger(mode: LogMode)"
        ],
        "csharp": [
          "public static void Logging.InitCustomLogger(LogMode mode);",
          "public static void SplashKit.InitCustomLogger(LogMode mode);"
        ]
      }
    },
    {
      "signature": "void init_custom_logger (string app_name,bool override_prev_log,log_mode mode);",
      "name": "init_custom_logger",
      "method_name": null,
      "unique_global_name": "init_custom_logger__name_override_mode",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Initialises the logging mode between either writing to a file or both a file and the text-based console.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "app_name": {
          "type": "string",
          "description": "The name of the application being written requiring logging",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "override_prev_log": {
          "type": "bool",
          "description": "Determines whether or not a new logging session should override the existing file, if any. Set this to false if you want new log messages to be appended to the bottom of the file; otherwise set it to true if you would like a new file to be created on top of the old one.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "mode": {
          "type": "log_mode",
          "description": "The mode of log output i.e. whether there should be output to the console, a text file, or both.  Pass your choice of mode variable in by reference.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "_name_override_mode",
        "group": "logging",
        "static": "logging"
      },
      "signatures": {
        "cpp": [
          "void init_custom_logger(string app_name, bool override_prev_log, log_mode mode)"
        ],
        "rust": [
          "pub fn init_custom_logger(app_name: String, override_prev_log: bool, mode: log_mode)"
        ],
        "python": [
          "def init_custom_logger__name_override_mode(app_name, override_prev_log, mode):"
        ],
        "pascal": [
          "procedure InitCustomLogger(appName: String; overridePrevLog: Boolean; mode: LogMode)"
        ],
        "csharp": [
          "public static void Logging.InitCustomLogger(string appName, bool overridePrevLog, LogMode mode);",
          "public static void SplashKit.InitCustomLogger(string appName, bool overridePrevLog, LogMode mode);"
        ]
      }
    },
    {
      "signature": "void log(log_level level,string message);",
      "name": "log",
      "method_name": null,
      "unique_global_name": "log",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Send a message to the message log. The message will be written if the log level for\nthe program is set to display this.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "level": {
          "type": "log_level",
          "description": "The level of the message to log",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "message": {
          "type": "string",
          "description": "The message to be shown",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "logging",
        "static": "logging"
      },
      "signatures": {
        "cpp": [
          "void log(log_level level, string message)"
        ],
        "rust": [
          "pub fn log(level: log_level, message: String)"
        ],
        "python": [
          "def log(level, message):"
        ],
        "pascal": [
          "procedure Log(level: LogLevel; message: String)"
        ],
        "csharp": [
          "public static void Logging.Log(LogLevel level, string message);",
          "public static void SplashKit.Log(LogLevel level, string message);"
        ]
      }
    }
  ]
}