{
  "functions": [
    {
      "signature": "timer create_timer(string name);",
      "name": "create_timer",
      "method_name": null,
      "unique_global_name": "create_timer",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Create and return a new Timer. The timer will not be started, and will have\nan initial 'ticks' of 0.",
      "brief": null,
      "return": {
        "type": "timer",
        "description": "A new timer.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name of the timer for resource tracking",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "timer",
        "constructor": true,
        "group": "timers",
        "static": "timers"
      },
      "signatures": {
        "cpp": [
          "timer create_timer(string name)"
        ],
        "rust": [
          "pub fn create_timer(name: String) -> timer"
        ],
        "python": [
          "def create_timer(name):"
        ],
        "pascal": [
          "function CreateTimer(name: String): Timer"
        ],
        "csharp": [
          "public static Timer SplashKit.CreateTimer(string name);",
          "public Timer(string name);"
        ]
      }
    },
    {
      "signature": "void free_all_timers();",
      "name": "free_all_timers",
      "method_name": null,
      "unique_global_name": "free_all_timers",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Free all of timers that have been created.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "group": "timers",
        "static": "timers"
      },
      "signatures": {
        "cpp": [
          "void free_all_timers()"
        ],
        "rust": [
          "pub fn free_all_timers()"
        ],
        "python": [
          "def free_all_timers():"
        ],
        "pascal": [
          "procedure FreeAllTimers()"
        ],
        "csharp": [
          "public static void Timers.FreeAllTimers();",
          "public static void SplashKit.FreeAllTimers();"
        ]
      }
    },
    {
      "signature": "void free_timer(timer to_free);",
      "name": "free_timer",
      "method_name": null,
      "unique_global_name": "free_timer",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Free the memory used to store this timer.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "to_free": {
          "type": "timer",
          "description": "The time to be released.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "timer",
        "destructor": true,
        "group": "timers",
        "static": "timers",
        "self": "to_free"
      },
      "signatures": {
        "cpp": [
          "void free_timer(timer to_free)"
        ],
        "rust": [
          "pub fn free_timer(to_free: timer)"
        ],
        "python": [
          "def free_timer(to_free):"
        ],
        "pascal": [
          "procedure FreeTimer(toFree: Timer)"
        ],
        "csharp": [
          "public void Timer.FreeTimer();",
          "public static void SplashKit.FreeTimer(Timer toFree);"
        ]
      }
    },
    {
      "signature": "bool has_timer(string name);",
      "name": "has_timer",
      "method_name": null,
      "unique_global_name": "has_timer__named",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Checks if SplashKit has a timer with the indicated name.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True if SplashKit has created a timer with that name.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name of the timer",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "_named",
        "group": "timers",
        "static": "timers"
      },
      "signatures": {
        "cpp": [
          "bool has_timer(string name)"
        ],
        "rust": [
          "pub fn has_timer(name: String) -> bool"
        ],
        "python": [
          "def has_timer__named(name):"
        ],
        "pascal": [
          "function HasTimer(name: String): Boolean"
        ],
        "csharp": [
          "public static bool Timers.HasTimer(string name);",
          "public static bool SplashKit.HasTimer(string name);"
        ]
      }
    },
    {
      "signature": "void pause_timer(string name);",
      "name": "pause_timer",
      "method_name": null,
      "unique_global_name": "pause_timer__named",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Pause the timer, getting ticks from a paused timer\nwill continue to return the same time.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name of the timer",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "_named",
        "group": "timers",
        "static": "timers"
      },
      "signatures": {
        "cpp": [
          "void pause_timer(string name)"
        ],
        "rust": [
          "pub fn pause_timer(name: String)"
        ],
        "python": [
          "def pause_timer__named(name):"
        ],
        "pascal": [
          "procedure PauseTimer(name: String)"
        ],
        "csharp": [
          "public static void Timers.PauseTimer(string name);",
          "public static void SplashKit.PauseTimer(string name);"
        ]
      }
    },
    {
      "signature": "void pause_timer(timer to_pause);",
      "name": "pause_timer",
      "method_name": "pause",
      "unique_global_name": "pause_timer",
      "unique_method_name": "timer.pause",
      "suffix_name": null,
      "description": "Pause the timer, getting ticks from a paused timer\nwill continue to return the same time.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "to_pause": {
          "type": "timer",
          "description": "The timer",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "timer",
        "method": "pause",
        "group": "timers",
        "static": "timers",
        "self": "to_pause"
      },
      "signatures": {
        "cpp": [
          "void pause_timer(timer to_pause)"
        ],
        "rust": [
          "pub fn pause_timer(to_pause: timer)"
        ],
        "python": [
          "def pause_timer(to_pause):"
        ],
        "pascal": [
          "procedure PauseTimer(toPause: Timer)"
        ],
        "csharp": [
          "public void Timer.PauseTimer();",
          "public static void SplashKit.PauseTimer(Timer toPause);"
        ]
      }
    },
    {
      "signature": "void reset_timer(string name);",
      "name": "reset_timer",
      "method_name": null,
      "unique_global_name": "reset_timer__named",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Resets the named timer",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name of the timer",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "_named",
        "group": "timers",
        "static": "timers"
      },
      "signatures": {
        "cpp": [
          "void reset_timer(string name)"
        ],
        "rust": [
          "pub fn reset_timer(name: String)"
        ],
        "python": [
          "def reset_timer__named(name):"
        ],
        "pascal": [
          "procedure ResetTimer(name: String)"
        ],
        "csharp": [
          "public static void Timers.ResetTimer(string name);",
          "public static void SplashKit.ResetTimer(string name);"
        ]
      }
    },
    {
      "signature": "void reset_timer(timer tmr);",
      "name": "reset_timer",
      "method_name": "reset",
      "unique_global_name": "reset_timer",
      "unique_method_name": "timer.reset",
      "suffix_name": null,
      "description": "Resets the time of a given timer",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "tmr": {
          "type": "timer",
          "description": "The timer",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "timer",
        "method": "reset",
        "group": "timers",
        "static": "timers",
        "self": "tmr"
      },
      "signatures": {
        "cpp": [
          "void reset_timer(timer tmr)"
        ],
        "rust": [
          "pub fn reset_timer(tmr: timer)"
        ],
        "python": [
          "def reset_timer(tmr):"
        ],
        "pascal": [
          "procedure ResetTimer(tmr: Timer)"
        ],
        "csharp": [
          "public void Timer.ResetTimer();",
          "public static void SplashKit.ResetTimer(Timer tmr);"
        ]
      }
    },
    {
      "signature": "void resume_timer(string name);",
      "name": "resume_timer",
      "method_name": null,
      "unique_global_name": "resume_timer__named",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Resumes the named timer.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name of the timer",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "_named",
        "group": "timers",
        "static": "timers"
      },
      "signatures": {
        "cpp": [
          "void resume_timer(string name)"
        ],
        "rust": [
          "pub fn resume_timer(name: String)"
        ],
        "python": [
          "def resume_timer__named(name):"
        ],
        "pascal": [
          "procedure ResumeTimer(name: String)"
        ],
        "csharp": [
          "public static void Timers.ResumeTimer(string name);",
          "public static void SplashKit.ResumeTimer(string name);"
        ]
      }
    },
    {
      "signature": "void resume_timer(timer to_resume);",
      "name": "resume_timer",
      "method_name": "resume",
      "unique_global_name": "resume_timer",
      "unique_method_name": "timer.resume",
      "suffix_name": null,
      "description": "Resumes a paused timer.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "to_resume": {
          "type": "timer",
          "description": "The timer",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "timer",
        "method": "resume",
        "group": "timers",
        "static": "timers",
        "self": "to_resume"
      },
      "signatures": {
        "cpp": [
          "void resume_timer(timer to_resume)"
        ],
        "rust": [
          "pub fn resume_timer(to_resume: timer)"
        ],
        "python": [
          "def resume_timer(to_resume):"
        ],
        "pascal": [
          "procedure ResumeTimer(toResume: Timer)"
        ],
        "csharp": [
          "public void Timer.ResumeTimer();",
          "public static void SplashKit.ResumeTimer(Timer toResume);"
        ]
      }
    },
    {
      "signature": "void start_timer(string name);",
      "name": "start_timer",
      "method_name": null,
      "unique_global_name": "start_timer__named",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Start a timer. The timer will then start recording the time that has passed.\nYou can check how long has past since the timer was started using the\n`timer_ticks` function.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name of the timer",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "_named",
        "group": "timers",
        "static": "timers"
      },
      "signatures": {
        "cpp": [
          "void start_timer(string name)"
        ],
        "rust": [
          "pub fn start_timer(name: String)"
        ],
        "python": [
          "def start_timer__named(name):"
        ],
        "pascal": [
          "procedure StartTimer(name: String)"
        ],
        "csharp": [
          "public static void Timers.StartTimer(string name);",
          "public static void SplashKit.StartTimer(string name);"
        ]
      }
    },
    {
      "signature": "void start_timer(timer to_start);",
      "name": "start_timer",
      "method_name": "start",
      "unique_global_name": "start_timer",
      "unique_method_name": "timer.start",
      "suffix_name": null,
      "description": "Start a timer. The timer will then start recording the time that has passed.\nYou can check how long has past since the timer was started using the\n`timer_ticks` function.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "to_start": {
          "type": "timer",
          "description": "The timer",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "timer",
        "method": "start",
        "group": "timers",
        "static": "timers",
        "self": "to_start"
      },
      "signatures": {
        "cpp": [
          "void start_timer(timer to_start)"
        ],
        "rust": [
          "pub fn start_timer(to_start: timer)"
        ],
        "python": [
          "def start_timer(to_start):"
        ],
        "pascal": [
          "procedure StartTimer(toStart: Timer)"
        ],
        "csharp": [
          "public void Timer.StartTimer();",
          "public static void SplashKit.StartTimer(Timer toStart);"
        ]
      }
    },
    {
      "signature": "void stop_timer(string name);",
      "name": "stop_timer",
      "method_name": null,
      "unique_global_name": "stop_timer__named",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Stop the timer. The time is reset to 0 and you must\nrecall start to begin the timer ticking again.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name of the timer",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "_named",
        "group": "timers",
        "static": "timers"
      },
      "signatures": {
        "cpp": [
          "void stop_timer(string name)"
        ],
        "rust": [
          "pub fn stop_timer(name: String)"
        ],
        "python": [
          "def stop_timer__named(name):"
        ],
        "pascal": [
          "procedure StopTimer(name: String)"
        ],
        "csharp": [
          "public static void Timers.StopTimer(string name);",
          "public static void SplashKit.StopTimer(string name);"
        ]
      }
    },
    {
      "signature": "void stop_timer(timer to_stop);",
      "name": "stop_timer",
      "method_name": "stop",
      "unique_global_name": "stop_timer",
      "unique_method_name": "timer.stop",
      "suffix_name": null,
      "description": "Stop the timer. The time is reset to 0 and you must\nrecall start to begin the timer ticking again.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "to_stop": {
          "type": "timer",
          "description": "The timer",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "timer",
        "method": "stop",
        "group": "timers",
        "static": "timers",
        "self": "to_stop"
      },
      "signatures": {
        "cpp": [
          "void stop_timer(timer to_stop)"
        ],
        "rust": [
          "pub fn stop_timer(to_stop: timer)"
        ],
        "python": [
          "def stop_timer(to_stop):"
        ],
        "pascal": [
          "procedure StopTimer(toStop: Timer)"
        ],
        "csharp": [
          "public void Timer.StopTimer();",
          "public static void SplashKit.StopTimer(Timer toStop);"
        ]
      }
    },
    {
      "signature": "timer timer_named(string name);",
      "name": "timer_named",
      "method_name": null,
      "unique_global_name": "timer_named",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Get the timer created with the indicated name.",
      "brief": null,
      "return": {
        "type": "timer",
        "description": "Returns the timer fetched from SplashKit",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name of the timer to fetch",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "timers",
        "static": "timers"
      },
      "signatures": {
        "cpp": [
          "timer timer_named(string name)"
        ],
        "rust": [
          "pub fn timer_named(name: String) -> timer"
        ],
        "python": [
          "def timer_named(name):"
        ],
        "pascal": [
          "function TimerNamed(name: String): Timer"
        ],
        "csharp": [
          "public static Timer Timers.TimerNamed(string name);",
          "public static Timer SplashKit.TimerNamed(string name);"
        ]
      }
    },
    {
      "signature": "bool timer_paused(string name);",
      "name": "timer_paused",
      "method_name": null,
      "unique_global_name": "timer_paused__named",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Indicates if the timer is paused.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True if the timer is paused",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name of the timer",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "_named",
        "group": "timers",
        "static": "timers"
      },
      "signatures": {
        "cpp": [
          "bool timer_paused(string name)"
        ],
        "rust": [
          "pub fn timer_paused(name: String) -> bool"
        ],
        "python": [
          "def timer_paused__named(name):"
        ],
        "pascal": [
          "function TimerPaused(name: String): Boolean"
        ],
        "csharp": [
          "public static bool Timers.TimerPaused(string name);",
          "public static bool SplashKit.TimerPaused(string name);"
        ]
      }
    },
    {
      "signature": "bool timer_paused(timer to_get);",
      "name": "timer_paused",
      "method_name": null,
      "unique_global_name": "timer_paused",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Indicates if the timer is paused.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True if the timer is paused",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "to_get": {
          "type": "timer",
          "description": "The timer",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "timer",
        "getter": "is_paused",
        "group": "timers",
        "static": "timers",
        "self": "to_get"
      },
      "signatures": {
        "cpp": [
          "bool timer_paused(timer to_get)"
        ],
        "rust": [
          "pub fn timer_paused(to_get: timer) -> bool"
        ],
        "python": [
          "def timer_paused(to_get):"
        ],
        "pascal": [
          "function TimerPaused(toGet: Timer): Boolean"
        ],
        "csharp": [
          "public bool Timer.IsPaused { get }",
          "public static bool SplashKit.TimerPaused(Timer toGet);"
        ]
      }
    },
    {
      "signature": "bool timer_started(string name);",
      "name": "timer_started",
      "method_name": null,
      "unique_global_name": "timer_started__named",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Indicates if the timer is started.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True if the timer has been started",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name of the timer",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "_named",
        "group": "timers",
        "static": "timers"
      },
      "signatures": {
        "cpp": [
          "bool timer_started(string name)"
        ],
        "rust": [
          "pub fn timer_started(name: String) -> bool"
        ],
        "python": [
          "def timer_started__named(name):"
        ],
        "pascal": [
          "function TimerStarted(name: String): Boolean"
        ],
        "csharp": [
          "public static bool Timers.TimerStarted(string name);",
          "public static bool SplashKit.TimerStarted(string name);"
        ]
      }
    },
    {
      "signature": "bool timer_started(timer to_get);",
      "name": "timer_started",
      "method_name": null,
      "unique_global_name": "timer_started",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Indicates if the timer is started.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True if the timer has been started",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "to_get": {
          "type": "timer",
          "description": "The timer",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "timer",
        "getter": "is_started",
        "group": "timers",
        "static": "timers",
        "self": "to_get"
      },
      "signatures": {
        "cpp": [
          "bool timer_started(timer to_get)"
        ],
        "rust": [
          "pub fn timer_started(to_get: timer) -> bool"
        ],
        "python": [
          "def timer_started(to_get):"
        ],
        "pascal": [
          "function TimerStarted(toGet: Timer): Boolean"
        ],
        "csharp": [
          "public bool Timer.IsStarted { get }",
          "public static bool SplashKit.TimerStarted(Timer toGet);"
        ]
      }
    },
    {
      "signature": "unsigned int timer_ticks(string name);",
      "name": "timer_ticks",
      "method_name": null,
      "unique_global_name": "timer_ticks__named",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Gets the number of ticks (milliseconds) that have passed since the timer\nwas started/reset. When paused the timer's ticks will not advance until\nthe timer is once again resumed.",
      "brief": null,
      "return": {
        "type": "unsigned int",
        "description": "The number of milliseconds that have passed since the\ntimer was created (excluding the time the timer was\npaused)",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name of the Timer",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "_named",
        "group": "timers",
        "static": "timers"
      },
      "signatures": {
        "cpp": [
          "unsigned int timer_ticks(string name)"
        ],
        "rust": [
          "pub fn timer_ticks(name: String) -> u32"
        ],
        "python": [
          "def timer_ticks__named(name):"
        ],
        "pascal": [
          "function TimerTicks(name: String): Cardinal"
        ],
        "csharp": [
          "public static uint Timers.TimerTicks(string name);",
          "public static uint SplashKit.TimerTicks(string name);"
        ]
      }
    },
    {
      "signature": "unsigned int timer_ticks(timer to_get);",
      "name": "timer_ticks",
      "method_name": null,
      "unique_global_name": "timer_ticks",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Gets the number of ticks (milliseconds) that have passed since the timer\nwas started/reset. When paused the timer's ticks will not advance until\nthe timer is once again resumed.",
      "brief": null,
      "return": {
        "type": "unsigned int",
        "description": "The number of milliseconds that have passed since the\ntimer was created (excluding the time the timer was\npaused)",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "to_get": {
          "type": "timer",
          "description": "The timer",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "timer",
        "getter": "ticks",
        "group": "timers",
        "static": "timers",
        "self": "to_get"
      },
      "signatures": {
        "cpp": [
          "unsigned int timer_ticks(timer to_get)"
        ],
        "rust": [
          "pub fn timer_ticks(to_get: timer) -> u32"
        ],
        "python": [
          "def timer_ticks(to_get):"
        ],
        "pascal": [
          "function TimerTicks(toGet: Timer): Cardinal"
        ],
        "csharp": [
          "public uint Timer.Ticks { get }",
          "public static uint SplashKit.TimerTicks(Timer toGet);"
        ]
      }
    }
  ]
}