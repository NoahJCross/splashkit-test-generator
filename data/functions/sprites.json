{
  "functions": [
    {
      "signature": "void call_for_all_sprites(sprite_float_function *fn,float val);",
      "name": "call_for_all_sprites",
      "method_name": null,
      "unique_global_name": "call_for_all_sprites_with_value",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Call the supplied function for all sprites in the current pack.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "fn": {
          "type": "sprite_float_function",
          "description": "The sprite function to call on all sprites.",
          "is_pointer": true,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "val": {
          "type": "float",
          "description": "The value passed to the function for each sprite.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "with_value",
        "group": "sprites",
        "static": "sprite"
      },
      "signatures": {
        "cpp": [
          "void call_for_all_sprites(sprite_float_function *fn, float val)"
        ],
        "rust": [
          "pub fn call_for_all_sprites(fn: sprite_float_function, val: f32)"
        ],
        "python": [
          "def call_for_all_sprites_with_value(fn, val):"
        ],
        "pascal": [
          "procedure CallForAllSprites(fn: SpriteFloatFunction; val: Single)"
        ],
        "csharp": [
          "public static void Sprite.CallForAllSprites(SpriteFloatFunction fn, float val);",
          "public static void SplashKit.CallForAllSprites(SpriteFloatFunction fn, float val);"
        ]
      }
    },
    {
      "signature": "void call_for_all_sprites(sprite_function *fn);",
      "name": "call_for_all_sprites",
      "method_name": null,
      "unique_global_name": "call_for_all_sprites",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Call the supplied function for all sprites in the current pack.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "fn": {
          "type": "sprite_function",
          "description": "The sprite function to call on all sprites.",
          "is_pointer": true,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "sprites",
        "static": "sprite"
      },
      "signatures": {
        "cpp": [
          "void call_for_all_sprites(sprite_function *fn)"
        ],
        "rust": [
          "pub fn call_for_all_sprites(fn: sprite_function)"
        ],
        "python": [
          "def call_for_all_sprites(fn):"
        ],
        "pascal": [
          "procedure CallForAllSprites(fn: SpriteFunction)"
        ],
        "csharp": [
          "public static void Sprite.CallForAllSprites(SpriteFunction fn);",
          "public static void SplashKit.CallForAllSprites(SpriteFunction fn);"
        ]
      }
    },
    {
      "signature": "void call_on_sprite_event(sprite_event_handler *handler);",
      "name": "call_on_sprite_event",
      "method_name": null,
      "unique_global_name": "call_on_sprite_event",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Register a procedure to be called when an events occur on any sprite.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "handler": {
          "type": "sprite_event_handler",
          "description": "The function to call when any sprite raises an event",
          "is_pointer": true,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "sprites",
        "static": "sprite"
      },
      "signatures": {
        "cpp": [
          "void call_on_sprite_event(sprite_event_handler *handler)"
        ],
        "rust": [
          "pub fn call_on_sprite_event(handler: sprite_event_handler)"
        ],
        "python": [
          "def call_on_sprite_event(handler):"
        ],
        "pascal": [
          "procedure CallOnSpriteEvent(handler: SpriteEventHandler)"
        ],
        "csharp": [
          "public static void Sprite.CallOnSpriteEvent(SpriteEventHandler handler);",
          "public static void SplashKit.CallOnSpriteEvent(SpriteEventHandler handler);"
        ]
      }
    },
    {
      "signature": "point_2d center_point(sprite s);",
      "name": "center_point",
      "method_name": null,
      "unique_global_name": "center_point",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the center point of the passed in sprite. This is based on the sprite's\nPosition, Width and Height.",
      "brief": null,
      "return": {
        "type": "point_2d",
        "description": "The center point of the sprite",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to get the details from.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "getter": "center_point",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "point_2d center_point(sprite s)"
        ],
        "rust": [
          "pub fn center_point(s: sprite) -> point_2d"
        ],
        "python": [
          "def center_point(s):"
        ],
        "pascal": [
          "function CenterPoint(s: Sprite): Point2D"
        ],
        "csharp": [
          "public Point2D Sprite.CenterPoint { get }",
          "public static Point2D SplashKit.CenterPoint(Sprite s);"
        ]
      }
    },
    {
      "signature": "sprite create_sprite(bitmap layer);",
      "name": "create_sprite",
      "method_name": null,
      "unique_global_name": "create_sprite",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Creates a sprite for the passed in bitmap image. The sprite will use the\ncell information within the bitmap if it is animated at a later stage.\n\nThis version of create_sprite will initialise the sprite to use\npixel level collisions, no animations, and have one layer named 'layer1'.\nThis version of the constructor will assign a default name to the sprite\nfor resource management purposes.",
      "brief": null,
      "return": {
        "type": "sprite",
        "description": "The new sprite with image.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "layer": {
          "type": "bitmap",
          "description": "The bitmap for the sprite's image.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "constructor": true,
        "group": "sprites",
        "static": "sprite"
      },
      "signatures": {
        "cpp": [
          "sprite create_sprite(bitmap layer)"
        ],
        "rust": [
          "pub fn create_sprite(layer: bitmap) -> sprite"
        ],
        "python": [
          "def create_sprite(layer):"
        ],
        "pascal": [
          "function CreateSprite(layer: Bitmap): Sprite"
        ],
        "csharp": [
          "public static Sprite SplashKit.CreateSprite(Bitmap layer);",
          "public Sprite(Bitmap layer);"
        ]
      }
    },
    {
      "signature": "sprite create_sprite(bitmap layer,animation_script ani);",
      "name": "create_sprite",
      "method_name": null,
      "unique_global_name": "create_sprite_with_animation",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Creates a sprite for the passed in bitmap image. The sprite will use the\ncell information within the bitmap if it is animated at a later stage.\nThis version of `create_sprite` will initialise the sprite to use\npixel level collisions, the specified animation template, the layer have\nname 'layer1'.\n\nThis version of the constructor will assign a default name to the sprite\nfor resource management purposes.",
      "brief": null,
      "return": {
        "type": "sprite",
        "description": "The new sprite with image and animation script.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "layer": {
          "type": "bitmap",
          "description": "The bitmap for the sprite's image.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "ani": {
          "type": "animation_script",
          "description": "The animation script for the sprite's animations.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "constructor": true,
        "suffix": "with_animation",
        "group": "sprites",
        "static": "sprite"
      },
      "signatures": {
        "cpp": [
          "sprite create_sprite(bitmap layer, animation_script ani)"
        ],
        "rust": [
          "pub fn create_sprite(layer: bitmap, ani: animation_script) -> sprite"
        ],
        "python": [
          "def create_sprite_with_animation(layer, ani):"
        ],
        "pascal": [
          "function CreateSprite(layer: Bitmap; ani: AnimationScript): Sprite"
        ],
        "csharp": [
          "public static Sprite SplashKit.CreateSprite(Bitmap layer, AnimationScript ani);",
          "public Sprite(Bitmap layer, AnimationScript ani);"
        ]
      }
    },
    {
      "signature": "sprite create_sprite(const string &bitmap_name);",
      "name": "create_sprite",
      "method_name": null,
      "unique_global_name": "create_sprite_with_bitmap_named",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Creates a sprite for the passed in bitmap image. The sprite will use the\ncell information within the bitmap if it is animated at a later stage.\n\nThis version of create_sprite will initialise the sprite to use\npixel level collisions, no animations, and have one layer named 'layer1'.\nThis version of the constructor will assign a default name to the sprite\nfor resource management purposes.",
      "brief": null,
      "return": {
        "type": "sprite",
        "description": "The new sprite with image.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "bitmap_name": {
          "type": "string",
          "description": "The name of the bitmap to use as the sprite's layer",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "constructor": true,
        "suffix": "with_bitmap_named",
        "group": "sprites",
        "static": "sprite"
      },
      "signatures": {
        "cpp": [
          "sprite create_sprite(const string &bitmap_name)"
        ],
        "rust": [
          "pub fn create_sprite(bitmap_name: &String) -> sprite"
        ],
        "python": [
          "def create_sprite_with_bitmap_named(bitmap_name):"
        ],
        "pascal": [
          "function CreateSprite(const bitmapName: String): Sprite"
        ],
        "csharp": [
          "public static Sprite SplashKit.CreateSprite(string bitmapName);",
          "public Sprite(string bitmapName);"
        ]
      }
    },
    {
      "signature": "sprite create_sprite(const string &name,bitmap layer);",
      "name": "create_sprite",
      "method_name": null,
      "unique_global_name": "create_sprite_named",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Creates a sprite for the passed in bitmap image. The sprite will use the\ncell information within the sprite if it is animated at a later stage.\nThis version of create_sprite will initialise the sprite to use pixel level\ncollisions, no animation, the layer have name 'layer1'.",
      "brief": null,
      "return": {
        "type": "sprite",
        "description": "The new sprite with image and name.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name of the sprite for resource management.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "layer": {
          "type": "bitmap",
          "description": "The bitmap for the sprite's image.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "constructor": true,
        "suffix": "named",
        "group": "sprites",
        "static": "sprite"
      },
      "signatures": {
        "cpp": [
          "sprite create_sprite(const string &name, bitmap layer)"
        ],
        "rust": [
          "pub fn create_sprite(name: &String, layer: bitmap) -> sprite"
        ],
        "python": [
          "def create_sprite_named(name, layer):"
        ],
        "pascal": [
          "function CreateSprite(const name: String; layer: Bitmap): Sprite"
        ],
        "csharp": [
          "public static Sprite SplashKit.CreateSprite(string name, Bitmap layer);",
          "public Sprite(string name, Bitmap layer);"
        ]
      }
    },
    {
      "signature": "sprite create_sprite(const string &name,bitmap layer,animation_script ani);",
      "name": "create_sprite",
      "method_name": null,
      "unique_global_name": "create_sprite_named_with_animation",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Creates a sprite for the passed in bitmap image. The sprite will use the cell\ninformation within the sprite if it is animated at a later stage. This\nversion of create_sprite will initialise the sprite to use pixel level\ncollisions, the specified animation template, the layer have name 'layer1'.",
      "brief": null,
      "return": {
        "type": "sprite",
        "description": "The new sprite with image, animation, and name.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name of the sprite for resource management.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "layer": {
          "type": "bitmap",
          "description": "The bitmap for the sprite's image.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "ani": {
          "type": "animation_script",
          "description": "The animation script for the sprite's animations.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "constructor": true,
        "suffix": "named_with_animation",
        "group": "sprites",
        "static": "sprite"
      },
      "signatures": {
        "cpp": [
          "sprite create_sprite(const string &name, bitmap layer, animation_script ani)"
        ],
        "rust": [
          "pub fn create_sprite(name: &String, layer: bitmap, ani: animation_script) -> sprite"
        ],
        "python": [
          "def create_sprite_named_with_animation(name, layer, ani):"
        ],
        "pascal": [
          "function CreateSprite(const name: String; layer: Bitmap; ani: AnimationScript): Sprite"
        ],
        "csharp": [
          "public static Sprite SplashKit.CreateSprite(string name, Bitmap layer, AnimationScript ani);",
          "public Sprite(string name, Bitmap layer, AnimationScript ani);"
        ]
      }
    },
    {
      "signature": "sprite create_sprite(const string &bitmap_name,const string &animation_name);",
      "name": "create_sprite",
      "method_name": null,
      "unique_global_name": "create_sprite_with_bitmap_and_animation_named",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Creates a sprite. The bitmap_name is used to indicate the bitmap the sprite\nwill use, and the animation_name is used to indicate which animation_script\nto use.",
      "brief": null,
      "return": {
        "type": "sprite",
        "description": "The new sprite with the image and animation.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "bitmap_name": {
          "type": "string",
          "description": "The name of the bitmap to use as the sprite's image.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "animation_name": {
          "type": "string",
          "description": "The name of the animation script to use for this\nsprite.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "constructor": true,
        "suffix": "with_bitmap_and_animation_named",
        "group": "sprites",
        "static": "sprite"
      },
      "signatures": {
        "cpp": [
          "sprite create_sprite(const string &bitmap_name, const string &animation_name)"
        ],
        "rust": [
          "pub fn create_sprite(bitmap_name: &String, animation_name: &String) -> sprite"
        ],
        "python": [
          "def create_sprite_with_bitmap_and_animation_named(bitmap_name, animation_name):"
        ],
        "pascal": [
          "function CreateSprite(const bitmapName: String; const animationName: String): Sprite"
        ],
        "csharp": [
          "public static Sprite SplashKit.CreateSprite(string bitmapName, string animationName);",
          "public Sprite(string bitmapName, string animationName);"
        ]
      }
    },
    {
      "signature": "void create_sprite_pack(const string &name);",
      "name": "create_sprite_pack",
      "method_name": null,
      "unique_global_name": "create_sprite_pack",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Create a new sprite_pack with a given name. This pack can then be\nselected and used to control which sprites are drawn/updated in\nthe calls to draw_all_sprites and update_all_sprites.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name of the new sprite pack.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "sprites",
        "static": "sprite"
      },
      "signatures": {
        "cpp": [
          "void create_sprite_pack(const string &name)"
        ],
        "rust": [
          "pub fn create_sprite_pack(name: &String)"
        ],
        "python": [
          "def create_sprite_pack(name):"
        ],
        "pascal": [
          "procedure CreateSpritePack(const name: String)"
        ],
        "csharp": [
          "public static void Sprite.CreateSpritePack(string name);",
          "public static void SplashKit.CreateSpritePack(string name);"
        ]
      }
    },
    {
      "signature": "string current_sprite_pack();",
      "name": "current_sprite_pack",
      "method_name": null,
      "unique_global_name": "current_sprite_pack",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the name of the currently selected sprite_pack.",
      "brief": null,
      "return": {
        "type": "string",
        "description": "The name of the current sprite pack.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "group": "sprites",
        "static": "sprite"
      },
      "signatures": {
        "cpp": [
          "string current_sprite_pack()"
        ],
        "rust": [
          "pub fn current_sprite_pack() -> String"
        ],
        "python": [
          "def current_sprite_pack():"
        ],
        "pascal": [
          "function CurrentSpritePack(): String"
        ],
        "csharp": [
          "public static string Sprite.CurrentSpritePack();",
          "public static string SplashKit.CurrentSpritePack();"
        ]
      }
    },
    {
      "signature": "void draw_all_sprites();",
      "name": "draw_all_sprites",
      "method_name": null,
      "unique_global_name": "draw_all_sprites",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "draws all of the sprites in the current sprite pack. Packs can be\nswitched to select between different sets of sprites.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "group": "sprites",
        "static": "sprite"
      },
      "signatures": {
        "cpp": [
          "void draw_all_sprites()"
        ],
        "rust": [
          "pub fn draw_all_sprites()"
        ],
        "python": [
          "def draw_all_sprites():"
        ],
        "pascal": [
          "procedure DrawAllSprites()"
        ],
        "csharp": [
          "public static void Sprite.DrawAllSprites();",
          "public static void SplashKit.DrawAllSprites();"
        ]
      }
    },
    {
      "signature": "void draw_sprite(sprite s,const vector_2d &offset);",
      "name": "draw_sprite",
      "method_name": "draw",
      "unique_global_name": "draw_sprite_offset_by",
      "unique_method_name": "sprite.draw_offset_by",
      "suffix_name": null,
      "description": "Draws the sprite at its position in the game offset by a given amount. Only\nuse this method when you want to draw the sprite displaced from its location\nin your game. Otherwise you should change the sprite's location and then\nuse the standard ''draw_sprite'' routine.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to draw.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "offset": {
          "type": "vector_2d",
          "description": "The amount to offset the sprite.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "method": "draw",
        "suffix": "offset_by",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "void draw_sprite(sprite s, const vector_2d &offset)"
        ],
        "rust": [
          "pub fn draw_sprite(s: sprite, offset: &vector_2d)"
        ],
        "python": [
          "def draw_sprite_offset_by(s, offset):"
        ],
        "pascal": [
          "procedure DrawSprite(s: Sprite; const offset: Vector2D)"
        ],
        "csharp": [
          "public void Sprite.DrawSprite(Vector2D offset);",
          "public static void SplashKit.DrawSprite(Sprite s, Vector2D offset);"
        ]
      }
    },
    {
      "signature": "void draw_sprite(sprite s);",
      "name": "draw_sprite",
      "method_name": "draw",
      "unique_global_name": "draw_sprite",
      "unique_method_name": "sprite.draw",
      "suffix_name": null,
      "description": "Draws the sprite at its location in the world. This is affected by the\nposition of the camera and the sprites current location.\n\nThis is the standard routine for drawing sprites to the screen and should be\nused in most cases.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to draw.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "method": "draw",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "void draw_sprite(sprite s)"
        ],
        "rust": [
          "pub fn draw_sprite(s: sprite)"
        ],
        "python": [
          "def draw_sprite(s):"
        ],
        "pascal": [
          "procedure DrawSprite(s: Sprite)"
        ],
        "csharp": [
          "public void Sprite.DrawSprite();",
          "public static void SplashKit.DrawSprite(Sprite s);"
        ]
      }
    },
    {
      "signature": "void draw_sprite(sprite s,double x_offset,double y_offset);",
      "name": "draw_sprite",
      "method_name": "draw",
      "unique_global_name": "draw_sprite_offset_x_y",
      "unique_method_name": "sprite.draw_offset_x_y",
      "suffix_name": null,
      "description": "Draws the sprite at its position in the game offset by a given amount. Only\nuse this method when you want to draw the sprite displaced from its location\nin your game. Otherwise you should change the sprite's location and then\nuse the standard `draw_sprite` routine.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to draw.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x_offset": {
          "type": "double",
          "description": "The amount to offset on the x axis.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y_offset": {
          "type": "double",
          "description": "The amount to offset on the y axis.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "method": "draw",
        "suffix": "offset_x_y",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "void draw_sprite(sprite s, double x_offset, double y_offset)"
        ],
        "rust": [
          "pub fn draw_sprite(s: sprite, x_offset: f64, y_offset: f64)"
        ],
        "python": [
          "def draw_sprite_offset_x_y(s, x_offset, y_offset):"
        ],
        "pascal": [
          "procedure DrawSprite(s: Sprite; xOffset: Double; yOffset: Double)"
        ],
        "csharp": [
          "public void Sprite.DrawSprite(double xOffset, double yOffset);",
          "public static void SplashKit.DrawSprite(Sprite s, double xOffset, double yOffset);"
        ]
      }
    },
    {
      "signature": "void free_all_sprites();",
      "name": "free_all_sprites",
      "method_name": null,
      "unique_global_name": "free_all_sprites",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Releases all of the sprites that have been loaded.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "group": "sprites",
        "static": "sprite"
      },
      "signatures": {
        "cpp": [
          "void free_all_sprites()"
        ],
        "rust": [
          "pub fn free_all_sprites()"
        ],
        "python": [
          "def free_all_sprites():"
        ],
        "pascal": [
          "procedure FreeAllSprites()"
        ],
        "csharp": [
          "public static void Sprite.FreeAllSprites();",
          "public static void SplashKit.FreeAllSprites();"
        ]
      }
    },
    {
      "signature": "void free_sprite(sprite s);",
      "name": "free_sprite",
      "method_name": null,
      "unique_global_name": "free_sprite",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Free the resources associated with a sprite.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to be destroyed.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "destructor": true,
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "void free_sprite(sprite s)"
        ],
        "rust": [
          "pub fn free_sprite(s: sprite)"
        ],
        "python": [
          "def free_sprite(s):"
        ],
        "pascal": [
          "procedure FreeSprite(s: Sprite)"
        ],
        "csharp": [
          "public void Sprite.FreeSprite();",
          "public static void SplashKit.FreeSprite(Sprite s);"
        ]
      }
    },
    {
      "signature": "void free_sprite_pack(const string &name);",
      "name": "free_sprite_pack",
      "method_name": null,
      "unique_global_name": "free_sprite_pack",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Frees the sprite pack and all of its sprites.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name of the sprite pack to destroy.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "sprites",
        "static": "sprite"
      },
      "signatures": {
        "cpp": [
          "void free_sprite_pack(const string &name)"
        ],
        "rust": [
          "pub fn free_sprite_pack(name: &String)"
        ],
        "python": [
          "def free_sprite_pack(name):"
        ],
        "pascal": [
          "procedure FreeSpritePack(const name: String)"
        ],
        "csharp": [
          "public static void Sprite.FreeSpritePack(string name);",
          "public static void SplashKit.FreeSpritePack(string name);"
        ]
      }
    },
    {
      "signature": "bool has_sprite(const string &name);",
      "name": "has_sprite",
      "method_name": null,
      "unique_global_name": "has_sprite",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Determines if SplashKit has a sprite for the supplied name.\nThis checks against all sprites, those loaded without a name\nare assigned a default.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True if you have created a sprite with this name.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name of the sprite to locate.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "sprites",
        "static": "sprite"
      },
      "signatures": {
        "cpp": [
          "bool has_sprite(const string &name)"
        ],
        "rust": [
          "pub fn has_sprite(name: &String) -> bool"
        ],
        "python": [
          "def has_sprite(name):"
        ],
        "pascal": [
          "function HasSprite(const name: String): Boolean"
        ],
        "csharp": [
          "public static bool Sprite.HasSprite(string name);",
          "public static bool SplashKit.HasSprite(string name);"
        ]
      }
    },
    {
      "signature": "bool has_sprite_pack(const string &name);",
      "name": "has_sprite_pack",
      "method_name": null,
      "unique_global_name": "has_sprite_pack",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Indicates if a given sprite_pack has already been created.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True if a sprite pack exists with the indicated name.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name for the sprite pack.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "sprites",
        "static": "sprite"
      },
      "signatures": {
        "cpp": [
          "bool has_sprite_pack(const string &name)"
        ],
        "rust": [
          "pub fn has_sprite_pack(name: &String) -> bool"
        ],
        "python": [
          "def has_sprite_pack(name):"
        ],
        "pascal": [
          "function HasSpritePack(const name: String): Boolean"
        ],
        "csharp": [
          "public static bool Sprite.HasSpritePack(string name);",
          "public static bool SplashKit.HasSpritePack(string name);"
        ]
      }
    },
    {
      "signature": "void move_sprite(sprite s);",
      "name": "move_sprite",
      "method_name": "move",
      "unique_global_name": "move_sprite",
      "unique_method_name": "sprite.move",
      "suffix_name": null,
      "description": "moves the sprite as indicated by its velocity. You can call this directly ot\nalternatively, this action is performed when the sprite is updated using\nthe ''update_sprite'' routine.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to move.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "method": "move",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "void move_sprite(sprite s)"
        ],
        "rust": [
          "pub fn move_sprite(s: sprite)"
        ],
        "python": [
          "def move_sprite(s):"
        ],
        "pascal": [
          "procedure MoveSprite(s: Sprite)"
        ],
        "csharp": [
          "public void Sprite.MoveSprite();",
          "public static void SplashKit.MoveSprite(Sprite s);"
        ]
      }
    },
    {
      "signature": "void move_sprite(sprite s,const vector_2d &distance);",
      "name": "move_sprite",
      "method_name": "move",
      "unique_global_name": "move_sprite_by_vector",
      "unique_method_name": "sprite.move_by_vector",
      "suffix_name": null,
      "description": "Moves the sprite a given distance based on the value passed in rather than\nbased on the sprite's velocity. Typically this method is used to apply\nother movement actions to the sprite and the velocity of the sprite is\nused the intended movement of the sprite.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to move.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "distance": {
          "type": "vector_2d",
          "description": "The vector that represents the direction and distance to\nmove the sprite.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "method": "move",
        "suffix": "by_vector",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "void move_sprite(sprite s, const vector_2d &distance)"
        ],
        "rust": [
          "pub fn move_sprite(s: sprite, distance: &vector_2d)"
        ],
        "python": [
          "def move_sprite_by_vector(s, distance):"
        ],
        "pascal": [
          "procedure MoveSprite(s: Sprite; const distance: Vector2D)"
        ],
        "csharp": [
          "public void Sprite.MoveSprite(Vector2D distance);",
          "public static void SplashKit.MoveSprite(Sprite s, Vector2D distance);"
        ]
      }
    },
    {
      "signature": "void move_sprite(sprite s,const vector_2d &distance,float pct);",
      "name": "move_sprite",
      "method_name": "move",
      "unique_global_name": "move_sprite_by_vector_percent",
      "unique_method_name": "sprite.move_by_vector_percent",
      "suffix_name": null,
      "description": "Moves the sprite a percentage of a given distance based on the value\npassed in rather than based on the sprite's velocity. Typically this\nmethod is used to apply other movement actions to the sprite and the\nvelocity of the sprite is used the intended movement of the sprite.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to move.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "distance": {
          "type": "vector_2d",
          "description": "The vector that represents the direction and distance to\nmove the sprite.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "pct": {
          "type": "float",
          "description": "The percentage of the distance to move the sprite.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "method": "move",
        "suffix": "by_vector_percent",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "void move_sprite(sprite s, const vector_2d &distance, float pct)"
        ],
        "rust": [
          "pub fn move_sprite(s: sprite, distance: &vector_2d, pct: f32)"
        ],
        "python": [
          "def move_sprite_by_vector_percent(s, distance, pct):"
        ],
        "pascal": [
          "procedure MoveSprite(s: Sprite; const distance: Vector2D; pct: Single)"
        ],
        "csharp": [
          "public void Sprite.MoveSprite(Vector2D distance, float pct);",
          "public static void SplashKit.MoveSprite(Sprite s, Vector2D distance, float pct);"
        ]
      }
    },
    {
      "signature": "void move_sprite(sprite s,float pct);",
      "name": "move_sprite",
      "method_name": "move",
      "unique_global_name": "move_sprite_percent",
      "unique_method_name": "sprite.move_percent",
      "suffix_name": null,
      "description": "Moves the sprite as indicated by a percentage of its velocity. You can call\nthis directly ot alternatively, this action is performed when the sprite is\nupdated using the ''update_sprite'' routines that require a percentage.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to move.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "pct": {
          "type": "float",
          "description": "The percentage of the sprite's velocity to move.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "method": "move",
        "suffix": "percent",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "void move_sprite(sprite s, float pct)"
        ],
        "rust": [
          "pub fn move_sprite(s: sprite, pct: f32)"
        ],
        "python": [
          "def move_sprite_percent(s, pct):"
        ],
        "pascal": [
          "procedure MoveSprite(s: Sprite; pct: Single)"
        ],
        "csharp": [
          "public void Sprite.MoveSprite(float pct);",
          "public static void SplashKit.MoveSprite(Sprite s, float pct);"
        ]
      }
    },
    {
      "signature": "void move_sprite_to(sprite s,double x,double y);",
      "name": "move_sprite_to",
      "method_name": "move_to",
      "unique_global_name": "move_sprite_to",
      "unique_method_name": "sprite.move_to",
      "suffix_name": null,
      "description": "This method moves a sprite to a given position in the game.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to move.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x": {
          "type": "double",
          "description": "The sprite's new x location.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y": {
          "type": "double",
          "description": "The sprite's new y location.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "method": "move_to",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "void move_sprite_to(sprite s, double x, double y)"
        ],
        "rust": [
          "pub fn move_sprite_to(s: sprite, x: f64, y: f64)"
        ],
        "python": [
          "def move_sprite_to(s, x, y):"
        ],
        "pascal": [
          "procedure MoveSpriteTo(s: Sprite; x: Double; y: Double)"
        ],
        "csharp": [
          "public void Sprite.MoveSpriteTo(double x, double y);",
          "public static void SplashKit.MoveSpriteTo(Sprite s, double x, double y);"
        ]
      }
    },
    {
      "signature": "void select_sprite_pack(const string &name);",
      "name": "select_sprite_pack",
      "method_name": null,
      "unique_global_name": "select_sprite_pack",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Selects the named sprite_pack (if it has been created). The\nselected sprite_pack determines which sprites are drawn and updated\nwith the draw_all_sprites and update_all_sprites code.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name of the sprite pack to select.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "sprites",
        "static": "sprite"
      },
      "signatures": {
        "cpp": [
          "void select_sprite_pack(const string &name)"
        ],
        "rust": [
          "pub fn select_sprite_pack(name: &String)"
        ],
        "python": [
          "def select_sprite_pack(name):"
        ],
        "pascal": [
          "procedure SelectSpritePack(const name: String)"
        ],
        "csharp": [
          "public static void Sprite.SelectSpritePack(string name);",
          "public static void SplashKit.SelectSpritePack(string name);"
        ]
      }
    },
    {
      "signature": "int sprite_add_layer(sprite s,bitmap new_layer,const string &layer_name);",
      "name": "sprite_add_layer",
      "method_name": "add_layer",
      "unique_global_name": "sprite_add_layer",
      "unique_method_name": "sprite.add_layer",
      "suffix_name": null,
      "description": "Adds a new layer to the sprite.",
      "brief": null,
      "return": {
        "type": "int",
        "description": "The index of the new layer.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to add the layer to.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "new_layer": {
          "type": "bitmap",
          "description": "The new layer's bitmap.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "layer_name": {
          "type": "string",
          "description": "The name of the new layer.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "method": "add_layer",
        "self": "s",
        "group": "sprites",
        "static": "sprite"
      },
      "signatures": {
        "cpp": [
          "int sprite_add_layer(sprite s, bitmap new_layer, const string &layer_name)"
        ],
        "rust": [
          "pub fn sprite_add_layer(s: sprite, new_layer: bitmap, layer_name: &String) -> i32"
        ],
        "python": [
          "def sprite_add_layer(s, new_layer, layer_name):"
        ],
        "pascal": [
          "function SpriteAddLayer(s: Sprite; newLayer: Bitmap; const layerName: String): Integer"
        ],
        "csharp": [
          "public int Sprite.SpriteAddLayer(Bitmap newLayer, string layerName);",
          "public static int SplashKit.SpriteAddLayer(Sprite s, Bitmap newLayer, string layerName);"
        ]
      }
    },
    {
      "signature": "void sprite_add_to_velocity(sprite s,const vector_2d &value);",
      "name": "sprite_add_to_velocity",
      "method_name": "add_to_velocity",
      "unique_global_name": "sprite_add_to_velocity",
      "unique_method_name": "sprite.add_to_velocity",
      "suffix_name": null,
      "description": "Alters the current velocity of the sprite, adding the passed in vector_2d to the current velocity.\nWhen the sprite is updated (see `update_sprite`)\nthis vector_2d is used to move the sprite.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to change.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "value": {
          "type": "vector_2d",
          "description": "The amount to add to the sprite's velocity.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "method": "add_to_velocity",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "void sprite_add_to_velocity(sprite s, const vector_2d &value)"
        ],
        "rust": [
          "pub fn sprite_add_to_velocity(s: sprite, value: &vector_2d)"
        ],
        "python": [
          "def sprite_add_to_velocity(s, value):"
        ],
        "pascal": [
          "procedure SpriteAddToVelocity(s: Sprite; const value: Vector2D)"
        ],
        "csharp": [
          "public void Sprite.SpriteAddToVelocity(Vector2D value);",
          "public static void SplashKit.SpriteAddToVelocity(Sprite s, Vector2D value);"
        ]
      }
    },
    {
      "signature": "void sprite_add_value(sprite s,const string &name);",
      "name": "sprite_add_value",
      "method_name": "add_value",
      "unique_global_name": "sprite_add_value",
      "unique_method_name": "sprite.add_value",
      "suffix_name": null,
      "description": "Adds a new kind of value to the sprite",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to change.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "name": {
          "type": "string",
          "description": "The name of the new value to store in the sprite.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "method": "add_value",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "void sprite_add_value(sprite s, const string &name)"
        ],
        "rust": [
          "pub fn sprite_add_value(s: sprite, name: &String)"
        ],
        "python": [
          "def sprite_add_value(s, name):"
        ],
        "pascal": [
          "procedure SpriteAddValue(s: Sprite; const name: String)"
        ],
        "csharp": [
          "public void Sprite.SpriteAddValue(string name);",
          "public static void SplashKit.SpriteAddValue(Sprite s, string name);"
        ]
      }
    },
    {
      "signature": "void sprite_add_value(sprite s,const string &name,float init_val);",
      "name": "sprite_add_value",
      "method_name": "add_value",
      "unique_global_name": "sprite_add_value_with_default",
      "unique_method_name": "sprite.add_value_with_default",
      "suffix_name": null,
      "description": "Adds a new kind of value to the sprite, setting the initial value\nto the value passed in.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to change.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "name": {
          "type": "string",
          "description": "The name of the new value to store in the sprite.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "init_val": {
          "type": "float",
          "description": "The initial value.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "method": "add_value",
        "suffix": "with_default",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "void sprite_add_value(sprite s, const string &name, float init_val)"
        ],
        "rust": [
          "pub fn sprite_add_value(s: sprite, name: &String, init_val: f32)"
        ],
        "python": [
          "def sprite_add_value_with_default(s, name, init_val):"
        ],
        "pascal": [
          "procedure SpriteAddValue(s: Sprite; const name: String; initVal: Single)"
        ],
        "csharp": [
          "public void Sprite.SpriteAddValue(string name, float initVal);",
          "public static void SplashKit.SpriteAddValue(Sprite s, string name, float initVal);"
        ]
      }
    },
    {
      "signature": "point_2d sprite_anchor_point(sprite s);",
      "name": "sprite_anchor_point",
      "method_name": null,
      "unique_global_name": "sprite_anchor_point",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the anchor point of the sprite. This is the point around which the\nsprite rotates. This is in sprite coordinates, so as if the sprite is drawn\nat 0,0.",
      "brief": null,
      "return": {
        "type": "point_2d",
        "description": "The anchor point of the sprite.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to get the details from.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "getter": "anchor_point",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "point_2d sprite_anchor_point(sprite s)"
        ],
        "rust": [
          "pub fn sprite_anchor_point(s: sprite) -> point_2d"
        ],
        "python": [
          "def sprite_anchor_point(s):"
        ],
        "pascal": [
          "function SpriteAnchorPoint(s: Sprite): Point2D"
        ],
        "csharp": [
          "public Point2D Sprite.AnchorPoint { get }",
          "public static Point2D SplashKit.SpriteAnchorPoint(Sprite s);"
        ]
      }
    },
    {
      "signature": "point_2d sprite_anchor_position(sprite s);",
      "name": "sprite_anchor_position",
      "method_name": null,
      "unique_global_name": "sprite_anchor_position",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "The sprite anchor position, is the location of the anchor point in world\ncoordinates, based upon the position of the sprite.",
      "brief": null,
      "return": {
        "type": "point_2d",
        "description": "The location of the sprite's anchor point positioned at the sprite's location",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to find where the anchor is in world coordinates",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "sprites",
        "static": "sprite"
      },
      "signatures": {
        "cpp": [
          "point_2d sprite_anchor_position(sprite s)"
        ],
        "rust": [
          "pub fn sprite_anchor_position(s: sprite) -> point_2d"
        ],
        "python": [
          "def sprite_anchor_position(s):"
        ],
        "pascal": [
          "function SpriteAnchorPosition(s: Sprite): Point2D"
        ],
        "csharp": [
          "public static Point2D Sprite.SpriteAnchorPosition(Sprite s);",
          "public static Point2D SplashKit.SpriteAnchorPosition(Sprite s);"
        ]
      }
    },
    {
      "signature": "bool sprite_animation_has_ended(sprite s);",
      "name": "sprite_animation_has_ended",
      "method_name": null,
      "unique_global_name": "sprite_animation_has_ended",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Indicates if the sprites animation has ended.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True if the sprite animation has ended.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to get the details from.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "getter": "animation_has_ended",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "bool sprite_animation_has_ended(sprite s)"
        ],
        "rust": [
          "pub fn sprite_animation_has_ended(s: sprite) -> bool"
        ],
        "python": [
          "def sprite_animation_has_ended(s):"
        ],
        "pascal": [
          "function SpriteAnimationHasEnded(s: Sprite): Boolean"
        ],
        "csharp": [
          "public bool Sprite.AnimationHasEnded { get }",
          "public static bool SplashKit.SpriteAnimationHasEnded(Sprite s);"
        ]
      }
    },
    {
      "signature": "string sprite_animation_name(sprite s);",
      "name": "sprite_animation_name",
      "method_name": "animation_name",
      "unique_global_name": "sprite_animation_name",
      "unique_method_name": "sprite.animation_name",
      "suffix_name": null,
      "description": "Returns the name of the sprite's current animation.",
      "brief": null,
      "return": {
        "type": "string",
        "description": "The name of the current animation.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to get the details from.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "method": "animation_name",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "string sprite_animation_name(sprite s)"
        ],
        "rust": [
          "pub fn sprite_animation_name(s: sprite) -> String"
        ],
        "python": [
          "def sprite_animation_name(s):"
        ],
        "pascal": [
          "function SpriteAnimationName(s: Sprite): String"
        ],
        "csharp": [
          "public string Sprite.SpriteAnimationName();",
          "public static string SplashKit.SpriteAnimationName(Sprite s);"
        ]
      }
    },
    {
      "signature": "bool sprite_at(sprite s,const point_2d &pt);",
      "name": "sprite_at",
      "method_name": null,
      "unique_global_name": "sprite_at",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Determines if a sprite is at a given point.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True if the sprite is at the given point",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to test",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "pt": {
          "type": "point_2d",
          "description": "The point to check (in world coordinates)",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "sprites",
        "static": "sprite"
      },
      "signatures": {
        "cpp": [
          "bool sprite_at(sprite s, const point_2d &pt)"
        ],
        "rust": [
          "pub fn sprite_at(s: sprite, pt: &point_2d) -> bool"
        ],
        "python": [
          "def sprite_at(s, pt):"
        ],
        "pascal": [
          "function SpriteAt(s: Sprite; const pt: Point2D): Boolean"
        ],
        "csharp": [
          "public static bool Sprite.SpriteAt(Sprite s, Point2D pt);",
          "public static bool SplashKit.SpriteAt(Sprite s, Point2D pt);"
        ]
      }
    },
    {
      "signature": "void sprite_bring_layer_forward(sprite s,int visible_layer);",
      "name": "sprite_bring_layer_forward",
      "method_name": "send_layer_forward",
      "unique_global_name": "sprite_bring_layer_forward",
      "unique_method_name": "sprite.send_layer_forward",
      "suffix_name": null,
      "description": "Sends the layer specified forward in the visible layer order.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to change",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "visible_layer": {
          "type": "int",
          "description": "The visible layer to bring forward",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "method": "send_layer_forward",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "void sprite_bring_layer_forward(sprite s, int visible_layer)"
        ],
        "rust": [
          "pub fn sprite_bring_layer_forward(s: sprite, visible_layer: i32)"
        ],
        "python": [
          "def sprite_bring_layer_forward(s, visible_layer):"
        ],
        "pascal": [
          "procedure SpriteBringLayerForward(s: Sprite; visibleLayer: Integer)"
        ],
        "csharp": [
          "public void Sprite.SpriteBringLayerForward(int visibleLayer);",
          "public static void SplashKit.SpriteBringLayerForward(Sprite s, int visibleLayer);"
        ]
      }
    },
    {
      "signature": "void sprite_bring_layer_to_front(sprite s,int visible_layer);",
      "name": "sprite_bring_layer_to_front",
      "method_name": "Send_layer_toFront",
      "unique_global_name": "sprite_bring_layer_to_front",
      "unique_method_name": "sprite.Send_layer_toFront",
      "suffix_name": null,
      "description": "Sends the layer specified to the front in the visible layer order.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to change",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "visible_layer": {
          "type": "int",
          "description": "The visible layer to bring to the front",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "method": "Send_layer_toFront",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "void sprite_bring_layer_to_front(sprite s, int visible_layer)"
        ],
        "rust": [
          "pub fn sprite_bring_layer_to_front(s: sprite, visible_layer: i32)"
        ],
        "python": [
          "def sprite_bring_layer_to_front(s, visible_layer):"
        ],
        "pascal": [
          "procedure SpriteBringLayerToFront(s: Sprite; visibleLayer: Integer)"
        ],
        "csharp": [
          "public void Sprite.SpriteBringLayerToFront(int visibleLayer);",
          "public static void SplashKit.SpriteBringLayerToFront(Sprite s, int visibleLayer);"
        ]
      }
    },
    {
      "signature": "void sprite_call_on_event(sprite s,sprite_event_handler *handler);",
      "name": "sprite_call_on_event",
      "method_name": "call_on_event",
      "unique_global_name": "sprite_call_on_event",
      "unique_method_name": "sprite.call_on_event",
      "suffix_name": null,
      "description": "Register a procedure to call when events occur on the sprite.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to add the handler to.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "handler": {
          "type": "sprite_event_handler",
          "description": "The function to call when this sprite raises an event.",
          "is_pointer": true,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "method": "call_on_event",
        "self": "s",
        "group": "sprites",
        "static": "sprite"
      },
      "signatures": {
        "cpp": [
          "void sprite_call_on_event(sprite s, sprite_event_handler *handler)"
        ],
        "rust": [
          "pub fn sprite_call_on_event(s: sprite, handler: sprite_event_handler)"
        ],
        "python": [
          "def sprite_call_on_event(s, handler):"
        ],
        "pascal": [
          "procedure SpriteCallOnEvent(s: Sprite; handler: SpriteEventHandler)"
        ],
        "csharp": [
          "public void Sprite.SpriteCallOnEvent(SpriteEventHandler handler);",
          "public static void SplashKit.SpriteCallOnEvent(Sprite s, SpriteEventHandler handler);"
        ]
      }
    },
    {
      "signature": "circle sprite_circle(sprite s);",
      "name": "sprite_circle",
      "method_name": "circle",
      "unique_global_name": "sprite_circle",
      "unique_method_name": "sprite.circle",
      "suffix_name": null,
      "description": "Gets a circle in the bounds of the base layer of the indicated sprite.",
      "brief": null,
      "return": {
        "type": "circle",
        "description": "A bounding circle that surrounds the sprite",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to get the details from.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "method": "circle",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "circle sprite_circle(sprite s)"
        ],
        "rust": [
          "pub fn sprite_circle(s: sprite) -> circle"
        ],
        "python": [
          "def sprite_circle(s):"
        ],
        "pascal": [
          "function SpriteCircle(s: Sprite): Circle"
        ],
        "csharp": [
          "public Circle Sprite.SpriteCircle();",
          "public static Circle SplashKit.SpriteCircle(Sprite s);"
        ]
      }
    },
    {
      "signature": "bitmap sprite_collision_bitmap(sprite s);",
      "name": "sprite_collision_bitmap",
      "method_name": null,
      "unique_global_name": "sprite_collision_bitmap",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the bitmap used by the sprite to determine if it has collided with\nother objects in the game.",
      "brief": null,
      "return": {
        "type": "bitmap",
        "description": "The bitmap used for collisions with this sprite.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to get the details from.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "getter": "collision_bitmap",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "bitmap sprite_collision_bitmap(sprite s)"
        ],
        "rust": [
          "pub fn sprite_collision_bitmap(s: sprite) -> bitmap"
        ],
        "python": [
          "def sprite_collision_bitmap(s):"
        ],
        "pascal": [
          "function SpriteCollisionBitmap(s: Sprite): Bitmap"
        ],
        "csharp": [
          "public Bitmap Sprite.CollisionBitmap { get }",
          "public static Bitmap SplashKit.SpriteCollisionBitmap(Sprite s);"
        ]
      }
    },
    {
      "signature": "circle sprite_collision_circle(sprite s);",
      "name": "sprite_collision_circle",
      "method_name": "collision_circle",
      "unique_global_name": "sprite_collision_circle",
      "unique_method_name": "sprite.collision_circle",
      "suffix_name": null,
      "description": "Gets a circle in the bounds of the indicated sprite's collision rectangle.",
      "brief": null,
      "return": {
        "type": "circle",
        "description": "A bounding circle that surrounds the sprite",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to get the details from.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "method": "collision_circle",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "circle sprite_collision_circle(sprite s)"
        ],
        "rust": [
          "pub fn sprite_collision_circle(s: sprite) -> circle"
        ],
        "python": [
          "def sprite_collision_circle(s):"
        ],
        "pascal": [
          "function SpriteCollisionCircle(s: Sprite): Circle"
        ],
        "csharp": [
          "public Circle Sprite.SpriteCollisionCircle();",
          "public static Circle SplashKit.SpriteCollisionCircle(Sprite s);"
        ]
      }
    },
    {
      "signature": "collision_test_kind sprite_collision_kind(sprite s);",
      "name": "sprite_collision_kind",
      "method_name": null,
      "unique_global_name": "sprite_collision_kind",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the kind of collision used with this sprite. This is used when\ndetermining if the sprite has collided with other objects in the game.",
      "brief": null,
      "return": {
        "type": "collision_test_kind",
        "description": "The kind of collisions performed with this sprite.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to get the details from.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "getter": "collision_kind",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "collision_test_kind sprite_collision_kind(sprite s)"
        ],
        "rust": [
          "pub fn sprite_collision_kind(s: sprite) -> collision_test_kind"
        ],
        "python": [
          "def sprite_collision_kind(s):"
        ],
        "pascal": [
          "function SpriteCollisionKind(s: Sprite): CollisionTestKind"
        ],
        "csharp": [
          "public CollisionTestKind Sprite.CollisionKind { get }",
          "public static CollisionTestKind SplashKit.SpriteCollisionKind(Sprite s);"
        ]
      }
    },
    {
      "signature": "rectangle sprite_collision_rectangle(sprite s);",
      "name": "sprite_collision_rectangle",
      "method_name": null,
      "unique_global_name": "sprite_collision_rectangle",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the collision rectangle for the specified sprite.",
      "brief": null,
      "return": {
        "type": "rectangle",
        "description": "A collision rectangle that surrounds the sprite.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to get the details from.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "getter": "collision_rectangle",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "rectangle sprite_collision_rectangle(sprite s)"
        ],
        "rust": [
          "pub fn sprite_collision_rectangle(s: sprite) -> rectangle"
        ],
        "python": [
          "def sprite_collision_rectangle(s):"
        ],
        "pascal": [
          "function SpriteCollisionRectangle(s: Sprite): Rectangle"
        ],
        "csharp": [
          "public Rectangle Sprite.CollisionRectangle { get }",
          "public static Rectangle SplashKit.SpriteCollisionRectangle(Sprite s);"
        ]
      }
    },
    {
      "signature": "int sprite_current_cell(sprite s);",
      "name": "sprite_current_cell",
      "method_name": null,
      "unique_global_name": "sprite_current_cell",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the current animation cell for an animated sprite. The cell is\nupdated when the sprite's animation data is updated.",
      "brief": null,
      "return": {
        "type": "int",
        "description": "The current cell animation of the sprite.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to get the details from.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "getter": "current_cell",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "int sprite_current_cell(sprite s)"
        ],
        "rust": [
          "pub fn sprite_current_cell(s: sprite) -> i32"
        ],
        "python": [
          "def sprite_current_cell(s):"
        ],
        "pascal": [
          "function SpriteCurrentCell(s: Sprite): Integer"
        ],
        "csharp": [
          "public int Sprite.CurrentCell { get }",
          "public static int SplashKit.SpriteCurrentCell(Sprite s);"
        ]
      }
    },
    {
      "signature": "rectangle sprite_current_cell_rectangle(sprite s);",
      "name": "sprite_current_cell_rectangle",
      "method_name": null,
      "unique_global_name": "sprite_current_cell_rectangle",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns a rectangle of the current cell within the sprite's image. This is used\nto determine what part of the bitmap should be used when the sprite is drawn.",
      "brief": null,
      "return": {
        "type": "rectangle",
        "description": "The current cell rectangle of the sprite.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to get the details from.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "getter": "current_cell_rectangle",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "rectangle sprite_current_cell_rectangle(sprite s)"
        ],
        "rust": [
          "pub fn sprite_current_cell_rectangle(s: sprite) -> rectangle"
        ],
        "python": [
          "def sprite_current_cell_rectangle(s):"
        ],
        "pascal": [
          "function SpriteCurrentCellRectangle(s: Sprite): Rectangle"
        ],
        "csharp": [
          "public Rectangle Sprite.CurrentCellRectangle { get }",
          "public static Rectangle SplashKit.SpriteCurrentCellRectangle(Sprite s);"
        ]
      }
    },
    {
      "signature": "float sprite_dx(sprite s);",
      "name": "sprite_dx",
      "method_name": null,
      "unique_global_name": "sprite_dx",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the X value of the sprite's velocity.",
      "brief": null,
      "return": {
        "type": "float",
        "description": "The x component of the sprite's velocity.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to get the details from.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "getter": "dx",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "float sprite_dx(sprite s)"
        ],
        "rust": [
          "pub fn sprite_dx(s: sprite) -> f32"
        ],
        "python": [
          "def sprite_dx(s):"
        ],
        "pascal": [
          "function SpriteDx(s: Sprite): Single"
        ],
        "csharp": [
          "public float Sprite.Dx { get }",
          "public static float SplashKit.SpriteDx(Sprite s);"
        ]
      }
    },
    {
      "signature": "float sprite_dy(sprite s);",
      "name": "sprite_dy",
      "method_name": null,
      "unique_global_name": "sprite_dy",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the Y value of the sprite's velocity.",
      "brief": null,
      "return": {
        "type": "float",
        "description": "The y component of the sprite's velocity.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to get the details from.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "getter": "dy",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "float sprite_dy(sprite s)"
        ],
        "rust": [
          "pub fn sprite_dy(s: sprite) -> f32"
        ],
        "python": [
          "def sprite_dy(s):"
        ],
        "pascal": [
          "function SpriteDy(s: Sprite): Single"
        ],
        "csharp": [
          "public float Sprite.Dy { get }",
          "public static float SplashKit.SpriteDy(Sprite s);"
        ]
      }
    },
    {
      "signature": "bool sprite_has_value(sprite s,string name);",
      "name": "sprite_has_value",
      "method_name": null,
      "unique_global_name": "sprite_has_value",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Indicates if the sprite has a value with the given name.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True if the sprite has a value with that name.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to get the details from.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "name": {
          "type": "string",
          "description": "The name of the value to check.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "sprites",
        "static": "sprite"
      },
      "signatures": {
        "cpp": [
          "bool sprite_has_value(sprite s, string name)"
        ],
        "rust": [
          "pub fn sprite_has_value(s: sprite, name: String) -> bool"
        ],
        "python": [
          "def sprite_has_value(s, name):"
        ],
        "pascal": [
          "function SpriteHasValue(s: Sprite; name: String): Boolean"
        ],
        "csharp": [
          "public static bool Sprite.SpriteHasValue(Sprite s, string name);",
          "public static bool SplashKit.SpriteHasValue(Sprite s, string name);"
        ]
      }
    },
    {
      "signature": "float sprite_heading(sprite s);",
      "name": "sprite_heading",
      "method_name": null,
      "unique_global_name": "sprite_heading",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the direction the sprite is heading in degrees.",
      "brief": null,
      "return": {
        "type": "float",
        "description": "The angle of the sprite velocity.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to get the details from.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "getter": "heading",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "float sprite_heading(sprite s)"
        ],
        "rust": [
          "pub fn sprite_heading(s: sprite) -> f32"
        ],
        "python": [
          "def sprite_heading(s):"
        ],
        "pascal": [
          "function SpriteHeading(s: Sprite): Single"
        ],
        "csharp": [
          "public float Sprite.Heading { get }",
          "public static float SplashKit.SpriteHeading(Sprite s);"
        ]
      }
    },
    {
      "signature": "int sprite_height(sprite s);",
      "name": "sprite_height",
      "method_name": null,
      "unique_global_name": "sprite_height",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "The current height of the sprite (aligned to the Y axis).",
      "brief": null,
      "return": {
        "type": "int",
        "description": "The height of the sprite in pixels.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to get the details from.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "getter": "Height",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "int sprite_height(sprite s)"
        ],
        "rust": [
          "pub fn sprite_height(s: sprite) -> i32"
        ],
        "python": [
          "def sprite_height(s):"
        ],
        "pascal": [
          "function SpriteHeight(s: Sprite): Integer"
        ],
        "csharp": [
          "public int Sprite.Height { get }",
          "public static int SplashKit.SpriteHeight(Sprite s);"
        ]
      }
    },
    {
      "signature": "void sprite_hide_layer(sprite s,const string &name);",
      "name": "sprite_hide_layer",
      "method_name": "hide_layer",
      "unique_global_name": "sprite_hide_layer_named",
      "unique_method_name": "sprite.hide_layer_named",
      "suffix_name": null,
      "description": "Hide the specified layer of the sprite.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to hide the layer of.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "name": {
          "type": "string",
          "description": "The name of the layer to hide.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "method": "hide_layer",
        "suffix": "named",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "void sprite_hide_layer(sprite s, const string &name)"
        ],
        "rust": [
          "pub fn sprite_hide_layer(s: sprite, name: &String)"
        ],
        "python": [
          "def sprite_hide_layer_named(s, name):"
        ],
        "pascal": [
          "procedure SpriteHideLayer(s: Sprite; const name: String)"
        ],
        "csharp": [
          "public void Sprite.SpriteHideLayer(string name);",
          "public static void SplashKit.SpriteHideLayer(Sprite s, string name);"
        ]
      }
    },
    {
      "signature": "void sprite_hide_layer(sprite s,int id);",
      "name": "sprite_hide_layer",
      "method_name": "Hide_layer",
      "unique_global_name": "sprite_hide_layer",
      "unique_method_name": "sprite.Hide_layer",
      "suffix_name": null,
      "description": "Hide the specified layer of the sprite.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to hide the layer of.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "id": {
          "type": "int",
          "description": "The index of the layer to hide.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "method": "Hide_layer",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "void sprite_hide_layer(sprite s, int id)"
        ],
        "rust": [
          "pub fn sprite_hide_layer(s: sprite, id: i32)"
        ],
        "python": [
          "def sprite_hide_layer(s, id):"
        ],
        "pascal": [
          "procedure SpriteHideLayer(s: Sprite; id: Integer)"
        ],
        "csharp": [
          "public void Sprite.SpriteHideLayer(int id);",
          "public static void SplashKit.SpriteHideLayer(Sprite s, int id);"
        ]
      }
    },
    {
      "signature": "bitmap sprite_layer(sprite s,const string &name);",
      "name": "sprite_layer",
      "method_name": "layer",
      "unique_global_name": "sprite_layer_named",
      "unique_method_name": "sprite.layer_named",
      "suffix_name": null,
      "description": "Returns the bitmap of the indicated layer of the sprite.",
      "brief": null,
      "return": {
        "type": "bitmap",
        "description": "The bitmap at the layer with the indicated name",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to get the layer from",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "name": {
          "type": "string",
          "description": "The name of the layer to fetch",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "method": "layer",
        "suffix": "named",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "bitmap sprite_layer(sprite s, const string &name)"
        ],
        "rust": [
          "pub fn sprite_layer(s: sprite, name: &String) -> bitmap"
        ],
        "python": [
          "def sprite_layer_named(s, name):"
        ],
        "pascal": [
          "function SpriteLayer(s: Sprite; const name: String): Bitmap"
        ],
        "csharp": [
          "public Bitmap Sprite.SpriteLayer(string name);",
          "public static Bitmap SplashKit.SpriteLayer(Sprite s, string name);"
        ]
      }
    },
    {
      "signature": "bitmap sprite_layer(sprite s,int idx);",
      "name": "sprite_layer",
      "method_name": "layer",
      "unique_global_name": "sprite_layer_at_index",
      "unique_method_name": "sprite.layer_at_index",
      "suffix_name": null,
      "description": "Returns the bitmap of the indicated layer of the sprite.",
      "brief": null,
      "return": {
        "type": "bitmap",
        "description": "The bitmap of the sprite at that layer",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to get the layer from",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "idx": {
          "type": "int",
          "description": "The index of the layer",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "method": "layer",
        "suffix": "at_index",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "bitmap sprite_layer(sprite s, int idx)"
        ],
        "rust": [
          "pub fn sprite_layer(s: sprite, idx: i32) -> bitmap"
        ],
        "python": [
          "def sprite_layer_at_index(s, idx):"
        ],
        "pascal": [
          "function SpriteLayer(s: Sprite; idx: Integer): Bitmap"
        ],
        "csharp": [
          "public Bitmap Sprite.SpriteLayer(int idx);",
          "public static Bitmap SplashKit.SpriteLayer(Sprite s, int idx);"
        ]
      }
    },
    {
      "signature": "circle sprite_layer_circle(sprite s,const string &name);",
      "name": "sprite_layer_circle",
      "method_name": "layer_circle",
      "unique_global_name": "sprite_layer_circle_named",
      "unique_method_name": "sprite.layer_circle_named",
      "suffix_name": null,
      "description": "Gets a circle in the bounds of the indicated layer.",
      "brief": null,
      "return": {
        "type": "circle",
        "description": "A bounding circle that surrounds the sprite's layer",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to get the details from.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "name": {
          "type": "string",
          "description": "The name of the layer.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "method": "layer_circle",
        "suffix": "named",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "circle sprite_layer_circle(sprite s, const string &name)"
        ],
        "rust": [
          "pub fn sprite_layer_circle(s: sprite, name: &String) -> circle"
        ],
        "python": [
          "def sprite_layer_circle_named(s, name):"
        ],
        "pascal": [
          "function SpriteLayerCircle(s: Sprite; const name: String): Circle"
        ],
        "csharp": [
          "public Circle Sprite.SpriteLayerCircle(string name);",
          "public static Circle SplashKit.SpriteLayerCircle(Sprite s, string name);"
        ]
      }
    },
    {
      "signature": "circle sprite_layer_circle(sprite s,int idx);",
      "name": "sprite_layer_circle",
      "method_name": "layer_circle",
      "unique_global_name": "sprite_layer_circle_at_index",
      "unique_method_name": "sprite.layer_circle_at_index",
      "suffix_name": null,
      "description": "Gets a circle in the bounds of the indicated layer.",
      "brief": null,
      "return": {
        "type": "circle",
        "description": "A bounding circle that surrounds the sprite's layer",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to get the details from.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "idx": {
          "type": "int",
          "description": "The index of the layer.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "method": "layer_circle",
        "suffix": "at_index",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "circle sprite_layer_circle(sprite s, int idx)"
        ],
        "rust": [
          "pub fn sprite_layer_circle(s: sprite, idx: i32) -> circle"
        ],
        "python": [
          "def sprite_layer_circle_at_index(s, idx):"
        ],
        "pascal": [
          "function SpriteLayerCircle(s: Sprite; idx: Integer): Circle"
        ],
        "csharp": [
          "public Circle Sprite.SpriteLayerCircle(int idx);",
          "public static Circle SplashKit.SpriteLayerCircle(Sprite s, int idx);"
        ]
      }
    },
    {
      "signature": "int sprite_layer_count(sprite s);",
      "name": "sprite_layer_count",
      "method_name": null,
      "unique_global_name": "sprite_layer_count",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the number of layers within the sprite.",
      "brief": null,
      "return": {
        "type": "int",
        "description": "The number of image layers in the sprite.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to get the layer count from.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "getter": "layer_count",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "int sprite_layer_count(sprite s)"
        ],
        "rust": [
          "pub fn sprite_layer_count(s: sprite) -> i32"
        ],
        "python": [
          "def sprite_layer_count(s):"
        ],
        "pascal": [
          "function SpriteLayerCount(s: Sprite): Integer"
        ],
        "csharp": [
          "public int Sprite.LayerCount { get }",
          "public static int SplashKit.SpriteLayerCount(Sprite s);"
        ]
      }
    },
    {
      "signature": "int sprite_layer_height(sprite s,const string &name);",
      "name": "sprite_layer_height",
      "method_name": "layer_height",
      "unique_global_name": "sprite_layer_height_named",
      "unique_method_name": "sprite.layer_height_named",
      "suffix_name": null,
      "description": "The height of a given layer of the sprite (aligned to the Y axis).",
      "brief": null,
      "return": {
        "type": "int",
        "description": "The height of the sprite's layer in pixels.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to get the details from.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "name": {
          "type": "string",
          "description": "The name of the layer to get the details of.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "method": "layer_height",
        "suffix": "named",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "int sprite_layer_height(sprite s, const string &name)"
        ],
        "rust": [
          "pub fn sprite_layer_height(s: sprite, name: &String) -> i32"
        ],
        "python": [
          "def sprite_layer_height_named(s, name):"
        ],
        "pascal": [
          "function SpriteLayerHeight(s: Sprite; const name: String): Integer"
        ],
        "csharp": [
          "public int Sprite.SpriteLayerHeight(string name);",
          "public static int SplashKit.SpriteLayerHeight(Sprite s, string name);"
        ]
      }
    },
    {
      "signature": "int sprite_layer_height(sprite s,int idx);",
      "name": "sprite_layer_height",
      "method_name": "layer_height",
      "unique_global_name": "sprite_layer_height",
      "unique_method_name": "sprite.layer_height",
      "suffix_name": null,
      "description": "The height of a given layer of the sprite (aligned to the Y axis).",
      "brief": null,
      "return": {
        "type": "int",
        "description": "The height of the sprite's layer in pixels.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to get the details from.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "idx": {
          "type": "int",
          "description": "The index of the layer to get the details of.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "method": "layer_height",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "int sprite_layer_height(sprite s, int idx)"
        ],
        "rust": [
          "pub fn sprite_layer_height(s: sprite, idx: i32) -> i32"
        ],
        "python": [
          "def sprite_layer_height(s, idx):"
        ],
        "pascal": [
          "function SpriteLayerHeight(s: Sprite; idx: Integer): Integer"
        ],
        "csharp": [
          "public int Sprite.SpriteLayerHeight(int idx);",
          "public static int SplashKit.SpriteLayerHeight(Sprite s, int idx);"
        ]
      }
    },
    {
      "signature": "int sprite_layer_index(sprite s,const string &name);",
      "name": "sprite_layer_index",
      "method_name": "Index_of_layer",
      "unique_global_name": "sprite_layer_index",
      "unique_method_name": "sprite.Index_of_layer",
      "suffix_name": null,
      "description": "Returns the index of the specified layer.",
      "brief": null,
      "return": {
        "type": "int",
        "description": "The index of the layer in the sprite",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to get the layer from",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "name": {
          "type": "string",
          "description": "The name of the layer to get the index of",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "method": "Index_of_layer",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "int sprite_layer_index(sprite s, const string &name)"
        ],
        "rust": [
          "pub fn sprite_layer_index(s: sprite, name: &String) -> i32"
        ],
        "python": [
          "def sprite_layer_index(s, name):"
        ],
        "pascal": [
          "function SpriteLayerIndex(s: Sprite; const name: String): Integer"
        ],
        "csharp": [
          "public int Sprite.SpriteLayerIndex(string name);",
          "public static int SplashKit.SpriteLayerIndex(Sprite s, string name);"
        ]
      }
    },
    {
      "signature": "string sprite_layer_name(sprite s,int idx);",
      "name": "sprite_layer_name",
      "method_name": "layer_name",
      "unique_global_name": "sprite_layer_name",
      "unique_method_name": "sprite.layer_name",
      "suffix_name": null,
      "description": "Returns the name of the specified layer.",
      "brief": null,
      "return": {
        "type": "string",
        "description": "The name of the sprite's layer at that index",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to get the layer name from",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "idx": {
          "type": "int",
          "description": "The index of the layer you want the name of",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "method": "layer_name",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "string sprite_layer_name(sprite s, int idx)"
        ],
        "rust": [
          "pub fn sprite_layer_name(s: sprite, idx: i32) -> String"
        ],
        "python": [
          "def sprite_layer_name(s, idx):"
        ],
        "pascal": [
          "function SpriteLayerName(s: Sprite; idx: Integer): String"
        ],
        "csharp": [
          "public string Sprite.SpriteLayerName(int idx);",
          "public static string SplashKit.SpriteLayerName(Sprite s, int idx);"
        ]
      }
    },
    {
      "signature": "vector_2d sprite_layer_offset(sprite s,const string &name);",
      "name": "sprite_layer_offset",
      "method_name": "layer_offset",
      "unique_global_name": "sprite_layer_offset_named",
      "unique_method_name": "sprite.layer_offset_named",
      "suffix_name": null,
      "description": "Gets the offset of the specified layer.",
      "brief": null,
      "return": {
        "type": "vector_2d",
        "description": "The offset of the named layer in the sprite.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to get the details from.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "name": {
          "type": "string",
          "description": "The name of the layer to get the offset of.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "method": "layer_offset",
        "suffix": "named",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "vector_2d sprite_layer_offset(sprite s, const string &name)"
        ],
        "rust": [
          "pub fn sprite_layer_offset(s: sprite, name: &String) -> vector_2d"
        ],
        "python": [
          "def sprite_layer_offset_named(s, name):"
        ],
        "pascal": [
          "function SpriteLayerOffset(s: Sprite; const name: String): Vector2D"
        ],
        "csharp": [
          "public Vector2D Sprite.SpriteLayerOffset(string name);",
          "public static Vector2D SplashKit.SpriteLayerOffset(Sprite s, string name);"
        ]
      }
    },
    {
      "signature": "vector_2d sprite_layer_offset(sprite s,int idx);",
      "name": "sprite_layer_offset",
      "method_name": "layer_offset",
      "unique_global_name": "sprite_layer_offset",
      "unique_method_name": "sprite.layer_offset",
      "suffix_name": null,
      "description": "Gets the offset of the specified layer.",
      "brief": null,
      "return": {
        "type": "vector_2d",
        "description": "The offset of the layer in the sprite.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to get the details from.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "idx": {
          "type": "int",
          "description": "The index of the layer to get the offset of.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "method": "layer_offset",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "vector_2d sprite_layer_offset(sprite s, int idx)"
        ],
        "rust": [
          "pub fn sprite_layer_offset(s: sprite, idx: i32) -> vector_2d"
        ],
        "python": [
          "def sprite_layer_offset(s, idx):"
        ],
        "pascal": [
          "function SpriteLayerOffset(s: Sprite; idx: Integer): Vector2D"
        ],
        "csharp": [
          "public Vector2D Sprite.SpriteLayerOffset(int idx);",
          "public static Vector2D SplashKit.SpriteLayerOffset(Sprite s, int idx);"
        ]
      }
    },
    {
      "signature": "rectangle sprite_layer_rectangle(sprite s,const string &name);",
      "name": "sprite_layer_rectangle",
      "method_name": "layer_rectangle",
      "unique_global_name": "sprite_layer_rectangle_named",
      "unique_method_name": "sprite.layer_rectangle_named",
      "suffix_name": null,
      "description": "Gets a rectangle that surrounds the indicated layer.",
      "brief": null,
      "return": {
        "type": "rectangle",
        "description": "A bounding rectangle that surrounds the sprite's layer",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to get the details from.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "name": {
          "type": "string",
          "description": "The name of the layer.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "method": "layer_rectangle",
        "suffix": "named",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "rectangle sprite_layer_rectangle(sprite s, const string &name)"
        ],
        "rust": [
          "pub fn sprite_layer_rectangle(s: sprite, name: &String) -> rectangle"
        ],
        "python": [
          "def sprite_layer_rectangle_named(s, name):"
        ],
        "pascal": [
          "function SpriteLayerRectangle(s: Sprite; const name: String): Rectangle"
        ],
        "csharp": [
          "public Rectangle Sprite.SpriteLayerRectangle(string name);",
          "public static Rectangle SplashKit.SpriteLayerRectangle(Sprite s, string name);"
        ]
      }
    },
    {
      "signature": "rectangle sprite_layer_rectangle(sprite s,int idx);",
      "name": "sprite_layer_rectangle",
      "method_name": "layer_rectangle",
      "unique_global_name": "sprite_layer_rectangle_at_index",
      "unique_method_name": "sprite.layer_rectangle_at_index",
      "suffix_name": null,
      "description": "Gets a rectangle that surrounds the indicated layer.",
      "brief": null,
      "return": {
        "type": "rectangle",
        "description": "A bounding rectangle that surrounds the sprite's layer",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to get the details from.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "idx": {
          "type": "int",
          "description": "The index of the layer.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "method": "layer_rectangle",
        "suffix": "at_index",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "rectangle sprite_layer_rectangle(sprite s, int idx)"
        ],
        "rust": [
          "pub fn sprite_layer_rectangle(s: sprite, idx: i32) -> rectangle"
        ],
        "python": [
          "def sprite_layer_rectangle_at_index(s, idx):"
        ],
        "pascal": [
          "function SpriteLayerRectangle(s: Sprite; idx: Integer): Rectangle"
        ],
        "csharp": [
          "public Rectangle Sprite.SpriteLayerRectangle(int idx);",
          "public static Rectangle SplashKit.SpriteLayerRectangle(Sprite s, int idx);"
        ]
      }
    },
    {
      "signature": "int sprite_layer_width(sprite s,const string &name);",
      "name": "sprite_layer_width",
      "method_name": "layer_width",
      "unique_global_name": "sprite_layer_width_named",
      "unique_method_name": "sprite.layer_width_named",
      "suffix_name": null,
      "description": "The width of a given layer of the sprite (aligned to the X axis).",
      "brief": null,
      "return": {
        "type": "int",
        "description": "The width of the sprite's layer in pixels.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to get the details from.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "name": {
          "type": "string",
          "description": "The name of the layer to get the details of.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "method": "layer_width",
        "suffix": "named",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "int sprite_layer_width(sprite s, const string &name)"
        ],
        "rust": [
          "pub fn sprite_layer_width(s: sprite, name: &String) -> i32"
        ],
        "python": [
          "def sprite_layer_width_named(s, name):"
        ],
        "pascal": [
          "function SpriteLayerWidth(s: Sprite; const name: String): Integer"
        ],
        "csharp": [
          "public int Sprite.SpriteLayerWidth(string name);",
          "public static int SplashKit.SpriteLayerWidth(Sprite s, string name);"
        ]
      }
    },
    {
      "signature": "int sprite_layer_width(sprite s,int idx);",
      "name": "sprite_layer_width",
      "method_name": "layer_width",
      "unique_global_name": "sprite_layer_width",
      "unique_method_name": "sprite.layer_width",
      "suffix_name": null,
      "description": "The width of a given layer of the sprite (aligned to the X axis).",
      "brief": null,
      "return": {
        "type": "int",
        "description": "The width of the sprite's layer in pixels.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to get the details from.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "idx": {
          "type": "int",
          "description": "The index of the layer to get the details of.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "method": "layer_width",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "int sprite_layer_width(sprite s, int idx)"
        ],
        "rust": [
          "pub fn sprite_layer_width(s: sprite, idx: i32) -> i32"
        ],
        "python": [
          "def sprite_layer_width(s, idx):"
        ],
        "pascal": [
          "function SpriteLayerWidth(s: Sprite; idx: Integer): Integer"
        ],
        "csharp": [
          "public int Sprite.SpriteLayerWidth(int idx);",
          "public static int SplashKit.SpriteLayerWidth(Sprite s, int idx);"
        ]
      }
    },
    {
      "signature": "matrix_2d sprite_location_matrix(sprite s);",
      "name": "sprite_location_matrix",
      "method_name": null,
      "unique_global_name": "sprite_location_matrix",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns a matrix that can be used to transform points into the coordinate\nspace of the passed in sprite.",
      "brief": null,
      "return": {
        "type": "matrix_2d",
        "description": "A matrix that transforms points into the sprites coordinate\nspace.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to get the details from.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "getter": "location_matrix",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "matrix_2d sprite_location_matrix(sprite s)"
        ],
        "rust": [
          "pub fn sprite_location_matrix(s: sprite) -> matrix_2d"
        ],
        "python": [
          "def sprite_location_matrix(s):"
        ],
        "pascal": [
          "function SpriteLocationMatrix(s: Sprite): Matrix2D"
        ],
        "csharp": [
          "public Matrix2D Sprite.LocationMatrix { get }",
          "public static Matrix2D SplashKit.SpriteLocationMatrix(Sprite s);"
        ]
      }
    },
    {
      "signature": "float sprite_mass(sprite s);",
      "name": "sprite_mass",
      "method_name": null,
      "unique_global_name": "sprite_mass",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "This indicates the mass of the sprite for any of the collide methods from\nPhysics. The mass of two colliding sprites will determine the relative\nvelocitys after the collision.",
      "brief": null,
      "return": {
        "type": "float",
        "description": "The mass of the sprite.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to get the details from.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "getter": "mass",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "float sprite_mass(sprite s)"
        ],
        "rust": [
          "pub fn sprite_mass(s: sprite) -> f32"
        ],
        "python": [
          "def sprite_mass(s):"
        ],
        "pascal": [
          "function SpriteMass(s: Sprite): Single"
        ],
        "csharp": [
          "public float Sprite.Mass { get }",
          "public static float SplashKit.SpriteMass(Sprite s);"
        ]
      }
    },
    {
      "signature": "bool sprite_move_from_anchor_point(sprite s);",
      "name": "sprite_move_from_anchor_point",
      "method_name": null,
      "unique_global_name": "sprite_move_from_anchor_point",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Indicates if the sprite is moved from its anchor point, or from its top left.\nWhen this returns true the location of the sprite will indicate its anchor point.\nWhen this returns false the location of the sprite is its top left corner.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True if the sprite moves from its anchor point.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to get the details of.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "getter": "move_from_anchor_point",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "bool sprite_move_from_anchor_point(sprite s)"
        ],
        "rust": [
          "pub fn sprite_move_from_anchor_point(s: sprite) -> bool"
        ],
        "python": [
          "def sprite_move_from_anchor_point(s):"
        ],
        "pascal": [
          "function SpriteMoveFromAnchorPoint(s: Sprite): Boolean"
        ],
        "csharp": [
          "public bool Sprite.MoveFromAnchorPoint { get }",
          "public static bool SplashKit.SpriteMoveFromAnchorPoint(Sprite s);"
        ]
      }
    },
    {
      "signature": "void sprite_move_to(sprite s,const point_2d &pt,float taking_seconds);",
      "name": "sprite_move_to",
      "method_name": "move_to",
      "unique_global_name": "sprite_move_to_taking_seconds",
      "unique_method_name": "sprite.move_to_taking_seconds",
      "suffix_name": null,
      "description": "This void starts the sprite moving to the indicated\ndestination point, over a specified number of seconds. When the\nsprite arrives it will raise the sprite_arrived event.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to move.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "pt": {
          "type": "point_2d",
          "description": "The sprite's destination.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "taking_seconds": {
          "type": "float",
          "description": "The time the sprite should take to get to pt.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "method": "move_to",
        "suffix": "taking_seconds",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "void sprite_move_to(sprite s, const point_2d &pt, float taking_seconds)"
        ],
        "rust": [
          "pub fn sprite_move_to(s: sprite, pt: &point_2d, taking_seconds: f32)"
        ],
        "python": [
          "def sprite_move_to_taking_seconds(s, pt, taking_seconds):"
        ],
        "pascal": [
          "procedure SpriteMoveTo(s: Sprite; const pt: Point2D; takingSeconds: Single)"
        ],
        "csharp": [
          "public void Sprite.SpriteMoveTo(Point2D pt, float takingSeconds);",
          "public static void SplashKit.SpriteMoveTo(Sprite s, Point2D pt, float takingSeconds);"
        ]
      }
    },
    {
      "signature": "string sprite_name(sprite s);",
      "name": "sprite_name",
      "method_name": null,
      "unique_global_name": "sprite_name",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the name of the sprite. This name is used for resource management\nand can be used to interact with the sprite in various routines.",
      "brief": null,
      "return": {
        "type": "string",
        "description": "The name of the sprite.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to get the details from.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "getter": "name",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "string sprite_name(sprite s)"
        ],
        "rust": [
          "pub fn sprite_name(s: sprite) -> String"
        ],
        "python": [
          "def sprite_name(s):"
        ],
        "pascal": [
          "function SpriteName(s: Sprite): String"
        ],
        "csharp": [
          "public string Sprite.Name { get }",
          "public static string SplashKit.SpriteName(Sprite s);"
        ]
      }
    },
    {
      "signature": "sprite sprite_named(const string &name);",
      "name": "sprite_named",
      "method_name": null,
      "unique_global_name": "sprite_named",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the `sprite` with the specified name.",
      "brief": null,
      "return": {
        "type": "sprite",
        "description": "The sprite with that name.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name of the sprite to locate.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "sprites",
        "static": "sprite"
      },
      "signatures": {
        "cpp": [
          "sprite sprite_named(const string &name)"
        ],
        "rust": [
          "pub fn sprite_named(name: &String) -> sprite"
        ],
        "python": [
          "def sprite_named(name):"
        ],
        "pascal": [
          "function SpriteNamed(const name: String): Sprite"
        ],
        "csharp": [
          "public static Sprite Sprite.SpriteNamed(string name);",
          "public static Sprite SplashKit.SpriteNamed(string name);"
        ]
      }
    },
    {
      "signature": "bool sprite_offscreen(sprite s);",
      "name": "sprite_offscreen",
      "method_name": "offscreen",
      "unique_global_name": "sprite_offscreen",
      "unique_method_name": "sprite.offscreen",
      "suffix_name": null,
      "description": "Returns true if the sprite is entirely off the current screen.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True if the sprite is entirely off the current window.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to test.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "method": "offscreen",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "bool sprite_offscreen(sprite s)"
        ],
        "rust": [
          "pub fn sprite_offscreen(s: sprite) -> bool"
        ],
        "python": [
          "def sprite_offscreen(s):"
        ],
        "pascal": [
          "function SpriteOffscreen(s: Sprite): Boolean"
        ],
        "csharp": [
          "public bool Sprite.SpriteOffscreen();",
          "public static bool SplashKit.SpriteOffscreen(Sprite s);"
        ]
      }
    },
    {
      "signature": "bool sprite_on_screen_at(sprite s,const point_2d &pt);",
      "name": "sprite_on_screen_at",
      "method_name": "on_screen_at",
      "unique_global_name": "sprite_on_screen_at_point",
      "unique_method_name": "sprite.on_screen_at_point",
      "suffix_name": null,
      "description": "Returns true if a pixel of the `sprite` `s` is at the screen location\nspecified (`pt`), which is converted to a world location.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True if the sprite would draw something at this coordinate on\nthe screen when drawn.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to test.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "pt": {
          "type": "point_2d",
          "description": "The location in screen coordinates to check.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "method": "on_screen_at",
        "suffix": "point",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "bool sprite_on_screen_at(sprite s, const point_2d &pt)"
        ],
        "rust": [
          "pub fn sprite_on_screen_at(s: sprite, pt: &point_2d) -> bool"
        ],
        "python": [
          "def sprite_on_screen_at_point(s, pt):"
        ],
        "pascal": [
          "function SpriteOnScreenAt(s: Sprite; const pt: Point2D): Boolean"
        ],
        "csharp": [
          "public bool Sprite.SpriteOnScreenAt(Point2D pt);",
          "public static bool SplashKit.SpriteOnScreenAt(Sprite s, Point2D pt);"
        ]
      }
    },
    {
      "signature": "bool sprite_on_screen_at(sprite s,double x,double y);",
      "name": "sprite_on_screen_at",
      "method_name": "on_screen_at",
      "unique_global_name": "sprite_on_screen_at",
      "unique_method_name": "sprite.on_screen_at",
      "suffix_name": null,
      "description": "Returns true if a pixel of the `sprite` `s` is at the screen location\nspecified.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True if the sprite would draw something at this coordinate on\nthe screen when drawn.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to test.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x": {
          "type": "double",
          "description": "The x location in screen coordinates to check.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y": {
          "type": "double",
          "description": "The y location in screen coordinates to check.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "method": "on_screen_at",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "bool sprite_on_screen_at(sprite s, double x, double y)"
        ],
        "rust": [
          "pub fn sprite_on_screen_at(s: sprite, x: f64, y: f64) -> bool"
        ],
        "python": [
          "def sprite_on_screen_at(s, x, y):"
        ],
        "pascal": [
          "function SpriteOnScreenAt(s: Sprite; x: Double; y: Double): Boolean"
        ],
        "csharp": [
          "public bool Sprite.SpriteOnScreenAt(double x, double y);",
          "public static bool SplashKit.SpriteOnScreenAt(Sprite s, double x, double y);"
        ]
      }
    },
    {
      "signature": "point_2d sprite_position(sprite s);",
      "name": "sprite_position",
      "method_name": null,
      "unique_global_name": "sprite_position",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the sprite's position.",
      "brief": null,
      "return": {
        "type": "point_2d",
        "description": "The location of the sprite.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to get the details from.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "getter": "Position",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "point_2d sprite_position(sprite s)"
        ],
        "rust": [
          "pub fn sprite_position(s: sprite) -> point_2d"
        ],
        "python": [
          "def sprite_position(s):"
        ],
        "pascal": [
          "function SpritePosition(s: Sprite): Point2D"
        ],
        "csharp": [
          "public Point2D Sprite.Position { get }",
          "public static Point2D SplashKit.SpritePosition(Sprite s);"
        ]
      }
    },
    {
      "signature": "void sprite_replay_animation(sprite s);",
      "name": "sprite_replay_animation",
      "method_name": "Replay_animation",
      "unique_global_name": "sprite_replay_animation",
      "unique_method_name": "sprite.Replay_animation",
      "suffix_name": null,
      "description": "Restart the sprite's current animation, this will play a sound if the\nfirst cell of the animation is associated with a sound effect.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to replay the animation of.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "method": "Replay_animation",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "void sprite_replay_animation(sprite s)"
        ],
        "rust": [
          "pub fn sprite_replay_animation(s: sprite)"
        ],
        "python": [
          "def sprite_replay_animation(s):"
        ],
        "pascal": [
          "procedure SpriteReplayAnimation(s: Sprite)"
        ],
        "csharp": [
          "public void Sprite.SpriteReplayAnimation();",
          "public static void SplashKit.SpriteReplayAnimation(Sprite s);"
        ]
      }
    },
    {
      "signature": "void sprite_replay_animation(sprite s,bool with_sound);",
      "name": "sprite_replay_animation",
      "method_name": "replay_animation",
      "unique_global_name": "sprite_replay_animation_with_sound",
      "unique_method_name": "sprite.replay_animation_with_sound",
      "suffix_name": null,
      "description": "Restart the sprite's current animation, this will play a sound if\nwith_sound is true and the first cell of the animation is associated\nwith a sound effect.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to replay the animation of.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "with_sound": {
          "type": "bool",
          "description": "If false, the animation will not play associated sound\neffects when restarted.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "method": "replay_animation",
        "suffix": "with_sound",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "void sprite_replay_animation(sprite s, bool with_sound)"
        ],
        "rust": [
          "pub fn sprite_replay_animation(s: sprite, with_sound: bool)"
        ],
        "python": [
          "def sprite_replay_animation_with_sound(s, with_sound):"
        ],
        "pascal": [
          "procedure SpriteReplayAnimation(s: Sprite; withSound: Boolean)"
        ],
        "csharp": [
          "public void Sprite.SpriteReplayAnimation(bool withSound);",
          "public static void SplashKit.SpriteReplayAnimation(Sprite s, bool withSound);"
        ]
      }
    },
    {
      "signature": "float sprite_rotation(sprite s);",
      "name": "sprite_rotation",
      "method_name": null,
      "unique_global_name": "sprite_rotation",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "This indicates the angle of rotation of the sprite. This will rotate any\nimages of the sprite before drawing, which can be very slow. avoid using\nthis method with bitmap based sprites where possible.",
      "brief": null,
      "return": {
        "type": "float",
        "description": "The angle of the sprite rotation.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to get the details from.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "getter": "rotation",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "float sprite_rotation(sprite s)"
        ],
        "rust": [
          "pub fn sprite_rotation(s: sprite) -> f32"
        ],
        "python": [
          "def sprite_rotation(s):"
        ],
        "pascal": [
          "function SpriteRotation(s: Sprite): Single"
        ],
        "csharp": [
          "public float Sprite.Rotation { get }",
          "public static float SplashKit.SpriteRotation(Sprite s);"
        ]
      }
    },
    {
      "signature": "float sprite_scale(sprite s);",
      "name": "sprite_scale",
      "method_name": null,
      "unique_global_name": "sprite_scale",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "This indicates the scale of the sprite. This will scale any\nimages of the sprite before drawing, which can be very slow. avoid using\nthis method with bitmap based sprites where possible.",
      "brief": null,
      "return": {
        "type": "float",
        "description": "The scale of the sprite.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to get the details from.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "getter": "scale",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "float sprite_scale(sprite s)"
        ],
        "rust": [
          "pub fn sprite_scale(s: sprite) -> f32"
        ],
        "python": [
          "def sprite_scale(s):"
        ],
        "pascal": [
          "function SpriteScale(s: Sprite): Single"
        ],
        "csharp": [
          "public float Sprite.Scale { get }",
          "public static float SplashKit.SpriteScale(Sprite s);"
        ]
      }
    },
    {
      "signature": "rectangle sprite_screen_rectangle(sprite s);",
      "name": "sprite_screen_rectangle",
      "method_name": null,
      "unique_global_name": "sprite_screen_rectangle",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the rectangle representing the location of the sprite on the\nscreen.",
      "brief": null,
      "return": {
        "type": "rectangle",
        "description": "A rectangle indicating where the sprite is on the screen.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to get the details from.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "getter": "screen_rectangle",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "rectangle sprite_screen_rectangle(sprite s)"
        ],
        "rust": [
          "pub fn sprite_screen_rectangle(s: sprite) -> rectangle"
        ],
        "python": [
          "def sprite_screen_rectangle(s):"
        ],
        "pascal": [
          "function SpriteScreenRectangle(s: Sprite): Rectangle"
        ],
        "csharp": [
          "public Rectangle Sprite.ScreenRectangle { get }",
          "public static Rectangle SplashKit.SpriteScreenRectangle(Sprite s);"
        ]
      }
    },
    {
      "signature": "void sprite_send_layer_backward(sprite s,int visible_layer);",
      "name": "sprite_send_layer_backward",
      "method_name": "Send_layer_toBackward",
      "unique_global_name": "sprite_send_layer_backward",
      "unique_method_name": "sprite.Send_layer_toBackward",
      "suffix_name": null,
      "description": "Sends the layer specified backward in the visible layer order.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to change",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "visible_layer": {
          "type": "int",
          "description": "The visible layer to send to backward",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "method": "Send_layer_toBackward",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "void sprite_send_layer_backward(sprite s, int visible_layer)"
        ],
        "rust": [
          "pub fn sprite_send_layer_backward(s: sprite, visible_layer: i32)"
        ],
        "python": [
          "def sprite_send_layer_backward(s, visible_layer):"
        ],
        "pascal": [
          "procedure SpriteSendLayerBackward(s: Sprite; visibleLayer: Integer)"
        ],
        "csharp": [
          "public void Sprite.SpriteSendLayerBackward(int visibleLayer);",
          "public static void SplashKit.SpriteSendLayerBackward(Sprite s, int visibleLayer);"
        ]
      }
    },
    {
      "signature": "void sprite_send_layer_to_back(sprite s,int visible_layer);",
      "name": "sprite_send_layer_to_back",
      "method_name": "send_layer_to_back",
      "unique_global_name": "sprite_send_layer_to_back",
      "unique_method_name": "sprite.send_layer_to_back",
      "suffix_name": null,
      "description": "Sends the layer specified to the back in the visible layer order.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to change",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "visible_layer": {
          "type": "int",
          "description": "The visible layer to send to back",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "method": "send_layer_to_back",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "void sprite_send_layer_to_back(sprite s, int visible_layer)"
        ],
        "rust": [
          "pub fn sprite_send_layer_to_back(s: sprite, visible_layer: i32)"
        ],
        "python": [
          "def sprite_send_layer_to_back(s, visible_layer):"
        ],
        "pascal": [
          "procedure SpriteSendLayerToBack(s: Sprite; visibleLayer: Integer)"
        ],
        "csharp": [
          "public void Sprite.SpriteSendLayerToBack(int visibleLayer);",
          "public static void SplashKit.SpriteSendLayerToBack(Sprite s, int visibleLayer);"
        ]
      }
    },
    {
      "signature": "void sprite_set_anchor_point(sprite s,const point_2d &pt);",
      "name": "sprite_set_anchor_point",
      "method_name": null,
      "unique_global_name": "sprite_set_anchor_point",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Allows you to set the anchor point for the sprite. This is the point around\nwhich the sprite rotates. This is in sprite coordinates, as if the sprite\nis drawn at 0,0.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to change.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "pt": {
          "type": "point_2d",
          "description": "The new anchor point in sprite coordinates.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "setter": "anchor_point",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "void sprite_set_anchor_point(sprite s, const point_2d &pt)"
        ],
        "rust": [
          "pub fn sprite_set_anchor_point(s: sprite, pt: &point_2d)"
        ],
        "python": [
          "def sprite_set_anchor_point(s, pt):"
        ],
        "pascal": [
          "procedure SpriteSetAnchorPoint(s: Sprite; const pt: Point2D)"
        ],
        "csharp": [
          "public void Sprite.AnchorPoint { set }",
          "public static void SplashKit.SpriteSetAnchorPoint(Sprite s, Point2D pt);"
        ]
      }
    },
    {
      "signature": "void sprite_set_collision_bitmap(sprite s,bitmap bmp);",
      "name": "sprite_set_collision_bitmap",
      "method_name": null,
      "unique_global_name": "sprite_set_collision_bitmap",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Sets the bitmap used by the sprite to determine if it has collided with\nother objects in the game. By default the collision_bitmap is set to the\nbitmap from the sprite's first layer.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to change.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "bmp": {
          "type": "bitmap",
          "description": "The new collision bitmap for the sprite.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "setter": "collision_bitmap",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "void sprite_set_collision_bitmap(sprite s, bitmap bmp)"
        ],
        "rust": [
          "pub fn sprite_set_collision_bitmap(s: sprite, bmp: bitmap)"
        ],
        "python": [
          "def sprite_set_collision_bitmap(s, bmp):"
        ],
        "pascal": [
          "procedure SpriteSetCollisionBitmap(s: Sprite; bmp: Bitmap)"
        ],
        "csharp": [
          "public void Sprite.CollisionBitmap { set }",
          "public static void SplashKit.SpriteSetCollisionBitmap(Sprite s, Bitmap bmp);"
        ]
      }
    },
    {
      "signature": "void sprite_set_collision_kind(sprite s,collision_test_kind value);",
      "name": "sprite_set_collision_kind",
      "method_name": null,
      "unique_global_name": "sprite_set_collision_kind",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Sets the kind of collision used with this sprite. This is used when\ndetermining if the sprite has collided with other objects in the game.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to change.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "value": {
          "type": "collision_test_kind",
          "description": "The new kind of collision test for this sprite.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "setter": "collision_kind",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "void sprite_set_collision_kind(sprite s, collision_test_kind value)"
        ],
        "rust": [
          "pub fn sprite_set_collision_kind(s: sprite, value: collision_test_kind)"
        ],
        "python": [
          "def sprite_set_collision_kind(s, value):"
        ],
        "pascal": [
          "procedure SpriteSetCollisionKind(s: Sprite; value: CollisionTestKind)"
        ],
        "csharp": [
          "public void Sprite.CollisionKind { set }",
          "public static void SplashKit.SpriteSetCollisionKind(Sprite s, CollisionTestKind value);"
        ]
      }
    },
    {
      "signature": "void sprite_set_dx(sprite s,float value);",
      "name": "sprite_set_dx",
      "method_name": null,
      "unique_global_name": "sprite_set_dx",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Sets the X value of the sprite's velocity.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to change.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "value": {
          "type": "float",
          "description": "The new x component of the sprite's velocity.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "setter": "dx",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "void sprite_set_dx(sprite s, float value)"
        ],
        "rust": [
          "pub fn sprite_set_dx(s: sprite, value: f32)"
        ],
        "python": [
          "def sprite_set_dx(s, value):"
        ],
        "pascal": [
          "procedure SpriteSetDx(s: Sprite; value: Single)"
        ],
        "csharp": [
          "public void Sprite.Dx { set }",
          "public static void SplashKit.SpriteSetDx(Sprite s, float value);"
        ]
      }
    },
    {
      "signature": "void sprite_set_dy(sprite s,float value);",
      "name": "sprite_set_dy",
      "method_name": null,
      "unique_global_name": "sprite_set_dy",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Sets the Y value of the sprite's velocity.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to change.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "value": {
          "type": "float",
          "description": "The new y component of the sprite's velocity.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "setter": "dy",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "void sprite_set_dy(sprite s, float value)"
        ],
        "rust": [
          "pub fn sprite_set_dy(s: sprite, value: f32)"
        ],
        "python": [
          "def sprite_set_dy(s, value):"
        ],
        "pascal": [
          "procedure SpriteSetDy(s: Sprite; value: Single)"
        ],
        "csharp": [
          "public void Sprite.Dy { set }",
          "public static void SplashKit.SpriteSetDy(Sprite s, float value);"
        ]
      }
    },
    {
      "signature": "void sprite_set_heading(sprite s,float value);",
      "name": "sprite_set_heading",
      "method_name": null,
      "unique_global_name": "sprite_set_heading",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Alters the direction the sprite is heading without changing the speed.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to change.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "value": {
          "type": "float",
          "description": "The new angle for the sprite's velocity -- distance remains the\nsame.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "setter": "heading",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "void sprite_set_heading(sprite s, float value)"
        ],
        "rust": [
          "pub fn sprite_set_heading(s: sprite, value: f32)"
        ],
        "python": [
          "def sprite_set_heading(s, value):"
        ],
        "pascal": [
          "procedure SpriteSetHeading(s: Sprite; value: Single)"
        ],
        "csharp": [
          "public void Sprite.Heading { set }",
          "public static void SplashKit.SpriteSetHeading(Sprite s, float value);"
        ]
      }
    },
    {
      "signature": "void sprite_set_layer_offset(sprite s,const string &name,const vector_2d &value);",
      "name": "sprite_set_layer_offset",
      "method_name": "set_layer_offset",
      "unique_global_name": "sprite_set_layer_offset_named",
      "unique_method_name": "sprite.set_layer_offset_named",
      "suffix_name": null,
      "description": "Sets the offset of the specified layer. The offset is used when the layer\nis drawn in the sprite, and moves the image relative to the sprite.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to change.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "name": {
          "type": "string",
          "description": "The name of the layer to change.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "value": {
          "type": "vector_2d",
          "description": "The new offset.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "method": "set_layer_offset",
        "suffix": "named",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "void sprite_set_layer_offset(sprite s, const string &name, const vector_2d &value)"
        ],
        "rust": [
          "pub fn sprite_set_layer_offset(s: sprite, name: &String, value: &vector_2d)"
        ],
        "python": [
          "def sprite_set_layer_offset_named(s, name, value):"
        ],
        "pascal": [
          "procedure SpriteSetLayerOffset(s: Sprite; const name: String; const value: Vector2D)"
        ],
        "csharp": [
          "public void Sprite.SpriteSetLayerOffset(string name, Vector2D value);",
          "public static void SplashKit.SpriteSetLayerOffset(Sprite s, string name, Vector2D value);"
        ]
      }
    },
    {
      "signature": "void sprite_set_layer_offset(sprite s,int idx,const vector_2d &value);",
      "name": "sprite_set_layer_offset",
      "method_name": "set_layer_offset",
      "unique_global_name": "sprite_set_layer_offset_at_index",
      "unique_method_name": "sprite.set_layer_offset_at_index",
      "suffix_name": null,
      "description": "Sets the offset of the specified layer.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to change.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "idx": {
          "type": "int",
          "description": "The index of the layer to change.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "value": {
          "type": "vector_2d",
          "description": "The new offset.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "method": "set_layer_offset",
        "suffix": "at_index",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "void sprite_set_layer_offset(sprite s, int idx, const vector_2d &value)"
        ],
        "rust": [
          "pub fn sprite_set_layer_offset(s: sprite, idx: i32, value: &vector_2d)"
        ],
        "python": [
          "def sprite_set_layer_offset_at_index(s, idx, value):"
        ],
        "pascal": [
          "procedure SpriteSetLayerOffset(s: Sprite; idx: Integer; const value: Vector2D)"
        ],
        "csharp": [
          "public void Sprite.SpriteSetLayerOffset(int idx, Vector2D value);",
          "public static void SplashKit.SpriteSetLayerOffset(Sprite s, int idx, Vector2D value);"
        ]
      }
    },
    {
      "signature": "void sprite_set_mass(sprite s,float value);",
      "name": "sprite_set_mass",
      "method_name": null,
      "unique_global_name": "sprite_set_mass",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Allows you to change the mass of a sprite.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to change.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "value": {
          "type": "float",
          "description": "The new mass for the sprite.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "setter": "mass",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "void sprite_set_mass(sprite s, float value)"
        ],
        "rust": [
          "pub fn sprite_set_mass(s: sprite, value: f32)"
        ],
        "python": [
          "def sprite_set_mass(s, value):"
        ],
        "pascal": [
          "procedure SpriteSetMass(s: Sprite; value: Single)"
        ],
        "csharp": [
          "public void Sprite.Mass { set }",
          "public static void SplashKit.SpriteSetMass(Sprite s, float value);"
        ]
      }
    },
    {
      "signature": "void sprite_set_move_from_anchor_point(sprite s,bool value);",
      "name": "sprite_set_move_from_anchor_point",
      "method_name": null,
      "unique_global_name": "sprite_set_move_from_anchor_point",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Allows you to indicate if the sprite is moved from its anchor point, or from its\ntop left.\n\nWhen set to true the location of the sprite will be its anchor point.\nWhen set to false the location of the sprite is its top left corner.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to change.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "value": {
          "type": "bool",
          "description": "The value to set this option.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "setter": "move_from_anchor_point",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "void sprite_set_move_from_anchor_point(sprite s, bool value)"
        ],
        "rust": [
          "pub fn sprite_set_move_from_anchor_point(s: sprite, value: bool)"
        ],
        "python": [
          "def sprite_set_move_from_anchor_point(s, value):"
        ],
        "pascal": [
          "procedure SpriteSetMoveFromAnchorPoint(s: Sprite; value: Boolean)"
        ],
        "csharp": [
          "public void Sprite.MoveFromAnchorPoint { set }",
          "public static void SplashKit.SpriteSetMoveFromAnchorPoint(Sprite s, bool value);"
        ]
      }
    },
    {
      "signature": "void sprite_set_position(sprite s,const point_2d &value);",
      "name": "sprite_set_position",
      "method_name": null,
      "unique_global_name": "sprite_set_position",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Sets the sprite's position.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to change.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "value": {
          "type": "point_2d",
          "description": "The new location for the sprite.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "setter": "Position",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "void sprite_set_position(sprite s, const point_2d &value)"
        ],
        "rust": [
          "pub fn sprite_set_position(s: sprite, value: &point_2d)"
        ],
        "python": [
          "def sprite_set_position(s, value):"
        ],
        "pascal": [
          "procedure SpriteSetPosition(s: Sprite; const value: Point2D)"
        ],
        "csharp": [
          "public void Sprite.Position { set }",
          "public static void SplashKit.SpriteSetPosition(Sprite s, Point2D value);"
        ]
      }
    },
    {
      "signature": "void sprite_set_rotation(sprite s,float value);",
      "name": "sprite_set_rotation",
      "method_name": null,
      "unique_global_name": "sprite_set_rotation",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Allows you to change the rotation of a sprite.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to change.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "value": {
          "type": "float",
          "description": "The new rotation angle for the sprite",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "setter": "rotation",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "void sprite_set_rotation(sprite s, float value)"
        ],
        "rust": [
          "pub fn sprite_set_rotation(s: sprite, value: f32)"
        ],
        "python": [
          "def sprite_set_rotation(s, value):"
        ],
        "pascal": [
          "procedure SpriteSetRotation(s: Sprite; value: Single)"
        ],
        "csharp": [
          "public void Sprite.Rotation { set }",
          "public static void SplashKit.SpriteSetRotation(Sprite s, float value);"
        ]
      }
    },
    {
      "signature": "void sprite_set_scale(sprite s,float value);",
      "name": "sprite_set_scale",
      "method_name": null,
      "unique_global_name": "sprite_set_scale",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Allows you to change the scale of a sprite.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to change.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "value": {
          "type": "float",
          "description": "The new scale for the sprite.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "setter": "scale",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "void sprite_set_scale(sprite s, float value)"
        ],
        "rust": [
          "pub fn sprite_set_scale(s: sprite, value: f32)"
        ],
        "python": [
          "def sprite_set_scale(s, value):"
        ],
        "pascal": [
          "procedure SpriteSetScale(s: Sprite; value: Single)"
        ],
        "csharp": [
          "public void Sprite.Scale { set }",
          "public static void SplashKit.SpriteSetScale(Sprite s, float value);"
        ]
      }
    },
    {
      "signature": "void sprite_set_speed(sprite s,float value);",
      "name": "sprite_set_speed",
      "method_name": null,
      "unique_global_name": "sprite_set_speed",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Alters the speed of the sprite without effecting the direction.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to change.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "value": {
          "type": "float",
          "description": "The new speed of the sprite -- direction will remain the same.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "setter": "speed",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "void sprite_set_speed(sprite s, float value)"
        ],
        "rust": [
          "pub fn sprite_set_speed(s: sprite, value: f32)"
        ],
        "python": [
          "def sprite_set_speed(s, value):"
        ],
        "pascal": [
          "procedure SpriteSetSpeed(s: Sprite; value: Single)"
        ],
        "csharp": [
          "public void Sprite.Speed { set }",
          "public static void SplashKit.SpriteSetSpeed(Sprite s, float value);"
        ]
      }
    },
    {
      "signature": "void sprite_set_value(sprite s,const string &name,float val);",
      "name": "sprite_set_value",
      "method_name": "set_value",
      "unique_global_name": "sprite_set_value_named",
      "unique_method_name": "sprite.set_value_named",
      "suffix_name": null,
      "description": "Assigns a value to the sprite.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to change.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "name": {
          "type": "string",
          "description": "The name of the value to change",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "val": {
          "type": "float",
          "description": "The new value.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "method": "set_value",
        "suffix": "named",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "void sprite_set_value(sprite s, const string &name, float val)"
        ],
        "rust": [
          "pub fn sprite_set_value(s: sprite, name: &String, val: f32)"
        ],
        "python": [
          "def sprite_set_value_named(s, name, val):"
        ],
        "pascal": [
          "procedure SpriteSetValue(s: Sprite; const name: String; val: Single)"
        ],
        "csharp": [
          "public void Sprite.SpriteSetValue(string name, float val);",
          "public static void SplashKit.SpriteSetValue(Sprite s, string name, float val);"
        ]
      }
    },
    {
      "signature": "void sprite_set_velocity(sprite s,const vector_2d &value);",
      "name": "sprite_set_velocity",
      "method_name": null,
      "unique_global_name": "sprite_set_velocity",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Sets the current velocity of the sprite. When the sprite is updated\n(see `update_sprite`) this vector_2d is used to move the sprite.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to change.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "value": {
          "type": "vector_2d",
          "description": "The new sprite velocity.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "setter": "velocity",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "void sprite_set_velocity(sprite s, const vector_2d &value)"
        ],
        "rust": [
          "pub fn sprite_set_velocity(s: sprite, value: &vector_2d)"
        ],
        "python": [
          "def sprite_set_velocity(s, value):"
        ],
        "pascal": [
          "procedure SpriteSetVelocity(s: Sprite; const value: Vector2D)"
        ],
        "csharp": [
          "public void Sprite.Velocity { set }",
          "public static void SplashKit.SpriteSetVelocity(Sprite s, Vector2D value);"
        ]
      }
    },
    {
      "signature": "void sprite_set_x(sprite s,float value);",
      "name": "sprite_set_x",
      "method_name": null,
      "unique_global_name": "sprite_set_x",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Sets the X position of the sprite.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to change.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "value": {
          "type": "float",
          "description": "The new x location.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "setter": "x",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "void sprite_set_x(sprite s, float value)"
        ],
        "rust": [
          "pub fn sprite_set_x(s: sprite, value: f32)"
        ],
        "python": [
          "def sprite_set_x(s, value):"
        ],
        "pascal": [
          "procedure SpriteSetX(s: Sprite; value: Single)"
        ],
        "csharp": [
          "public void Sprite.X { set }",
          "public static void SplashKit.SpriteSetX(Sprite s, float value);"
        ]
      }
    },
    {
      "signature": "void sprite_set_y(sprite s,float value);",
      "name": "sprite_set_y",
      "method_name": null,
      "unique_global_name": "sprite_set_y",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Sets the Y position of the sprite.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to change.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "value": {
          "type": "float",
          "description": "The new sprite y.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "setter": "y",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "void sprite_set_y(sprite s, float value)"
        ],
        "rust": [
          "pub fn sprite_set_y(s: sprite, value: f32)"
        ],
        "python": [
          "def sprite_set_y(s, value):"
        ],
        "pascal": [
          "procedure SpriteSetY(s: Sprite; value: Single)"
        ],
        "csharp": [
          "public void Sprite.Y { set }",
          "public static void SplashKit.SpriteSetY(Sprite s, float value);"
        ]
      }
    },
    {
      "signature": "int sprite_show_layer(sprite s,const string &name);",
      "name": "sprite_show_layer",
      "method_name": "show_layer",
      "unique_global_name": "sprite_show_layer_named",
      "unique_method_name": "sprite.show_layer_named",
      "suffix_name": null,
      "description": "Show the specified layer of the sprite.",
      "brief": null,
      "return": {
        "type": "int",
        "description": "The index of the layer shown, or -1 if no layer found.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to show the layer of.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "name": {
          "type": "string",
          "description": "The layer to show.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "method": "show_layer",
        "suffix": "named",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "int sprite_show_layer(sprite s, const string &name)"
        ],
        "rust": [
          "pub fn sprite_show_layer(s: sprite, name: &String) -> i32"
        ],
        "python": [
          "def sprite_show_layer_named(s, name):"
        ],
        "pascal": [
          "function SpriteShowLayer(s: Sprite; const name: String): Integer"
        ],
        "csharp": [
          "public int Sprite.SpriteShowLayer(string name);",
          "public static int SplashKit.SpriteShowLayer(Sprite s, string name);"
        ]
      }
    },
    {
      "signature": "int sprite_show_layer(sprite s,int id);",
      "name": "sprite_show_layer",
      "method_name": "show_layer",
      "unique_global_name": "sprite_show_layer",
      "unique_method_name": "sprite.show_layer",
      "suffix_name": null,
      "description": "Show the specified layer of the sprite.",
      "brief": null,
      "return": {
        "type": "int",
        "description": "The index of the layer shown, or -1 if no layer found.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to show the layer of.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "id": {
          "type": "int",
          "description": "The index to show.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "method": "show_layer",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "int sprite_show_layer(sprite s, int id)"
        ],
        "rust": [
          "pub fn sprite_show_layer(s: sprite, id: i32) -> i32"
        ],
        "python": [
          "def sprite_show_layer(s, id):"
        ],
        "pascal": [
          "function SpriteShowLayer(s: Sprite; id: Integer): Integer"
        ],
        "csharp": [
          "public int Sprite.SpriteShowLayer(int id);",
          "public static int SplashKit.SpriteShowLayer(Sprite s, int id);"
        ]
      }
    },
    {
      "signature": "float sprite_speed(sprite s);",
      "name": "sprite_speed",
      "method_name": null,
      "unique_global_name": "sprite_speed",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the current speed (distance travelled per update) of the sprite.",
      "brief": null,
      "return": {
        "type": "float",
        "description": "The speed of the sprite (pixels per update).",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to get the details from.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "getter": "speed",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "float sprite_speed(sprite s)"
        ],
        "rust": [
          "pub fn sprite_speed(s: sprite) -> f32"
        ],
        "python": [
          "def sprite_speed(s):"
        ],
        "pascal": [
          "function SpriteSpeed(s: Sprite): Single"
        ],
        "csharp": [
          "public float Sprite.Speed { get }",
          "public static float SplashKit.SpriteSpeed(Sprite s);"
        ]
      }
    },
    {
      "signature": "void sprite_start_animation(sprite s,const string &named);",
      "name": "sprite_start_animation",
      "method_name": "start_animation",
      "unique_global_name": "sprite_start_animation_named",
      "unique_method_name": "sprite.start_animation_named",
      "suffix_name": null,
      "description": "Start playing an animation from the sprite's animation template.\nThis will play a sound effect if the first cell of the animation\nhas a sound.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to start the animation of.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "named": {
          "type": "string",
          "description": "The name of the animation to start from the animation script.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "method": "start_animation",
        "suffix": "named",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "void sprite_start_animation(sprite s, const string &named)"
        ],
        "rust": [
          "pub fn sprite_start_animation(s: sprite, named: &String)"
        ],
        "python": [
          "def sprite_start_animation_named(s, named):"
        ],
        "pascal": [
          "procedure SpriteStartAnimation(s: Sprite; const named: String)"
        ],
        "csharp": [
          "public void Sprite.SpriteStartAnimation(string named);",
          "public static void SplashKit.SpriteStartAnimation(Sprite s, string named);"
        ]
      }
    },
    {
      "signature": "void sprite_start_animation(sprite s,const string &named,bool with_sound);",
      "name": "sprite_start_animation",
      "method_name": "start_animation",
      "unique_global_name": "sprite_start_animation_named_with_sound",
      "unique_method_name": "sprite.start_animation_named_with_sound",
      "suffix_name": null,
      "description": "Start playing an animation from the sprite's animation template.\nThe with_sound parameter determines whether to play a sound effect\nif the first cell of the animation has a sound.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to start the animation of.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "named": {
          "type": "string",
          "description": "The name of the animation to start from the animation script.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "with_sound": {
          "type": "bool",
          "description": "If false, the animation will not play associated sound\neffects when started.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "method": "start_animation",
        "suffix": "named_with_sound",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "void sprite_start_animation(sprite s, const string &named, bool with_sound)"
        ],
        "rust": [
          "pub fn sprite_start_animation(s: sprite, named: &String, with_sound: bool)"
        ],
        "python": [
          "def sprite_start_animation_named_with_sound(s, named, with_sound):"
        ],
        "pascal": [
          "procedure SpriteStartAnimation(s: Sprite; const named: String; withSound: Boolean)"
        ],
        "csharp": [
          "public void Sprite.SpriteStartAnimation(string named, bool withSound);",
          "public static void SplashKit.SpriteStartAnimation(Sprite s, string named, bool withSound);"
        ]
      }
    },
    {
      "signature": "void sprite_start_animation(sprite s,int idx);",
      "name": "sprite_start_animation",
      "method_name": "start_animation",
      "unique_global_name": "sprite_start_animation",
      "unique_method_name": "sprite.start_animation",
      "suffix_name": null,
      "description": "Start playing an animation from the sprite's animation template.\nThis will play a sound effect if the first cell of the animation\nhas a sound.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to start the animation of.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "idx": {
          "type": "int",
          "description": "The index of the animation to start from the animation script.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "method": "start_animation",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "void sprite_start_animation(sprite s, int idx)"
        ],
        "rust": [
          "pub fn sprite_start_animation(s: sprite, idx: i32)"
        ],
        "python": [
          "def sprite_start_animation(s, idx):"
        ],
        "pascal": [
          "procedure SpriteStartAnimation(s: Sprite; idx: Integer)"
        ],
        "csharp": [
          "public void Sprite.SpriteStartAnimation(int idx);",
          "public static void SplashKit.SpriteStartAnimation(Sprite s, int idx);"
        ]
      }
    },
    {
      "signature": "void sprite_start_animation(sprite s,int idx,bool with_sound);",
      "name": "sprite_start_animation",
      "method_name": "start_animation",
      "unique_global_name": "sprite_start_animation_with_sound",
      "unique_method_name": "sprite.start_animation_with_sound",
      "suffix_name": null,
      "description": "Start playing an animation from the sprite's animation template.\nThe with_sound parameter determines whether to play a sound effect\nif the first cell of the animation has a sound.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to start the animation of.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "idx": {
          "type": "int",
          "description": "The index of the animation to start from the animation script.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "with_sound": {
          "type": "bool",
          "description": "If false, the animation will not play associated sound\neffects when started.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "method": "start_animation",
        "suffix": "with_sound",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "void sprite_start_animation(sprite s, int idx, bool with_sound)"
        ],
        "rust": [
          "pub fn sprite_start_animation(s: sprite, idx: i32, with_sound: bool)"
        ],
        "python": [
          "def sprite_start_animation_with_sound(s, idx, with_sound):"
        ],
        "pascal": [
          "procedure SpriteStartAnimation(s: Sprite; idx: Integer; withSound: Boolean)"
        ],
        "csharp": [
          "public void Sprite.SpriteStartAnimation(int idx, bool withSound);",
          "public static void SplashKit.SpriteStartAnimation(Sprite s, int idx, bool withSound);"
        ]
      }
    },
    {
      "signature": "void sprite_stop_calling_on_event(sprite s,sprite_event_handler *handler);",
      "name": "sprite_stop_calling_on_event",
      "method_name": "stop_calling_on_event",
      "unique_global_name": "sprite_stop_calling_on_event",
      "unique_method_name": "sprite.stop_calling_on_event",
      "suffix_name": null,
      "description": "Removes an event handler from the sprite, stopping events from this\nsprite calling the indicated method.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to remove the handler from",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "handler": {
          "type": "sprite_event_handler",
          "description": "The function to remove from this sprites handlers",
          "is_pointer": true,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "method": "stop_calling_on_event",
        "self": "s",
        "group": "sprites",
        "static": "sprite"
      },
      "signatures": {
        "cpp": [
          "void sprite_stop_calling_on_event(sprite s, sprite_event_handler *handler)"
        ],
        "rust": [
          "pub fn sprite_stop_calling_on_event(s: sprite, handler: sprite_event_handler)"
        ],
        "python": [
          "def sprite_stop_calling_on_event(s, handler):"
        ],
        "pascal": [
          "procedure SpriteStopCallingOnEvent(s: Sprite; handler: SpriteEventHandler)"
        ],
        "csharp": [
          "public void Sprite.SpriteStopCallingOnEvent(SpriteEventHandler handler);",
          "public static void SplashKit.SpriteStopCallingOnEvent(Sprite s, SpriteEventHandler handler);"
        ]
      }
    },
    {
      "signature": "void sprite_toggle_layer_visible(sprite s,const string &name);",
      "name": "sprite_toggle_layer_visible",
      "method_name": "toggle_layer_visible",
      "unique_global_name": "sprite_toggle_layer_visible_named",
      "unique_method_name": "sprite.toggle_layer_visible_named",
      "suffix_name": null,
      "description": "Toggle the visibility of the specified layer of the sprite.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to change.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "name": {
          "type": "string",
          "description": "The name of the layer to toggle.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "method": "toggle_layer_visible",
        "suffix": "named",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "void sprite_toggle_layer_visible(sprite s, const string &name)"
        ],
        "rust": [
          "pub fn sprite_toggle_layer_visible(s: sprite, name: &String)"
        ],
        "python": [
          "def sprite_toggle_layer_visible_named(s, name):"
        ],
        "pascal": [
          "procedure SpriteToggleLayerVisible(s: Sprite; const name: String)"
        ],
        "csharp": [
          "public void Sprite.SpriteToggleLayerVisible(string name);",
          "public static void SplashKit.SpriteToggleLayerVisible(Sprite s, string name);"
        ]
      }
    },
    {
      "signature": "void sprite_toggle_layer_visible(sprite s,int id);",
      "name": "sprite_toggle_layer_visible",
      "method_name": "Toggle_layer_visible",
      "unique_global_name": "sprite_toggle_layer_visible",
      "unique_method_name": "sprite.Toggle_layer_visible",
      "suffix_name": null,
      "description": "Toggle the visibility of the specified layer of the sprite.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to change.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "id": {
          "type": "int",
          "description": "The index of the layer to toggle.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "method": "Toggle_layer_visible",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "void sprite_toggle_layer_visible(sprite s, int id)"
        ],
        "rust": [
          "pub fn sprite_toggle_layer_visible(s: sprite, id: i32)"
        ],
        "python": [
          "def sprite_toggle_layer_visible(s, id):"
        ],
        "pascal": [
          "procedure SpriteToggleLayerVisible(s: Sprite; id: Integer)"
        ],
        "csharp": [
          "public void Sprite.SpriteToggleLayerVisible(int id);",
          "public static void SplashKit.SpriteToggleLayerVisible(Sprite s, int id);"
        ]
      }
    },
    {
      "signature": "float sprite_value(sprite s,const string &name);",
      "name": "sprite_value",
      "method_name": "value",
      "unique_global_name": "sprite_value",
      "unique_method_name": "sprite.value",
      "suffix_name": null,
      "description": "Returns the indicated value of the sprite",
      "brief": null,
      "return": {
        "type": "float",
        "description": "The value from the sprite's data store.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to get the details from.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "name": {
          "type": "string",
          "description": "The name of the value to fetch.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "method": "value",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "float sprite_value(sprite s, const string &name)"
        ],
        "rust": [
          "pub fn sprite_value(s: sprite, name: &String) -> f32"
        ],
        "python": [
          "def sprite_value(s, name):"
        ],
        "pascal": [
          "function SpriteValue(s: Sprite; const name: String): Single"
        ],
        "csharp": [
          "public float Sprite.SpriteValue(string name);",
          "public static float SplashKit.SpriteValue(Sprite s, string name);"
        ]
      }
    },
    {
      "signature": "int sprite_value_count(sprite s);",
      "name": "sprite_value_count",
      "method_name": null,
      "unique_global_name": "sprite_value_count",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the number of sprite's values.",
      "brief": null,
      "return": {
        "type": "int",
        "description": "The number of values stored in the sprite.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to get the details from.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "getter": "value_count",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "int sprite_value_count(sprite s)"
        ],
        "rust": [
          "pub fn sprite_value_count(s: sprite) -> i32"
        ],
        "python": [
          "def sprite_value_count(s):"
        ],
        "pascal": [
          "function SpriteValueCount(s: Sprite): Integer"
        ],
        "csharp": [
          "public int Sprite.ValueCount { get }",
          "public static int SplashKit.SpriteValueCount(Sprite s);"
        ]
      }
    },
    {
      "signature": "vector_2d sprite_velocity(sprite s);",
      "name": "sprite_velocity",
      "method_name": null,
      "unique_global_name": "sprite_velocity",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the current velocity of the sprite. When the sprite is updated\n(see `update_sprite`) this vector_2d is used to move the sprite.",
      "brief": null,
      "return": {
        "type": "vector_2d",
        "description": "The sprite's velocity.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to get the details from.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "getter": "velocity",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "vector_2d sprite_velocity(sprite s)"
        ],
        "rust": [
          "pub fn sprite_velocity(s: sprite) -> vector_2d"
        ],
        "python": [
          "def sprite_velocity(s):"
        ],
        "pascal": [
          "function SpriteVelocity(s: Sprite): Vector2D"
        ],
        "csharp": [
          "public Vector2D Sprite.Velocity { get }",
          "public static Vector2D SplashKit.SpriteVelocity(Sprite s);"
        ]
      }
    },
    {
      "signature": "int sprite_visible_index_of_layer(sprite s,const string &name);",
      "name": "sprite_visible_index_of_layer",
      "method_name": "visible_index_of_layer",
      "unique_global_name": "sprite_visible_index_of_layer_named",
      "unique_method_name": "sprite.visible_index_of_layer_named",
      "suffix_name": null,
      "description": "Returns the index (z-order) of the sprite's layer.",
      "brief": null,
      "return": {
        "type": "int",
        "description": "The z index of the sprite's layer",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to get the details from.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "name": {
          "type": "string",
          "description": "The name of the layer to get the z index of.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "method": "visible_index_of_layer",
        "suffix": "named",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "int sprite_visible_index_of_layer(sprite s, const string &name)"
        ],
        "rust": [
          "pub fn sprite_visible_index_of_layer(s: sprite, name: &String) -> i32"
        ],
        "python": [
          "def sprite_visible_index_of_layer_named(s, name):"
        ],
        "pascal": [
          "function SpriteVisibleIndexOfLayer(s: Sprite; const name: String): Integer"
        ],
        "csharp": [
          "public int Sprite.SpriteVisibleIndexOfLayer(string name);",
          "public static int SplashKit.SpriteVisibleIndexOfLayer(Sprite s, string name);"
        ]
      }
    },
    {
      "signature": "int sprite_visible_index_of_layer(sprite s,int id);",
      "name": "sprite_visible_index_of_layer",
      "method_name": "visible_index_of_layer",
      "unique_global_name": "sprite_visible_index_of_layer",
      "unique_method_name": "sprite.visible_index_of_layer",
      "suffix_name": null,
      "description": "Returns the index (z-order) of the sprite's layer.",
      "brief": null,
      "return": {
        "type": "int",
        "description": "The z index of the sprite's layer",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to get the details from.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "id": {
          "type": "int",
          "description": "The index of the layer to get the z index of.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "method": "visible_index_of_layer",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "int sprite_visible_index_of_layer(sprite s, int id)"
        ],
        "rust": [
          "pub fn sprite_visible_index_of_layer(s: sprite, id: i32) -> i32"
        ],
        "python": [
          "def sprite_visible_index_of_layer(s, id):"
        ],
        "pascal": [
          "function SpriteVisibleIndexOfLayer(s: Sprite; id: Integer): Integer"
        ],
        "csharp": [
          "public int Sprite.SpriteVisibleIndexOfLayer(int id);",
          "public static int SplashKit.SpriteVisibleIndexOfLayer(Sprite s, int id);"
        ]
      }
    },
    {
      "signature": "int sprite_visible_layer(sprite s,int idx);",
      "name": "sprite_visible_layer",
      "method_name": "visible_layer",
      "unique_global_name": "sprite_visible_layer",
      "unique_method_name": "sprite.visible_layer",
      "suffix_name": null,
      "description": "Returns the index of the n'th (idx parameter) visible layer.",
      "brief": null,
      "return": {
        "type": "int",
        "description": "The layer index of the selected visible layer.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to get the details from.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "idx": {
          "type": "int",
          "description": "The index of the visible layer to fetch.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "method": "visible_layer",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "int sprite_visible_layer(sprite s, int idx)"
        ],
        "rust": [
          "pub fn sprite_visible_layer(s: sprite, idx: i32) -> i32"
        ],
        "python": [
          "def sprite_visible_layer(s, idx):"
        ],
        "pascal": [
          "function SpriteVisibleLayer(s: Sprite; idx: Integer): Integer"
        ],
        "csharp": [
          "public int Sprite.SpriteVisibleLayer(int idx);",
          "public static int SplashKit.SpriteVisibleLayer(Sprite s, int idx);"
        ]
      }
    },
    {
      "signature": "int sprite_visible_layer_count(sprite s);",
      "name": "sprite_visible_layer_count",
      "method_name": null,
      "unique_global_name": "sprite_visible_layer_count",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the number of layers that are currently visible for the sprite.",
      "brief": null,
      "return": {
        "type": "int",
        "description": "The number of visible layers for the sprite.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to get the details from.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "getter": "visible_layer_count",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "int sprite_visible_layer_count(sprite s)"
        ],
        "rust": [
          "pub fn sprite_visible_layer_count(s: sprite) -> i32"
        ],
        "python": [
          "def sprite_visible_layer_count(s):"
        ],
        "pascal": [
          "function SpriteVisibleLayerCount(s: Sprite): Integer"
        ],
        "csharp": [
          "public int Sprite.VisibleLayerCount { get }",
          "public static int SplashKit.SpriteVisibleLayerCount(Sprite s);"
        ]
      }
    },
    {
      "signature": "int sprite_visible_layer_id(sprite s,int idx);",
      "name": "sprite_visible_layer_id",
      "method_name": "visible_layer_id_at",
      "unique_global_name": "sprite_visible_layer_id",
      "unique_method_name": "sprite.visible_layer_id_at",
      "suffix_name": null,
      "description": "Returns the id of the layer at index `idx` that is currently visible.\nIndex 0 is the background, with larger indexes moving toward the foreground.\nThis returns -1 if there are no visible layers.",
      "brief": null,
      "return": {
        "type": "int",
        "description": "The layer index of the visible layer.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to get the details from.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "idx": {
          "type": "int",
          "description": "The index of the visible layer.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "method": "visible_layer_id_at",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "int sprite_visible_layer_id(sprite s, int idx)"
        ],
        "rust": [
          "pub fn sprite_visible_layer_id(s: sprite, idx: i32) -> i32"
        ],
        "python": [
          "def sprite_visible_layer_id(s, idx):"
        ],
        "pascal": [
          "function SpriteVisibleLayerId(s: Sprite; idx: Integer): Integer"
        ],
        "csharp": [
          "public int Sprite.SpriteVisibleLayerId(int idx);",
          "public static int SplashKit.SpriteVisibleLayerId(Sprite s, int idx);"
        ]
      }
    },
    {
      "signature": "int sprite_width(sprite s);",
      "name": "sprite_width",
      "method_name": null,
      "unique_global_name": "sprite_width",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "The current Width of the sprite (aligned to the X axis).",
      "brief": null,
      "return": {
        "type": "int",
        "description": "The width of the sprite's layer in pixels.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to get the details from.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "getter": "Width",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "int sprite_width(sprite s)"
        ],
        "rust": [
          "pub fn sprite_width(s: sprite) -> i32"
        ],
        "python": [
          "def sprite_width(s):"
        ],
        "pascal": [
          "function SpriteWidth(s: Sprite): Integer"
        ],
        "csharp": [
          "public int Sprite.Width { get }",
          "public static int SplashKit.SpriteWidth(Sprite s);"
        ]
      }
    },
    {
      "signature": "float sprite_x(sprite s);",
      "name": "sprite_x",
      "method_name": null,
      "unique_global_name": "sprite_x",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the X position of the sprite.",
      "brief": null,
      "return": {
        "type": "float",
        "description": "The x location of the sprite",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to get the details from.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "getter": "x",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "float sprite_x(sprite s)"
        ],
        "rust": [
          "pub fn sprite_x(s: sprite) -> f32"
        ],
        "python": [
          "def sprite_x(s):"
        ],
        "pascal": [
          "function SpriteX(s: Sprite): Single"
        ],
        "csharp": [
          "public float Sprite.X { get }",
          "public static float SplashKit.SpriteX(Sprite s);"
        ]
      }
    },
    {
      "signature": "float sprite_y(sprite s);",
      "name": "sprite_y",
      "method_name": null,
      "unique_global_name": "sprite_y",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the Y position of the sprite.",
      "brief": null,
      "return": {
        "type": "float",
        "description": "The sprite's y location.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to get the details from.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "getter": "y",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "float sprite_y(sprite s)"
        ],
        "rust": [
          "pub fn sprite_y(s: sprite) -> f32"
        ],
        "python": [
          "def sprite_y(s):"
        ],
        "pascal": [
          "function SpriteY(s: Sprite): Single"
        ],
        "csharp": [
          "public float Sprite.Y { get }",
          "public static float SplashKit.SpriteY(Sprite s);"
        ]
      }
    },
    {
      "signature": "void stop_calling_on_sprite_event(sprite_event_handler *handler);",
      "name": "stop_calling_on_sprite_event",
      "method_name": null,
      "unique_global_name": "stop_calling_on_sprite_event",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Removes an global event handler, stopping events calling the indicated void.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "handler": {
          "type": "sprite_event_handler",
          "description": "The function to remove from the list of sprite event handlers.",
          "is_pointer": true,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "sprites",
        "static": "sprite"
      },
      "signatures": {
        "cpp": [
          "void stop_calling_on_sprite_event(sprite_event_handler *handler)"
        ],
        "rust": [
          "pub fn stop_calling_on_sprite_event(handler: sprite_event_handler)"
        ],
        "python": [
          "def stop_calling_on_sprite_event(handler):"
        ],
        "pascal": [
          "procedure StopCallingOnSpriteEvent(handler: SpriteEventHandler)"
        ],
        "csharp": [
          "public static void Sprite.StopCallingOnSpriteEvent(SpriteEventHandler handler);",
          "public static void SplashKit.StopCallingOnSpriteEvent(SpriteEventHandler handler);"
        ]
      }
    },
    {
      "signature": "void update_all_sprites();",
      "name": "update_all_sprites",
      "method_name": null,
      "unique_global_name": "update_all_sprites",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Update all of the sprites in the current sprite pack.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "group": "sprites",
        "static": "sprite"
      },
      "signatures": {
        "cpp": [
          "void update_all_sprites()"
        ],
        "rust": [
          "pub fn update_all_sprites()"
        ],
        "python": [
          "def update_all_sprites():"
        ],
        "pascal": [
          "procedure UpdateAllSprites()"
        ],
        "csharp": [
          "public static void Sprite.UpdateAllSprites();",
          "public static void SplashKit.UpdateAllSprites();"
        ]
      }
    },
    {
      "signature": "void update_all_sprites(float pct);",
      "name": "update_all_sprites",
      "method_name": null,
      "unique_global_name": "update_all_sprites_percent",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Update all of the sprites in the current sprite pack, passing in a\npercentage value to indicate the percentage to update.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "pct": {
          "type": "float",
          "description": "The percentage of the update to apply.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "percent",
        "group": "sprites",
        "static": "sprite"
      },
      "signatures": {
        "cpp": [
          "void update_all_sprites(float pct)"
        ],
        "rust": [
          "pub fn update_all_sprites(pct: f32)"
        ],
        "python": [
          "def update_all_sprites_percent(pct):"
        ],
        "pascal": [
          "procedure UpdateAllSprites(pct: Single)"
        ],
        "csharp": [
          "public static void Sprite.UpdateAllSprites(float pct);",
          "public static void SplashKit.UpdateAllSprites(float pct);"
        ]
      }
    },
    {
      "signature": "void update_sprite(sprite s);",
      "name": "update_sprite",
      "method_name": "update",
      "unique_global_name": "update_sprite",
      "unique_method_name": "sprite.update",
      "suffix_name": null,
      "description": "Update the position and animation details of the sprite.\nThis will play a sound effect if the new cell of the animation\nhas a sound.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to update.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "method": "update",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "void update_sprite(sprite s)"
        ],
        "rust": [
          "pub fn update_sprite(s: sprite)"
        ],
        "python": [
          "def update_sprite(s):"
        ],
        "pascal": [
          "procedure UpdateSprite(s: Sprite)"
        ],
        "csharp": [
          "public void Sprite.UpdateSprite();",
          "public static void SplashKit.UpdateSprite(Sprite s);"
        ]
      }
    },
    {
      "signature": "void update_sprite(sprite s,bool with_sound);",
      "name": "update_sprite",
      "method_name": "update",
      "unique_global_name": "update_sprite_with_sound",
      "unique_method_name": "sprite.update_with_sound",
      "suffix_name": null,
      "description": "Update the position and animation details of the sprite.\nThis will play a sound effect if the new cell of the animation\nhas a sound and with_sound is true.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to update",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "with_sound": {
          "type": "bool",
          "description": "If false, animations will not play associated sound\neffects when updated.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "method": "update",
        "suffix": "with_sound",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "void update_sprite(sprite s, bool with_sound)"
        ],
        "rust": [
          "pub fn update_sprite(s: sprite, with_sound: bool)"
        ],
        "python": [
          "def update_sprite_with_sound(s, with_sound):"
        ],
        "pascal": [
          "procedure UpdateSprite(s: Sprite; withSound: Boolean)"
        ],
        "csharp": [
          "public void Sprite.UpdateSprite(bool withSound);",
          "public static void SplashKit.UpdateSprite(Sprite s, bool withSound);"
        ]
      }
    },
    {
      "signature": "void update_sprite(sprite s,float pct);",
      "name": "update_sprite",
      "method_name": "update",
      "unique_global_name": "update_sprite_percent",
      "unique_method_name": "sprite.update_percent",
      "suffix_name": null,
      "description": "Update the position and animation details of the sprite by a\ngiven percentage of a single unit of movement/animation.\nThis will play a sound effect if the new cell of the animation\nhas a sound.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to update.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "pct": {
          "type": "float",
          "description": "The percent to update.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "method": "update",
        "suffix": "percent",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "void update_sprite(sprite s, float pct)"
        ],
        "rust": [
          "pub fn update_sprite(s: sprite, pct: f32)"
        ],
        "python": [
          "def update_sprite_percent(s, pct):"
        ],
        "pascal": [
          "procedure UpdateSprite(s: Sprite; pct: Single)"
        ],
        "csharp": [
          "public void Sprite.UpdateSprite(float pct);",
          "public static void SplashKit.UpdateSprite(Sprite s, float pct);"
        ]
      }
    },
    {
      "signature": "void update_sprite(sprite s,float pct,bool with_sound);",
      "name": "update_sprite",
      "method_name": "update",
      "unique_global_name": "update_sprite_percent_with_sound",
      "unique_method_name": "sprite.update_percent_with_sound",
      "suffix_name": null,
      "description": "Update the position and animation details of the sprite by a\ngiven percentage of a single unit of movement/animation.\nThis will play a sound effect if the new cell of the animation\nhas a sound and with_sound is true.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to update.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "pct": {
          "type": "float",
          "description": "The percent to update.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "with_sound": {
          "type": "bool",
          "description": "If false, animations will not play associated sound\neffects when updated.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "method": "update",
        "suffix": "percent_with_sound",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "void update_sprite(sprite s, float pct, bool with_sound)"
        ],
        "rust": [
          "pub fn update_sprite(s: sprite, pct: f32, with_sound: bool)"
        ],
        "python": [
          "def update_sprite_percent_with_sound(s, pct, with_sound):"
        ],
        "pascal": [
          "procedure UpdateSprite(s: Sprite; pct: Single; withSound: Boolean)"
        ],
        "csharp": [
          "public void Sprite.UpdateSprite(float pct, bool withSound);",
          "public static void SplashKit.UpdateSprite(Sprite s, float pct, bool withSound);"
        ]
      }
    },
    {
      "signature": "void update_sprite_animation(sprite s);",
      "name": "update_sprite_animation",
      "method_name": "update_animation",
      "unique_global_name": "update_sprite_animation",
      "unique_method_name": "sprite.update_animation",
      "suffix_name": null,
      "description": "Updates the animation details of the sprite.\nThis will play a sound effect if the new cell of the animation\nhas a sound.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to update.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "method": "update_animation",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "void update_sprite_animation(sprite s)"
        ],
        "rust": [
          "pub fn update_sprite_animation(s: sprite)"
        ],
        "python": [
          "def update_sprite_animation(s):"
        ],
        "pascal": [
          "procedure UpdateSpriteAnimation(s: Sprite)"
        ],
        "csharp": [
          "public void Sprite.UpdateSpriteAnimation();",
          "public static void SplashKit.UpdateSpriteAnimation(Sprite s);"
        ]
      }
    },
    {
      "signature": "void update_sprite_animation(sprite s,bool with_sound);",
      "name": "update_sprite_animation",
      "method_name": "update_animation",
      "unique_global_name": "update_sprite_animation_with_sound",
      "unique_method_name": "sprite.update_animation_with_sound",
      "suffix_name": null,
      "description": "Update the animation details of the sprite.\nThis will play a sound effect if the new cell of the animation\nhas a sound and with_sound is true.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to update.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "with_sound": {
          "type": "bool",
          "description": "If false, animations will not play associated sound\neffects when updated.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "method": "update_animation",
        "suffix": "with_sound",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "void update_sprite_animation(sprite s, bool with_sound)"
        ],
        "rust": [
          "pub fn update_sprite_animation(s: sprite, with_sound: bool)"
        ],
        "python": [
          "def update_sprite_animation_with_sound(s, with_sound):"
        ],
        "pascal": [
          "procedure UpdateSpriteAnimation(s: Sprite; withSound: Boolean)"
        ],
        "csharp": [
          "public void Sprite.UpdateSpriteAnimation(bool withSound);",
          "public static void SplashKit.UpdateSpriteAnimation(Sprite s, bool withSound);"
        ]
      }
    },
    {
      "signature": "void update_sprite_animation(sprite s,float pct);",
      "name": "update_sprite_animation",
      "method_name": "update_animation",
      "unique_global_name": "update_sprite_animation_percent",
      "unique_method_name": "sprite.update_animation_percent",
      "suffix_name": null,
      "description": "Update the animation details of the sprite by a\ngiven percentage of a single unit of movement/animation.\nThis will play a sound effect if the new cell of the animation\nhas a sound.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to update.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "pct": {
          "type": "float",
          "description": "The percent to update.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "method": "update_animation",
        "suffix": "percent",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "void update_sprite_animation(sprite s, float pct)"
        ],
        "rust": [
          "pub fn update_sprite_animation(s: sprite, pct: f32)"
        ],
        "python": [
          "def update_sprite_animation_percent(s, pct):"
        ],
        "pascal": [
          "procedure UpdateSpriteAnimation(s: Sprite; pct: Single)"
        ],
        "csharp": [
          "public void Sprite.UpdateSpriteAnimation(float pct);",
          "public static void SplashKit.UpdateSpriteAnimation(Sprite s, float pct);"
        ]
      }
    },
    {
      "signature": "void update_sprite_animation(sprite s,float pct,bool with_sound);",
      "name": "update_sprite_animation",
      "method_name": "update_animation",
      "unique_global_name": "update_sprite_animation_percent_with_sound",
      "unique_method_name": "sprite.update_animation_percent_with_sound",
      "suffix_name": null,
      "description": "Update the position and animation details of the sprite by a\ngiven percentage of a single unit of movement/animation.\nThis will play a sound effect if the new cell of the animation\nhas a sound and with_sound is true.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite to update.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "pct": {
          "type": "float",
          "description": "The percent to update.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "with_sound": {
          "type": "bool",
          "description": "If false, animations will not play associated sound\neffects when updated.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "method": "update_animation",
        "suffix": "percent_with_sound",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "void update_sprite_animation(sprite s, float pct, bool with_sound)"
        ],
        "rust": [
          "pub fn update_sprite_animation(s: sprite, pct: f32, with_sound: bool)"
        ],
        "python": [
          "def update_sprite_animation_percent_with_sound(s, pct, with_sound):"
        ],
        "pascal": [
          "procedure UpdateSpriteAnimation(s: Sprite; pct: Single; withSound: Boolean)"
        ],
        "csharp": [
          "public void Sprite.UpdateSpriteAnimation(float pct, bool withSound);",
          "public static void SplashKit.UpdateSpriteAnimation(Sprite s, float pct, bool withSound);"
        ]
      }
    },
    {
      "signature": "vector_2d vector_from_center_sprite_to_point(sprite s,const point_2d &pt);",
      "name": "vector_from_center_sprite_to_point",
      "method_name": "vector_to",
      "unique_global_name": "vector_from_center_sprite_to_point_point",
      "unique_method_name": "sprite.vector_to_point",
      "suffix_name": null,
      "description": "Returns a `vector_2d` that is the difference in location from the center of\nthe sprite `s` to the point `pt`.",
      "brief": null,
      "return": {
        "type": "vector_2d",
        "description": "A vector pointing from the sprite to the point.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s": {
          "type": "sprite",
          "description": "The sprite that is at the start of the vector.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "pt": {
          "type": "point_2d",
          "description": "The point that is at the end of the vector.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "method": "vector_to",
        "suffix": "point",
        "group": "sprites",
        "static": "sprite",
        "self": "s"
      },
      "signatures": {
        "cpp": [
          "vector_2d vector_from_center_sprite_to_point(sprite s, const point_2d &pt)"
        ],
        "rust": [
          "pub fn vector_from_center_sprite_to_point(s: sprite, pt: &point_2d) -> vector_2d"
        ],
        "python": [
          "def vector_from_center_sprite_to_point_point(s, pt):"
        ],
        "pascal": [
          "function VectorFromCenterSpriteToPoint(s: Sprite; const pt: Point2D): Vector2D"
        ],
        "csharp": [
          "public Vector2D Sprite.VectorFromCenterSpriteToPoint(Point2D pt);",
          "public static Vector2D SplashKit.VectorFromCenterSpriteToPoint(Sprite s, Point2D pt);"
        ]
      }
    },
    {
      "signature": "vector_2d vector_from_to(sprite s1,sprite s2);",
      "name": "vector_from_to",
      "method_name": "vector_to",
      "unique_global_name": "vector_from_to",
      "unique_method_name": "sprite.vector_to",
      "suffix_name": null,
      "description": "Returns a `vector_2d` that is the difference in the position of two sprites\n(`s1` and `s2`).",
      "brief": null,
      "return": {
        "type": "vector_2d",
        "description": "A vector that points from s1 to s2.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "s1": {
          "type": "sprite",
          "description": "The sprite that is at the start of the vector.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "s2": {
          "type": "sprite",
          "description": "The sprite that is at the end of the vector.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sprite",
        "method": "vector_to",
        "group": "sprites",
        "static": "sprite",
        "self": "s1"
      },
      "signatures": {
        "cpp": [
          "vector_2d vector_from_to(sprite s1, sprite s2)"
        ],
        "rust": [
          "pub fn vector_from_to(s1: sprite, s2: sprite) -> vector_2d"
        ],
        "python": [
          "def vector_from_to(s1, s2):"
        ],
        "pascal": [
          "function VectorFromTo(s1: Sprite; s2: Sprite): Vector2D"
        ],
        "csharp": [
          "public Vector2D Sprite.VectorFromTo(Sprite s2);",
          "public static Vector2D SplashKit.VectorFromTo(Sprite s1, Sprite s2);"
        ]
      }
    }
  ]
}