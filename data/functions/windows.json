{
  "functions": [
    {
      "signature": "void clear_window(window wind,color clr);",
      "name": "clear_window",
      "method_name": "clear",
      "unique_global_name": "clear_window",
      "unique_method_name": "window.clear",
      "suffix_name": null,
      "description": "clears a window to the specified color given in `clr`",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "wind": {
          "type": "window",
          "description": "the `window` to clear",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "clr": {
          "type": "color",
          "description": "the `color` to clear the window to.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "window",
        "method": "clear",
        "group": "windows",
        "static": "window_manager",
        "self": "wind"
      },
      "signatures": {
        "cpp": [
          "void clear_window(window wind, color clr)"
        ],
        "rust": [
          "pub fn clear_window(wind: window, clr: color)"
        ],
        "python": [
          "def clear_window(wind, clr):"
        ],
        "pascal": [
          "procedure ClearWindow(wind: Window; clr: Color)"
        ],
        "csharp": [
          "public void Window.ClearWindow(Color clr);",
          "public static void SplashKit.ClearWindow(Window wind, Color clr);"
        ]
      }
    },
    {
      "signature": "void close_all_windows();",
      "name": "close_all_windows",
      "method_name": null,
      "unique_global_name": "close_all_windows",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Releases all of the windows which have been loaded.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "group": "windows",
        "static": "window_manager"
      },
      "signatures": {
        "cpp": [
          "void close_all_windows()"
        ],
        "rust": [
          "pub fn close_all_windows()"
        ],
        "python": [
          "def close_all_windows():"
        ],
        "pascal": [
          "procedure CloseAllWindows()"
        ],
        "csharp": [
          "public static void WindowManager.CloseAllWindows();",
          "public static void SplashKit.CloseAllWindows();"
        ]
      }
    },
    {
      "signature": "void close_current_window();",
      "name": "close_current_window",
      "method_name": null,
      "unique_global_name": "close_current_window",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Closes and frees the current window.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "group": "windows",
        "static": "window_manager"
      },
      "signatures": {
        "cpp": [
          "void close_current_window()"
        ],
        "rust": [
          "pub fn close_current_window()"
        ],
        "python": [
          "def close_current_window():"
        ],
        "pascal": [
          "procedure CloseCurrentWindow()"
        ],
        "csharp": [
          "public static void WindowManager.CloseCurrentWindow();",
          "public static void SplashKit.CloseCurrentWindow();"
        ]
      }
    },
    {
      "signature": "void close_window(const string &name);",
      "name": "close_window",
      "method_name": null,
      "unique_global_name": "close_window_named",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Closes and frees the graphics window identified by `name`.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name (caption) of the window to close",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "named",
        "group": "windows",
        "static": "window_manager"
      },
      "signatures": {
        "cpp": [
          "void close_window(const string &name)"
        ],
        "rust": [
          "pub fn close_window(name: &String)"
        ],
        "python": [
          "def close_window_named(name):"
        ],
        "pascal": [
          "procedure CloseWindow(const name: String)"
        ],
        "csharp": [
          "public static void WindowManager.CloseWindow(string name);",
          "public static void SplashKit.CloseWindow(string name);"
        ]
      }
    },
    {
      "signature": "void close_window(window wind);",
      "name": "close_window",
      "method_name": "close",
      "unique_global_name": "close_window",
      "unique_method_name": "window.close",
      "suffix_name": null,
      "description": "Closes and frees the graphics window supplied in `wind`.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "wind": {
          "type": "window",
          "description": "The window to close",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "window",
        "destructor": true,
        "method": "close",
        "self": "wind",
        "group": "windows",
        "static": "window_manager"
      },
      "signatures": {
        "cpp": [
          "void close_window(window wind)"
        ],
        "rust": [
          "pub fn close_window(wind: window)"
        ],
        "python": [
          "def close_window(wind):"
        ],
        "pascal": [
          "procedure CloseWindow(wind: Window)"
        ],
        "csharp": [
          "public void Window.CloseWindow();",
          "public static void SplashKit.CloseWindow(Window wind);"
        ]
      }
    },
    {
      "signature": "window current_window();",
      "name": "current_window",
      "method_name": null,
      "unique_global_name": "current_window",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the window that you are currently interacting with. This will be\nthe default window for drawing options, and events.",
      "brief": null,
      "return": {
        "type": "window",
        "description": "The current window",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "group": "windows",
        "static": "window_manager"
      },
      "signatures": {
        "cpp": [
          "window current_window()"
        ],
        "rust": [
          "pub fn current_window() -> window"
        ],
        "python": [
          "def current_window():"
        ],
        "pascal": [
          "function CurrentWindow(): Window"
        ],
        "csharp": [
          "public static Window WindowManager.CurrentWindow();",
          "public static Window SplashKit.CurrentWindow();"
        ]
      }
    },
    {
      "signature": "bool current_window_has_border();",
      "name": "current_window_has_border",
      "method_name": null,
      "unique_global_name": "current_window_has_border",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Indicate if the current window has a border.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True if the window has a border",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "group": "windows",
        "static": "window_manager"
      },
      "signatures": {
        "cpp": [
          "bool current_window_has_border()"
        ],
        "rust": [
          "pub fn current_window_has_border() -> bool"
        ],
        "python": [
          "def current_window_has_border():"
        ],
        "pascal": [
          "function CurrentWindowHasBorder(): Boolean"
        ],
        "csharp": [
          "public static bool WindowManager.CurrentWindowHasBorder();",
          "public static bool SplashKit.CurrentWindowHasBorder();"
        ]
      }
    },
    {
      "signature": "int current_window_height();",
      "name": "current_window_height",
      "method_name": null,
      "unique_global_name": "current_window_height",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the height of the current window.",
      "brief": null,
      "return": {
        "type": "int",
        "description": "The height of the current window",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "group": "windows",
        "static": "window_manager"
      },
      "signatures": {
        "cpp": [
          "int current_window_height()"
        ],
        "rust": [
          "pub fn current_window_height() -> i32"
        ],
        "python": [
          "def current_window_height():"
        ],
        "pascal": [
          "function CurrentWindowHeight(): Integer"
        ],
        "csharp": [
          "public static int WindowManager.CurrentWindowHeight();",
          "public static int SplashKit.CurrentWindowHeight();"
        ]
      }
    },
    {
      "signature": "bool current_window_is_fullscreen();",
      "name": "current_window_is_fullscreen",
      "method_name": null,
      "unique_global_name": "current_window_is_fullscreen",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Is the current window currently fullscreen?",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True when the window is fullscreen",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "group": "windows",
        "static": "window_manager"
      },
      "signatures": {
        "cpp": [
          "bool current_window_is_fullscreen()"
        ],
        "rust": [
          "pub fn current_window_is_fullscreen() -> bool"
        ],
        "python": [
          "def current_window_is_fullscreen():"
        ],
        "pascal": [
          "function CurrentWindowIsFullscreen(): Boolean"
        ],
        "csharp": [
          "public static bool WindowManager.CurrentWindowIsFullscreen();",
          "public static bool SplashKit.CurrentWindowIsFullscreen();"
        ]
      }
    },
    {
      "signature": "point_2d current_window_position();",
      "name": "current_window_position",
      "method_name": null,
      "unique_global_name": "current_window_position",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "The location of the current window.",
      "brief": null,
      "return": {
        "type": "point_2d",
        "description": "Its location on the displays",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "group": "windows",
        "static": "window_manager"
      },
      "signatures": {
        "cpp": [
          "point_2d current_window_position()"
        ],
        "rust": [
          "pub fn current_window_position() -> point_2d"
        ],
        "python": [
          "def current_window_position():"
        ],
        "pascal": [
          "function CurrentWindowPosition(): Point2D"
        ],
        "csharp": [
          "public static Point2D WindowManager.CurrentWindowPosition();",
          "public static Point2D SplashKit.CurrentWindowPosition();"
        ]
      }
    },
    {
      "signature": "void current_window_toggle_border();",
      "name": "current_window_toggle_border",
      "method_name": null,
      "unique_global_name": "current_window_toggle_border",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Toggle the current window border.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "group": "windows",
        "static": "window_manager"
      },
      "signatures": {
        "cpp": [
          "void current_window_toggle_border()"
        ],
        "rust": [
          "pub fn current_window_toggle_border()"
        ],
        "python": [
          "def current_window_toggle_border():"
        ],
        "pascal": [
          "procedure CurrentWindowToggleBorder()"
        ],
        "csharp": [
          "public static void WindowManager.CurrentWindowToggleBorder();",
          "public static void SplashKit.CurrentWindowToggleBorder();"
        ]
      }
    },
    {
      "signature": "void current_window_toggle_fullscreen();",
      "name": "current_window_toggle_fullscreen",
      "method_name": null,
      "unique_global_name": "current_window_toggle_fullscreen",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Toggle the fullscreen property of the current window",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "group": "windows",
        "static": "window_manager"
      },
      "signatures": {
        "cpp": [
          "void current_window_toggle_fullscreen()"
        ],
        "rust": [
          "pub fn current_window_toggle_fullscreen()"
        ],
        "python": [
          "def current_window_toggle_fullscreen():"
        ],
        "pascal": [
          "procedure CurrentWindowToggleFullscreen()"
        ],
        "csharp": [
          "public static void WindowManager.CurrentWindowToggleFullscreen();",
          "public static void SplashKit.CurrentWindowToggleFullscreen();"
        ]
      }
    },
    {
      "signature": "int current_window_width();",
      "name": "current_window_width",
      "method_name": null,
      "unique_global_name": "current_window_width",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the width of the current window.",
      "brief": null,
      "return": {
        "type": "int",
        "description": "The width of the current window",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "group": "windows",
        "static": "window_manager"
      },
      "signatures": {
        "cpp": [
          "int current_window_width()"
        ],
        "rust": [
          "pub fn current_window_width() -> i32"
        ],
        "python": [
          "def current_window_width():"
        ],
        "pascal": [
          "function CurrentWindowWidth(): Integer"
        ],
        "csharp": [
          "public static int WindowManager.CurrentWindowWidth();",
          "public static int SplashKit.CurrentWindowWidth();"
        ]
      }
    },
    {
      "signature": "int current_window_x();",
      "name": "current_window_x",
      "method_name": null,
      "unique_global_name": "current_window_x",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "The x location of the current window on the displays.",
      "brief": null,
      "return": {
        "type": "int",
        "description": "Its location on the displays",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "group": "windows",
        "static": "window_manager"
      },
      "signatures": {
        "cpp": [
          "int current_window_x()"
        ],
        "rust": [
          "pub fn current_window_x() -> i32"
        ],
        "python": [
          "def current_window_x():"
        ],
        "pascal": [
          "function CurrentWindowX(): Integer"
        ],
        "csharp": [
          "public static int WindowManager.CurrentWindowX();",
          "public static int SplashKit.CurrentWindowX();"
        ]
      }
    },
    {
      "signature": "int current_window_y();",
      "name": "current_window_y",
      "method_name": null,
      "unique_global_name": "current_window_y",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "The y location of the current window on the displays.",
      "brief": null,
      "return": {
        "type": "int",
        "description": "Its location on the displays",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "group": "windows",
        "static": "window_manager"
      },
      "signatures": {
        "cpp": [
          "int current_window_y()"
        ],
        "rust": [
          "pub fn current_window_y() -> i32"
        ],
        "python": [
          "def current_window_y():"
        ],
        "pascal": [
          "function CurrentWindowY(): Integer"
        ],
        "csharp": [
          "public static int WindowManager.CurrentWindowY();",
          "public static int SplashKit.CurrentWindowY();"
        ]
      }
    },
    {
      "signature": "bool has_window(string caption);",
      "name": "has_window",
      "method_name": null,
      "unique_global_name": "has_window",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Determines if SplashKit has a window loaded with the supplied name.\nThis checks against all windows loaded, those loaded without a name\nare assigned the filename as a default. If this returns `false`, you may\nwant to use `load_window` to load in a specific window and give\nit the desired name.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "Returns `true` if there is a window with the given `caption`\nwhich has has been loaded.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "caption": {
          "type": "string",
          "description": "The name of the window to check for.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "windows",
        "static": "window_manager"
      },
      "signatures": {
        "cpp": [
          "bool has_window(string caption)"
        ],
        "rust": [
          "pub fn has_window(caption: String) -> bool"
        ],
        "python": [
          "def has_window(caption):"
        ],
        "pascal": [
          "function HasWindow(caption: String): Boolean"
        ],
        "csharp": [
          "public static bool WindowManager.HasWindow(string caption);",
          "public static bool SplashKit.HasWindow(string caption);"
        ]
      }
    },
    {
      "signature": "bool is_current_window(window wind);",
      "name": "is_current_window",
      "method_name": null,
      "unique_global_name": "is_current_window",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Check if the requested window is the current window.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "true if the window is the current window",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "wind": {
          "type": "window",
          "description": "The window to check",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "window",
        "getter": "is_current_window",
        "group": "windows",
        "static": "window_manager",
        "self": "wind"
      },
      "signatures": {
        "cpp": [
          "bool is_current_window(window wind)"
        ],
        "rust": [
          "pub fn is_current_window(wind: window) -> bool"
        ],
        "python": [
          "def is_current_window(wind):"
        ],
        "pascal": [
          "function IsCurrentWindow(wind: Window): Boolean"
        ],
        "csharp": [
          "public bool Window.IsCurrentWindow { get }",
          "public static bool SplashKit.IsCurrentWindow(Window wind);"
        ]
      }
    },
    {
      "signature": "void move_current_window_to(int x,int y);",
      "name": "move_current_window_to",
      "method_name": null,
      "unique_global_name": "move_current_window_to",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Move the current window to the new location on the displays.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "x": {
          "type": "int",
          "description": "The new x location",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y": {
          "type": "int",
          "description": "The new y location",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "windows",
        "static": "window_manager"
      },
      "signatures": {
        "cpp": [
          "void move_current_window_to(int x, int y)"
        ],
        "rust": [
          "pub fn move_current_window_to(x: i32, y: i32)"
        ],
        "python": [
          "def move_current_window_to(x, y):"
        ],
        "pascal": [
          "procedure MoveCurrentWindowTo(x: Integer; y: Integer)"
        ],
        "csharp": [
          "public static void WindowManager.MoveCurrentWindowTo(int x, int y);",
          "public static void SplashKit.MoveCurrentWindowTo(int x, int y);"
        ]
      }
    },
    {
      "signature": "void move_window_to(const string &name,int x,int y);",
      "name": "move_window_to",
      "method_name": null,
      "unique_global_name": "move_window_to_named",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Move the window to the new location on the displays.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name of the window to move",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x": {
          "type": "int",
          "description": "The new x location",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y": {
          "type": "int",
          "description": "The new y location",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "named",
        "group": "windows",
        "static": "window_manager"
      },
      "signatures": {
        "cpp": [
          "void move_window_to(const string &name, int x, int y)"
        ],
        "rust": [
          "pub fn move_window_to(name: &String, x: i32, y: i32)"
        ],
        "python": [
          "def move_window_to_named(name, x, y):"
        ],
        "pascal": [
          "procedure MoveWindowTo(const name: String; x: Integer; y: Integer)"
        ],
        "csharp": [
          "public static void WindowManager.MoveWindowTo(string name, int x, int y);",
          "public static void SplashKit.MoveWindowTo(string name, int x, int y);"
        ]
      }
    },
    {
      "signature": "void move_window_to(window wind,int x,int y);",
      "name": "move_window_to",
      "method_name": "move_to",
      "unique_global_name": "move_window_to",
      "unique_method_name": "window.move_to",
      "suffix_name": null,
      "description": "Move the window to the new location on the displays.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "wind": {
          "type": "window",
          "description": "the window to move.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "x": {
          "type": "int",
          "description": "The new x location",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "y": {
          "type": "int",
          "description": "The new y location",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "window",
        "method": "move_to",
        "group": "windows",
        "static": "window_manager",
        "self": "wind"
      },
      "signatures": {
        "cpp": [
          "void move_window_to(window wind, int x, int y)"
        ],
        "rust": [
          "pub fn move_window_to(wind: window, x: i32, y: i32)"
        ],
        "python": [
          "def move_window_to(wind, x, y):"
        ],
        "pascal": [
          "procedure MoveWindowTo(wind: Window; x: Integer; y: Integer)"
        ],
        "csharp": [
          "public void Window.MoveWindowTo(int x, int y);",
          "public static void SplashKit.MoveWindowTo(Window wind, int x, int y);"
        ]
      }
    },
    {
      "signature": "window open_window(string caption,int width,int height);",
      "name": "open_window",
      "method_name": null,
      "unique_global_name": "open_window",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Opens a new graphics window. The supplied `caption` is used to\nname and identify the window. The supplied `width` and `height` indicate\nthe size of the window. The window can be retrieved by passing `caption`\nto the `window_named` function.",
      "brief": null,
      "return": {
        "type": "window",
        "description": "A new window",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "caption": {
          "type": "string",
          "description": "The title of the window. If a window with this caption\nalready exists, SplashKit will alter the caption to\nensure that it is unique.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "width": {
          "type": "int",
          "description": "The width of the window",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "height": {
          "type": "int",
          "description": "The height of the window",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "window",
        "constructor": true,
        "group": "windows",
        "static": "window_manager"
      },
      "signatures": {
        "cpp": [
          "window open_window(string caption, int width, int height)"
        ],
        "rust": [
          "pub fn open_window(caption: String, width: i32, height: i32) -> window"
        ],
        "python": [
          "def open_window(caption, width, height):"
        ],
        "pascal": [
          "function OpenWindow(caption: String; width: Integer; height: Integer): Window"
        ],
        "csharp": [
          "public static Window SplashKit.OpenWindow(string caption, int width, int height);",
          "public Window(string caption, int width, int height);"
        ]
      }
    },
    {
      "signature": "void refresh_window(window wind);",
      "name": "refresh_window",
      "method_name": "refresh",
      "unique_global_name": "refresh_window",
      "unique_method_name": "window.refresh",
      "suffix_name": null,
      "description": "Refreshes the window `wind`.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "wind": {
          "type": "window",
          "description": "the `window` to refresh.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "window",
        "method": "refresh",
        "group": "windows",
        "static": "window_manager",
        "self": "wind"
      },
      "signatures": {
        "cpp": [
          "void refresh_window(window wind)"
        ],
        "rust": [
          "pub fn refresh_window(wind: window)"
        ],
        "python": [
          "def refresh_window(wind):"
        ],
        "pascal": [
          "procedure RefreshWindow(wind: Window)"
        ],
        "csharp": [
          "public void Window.RefreshWindow();",
          "public static void SplashKit.RefreshWindow(Window wind);"
        ]
      }
    },
    {
      "signature": "void refresh_window(window wind,unsigned int target_fps);",
      "name": "refresh_window",
      "method_name": "refresh",
      "unique_global_name": "refresh_window_with_target_fps",
      "unique_method_name": "window.refresh_with_target_fps",
      "suffix_name": null,
      "description": "Refreshes the window `wind`.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "wind": {
          "type": "window",
          "description": "the `window` to refresh.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "target_fps": {
          "type": "unsigned int",
          "description": "the desired framerate",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "window",
        "method": "refresh",
        "suffix": "with_target_fps",
        "group": "windows",
        "static": "window_manager",
        "self": "wind"
      },
      "signatures": {
        "cpp": [
          "void refresh_window(window wind, unsigned int target_fps)"
        ],
        "rust": [
          "pub fn refresh_window(wind: window, target_fps: u32)"
        ],
        "python": [
          "def refresh_window_with_target_fps(wind, target_fps):"
        ],
        "pascal": [
          "procedure RefreshWindow(wind: Window; targetFps: Cardinal)"
        ],
        "csharp": [
          "public void Window.RefreshWindow(uint targetFps);",
          "public static void SplashKit.RefreshWindow(Window wind, uint targetFps);"
        ]
      }
    },
    {
      "signature": "void resize_current_window(int width,int height);",
      "name": "resize_current_window",
      "method_name": null,
      "unique_global_name": "resize_current_window",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Change the size of the current window.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "width": {
          "type": "int",
          "description": "Its new width",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "height": {
          "type": "int",
          "description": "Its new height",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "windows",
        "static": "window_manager"
      },
      "signatures": {
        "cpp": [
          "void resize_current_window(int width, int height)"
        ],
        "rust": [
          "pub fn resize_current_window(width: i32, height: i32)"
        ],
        "python": [
          "def resize_current_window(width, height):"
        ],
        "pascal": [
          "procedure ResizeCurrentWindow(width: Integer; height: Integer)"
        ],
        "csharp": [
          "public static void WindowManager.ResizeCurrentWindow(int width, int height);",
          "public static void SplashKit.ResizeCurrentWindow(int width, int height);"
        ]
      }
    },
    {
      "signature": "void resize_window(window wnd,int width,int height);",
      "name": "resize_window",
      "method_name": "resize",
      "unique_global_name": "resize_window",
      "unique_method_name": "window.resize",
      "suffix_name": null,
      "description": "Change the size of the window.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "wnd": {
          "type": "window",
          "description": "The window to change.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "width": {
          "type": "int",
          "description": "Its new width",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "height": {
          "type": "int",
          "description": "Its new height",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "window",
        "method": "resize",
        "group": "windows",
        "static": "window_manager",
        "self": "wnd"
      },
      "signatures": {
        "cpp": [
          "void resize_window(window wnd, int width, int height)"
        ],
        "rust": [
          "pub fn resize_window(wnd: window, width: i32, height: i32)"
        ],
        "python": [
          "def resize_window(wnd, width, height):"
        ],
        "pascal": [
          "procedure ResizeWindow(wnd: Window; width: Integer; height: Integer)"
        ],
        "csharp": [
          "public void Window.ResizeWindow(int width, int height);",
          "public static void SplashKit.ResizeWindow(Window wnd, int width, int height);"
        ]
      }
    },
    {
      "signature": "void set_current_window(const string &name);",
      "name": "set_current_window",
      "method_name": null,
      "unique_global_name": "set_current_window_named",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Set the current window to the window with the supplied caption.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The caption of the new current window.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "named",
        "group": "windows",
        "static": "window_manager"
      },
      "signatures": {
        "cpp": [
          "void set_current_window(const string &name)"
        ],
        "rust": [
          "pub fn set_current_window(name: &String)"
        ],
        "python": [
          "def set_current_window_named(name):"
        ],
        "pascal": [
          "procedure SetCurrentWindow(const name: String)"
        ],
        "csharp": [
          "public static void WindowManager.SetCurrentWindow(string name);",
          "public static void SplashKit.SetCurrentWindow(string name);"
        ]
      }
    },
    {
      "signature": "void set_current_window(window wind);",
      "name": "set_current_window",
      "method_name": "make_current",
      "unique_global_name": "set_current_window",
      "unique_method_name": "window.make_current",
      "suffix_name": null,
      "description": "Change the current window. Use this so that you can draw to different\nwindows by default.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "wind": {
          "type": "window",
          "description": "The new current window",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "window",
        "method": "make_current",
        "group": "windows",
        "static": "window_manager",
        "self": "wind"
      },
      "signatures": {
        "cpp": [
          "void set_current_window(window wind)"
        ],
        "rust": [
          "pub fn set_current_window(wind: window)"
        ],
        "python": [
          "def set_current_window(wind):"
        ],
        "pascal": [
          "procedure SetCurrentWindow(wind: Window)"
        ],
        "csharp": [
          "public void Window.SetCurrentWindow();",
          "public static void SplashKit.SetCurrentWindow(Window wind);"
        ]
      }
    },
    {
      "signature": "string window_caption(window wind);",
      "name": "window_caption",
      "method_name": null,
      "unique_global_name": "window_caption",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "The caption of the window.",
      "brief": null,
      "return": {
        "type": "string",
        "description": "The window's caption.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "wind": {
          "type": "window",
          "description": "The window",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "window",
        "getter": "caption",
        "group": "windows",
        "static": "window_manager",
        "self": "wind"
      },
      "signatures": {
        "cpp": [
          "string window_caption(window wind)"
        ],
        "rust": [
          "pub fn window_caption(wind: window) -> String"
        ],
        "python": [
          "def window_caption(wind):"
        ],
        "pascal": [
          "function WindowCaption(wind: Window): String"
        ],
        "csharp": [
          "public string Window.Caption { get }",
          "public static string SplashKit.WindowCaption(Window wind);"
        ]
      }
    },
    {
      "signature": "bool window_close_requested(const string &name);",
      "name": "window_close_requested",
      "method_name": null,
      "unique_global_name": "window_close_requested_named",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Checks all opened windows in the current program\nto determin if a window with the name `name` is\ncurrently open, and will close a window if one is found.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "Returns `true` if the window has been asked to close.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name of the window to close",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "named",
        "group": "windows",
        "static": "window_manager"
      },
      "signatures": {
        "cpp": [
          "bool window_close_requested(const string &name)"
        ],
        "rust": [
          "pub fn window_close_requested(name: &String) -> bool"
        ],
        "python": [
          "def window_close_requested_named(name):"
        ],
        "pascal": [
          "function WindowCloseRequested(const name: String): Boolean"
        ],
        "csharp": [
          "public static bool WindowManager.WindowCloseRequested(string name);",
          "public static bool SplashKit.WindowCloseRequested(string name);"
        ]
      }
    },
    {
      "signature": "bool window_close_requested(window wind);",
      "name": "window_close_requested",
      "method_name": null,
      "unique_global_name": "window_close_requested",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Closes the window given in `wind`",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "Returns `true` if the window is closed,\n`false` if there is an error.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "wind": {
          "type": "window",
          "description": "the `window` to be closed",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "window",
        "getter": "close_requested",
        "self": "wind",
        "group": "windows",
        "static": "window_manager"
      },
      "signatures": {
        "cpp": [
          "bool window_close_requested(window wind)"
        ],
        "rust": [
          "pub fn window_close_requested(wind: window) -> bool"
        ],
        "python": [
          "def window_close_requested(wind):"
        ],
        "pascal": [
          "function WindowCloseRequested(wind: Window): Boolean"
        ],
        "csharp": [
          "public bool Window.CloseRequested { get }",
          "public static bool SplashKit.WindowCloseRequested(Window wind);"
        ]
      }
    },
    {
      "signature": "bool window_has_border(const string &name);",
      "name": "window_has_border",
      "method_name": null,
      "unique_global_name": "window_has_border_named",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Indicate if the window has a border.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True if the window has a border",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name of the window",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "named",
        "group": "windows",
        "static": "window_manager"
      },
      "signatures": {
        "cpp": [
          "bool window_has_border(const string &name)"
        ],
        "rust": [
          "pub fn window_has_border(name: &String) -> bool"
        ],
        "python": [
          "def window_has_border_named(name):"
        ],
        "pascal": [
          "function WindowHasBorder(const name: String): Boolean"
        ],
        "csharp": [
          "public static bool WindowManager.WindowHasBorder(string name);",
          "public static bool SplashKit.WindowHasBorder(string name);"
        ]
      }
    },
    {
      "signature": "bool window_has_border(window wnd);",
      "name": "window_has_border",
      "method_name": null,
      "unique_global_name": "window_has_border",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Indicate if the window has a border.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True if the window has a border",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "wnd": {
          "type": "window",
          "description": "The window",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "window",
        "getter": "has_border",
        "group": "windows",
        "static": "window_manager",
        "self": "wnd"
      },
      "signatures": {
        "cpp": [
          "bool window_has_border(window wnd)"
        ],
        "rust": [
          "pub fn window_has_border(wnd: window) -> bool"
        ],
        "python": [
          "def window_has_border(wnd):"
        ],
        "pascal": [
          "function WindowHasBorder(wnd: Window): Boolean"
        ],
        "csharp": [
          "public bool Window.HasBorder { get }",
          "public static bool SplashKit.WindowHasBorder(Window wnd);"
        ]
      }
    },
    {
      "signature": "bool window_has_focus(window wind);",
      "name": "window_has_focus",
      "method_name": null,
      "unique_global_name": "window_has_focus",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Indicates if the window has focus.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True if the window has the user's focus",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "wind": {
          "type": "window",
          "description": "The window",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "window",
        "getter": "has_focus",
        "group": "windows",
        "static": "window_manager",
        "self": "wind"
      },
      "signatures": {
        "cpp": [
          "bool window_has_focus(window wind)"
        ],
        "rust": [
          "pub fn window_has_focus(wind: window) -> bool"
        ],
        "python": [
          "def window_has_focus(wind):"
        ],
        "pascal": [
          "function WindowHasFocus(wind: Window): Boolean"
        ],
        "csharp": [
          "public bool Window.HasFocus { get }",
          "public static bool SplashKit.WindowHasFocus(Window wind);"
        ]
      }
    },
    {
      "signature": "int window_height(const string &name);",
      "name": "window_height",
      "method_name": null,
      "unique_global_name": "window_height_named",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the height of the window with the indicated name in pixels.",
      "brief": null,
      "return": {
        "type": "int",
        "description": "The height of the window",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name of the window",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "named",
        "group": "windows",
        "static": "window_manager"
      },
      "signatures": {
        "cpp": [
          "int window_height(const string &name)"
        ],
        "rust": [
          "pub fn window_height(name: &String) -> i32"
        ],
        "python": [
          "def window_height_named(name):"
        ],
        "pascal": [
          "function WindowHeight(const name: String): Integer"
        ],
        "csharp": [
          "public static int WindowManager.WindowHeight(string name);",
          "public static int SplashKit.WindowHeight(string name);"
        ]
      }
    },
    {
      "signature": "int window_height(window wind);",
      "name": "window_height",
      "method_name": null,
      "unique_global_name": "window_height",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the height of the window in pixels.",
      "brief": null,
      "return": {
        "type": "int",
        "description": "The height of the window",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "wind": {
          "type": "window",
          "description": "The window",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "window",
        "getter": "height",
        "group": "windows",
        "static": "window_manager",
        "self": "wind"
      },
      "signatures": {
        "cpp": [
          "int window_height(window wind)"
        ],
        "rust": [
          "pub fn window_height(wind: window) -> i32"
        ],
        "python": [
          "def window_height(wind):"
        ],
        "pascal": [
          "function WindowHeight(wind: Window): Integer"
        ],
        "csharp": [
          "public int Window.Height { get }",
          "public static int SplashKit.WindowHeight(Window wind);"
        ]
      }
    },
    {
      "signature": "bool window_is_fullscreen(const string &name);",
      "name": "window_is_fullscreen",
      "method_name": null,
      "unique_global_name": "window_is_fullscreen_named",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Is the window currently fullscreen?",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True when the window is fullscreen",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name of the window to check",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "named",
        "group": "windows",
        "static": "window_manager"
      },
      "signatures": {
        "cpp": [
          "bool window_is_fullscreen(const string &name)"
        ],
        "rust": [
          "pub fn window_is_fullscreen(name: &String) -> bool"
        ],
        "python": [
          "def window_is_fullscreen_named(name):"
        ],
        "pascal": [
          "function WindowIsFullscreen(const name: String): Boolean"
        ],
        "csharp": [
          "public static bool WindowManager.WindowIsFullscreen(string name);",
          "public static bool SplashKit.WindowIsFullscreen(string name);"
        ]
      }
    },
    {
      "signature": "bool window_is_fullscreen(window wnd);",
      "name": "window_is_fullscreen",
      "method_name": null,
      "unique_global_name": "window_is_fullscreen",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Is the window currently fullscreen?",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "True when the window is fullscreen",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "wnd": {
          "type": "window",
          "description": "The window to check",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "window",
        "getter": "is_fullscreen",
        "group": "windows",
        "static": "window_manager",
        "self": "wnd"
      },
      "signatures": {
        "cpp": [
          "bool window_is_fullscreen(window wnd)"
        ],
        "rust": [
          "pub fn window_is_fullscreen(wnd: window) -> bool"
        ],
        "python": [
          "def window_is_fullscreen(wnd):"
        ],
        "pascal": [
          "function WindowIsFullscreen(wnd: Window): Boolean"
        ],
        "csharp": [
          "public bool Window.IsFullscreen { get }",
          "public static bool SplashKit.WindowIsFullscreen(Window wnd);"
        ]
      }
    },
    {
      "signature": "window window_named(string caption);",
      "name": "window_named",
      "method_name": null,
      "unique_global_name": "window_named",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns an opened `window` with the given name `caption`, if a window with\nname `caption` is found.",
      "brief": null,
      "return": {
        "type": "window",
        "description": "Returns a `window` with the name specified by `caption`",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "caption": {
          "type": "string",
          "description": "the `string` name of the window.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "windows",
        "static": "window_manager"
      },
      "signatures": {
        "cpp": [
          "window window_named(string caption)"
        ],
        "rust": [
          "pub fn window_named(caption: String) -> window"
        ],
        "python": [
          "def window_named(caption):"
        ],
        "pascal": [
          "function WindowNamed(caption: String): Window"
        ],
        "csharp": [
          "public static Window WindowManager.WindowNamed(string caption);",
          "public static Window SplashKit.WindowNamed(string caption);"
        ]
      }
    },
    {
      "signature": "point_2d window_position(const string &name);",
      "name": "window_position",
      "method_name": null,
      "unique_global_name": "window_position_named",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "The location of the window.",
      "brief": null,
      "return": {
        "type": "point_2d",
        "description": "Its location on the displays",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name of the window.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "named",
        "group": "windows",
        "static": "window_manager"
      },
      "signatures": {
        "cpp": [
          "point_2d window_position(const string &name)"
        ],
        "rust": [
          "pub fn window_position(name: &String) -> point_2d"
        ],
        "python": [
          "def window_position_named(name):"
        ],
        "pascal": [
          "function WindowPosition(const name: String): Point2D"
        ],
        "csharp": [
          "public static Point2D WindowManager.WindowPosition(string name);",
          "public static Point2D SplashKit.WindowPosition(string name);"
        ]
      }
    },
    {
      "signature": "point_2d window_position(window wnd);",
      "name": "window_position",
      "method_name": null,
      "unique_global_name": "window_position",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "The location of the window.",
      "brief": null,
      "return": {
        "type": "point_2d",
        "description": "Its location on the displays",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "wnd": {
          "type": "window",
          "description": "The window.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "window",
        "getter": "position",
        "group": "windows",
        "static": "window_manager",
        "self": "wnd"
      },
      "signatures": {
        "cpp": [
          "point_2d window_position(window wnd)"
        ],
        "rust": [
          "pub fn window_position(wnd: window) -> point_2d"
        ],
        "python": [
          "def window_position(wnd):"
        ],
        "pascal": [
          "function WindowPosition(wnd: Window): Point2D"
        ],
        "csharp": [
          "public Point2D Window.Position { get }",
          "public static Point2D SplashKit.WindowPosition(Window wnd);"
        ]
      }
    },
    {
      "signature": "void window_set_icon(window wind,bitmap bmp);",
      "name": "window_set_icon",
      "method_name": null,
      "unique_global_name": "window_set_icon",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Sets the icon of the current window.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "wind": {
          "type": "window",
          "description": "The window to change the icon of",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "bmp": {
          "type": "bitmap",
          "description": "The image with the details to show in the icon",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "window",
        "setter": "icon",
        "group": "windows",
        "static": "window_manager",
        "self": "wind"
      },
      "signatures": {
        "cpp": [
          "void window_set_icon(window wind, bitmap bmp)"
        ],
        "rust": [
          "pub fn window_set_icon(wind: window, bmp: bitmap)"
        ],
        "python": [
          "def window_set_icon(wind, bmp):"
        ],
        "pascal": [
          "procedure WindowSetIcon(wind: Window; bmp: Bitmap)"
        ],
        "csharp": [
          "public void Window.Icon { set }",
          "public static void SplashKit.WindowSetIcon(Window wind, Bitmap bmp);"
        ]
      }
    },
    {
      "signature": "void window_toggle_border(const string &name);",
      "name": "window_toggle_border",
      "method_name": null,
      "unique_global_name": "window_toggle_border_named",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Toggle the window border.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name of the window to change",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "named",
        "group": "windows",
        "static": "window_manager"
      },
      "signatures": {
        "cpp": [
          "void window_toggle_border(const string &name)"
        ],
        "rust": [
          "pub fn window_toggle_border(name: &String)"
        ],
        "python": [
          "def window_toggle_border_named(name):"
        ],
        "pascal": [
          "procedure WindowToggleBorder(const name: String)"
        ],
        "csharp": [
          "public static void WindowManager.WindowToggleBorder(string name);",
          "public static void SplashKit.WindowToggleBorder(string name);"
        ]
      }
    },
    {
      "signature": "void window_toggle_border(window wnd);",
      "name": "window_toggle_border",
      "method_name": "toggle_border",
      "unique_global_name": "window_toggle_border",
      "unique_method_name": "window.toggle_border",
      "suffix_name": null,
      "description": "Toggle the window border.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "wnd": {
          "type": "window",
          "description": "The window to change",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "window",
        "method": "toggle_border",
        "group": "windows",
        "static": "window_manager",
        "self": "wnd"
      },
      "signatures": {
        "cpp": [
          "void window_toggle_border(window wnd)"
        ],
        "rust": [
          "pub fn window_toggle_border(wnd: window)"
        ],
        "python": [
          "def window_toggle_border(wnd):"
        ],
        "pascal": [
          "procedure WindowToggleBorder(wnd: Window)"
        ],
        "csharp": [
          "public void Window.WindowToggleBorder();",
          "public static void SplashKit.WindowToggleBorder(Window wnd);"
        ]
      }
    },
    {
      "signature": "void window_toggle_fullscreen(const string &name);",
      "name": "window_toggle_fullscreen",
      "method_name": null,
      "unique_global_name": "window_toggle_fullscreen_named",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Toggle the fullscreen property of the window",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name of the window to change",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "named",
        "group": "windows",
        "static": "window_manager"
      },
      "signatures": {
        "cpp": [
          "void window_toggle_fullscreen(const string &name)"
        ],
        "rust": [
          "pub fn window_toggle_fullscreen(name: &String)"
        ],
        "python": [
          "def window_toggle_fullscreen_named(name):"
        ],
        "pascal": [
          "procedure WindowToggleFullscreen(const name: String)"
        ],
        "csharp": [
          "public static void WindowManager.WindowToggleFullscreen(string name);",
          "public static void SplashKit.WindowToggleFullscreen(string name);"
        ]
      }
    },
    {
      "signature": "void window_toggle_fullscreen(window wnd);",
      "name": "window_toggle_fullscreen",
      "method_name": "toggle_fullscreen",
      "unique_global_name": "window_toggle_fullscreen",
      "unique_method_name": "window.toggle_fullscreen",
      "suffix_name": null,
      "description": "Toggle the fullscreen property of the window",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "wnd": {
          "type": "window",
          "description": "The window to change",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "window",
        "method": "toggle_fullscreen",
        "group": "windows",
        "static": "window_manager",
        "self": "wnd"
      },
      "signatures": {
        "cpp": [
          "void window_toggle_fullscreen(window wnd)"
        ],
        "rust": [
          "pub fn window_toggle_fullscreen(wnd: window)"
        ],
        "python": [
          "def window_toggle_fullscreen(wnd):"
        ],
        "pascal": [
          "procedure WindowToggleFullscreen(wnd: Window)"
        ],
        "csharp": [
          "public void Window.WindowToggleFullscreen();",
          "public static void SplashKit.WindowToggleFullscreen(Window wnd);"
        ]
      }
    },
    {
      "signature": "int window_width(const string &name);",
      "name": "window_width",
      "method_name": null,
      "unique_global_name": "window_width_named",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the width of the window with the indicated name in pixels.",
      "brief": null,
      "return": {
        "type": "int",
        "description": "The width of the window",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name of the window",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "named",
        "group": "windows",
        "static": "window_manager"
      },
      "signatures": {
        "cpp": [
          "int window_width(const string &name)"
        ],
        "rust": [
          "pub fn window_width(name: &String) -> i32"
        ],
        "python": [
          "def window_width_named(name):"
        ],
        "pascal": [
          "function WindowWidth(const name: String): Integer"
        ],
        "csharp": [
          "public static int WindowManager.WindowWidth(string name);",
          "public static int SplashKit.WindowWidth(string name);"
        ]
      }
    },
    {
      "signature": "int window_width(window wind);",
      "name": "window_width",
      "method_name": null,
      "unique_global_name": "window_width",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the width of the window in pixels.",
      "brief": null,
      "return": {
        "type": "int",
        "description": "The width of the window",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "wind": {
          "type": "window",
          "description": "The window",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "window",
        "getter": "width",
        "group": "windows",
        "static": "window_manager",
        "self": "wind"
      },
      "signatures": {
        "cpp": [
          "int window_width(window wind)"
        ],
        "rust": [
          "pub fn window_width(wind: window) -> i32"
        ],
        "python": [
          "def window_width(wind):"
        ],
        "pascal": [
          "function WindowWidth(wind: Window): Integer"
        ],
        "csharp": [
          "public int Window.Width { get }",
          "public static int SplashKit.WindowWidth(Window wind);"
        ]
      }
    },
    {
      "signature": "window window_with_focus();",
      "name": "window_with_focus",
      "method_name": null,
      "unique_global_name": "window_with_focus",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the window that the user currently has selected. This may be\ndifferent to the current window.",
      "brief": null,
      "return": {
        "type": "window",
        "description": "The window the user has selected",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "group": "windows",
        "static": "window_manager"
      },
      "signatures": {
        "cpp": [
          "window window_with_focus()"
        ],
        "rust": [
          "pub fn window_with_focus() -> window"
        ],
        "python": [
          "def window_with_focus():"
        ],
        "pascal": [
          "function WindowWithFocus(): Window"
        ],
        "csharp": [
          "public static Window WindowManager.WindowWithFocus();",
          "public static Window SplashKit.WindowWithFocus();"
        ]
      }
    },
    {
      "signature": "int window_x(const string &name);",
      "name": "window_x",
      "method_name": null,
      "unique_global_name": "window_x_named",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "The x location of the window on the displays.",
      "brief": null,
      "return": {
        "type": "int",
        "description": "Its location on the displays",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name of the window",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "named",
        "group": "windows",
        "static": "window_manager"
      },
      "signatures": {
        "cpp": [
          "int window_x(const string &name)"
        ],
        "rust": [
          "pub fn window_x(name: &String) -> i32"
        ],
        "python": [
          "def window_x_named(name):"
        ],
        "pascal": [
          "function WindowX(const name: String): Integer"
        ],
        "csharp": [
          "public static int WindowManager.WindowX(string name);",
          "public static int SplashKit.WindowX(string name);"
        ]
      }
    },
    {
      "signature": "int window_x(window wnd);",
      "name": "window_x",
      "method_name": null,
      "unique_global_name": "window_x",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "The x location of the window on the displays.",
      "brief": null,
      "return": {
        "type": "int",
        "description": "Its location on the displays",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "wnd": {
          "type": "window",
          "description": "The window",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "window",
        "getter": "x",
        "group": "windows",
        "static": "window_manager",
        "self": "wnd"
      },
      "signatures": {
        "cpp": [
          "int window_x(window wnd)"
        ],
        "rust": [
          "pub fn window_x(wnd: window) -> i32"
        ],
        "python": [
          "def window_x(wnd):"
        ],
        "pascal": [
          "function WindowX(wnd: Window): Integer"
        ],
        "csharp": [
          "public int Window.X { get }",
          "public static int SplashKit.WindowX(Window wnd);"
        ]
      }
    },
    {
      "signature": "int window_y(const string &name);",
      "name": "window_y",
      "method_name": null,
      "unique_global_name": "window_y_named",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "The y location of the window on the displays.",
      "brief": null,
      "return": {
        "type": "int",
        "description": "Its location on the displays",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name of the window",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "named",
        "group": "windows",
        "static": "window_manager"
      },
      "signatures": {
        "cpp": [
          "int window_y(const string &name)"
        ],
        "rust": [
          "pub fn window_y(name: &String) -> i32"
        ],
        "python": [
          "def window_y_named(name):"
        ],
        "pascal": [
          "function WindowY(const name: String): Integer"
        ],
        "csharp": [
          "public static int WindowManager.WindowY(string name);",
          "public static int SplashKit.WindowY(string name);"
        ]
      }
    },
    {
      "signature": "int window_y(window wnd);",
      "name": "window_y",
      "method_name": null,
      "unique_global_name": "window_y",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "The y location of the window on the displays.",
      "brief": null,
      "return": {
        "type": "int",
        "description": "Its location on the displays",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "wnd": {
          "type": "window",
          "description": "The window",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "window",
        "getter": "y",
        "group": "windows",
        "static": "window_manager",
        "self": "wnd"
      },
      "signatures": {
        "cpp": [
          "int window_y(window wnd)"
        ],
        "rust": [
          "pub fn window_y(wnd: window) -> i32"
        ],
        "python": [
          "def window_y(wnd):"
        ],
        "pascal": [
          "function WindowY(wnd: Window): Integer"
        ],
        "csharp": [
          "public int Window.Y { get }",
          "public static int SplashKit.WindowY(Window wnd);"
        ]
      }
    }
  ]
}