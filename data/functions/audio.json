{
  "functions": [
    {
      "signature": "bool audio_ready();",
      "name": "audio_ready",
      "method_name": null,
      "unique_global_name": "audio_ready",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Checks if SplashKit audio currently ready to be used.\n\nShould this return `false`, you may want to use `open_audio`\nto enable audio.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "Returns `true` if the audio has been initalised.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "getter": "is_ready",
        "group": "audio",
        "static": "audio"
      },
      "signatures": {
        "cpp": [
          "bool audio_ready()"
        ],
        "rust": [
          "pub fn audio_ready() -> bool"
        ],
        "python": [
          "def audio_ready():"
        ],
        "pascal": [
          "function AudioReady(): Boolean"
        ],
        "csharp": [
          "public static bool Audio.IsReady { get }",
          "public static bool SplashKit.AudioReady();"
        ]
      }
    },
    {
      "signature": "void close_audio();",
      "name": "close_audio",
      "method_name": null,
      "unique_global_name": "close_audio",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Turns off audio, stopping all current sounds effects and music.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "group": "audio",
        "static": "audio"
      },
      "signatures": {
        "cpp": [
          "void close_audio()"
        ],
        "rust": [
          "pub fn close_audio()"
        ],
        "python": [
          "def close_audio():"
        ],
        "pascal": [
          "procedure CloseAudio()"
        ],
        "csharp": [
          "public static void Audio.CloseAudio();",
          "public static void SplashKit.CloseAudio();"
        ]
      }
    },
    {
      "signature": "void open_audio();",
      "name": "open_audio",
      "method_name": null,
      "unique_global_name": "open_audio",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Starts the SplashKit audio system working.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "group": "audio",
        "static": "audio"
      },
      "signatures": {
        "cpp": [
          "void open_audio()"
        ],
        "rust": [
          "pub fn open_audio()"
        ],
        "python": [
          "def open_audio():"
        ],
        "pascal": [
          "procedure OpenAudio()"
        ],
        "csharp": [
          "public static void Audio.OpenAudio();",
          "public static void SplashKit.OpenAudio();"
        ]
      }
    },
    {
      "signature": "void fade_music_in(const string &name,int ms);",
      "name": "fade_music_in",
      "method_name": null,
      "unique_global_name": "fade_music_in_named",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Fades music file matching the name to full volume over a specified number of milliseconds",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name of the `music` file to play.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "ms": {
          "type": "int",
          "description": "How many milliseconds it takes to fade the `music` to full volume",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "named",
        "group": "audio",
        "static": "audio"
      },
      "signatures": {
        "cpp": [
          "void fade_music_in(const string &name, int ms)"
        ],
        "rust": [
          "pub fn fade_music_in(name: &String, ms: i32)"
        ],
        "python": [
          "def fade_music_in_named(name, ms):"
        ],
        "pascal": [
          "procedure FadeMusicIn(const name: String; ms: Integer)"
        ],
        "csharp": [
          "public static void Audio.FadeMusicIn(string name, int ms);",
          "public static void SplashKit.FadeMusicIn(string name, int ms);"
        ]
      }
    },
    {
      "signature": "void fade_music_in(const string &name,int times,int ms);",
      "name": "fade_music_in",
      "method_name": null,
      "unique_global_name": "fade_music_in_named_with_times",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Fades music file matching the name to full volume over a specified number of milliseconds\nand loops a specified number of times",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name of the `music` file to play.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "times": {
          "type": "int",
          "description": "Controls the number of times the music is played.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "ms": {
          "type": "int",
          "description": "How many milliseconds it takes to fade the `music` to full volume",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "named_with_times",
        "group": "audio",
        "static": "audio"
      },
      "signatures": {
        "cpp": [
          "void fade_music_in(const string &name, int times, int ms)"
        ],
        "rust": [
          "pub fn fade_music_in(name: &String, times: i32, ms: i32)"
        ],
        "python": [
          "def fade_music_in_named_with_times(name, times, ms):"
        ],
        "pascal": [
          "procedure FadeMusicIn(const name: String; times: Integer; ms: Integer)"
        ],
        "csharp": [
          "public static void Audio.FadeMusicIn(string name, int times, int ms);",
          "public static void SplashKit.FadeMusicIn(string name, int times, int ms);"
        ]
      }
    },
    {
      "signature": "void fade_music_in(music data,int ms);",
      "name": "fade_music_in",
      "method_name": "fade_in",
      "unique_global_name": "fade_music_in",
      "unique_method_name": "music.fade_in",
      "suffix_name": null,
      "description": "Fades music up to full volume over a specified number of milliseconds.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "data": {
          "type": "music",
          "description": "The name of the `music` to play.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "ms": {
          "type": "int",
          "description": "How many milliseconds it takes to fade the `music` to full volume",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "music",
        "method": "fade_in",
        "self": "data",
        "group": "audio",
        "static": "audio"
      },
      "signatures": {
        "cpp": [
          "void fade_music_in(music data, int ms)"
        ],
        "rust": [
          "pub fn fade_music_in(data: music, ms: i32)"
        ],
        "python": [
          "def fade_music_in(data, ms):"
        ],
        "pascal": [
          "procedure FadeMusicIn(data: Music; ms: Integer)"
        ],
        "csharp": [
          "public void Music.FadeMusicIn(int ms);",
          "public static void SplashKit.FadeMusicIn(Music data, int ms);"
        ]
      }
    },
    {
      "signature": "void fade_music_in(music data,int times,int ms);",
      "name": "fade_music_in",
      "method_name": "fade_in",
      "unique_global_name": "fade_music_in_with_times",
      "unique_method_name": "music.fade_in_with_times",
      "suffix_name": null,
      "description": "Fades music up to full volume over a specified number of milliseconds\nfor a specified number of times.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "data": {
          "type": "music",
          "description": "The name of the `music` to play.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "times": {
          "type": "int",
          "description": "Controls the number of times the music is played.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "ms": {
          "type": "int",
          "description": "How many milliseconds it takes to fade the `music` to full volume",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "music",
        "method": "fade_in",
        "self": "data",
        "suffix": "with_times",
        "group": "audio",
        "static": "audio"
      },
      "signatures": {
        "cpp": [
          "void fade_music_in(music data, int times, int ms)"
        ],
        "rust": [
          "pub fn fade_music_in(data: music, times: i32, ms: i32)"
        ],
        "python": [
          "def fade_music_in_with_times(data, times, ms):"
        ],
        "pascal": [
          "procedure FadeMusicIn(data: Music; times: Integer; ms: Integer)"
        ],
        "csharp": [
          "public void Music.FadeMusicIn(int times, int ms);",
          "public static void SplashKit.FadeMusicIn(Music data, int times, int ms);"
        ]
      }
    },
    {
      "signature": "void fade_music_out(int ms);",
      "name": "fade_music_out",
      "method_name": "fade_out",
      "unique_global_name": "fade_music_out",
      "unique_method_name": ".fade_out",
      "suffix_name": null,
      "description": "Fades music outover a specified number of milliseconds",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "ms": {
          "type": "int",
          "description": "How many milliseconds it takes to fade the `music` out",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "method": "fade_out",
        "static": "audio",
        "group": "audio"
      },
      "signatures": {
        "cpp": [
          "void fade_music_out(int ms)"
        ],
        "rust": [
          "pub fn fade_music_out(ms: i32)"
        ],
        "python": [
          "def fade_music_out(ms):"
        ],
        "pascal": [
          "procedure FadeMusicOut(ms: Integer)"
        ],
        "csharp": [
          "public static void Audio.FadeMusicOut(int ms);",
          "public static void SplashKit.FadeMusicOut(int ms);"
        ]
      }
    },
    {
      "signature": "void free_all_music();",
      "name": "free_all_music",
      "method_name": "free_all_music",
      "unique_global_name": "free_all_music",
      "unique_method_name": ".free_all_music",
      "suffix_name": null,
      "description": "Releases all of the music files that have been loaded.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "method": "free_all_music",
        "static": "audio",
        "group": "audio"
      },
      "signatures": {
        "cpp": [
          "void free_all_music()"
        ],
        "rust": [
          "pub fn free_all_music()"
        ],
        "python": [
          "def free_all_music():"
        ],
        "pascal": [
          "procedure FreeAllMusic()"
        ],
        "csharp": [
          "public static void Audio.FreeAllMusic();",
          "public static void SplashKit.FreeAllMusic();"
        ]
      }
    },
    {
      "signature": "void free_music(music effect);",
      "name": "free_music",
      "method_name": null,
      "unique_global_name": "free_music",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Releases the SplashKit resources associated with music.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "effect": {
          "type": "music",
          "description": "The music file whose resources should be released.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "music",
        "destructor": true,
        "self": "effect",
        "group": "audio",
        "static": "audio"
      },
      "signatures": {
        "cpp": [
          "void free_music(music effect)"
        ],
        "rust": [
          "pub fn free_music(effect: music)"
        ],
        "python": [
          "def free_music(effect):"
        ],
        "pascal": [
          "procedure FreeMusic(effect: Music)"
        ],
        "csharp": [
          "public void Music.FreeMusic();",
          "public static void SplashKit.FreeMusic(Music effect);"
        ]
      }
    },
    {
      "signature": "bool has_music(const string &name);",
      "name": "has_music",
      "method_name": null,
      "unique_global_name": "has_music",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Determines if SplashKit has a music file loaded for the supplied name.\nThis checks against all music files loaded, those loaded without a name\nare assigned the filename as a default. If this returns `false`, you may\nwant to use `load_music` to load in a specific sound effect and give\nit the desired name.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "Returns `true` if there is a music file with the given `name` has\nhas been loaded.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name to check if a music file is loaded.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "audio",
        "static": "audio"
      },
      "signatures": {
        "cpp": [
          "bool has_music(const string &name)"
        ],
        "rust": [
          "pub fn has_music(name: &String) -> bool"
        ],
        "python": [
          "def has_music(name):"
        ],
        "pascal": [
          "function HasMusic(const name: String): Boolean"
        ],
        "csharp": [
          "public static bool Audio.HasMusic(string name);",
          "public static bool SplashKit.HasMusic(string name);"
        ]
      }
    },
    {
      "signature": "music load_music(const string &name,const string &filename);",
      "name": "load_music",
      "method_name": null,
      "unique_global_name": "load_music",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Loads and returns a music value. The supplied `filename` is used to\nlocate the music file to load. The supplied `name` indicates the\nname to use to refer to this Music value. The `music` can then be\nretrieved by passing this `name` to the `music_named` function.",
      "brief": null,
      "return": {
        "type": "music",
        "description": "A new music resource",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name of the resource for SplashKit",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "filename": {
          "type": "string",
          "description": "The filename to load",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "music",
        "constructor": true,
        "group": "audio",
        "static": "audio"
      },
      "signatures": {
        "cpp": [
          "music load_music(const string &name, const string &filename)"
        ],
        "rust": [
          "pub fn load_music(name: &String, filename: &String) -> music"
        ],
        "python": [
          "def load_music(name, filename):"
        ],
        "pascal": [
          "function LoadMusic(const name: String; const filename: String): Music"
        ],
        "csharp": [
          "public static Music SplashKit.LoadMusic(string name, string filename);",
          "public Music(string name, string filename);"
        ]
      }
    },
    {
      "signature": "string music_filename(music data);",
      "name": "music_filename",
      "method_name": null,
      "unique_global_name": "music_filename",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the filename the of the music data",
      "brief": null,
      "return": {
        "type": "string",
        "description": "Returns a string with the filename of the `music` file.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "data": {
          "type": "music",
          "description": "The music resource",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "music",
        "getter": "filename",
        "self": "data",
        "group": "audio",
        "static": "audio"
      },
      "signatures": {
        "cpp": [
          "string music_filename(music data)"
        ],
        "rust": [
          "pub fn music_filename(data: music) -> String"
        ],
        "python": [
          "def music_filename(data):"
        ],
        "pascal": [
          "function MusicFilename(data: Music): String"
        ],
        "csharp": [
          "public string Music.Filename { get }",
          "public static string SplashKit.MusicFilename(Music data);"
        ]
      }
    },
    {
      "signature": "string music_name(music data);",
      "name": "music_name",
      "method_name": null,
      "unique_global_name": "music_name",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the name that SplashKit uses to refer to this music data",
      "brief": null,
      "return": {
        "type": "string",
        "description": "Returns a string with the name of the `music` that SplashKit refers to.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "data": {
          "type": "music",
          "description": "The music resource",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "music",
        "getter": "name",
        "self": "data",
        "group": "audio",
        "static": "audio"
      },
      "signatures": {
        "cpp": [
          "string music_name(music data)"
        ],
        "rust": [
          "pub fn music_name(data: music) -> String"
        ],
        "python": [
          "def music_name(data):"
        ],
        "pascal": [
          "function MusicName(data: Music): String"
        ],
        "csharp": [
          "public string Music.Name { get }",
          "public static string SplashKit.MusicName(Music data);"
        ]
      }
    },
    {
      "signature": "music music_named(const string &name);",
      "name": "music_named",
      "method_name": null,
      "unique_global_name": "music_named",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Retrieves a `music` that has been loaded into SplashKit.",
      "brief": null,
      "return": {
        "type": "music",
        "description": "Returns the `music` that has been loaded with the specified\n`name` using `load_music`.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name of the music file to return.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "audio",
        "static": "audio"
      },
      "signatures": {
        "cpp": [
          "music music_named(const string &name)"
        ],
        "rust": [
          "pub fn music_named(name: &String) -> music"
        ],
        "python": [
          "def music_named(name):"
        ],
        "pascal": [
          "function MusicNamed(const name: String): Music"
        ],
        "csharp": [
          "public static Music Audio.MusicNamed(string name);",
          "public static Music SplashKit.MusicNamed(string name);"
        ]
      }
    },
    {
      "signature": "bool music_playing();",
      "name": "music_playing",
      "method_name": null,
      "unique_global_name": "music_playing",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Checks whether music is currently playing.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "Returns true or false value representing whether music is currently playing.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "getter": "playing",
        "static": "audio",
        "group": "audio"
      },
      "signatures": {
        "cpp": [
          "bool music_playing()"
        ],
        "rust": [
          "pub fn music_playing() -> bool"
        ],
        "python": [
          "def music_playing():"
        ],
        "pascal": [
          "function MusicPlaying(): Boolean"
        ],
        "csharp": [
          "public static bool Audio.Playing { get }",
          "public static bool SplashKit.MusicPlaying();"
        ]
      }
    },
    {
      "signature": "bool music_valid(music m);",
      "name": "music_valid",
      "method_name": null,
      "unique_global_name": "music_valid",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Lets you test if music value is valid. This will return true when it is a valid music.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "true when the music is valid.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "m": {
          "type": "music",
          "description": "the music source to test",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "audio",
        "static": "audio"
      },
      "signatures": {
        "cpp": [
          "bool music_valid(music m)"
        ],
        "rust": [
          "pub fn music_valid(m: music) -> bool"
        ],
        "python": [
          "def music_valid(m):"
        ],
        "pascal": [
          "function MusicValid(m: Music): Boolean"
        ],
        "csharp": [
          "public static bool Audio.MusicValid(Music m);",
          "public static bool SplashKit.MusicValid(Music m);"
        ]
      }
    },
    {
      "signature": "double music_volume();",
      "name": "music_volume",
      "method_name": null,
      "unique_global_name": "music_volume",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the volume of the currently playing `music`.",
      "brief": null,
      "return": {
        "type": "double",
        "description": "Returns the percentage of the currently playing `music`.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "getter": "volume",
        "static": "audio",
        "group": "audio"
      },
      "signatures": {
        "cpp": [
          "double music_volume()"
        ],
        "rust": [
          "pub fn music_volume() -> f64"
        ],
        "python": [
          "def music_volume():"
        ],
        "pascal": [
          "function MusicVolume(): Double"
        ],
        "csharp": [
          "public static double Audio.Volume { get }",
          "public static double SplashKit.MusicVolume();"
        ]
      }
    },
    {
      "signature": "void pause_music();",
      "name": "pause_music",
      "method_name": "pause",
      "unique_global_name": "pause_music",
      "unique_method_name": ".pause",
      "suffix_name": null,
      "description": "Pauses currently playing music - see resume_music to continue playing.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "method": "pause",
        "static": "audio",
        "group": "audio"
      },
      "signatures": {
        "cpp": [
          "void pause_music()"
        ],
        "rust": [
          "pub fn pause_music()"
        ],
        "python": [
          "def pause_music():"
        ],
        "pascal": [
          "procedure PauseMusic()"
        ],
        "csharp": [
          "public static void Audio.PauseMusic();",
          "public static void SplashKit.PauseMusic();"
        ]
      }
    },
    {
      "signature": "void play_music(const string &name);",
      "name": "play_music",
      "method_name": null,
      "unique_global_name": "play_music_named",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Plays the music file that matches the name once at full volume.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name of the `music` to play.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "named",
        "group": "audio",
        "static": "audio"
      },
      "signatures": {
        "cpp": [
          "void play_music(const string &name)"
        ],
        "rust": [
          "pub fn play_music(name: &String)"
        ],
        "python": [
          "def play_music_named(name):"
        ],
        "pascal": [
          "procedure PlayMusic(const name: String)"
        ],
        "csharp": [
          "public static void Audio.PlayMusic(string name);",
          "public static void SplashKit.PlayMusic(string name);"
        ]
      }
    },
    {
      "signature": "void play_music(const string &name,int times);",
      "name": "play_music",
      "method_name": null,
      "unique_global_name": "play_music_named_with_times",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Plays the music file that matches the name a specified number of times at full volume.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name of the `music` to play.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "times": {
          "type": "int",
          "description": "Controls the number of times the music is played.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "named_with_times",
        "group": "audio",
        "static": "audio"
      },
      "signatures": {
        "cpp": [
          "void play_music(const string &name, int times)"
        ],
        "rust": [
          "pub fn play_music(name: &String, times: i32)"
        ],
        "python": [
          "def play_music_named_with_times(name, times):"
        ],
        "pascal": [
          "procedure PlayMusic(const name: String; times: Integer)"
        ],
        "csharp": [
          "public static void Audio.PlayMusic(string name, int times);",
          "public static void SplashKit.PlayMusic(string name, int times);"
        ]
      }
    },
    {
      "signature": "void play_music(music data);",
      "name": "play_music",
      "method_name": "play",
      "unique_global_name": "play_music",
      "unique_method_name": "music.play",
      "suffix_name": null,
      "description": "Plays a music file once at full volume.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "data": {
          "type": "music",
          "description": "The name of the `music` to play.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "music",
        "method": "play",
        "self": "data",
        "group": "audio",
        "static": "audio"
      },
      "signatures": {
        "cpp": [
          "void play_music(music data)"
        ],
        "rust": [
          "pub fn play_music(data: music)"
        ],
        "python": [
          "def play_music(data):"
        ],
        "pascal": [
          "procedure PlayMusic(data: Music)"
        ],
        "csharp": [
          "public void Music.PlayMusic();",
          "public static void SplashKit.PlayMusic(Music data);"
        ]
      }
    },
    {
      "signature": "void play_music(music data,int times);",
      "name": "play_music",
      "method_name": "play",
      "unique_global_name": "play_music_with_times",
      "unique_method_name": "music.play_with_times",
      "suffix_name": null,
      "description": "Plays a music file a specified number of times at full volume.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "data": {
          "type": "music",
          "description": "The name of the `music` to play.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "times": {
          "type": "int",
          "description": "Controls the number of times the music is played.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "music",
        "method": "play",
        "self": "data",
        "suffix": "with_times",
        "group": "audio",
        "static": "audio"
      },
      "signatures": {
        "cpp": [
          "void play_music(music data, int times)"
        ],
        "rust": [
          "pub fn play_music(data: music, times: i32)"
        ],
        "python": [
          "def play_music_with_times(data, times):"
        ],
        "pascal": [
          "procedure PlayMusic(data: Music; times: Integer)"
        ],
        "csharp": [
          "public void Music.PlayMusic(int times);",
          "public static void SplashKit.PlayMusic(Music data, int times);"
        ]
      }
    },
    {
      "signature": "void play_music(music data,int times,double volume);",
      "name": "play_music",
      "method_name": "play",
      "unique_global_name": "play_music_with_times_and_volume",
      "unique_method_name": "music.play_with_times_and_volume",
      "suffix_name": null,
      "description": "Plays a music file for a specified number of times and playback volume.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "data": {
          "type": "music",
          "description": "The name of the `music` to play.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "times": {
          "type": "int",
          "description": "Controls the number of times the music is played.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "volume": {
          "type": "double",
          "description": "Indicates the percentage of the original volume to play the\n`music` at. This must be between `0` and `1`.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "music",
        "method": "play",
        "self": "data",
        "suffix": "with_times_and_volume",
        "group": "audio",
        "static": "audio"
      },
      "signatures": {
        "cpp": [
          "void play_music(music data, int times, double volume)"
        ],
        "rust": [
          "pub fn play_music(data: music, times: i32, volume: f64)"
        ],
        "python": [
          "def play_music_with_times_and_volume(data, times, volume):"
        ],
        "pascal": [
          "procedure PlayMusic(data: Music; times: Integer; volume: Double)"
        ],
        "csharp": [
          "public void Music.PlayMusic(int times, double volume);",
          "public static void SplashKit.PlayMusic(Music data, int times, double volume);"
        ]
      }
    },
    {
      "signature": "void resume_music();",
      "name": "resume_music",
      "method_name": "resume",
      "unique_global_name": "resume_music",
      "unique_method_name": ".resume",
      "suffix_name": null,
      "description": "Resumes currently paused music - see pause_music to pause playing music.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "method": "resume",
        "static": "audio",
        "group": "audio"
      },
      "signatures": {
        "cpp": [
          "void resume_music()"
        ],
        "rust": [
          "pub fn resume_music()"
        ],
        "python": [
          "def resume_music():"
        ],
        "pascal": [
          "procedure ResumeMusic()"
        ],
        "csharp": [
          "public static void Audio.ResumeMusic();",
          "public static void SplashKit.ResumeMusic();"
        ]
      }
    },
    {
      "signature": "void set_music_volume(double volume);",
      "name": "set_music_volume",
      "method_name": null,
      "unique_global_name": "set_music_volume",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Sets the volume of the currently playing `music`. Must be between 0 and 1, e.g. 0.1 is 10%.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "volume": {
          "type": "double",
          "description": "Indicates the percentage of the original volume to play the\n`music` at. This must be between `0` and `1`.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "setter": "volume",
        "static": "audio",
        "group": "audio"
      },
      "signatures": {
        "cpp": [
          "void set_music_volume(double volume)"
        ],
        "rust": [
          "pub fn set_music_volume(volume: f64)"
        ],
        "python": [
          "def set_music_volume(volume):"
        ],
        "pascal": [
          "procedure SetMusicVolume(volume: Double)"
        ],
        "csharp": [
          "public static void Audio.Volume { set }",
          "public static void SplashKit.SetMusicVolume(double volume);"
        ]
      }
    },
    {
      "signature": "void stop_music();",
      "name": "stop_music",
      "method_name": "stop",
      "unique_global_name": "stop_music",
      "unique_method_name": ".stop",
      "suffix_name": null,
      "description": "Stops currently playing music.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "method": "stop",
        "static": "audio",
        "group": "audio"
      },
      "signatures": {
        "cpp": [
          "void stop_music()"
        ],
        "rust": [
          "pub fn stop_music()"
        ],
        "python": [
          "def stop_music():"
        ],
        "pascal": [
          "procedure StopMusic()"
        ],
        "csharp": [
          "public static void Audio.StopMusic();",
          "public static void SplashKit.StopMusic();"
        ]
      }
    },
    {
      "signature": "void fade_all_sound_effects_out(int ms);",
      "name": "fade_all_sound_effects_out",
      "method_name": null,
      "unique_global_name": "fade_all_sound_effects_out",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Fades out all `sound_effect`s over the specified milliseconds.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "ms": {
          "type": "int",
          "description": "The number of milliseconds to fade out all sound effects.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "audio",
        "static": "audio"
      },
      "signatures": {
        "cpp": [
          "void fade_all_sound_effects_out(int ms)"
        ],
        "rust": [
          "pub fn fade_all_sound_effects_out(ms: i32)"
        ],
        "python": [
          "def fade_all_sound_effects_out(ms):"
        ],
        "pascal": [
          "procedure FadeAllSoundEffectsOut(ms: Integer)"
        ],
        "csharp": [
          "public static void Audio.FadeAllSoundEffectsOut(int ms);",
          "public static void SplashKit.FadeAllSoundEffectsOut(int ms);"
        ]
      }
    },
    {
      "signature": "void fade_sound_effect_out(sound_effect effect,int ms);",
      "name": "fade_sound_effect_out",
      "method_name": "fade_out",
      "unique_global_name": "fade_sound_effect_out",
      "unique_method_name": "sound_effect.fade_out",
      "suffix_name": null,
      "description": "Fades out the `sound_effect` over the specified milliseconds.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "effect": {
          "type": "sound_effect",
          "description": "The `sound_effect` to fade out.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "ms": {
          "type": "int",
          "description": "The number of milliseconds to fade out the `sound_effect`.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sound_effect",
        "method": "fade_out",
        "self": "effect",
        "group": "audio",
        "static": "audio"
      },
      "signatures": {
        "cpp": [
          "void fade_sound_effect_out(sound_effect effect, int ms)"
        ],
        "rust": [
          "pub fn fade_sound_effect_out(effect: sound_effect, ms: i32)"
        ],
        "python": [
          "def fade_sound_effect_out(effect, ms):"
        ],
        "pascal": [
          "procedure FadeSoundEffectOut(effect: SoundEffect; ms: Integer)"
        ],
        "csharp": [
          "public void SoundEffect.FadeSoundEffectOut(int ms);",
          "public static void SplashKit.FadeSoundEffectOut(SoundEffect effect, int ms);"
        ]
      }
    },
    {
      "signature": "void free_all_sound_effects();",
      "name": "free_all_sound_effects",
      "method_name": null,
      "unique_global_name": "free_all_sound_effects",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Releases all of the sound effects that have been loaded.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {},
      "attributes": {
        "group": "audio",
        "static": "audio"
      },
      "signatures": {
        "cpp": [
          "void free_all_sound_effects()"
        ],
        "rust": [
          "pub fn free_all_sound_effects()"
        ],
        "python": [
          "def free_all_sound_effects():"
        ],
        "pascal": [
          "procedure FreeAllSoundEffects()"
        ],
        "csharp": [
          "public static void Audio.FreeAllSoundEffects();",
          "public static void SplashKit.FreeAllSoundEffects();"
        ]
      }
    },
    {
      "signature": "void free_sound_effect(sound_effect effect);",
      "name": "free_sound_effect",
      "method_name": "close",
      "unique_global_name": "free_sound_effect",
      "unique_method_name": "sound_effect.close",
      "suffix_name": null,
      "description": "Releases the SplashKit resources associated with the sound effect.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "effect": {
          "type": "sound_effect",
          "description": "The `sound_effect` whose resources should be released.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sound_effect",
        "destructor": true,
        "method": "close",
        "self": "effect",
        "group": "audio",
        "static": "audio"
      },
      "signatures": {
        "cpp": [
          "void free_sound_effect(sound_effect effect)"
        ],
        "rust": [
          "pub fn free_sound_effect(effect: sound_effect)"
        ],
        "python": [
          "def free_sound_effect(effect):"
        ],
        "pascal": [
          "procedure FreeSoundEffect(effect: SoundEffect)"
        ],
        "csharp": [
          "public void SoundEffect.FreeSoundEffect();",
          "public static void SplashKit.FreeSoundEffect(SoundEffect effect);"
        ]
      }
    },
    {
      "signature": "bool has_sound_effect(const string &name);",
      "name": "has_sound_effect",
      "method_name": null,
      "unique_global_name": "has_sound_effect",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Determines if SplashKit has a sound effect loaded for the supplied name.\nThis checks against all sounds loaded, those loaded without a name\nare assigned the filename as a default. If this returns `false`, you may\nwant to use `load_sound_effect` to load in a specific sound effect and give\nit the desired name.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "Returns `true` if there is a sound effect with the given `name` has\nhas been loaded.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name to check if a sound effect is loaded.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "audio",
        "static": "audio"
      },
      "signatures": {
        "cpp": [
          "bool has_sound_effect(const string &name)"
        ],
        "rust": [
          "pub fn has_sound_effect(name: &String) -> bool"
        ],
        "python": [
          "def has_sound_effect(name):"
        ],
        "pascal": [
          "function HasSoundEffect(const name: String): Boolean"
        ],
        "csharp": [
          "public static bool Audio.HasSoundEffect(string name);",
          "public static bool SplashKit.HasSoundEffect(string name);"
        ]
      }
    },
    {
      "signature": "sound_effect load_sound_effect(const string &name,const string &filename);",
      "name": "load_sound_effect",
      "method_name": null,
      "unique_global_name": "load_sound_effect",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "The supplied `filename` is used to locate the sound effect to load. The\nsupplied `name` indicates the name to use to refer to this `sound_effect`.\nThe `sound_effect` can then be retrieved by passing this `name` to\nthe `sound_effect_named` function.",
      "brief": "Loads and returns a sound effect.",
      "return": {
        "type": "sound_effect",
        "description": "A new `sound_effect` with the initialised values provided.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name used to refer to the sound effect.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "filename": {
          "type": "string",
          "description": "The filename used to locate the sound effect to use.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sound_effect",
        "constructor": true,
        "group": "audio",
        "static": "audio"
      },
      "signatures": {
        "cpp": [
          "sound_effect load_sound_effect(const string &name, const string &filename)"
        ],
        "rust": [
          "pub fn load_sound_effect(name: &String, filename: &String) -> sound_effect"
        ],
        "python": [
          "def load_sound_effect(name, filename):"
        ],
        "pascal": [
          "function LoadSoundEffect(const name: String; const filename: String): SoundEffect"
        ],
        "csharp": [
          "public static SoundEffect SplashKit.LoadSoundEffect(string name, string filename);",
          "public SoundEffect(string name, string filename);"
        ]
      }
    },
    {
      "signature": "void play_sound_effect(const string &name);",
      "name": "play_sound_effect",
      "method_name": null,
      "unique_global_name": "play_sound_effect_named",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Plays a sound effect once at full volume.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name of the effect to play.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "named",
        "group": "audio",
        "static": "audio"
      },
      "signatures": {
        "cpp": [
          "void play_sound_effect(const string &name)"
        ],
        "rust": [
          "pub fn play_sound_effect(name: &String)"
        ],
        "python": [
          "def play_sound_effect_named(name):"
        ],
        "pascal": [
          "procedure PlaySoundEffect(const name: String)"
        ],
        "csharp": [
          "public static void Audio.PlaySoundEffect(string name);",
          "public static void SplashKit.PlaySoundEffect(string name);"
        ]
      }
    },
    {
      "signature": "void play_sound_effect(const string &name,double volume);",
      "name": "play_sound_effect",
      "method_name": null,
      "unique_global_name": "play_sound_effect_named_with_volume",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Plays a sound effect once at full volume.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name of the effect to play.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "volume": {
          "type": "double",
          "description": "The volume to play the `sound_effect`",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "named_with_volume",
        "group": "audio",
        "static": "audio"
      },
      "signatures": {
        "cpp": [
          "void play_sound_effect(const string &name, double volume)"
        ],
        "rust": [
          "pub fn play_sound_effect(name: &String, volume: f64)"
        ],
        "python": [
          "def play_sound_effect_named_with_volume(name, volume):"
        ],
        "pascal": [
          "procedure PlaySoundEffect(const name: String; volume: Double)"
        ],
        "csharp": [
          "public static void Audio.PlaySoundEffect(string name, double volume);",
          "public static void SplashKit.PlaySoundEffect(string name, double volume);"
        ]
      }
    },
    {
      "signature": "void play_sound_effect(const string &name,int times);",
      "name": "play_sound_effect",
      "method_name": null,
      "unique_global_name": "play_sound_effect_named_with_times",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Plays a sound effect for a specified number of times at full volume.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name of the effect to play.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "times": {
          "type": "int",
          "description": "Controls the number of times the sound effect is played.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "named_with_times",
        "group": "audio",
        "static": "audio"
      },
      "signatures": {
        "cpp": [
          "void play_sound_effect(const string &name, int times)"
        ],
        "rust": [
          "pub fn play_sound_effect(name: &String, times: i32)"
        ],
        "python": [
          "def play_sound_effect_named_with_times(name, times):"
        ],
        "pascal": [
          "procedure PlaySoundEffect(const name: String; times: Integer)"
        ],
        "csharp": [
          "public static void Audio.PlaySoundEffect(string name, int times);",
          "public static void SplashKit.PlaySoundEffect(string name, int times);"
        ]
      }
    },
    {
      "signature": "void play_sound_effect(const string &name,int times,double volume);",
      "name": "play_sound_effect",
      "method_name": null,
      "unique_global_name": "play_sound_effect_named_with_times_and_volume",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Plays a sound effect for a specified number of times and playback volume.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name of the effect to play.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "times": {
          "type": "int",
          "description": "Controls the number of times the sound effect is played.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "volume": {
          "type": "double",
          "description": "Indicates the percentage of the original volume to play the\n`sound_effect` at. This must be between `0` and `1`.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "named_with_times_and_volume",
        "group": "audio",
        "static": "audio"
      },
      "signatures": {
        "cpp": [
          "void play_sound_effect(const string &name, int times, double volume)"
        ],
        "rust": [
          "pub fn play_sound_effect(name: &String, times: i32, volume: f64)"
        ],
        "python": [
          "def play_sound_effect_named_with_times_and_volume(name, times, volume):"
        ],
        "pascal": [
          "procedure PlaySoundEffect(const name: String; times: Integer; volume: Double)"
        ],
        "csharp": [
          "public static void Audio.PlaySoundEffect(string name, int times, double volume);",
          "public static void SplashKit.PlaySoundEffect(string name, int times, double volume);"
        ]
      }
    },
    {
      "signature": "void play_sound_effect(sound_effect effect);",
      "name": "play_sound_effect",
      "method_name": "play",
      "unique_global_name": "play_sound_effect",
      "unique_method_name": "sound_effect.play",
      "suffix_name": null,
      "description": "Plays a sound effect once at full volume.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "effect": {
          "type": "sound_effect",
          "description": "The effect indicates which sound effect to start playing.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sound_effect",
        "method": "play",
        "self": "effect",
        "group": "audio",
        "static": "audio"
      },
      "signatures": {
        "cpp": [
          "void play_sound_effect(sound_effect effect)"
        ],
        "rust": [
          "pub fn play_sound_effect(effect: sound_effect)"
        ],
        "python": [
          "def play_sound_effect(effect):"
        ],
        "pascal": [
          "procedure PlaySoundEffect(effect: SoundEffect)"
        ],
        "csharp": [
          "public void SoundEffect.PlaySoundEffect();",
          "public static void SplashKit.PlaySoundEffect(SoundEffect effect);"
        ]
      }
    },
    {
      "signature": "void play_sound_effect(sound_effect effect,double volume);",
      "name": "play_sound_effect",
      "method_name": "play",
      "unique_global_name": "play_sound_effect_with_volume",
      "unique_method_name": "sound_effect.play_with_volume",
      "suffix_name": null,
      "description": "Plays a sound effect once at playback volume.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "effect": {
          "type": "sound_effect",
          "description": "The effect indicates which sound effect to start playing.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "volume": {
          "type": "double",
          "description": "Indicates the percentage of the original volume to play the\n`sound_effect` at. This must be between `0` and `1`.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sound_effect",
        "method": "play",
        "self": "effect",
        "suffix": "with_volume",
        "group": "audio",
        "static": "audio"
      },
      "signatures": {
        "cpp": [
          "void play_sound_effect(sound_effect effect, double volume)"
        ],
        "rust": [
          "pub fn play_sound_effect(effect: sound_effect, volume: f64)"
        ],
        "python": [
          "def play_sound_effect_with_volume(effect, volume):"
        ],
        "pascal": [
          "procedure PlaySoundEffect(effect: SoundEffect; volume: Double)"
        ],
        "csharp": [
          "public void SoundEffect.PlaySoundEffect(double volume);",
          "public static void SplashKit.PlaySoundEffect(SoundEffect effect, double volume);"
        ]
      }
    },
    {
      "signature": "void play_sound_effect(sound_effect effect,int times);",
      "name": "play_sound_effect",
      "method_name": "play",
      "unique_global_name": "play_sound_effect_with_times",
      "unique_method_name": "sound_effect.play_with_times",
      "suffix_name": null,
      "description": "Plays a sound effect once at full volume.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "effect": {
          "type": "sound_effect",
          "description": "The effect indicates which sound effect to start playing.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "times": {
          "type": "int",
          "description": "Controls the number of times the sound effect is played.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sound_effect",
        "method": "play",
        "self": "effect",
        "suffix": "with_times",
        "group": "audio",
        "static": "audio"
      },
      "signatures": {
        "cpp": [
          "void play_sound_effect(sound_effect effect, int times)"
        ],
        "rust": [
          "pub fn play_sound_effect(effect: sound_effect, times: i32)"
        ],
        "python": [
          "def play_sound_effect_with_times(effect, times):"
        ],
        "pascal": [
          "procedure PlaySoundEffect(effect: SoundEffect; times: Integer)"
        ],
        "csharp": [
          "public void SoundEffect.PlaySoundEffect(int times);",
          "public static void SplashKit.PlaySoundEffect(SoundEffect effect, int times);"
        ]
      }
    },
    {
      "signature": "void play_sound_effect(sound_effect effect,int times,double volume);",
      "name": "play_sound_effect",
      "method_name": "play",
      "unique_global_name": "play_sound_effect_with_times_and_volume",
      "unique_method_name": "sound_effect.play_with_times_and_volume",
      "suffix_name": null,
      "description": "This version of `play_sound_effect` allows you to control both the number\nof times the `sound_effect` is repeated and its playback volume.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "effect": {
          "type": "sound_effect",
          "description": "The effect indicates which sound effect to start playing.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "times": {
          "type": "int",
          "description": "Controls the number of times the sound effect is played.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        },
        "volume": {
          "type": "double",
          "description": "Indicates the percentage of the original volume to play the\n`sound_effect` at. This must be between `0` and `1`.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sound_effect",
        "method": "play",
        "self": "effect",
        "suffix": "with_times_and_volume",
        "group": "audio",
        "static": "audio"
      },
      "signatures": {
        "cpp": [
          "void play_sound_effect(sound_effect effect, int times, double volume)"
        ],
        "rust": [
          "pub fn play_sound_effect(effect: sound_effect, times: i32, volume: f64)"
        ],
        "python": [
          "def play_sound_effect_with_times_and_volume(effect, times, volume):"
        ],
        "pascal": [
          "procedure PlaySoundEffect(effect: SoundEffect; times: Integer; volume: Double)"
        ],
        "csharp": [
          "public void SoundEffect.PlaySoundEffect(int times, double volume);",
          "public static void SplashKit.PlaySoundEffect(SoundEffect effect, int times, double volume);"
        ]
      }
    },
    {
      "signature": "string sound_effect_filename(sound_effect effect);",
      "name": "sound_effect_filename",
      "method_name": null,
      "unique_global_name": "sound_effect_filename",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the filename of the `sound_effect` that has been loaded by SplashKit",
      "brief": null,
      "return": {
        "type": "string",
        "description": "Returns the filename of the `sound_effect` that has been loaded",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "effect": {
          "type": "sound_effect",
          "description": "The `sound_effect` to check",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sound_effect",
        "getter": "filename",
        "self": "effect",
        "group": "audio",
        "static": "audio"
      },
      "signatures": {
        "cpp": [
          "string sound_effect_filename(sound_effect effect)"
        ],
        "rust": [
          "pub fn sound_effect_filename(effect: sound_effect) -> String"
        ],
        "python": [
          "def sound_effect_filename(effect):"
        ],
        "pascal": [
          "function SoundEffectFilename(effect: SoundEffect): String"
        ],
        "csharp": [
          "public string SoundEffect.Filename { get }",
          "public static string SplashKit.SoundEffectFilename(SoundEffect effect);"
        ]
      }
    },
    {
      "signature": "string sound_effect_name(sound_effect effect);",
      "name": "sound_effect_name",
      "method_name": null,
      "unique_global_name": "sound_effect_name",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Returns the name of the `sound_effect` that has been loaded by SplashKit",
      "brief": null,
      "return": {
        "type": "string",
        "description": "Returns the name of the `sound_effect` that has been loaded",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "effect": {
          "type": "sound_effect",
          "description": "The `sound_effect` to check",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sound_effect",
        "getter": "name",
        "self": "effect",
        "group": "audio",
        "static": "audio"
      },
      "signatures": {
        "cpp": [
          "string sound_effect_name(sound_effect effect)"
        ],
        "rust": [
          "pub fn sound_effect_name(effect: sound_effect) -> String"
        ],
        "python": [
          "def sound_effect_name(effect):"
        ],
        "pascal": [
          "function SoundEffectName(effect: SoundEffect): String"
        ],
        "csharp": [
          "public string SoundEffect.Name { get }",
          "public static string SplashKit.SoundEffectName(SoundEffect effect);"
        ]
      }
    },
    {
      "signature": "sound_effect sound_effect_named(const string &name);",
      "name": "sound_effect_named",
      "method_name": null,
      "unique_global_name": "sound_effect_named",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Retrieves a `sound_effect` that has been loaded into SplashKit. If the\nsound effect has not been loaded, this will attempt to use the name to\nlocate the file for you. If a file can be found, the sound effect is loaded\nand returned.",
      "brief": null,
      "return": {
        "type": "sound_effect",
        "description": "Returns the `sound_effect` that has been loaded with the specified\n`name` using `load_sound_effect`.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name of the sound effect to return.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "audio",
        "static": "audio"
      },
      "signatures": {
        "cpp": [
          "sound_effect sound_effect_named(const string &name)"
        ],
        "rust": [
          "pub fn sound_effect_named(name: &String) -> sound_effect"
        ],
        "python": [
          "def sound_effect_named(name):"
        ],
        "pascal": [
          "function SoundEffectNamed(const name: String): SoundEffect"
        ],
        "csharp": [
          "public static SoundEffect Audio.SoundEffectNamed(string name);",
          "public static SoundEffect SplashKit.SoundEffectNamed(string name);"
        ]
      }
    },
    {
      "signature": "bool sound_effect_playing(const string &name);",
      "name": "sound_effect_playing",
      "method_name": null,
      "unique_global_name": "sound_effect_playing_named",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Checks whether the `sound_effect` that matches the name is currently playing",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "Returns whether the \"sound_effect\" that matches the name is currently playing or not",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name of the `sound_effect`",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "named",
        "group": "audio",
        "static": "audio"
      },
      "signatures": {
        "cpp": [
          "bool sound_effect_playing(const string &name)"
        ],
        "rust": [
          "pub fn sound_effect_playing(name: &String) -> bool"
        ],
        "python": [
          "def sound_effect_playing_named(name):"
        ],
        "pascal": [
          "function SoundEffectPlaying(const name: String): Boolean"
        ],
        "csharp": [
          "public static bool Audio.SoundEffectPlaying(string name);",
          "public static bool SplashKit.SoundEffectPlaying(string name);"
        ]
      }
    },
    {
      "signature": "bool sound_effect_playing(sound_effect effect);",
      "name": "sound_effect_playing",
      "method_name": null,
      "unique_global_name": "sound_effect_playing",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Checks whether the `sound_effect` is currently playing",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "Returns whether the \"sound_effect\" is currently playing or not",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "effect": {
          "type": "sound_effect",
          "description": "The `sound_effect` to be tested.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sound_effect",
        "getter": "is_playing",
        "self": "effect",
        "group": "audio",
        "static": "audio"
      },
      "signatures": {
        "cpp": [
          "bool sound_effect_playing(sound_effect effect)"
        ],
        "rust": [
          "pub fn sound_effect_playing(effect: sound_effect) -> bool"
        ],
        "python": [
          "def sound_effect_playing(effect):"
        ],
        "pascal": [
          "function SoundEffectPlaying(effect: SoundEffect): Boolean"
        ],
        "csharp": [
          "public bool SoundEffect.IsPlaying { get }",
          "public static bool SplashKit.SoundEffectPlaying(SoundEffect effect);"
        ]
      }
    },
    {
      "signature": "bool sound_effect_valid(sound_effect effect);",
      "name": "sound_effect_valid",
      "method_name": null,
      "unique_global_name": "sound_effect_valid",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Lets you test if a sound effect is valid. This will return true when it is a valid sound effect.",
      "brief": null,
      "return": {
        "type": "bool",
        "description": "true when the sound effect is valid.",
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "effect": {
          "type": "sound_effect",
          "description": "the effect to test",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "group": "audio",
        "static": "audio"
      },
      "signatures": {
        "cpp": [
          "bool sound_effect_valid(sound_effect effect)"
        ],
        "rust": [
          "pub fn sound_effect_valid(effect: sound_effect) -> bool"
        ],
        "python": [
          "def sound_effect_valid(effect):"
        ],
        "pascal": [
          "function SoundEffectValid(effect: SoundEffect): Boolean"
        ],
        "csharp": [
          "public static bool Audio.SoundEffectValid(SoundEffect effect);",
          "public static bool SplashKit.SoundEffectValid(SoundEffect effect);"
        ]
      }
    },
    {
      "signature": "void stop_sound_effect(const string &name);",
      "name": "stop_sound_effect",
      "method_name": null,
      "unique_global_name": "stop_sound_effect_named",
      "unique_method_name": null,
      "suffix_name": null,
      "description": "Stops the `sound_effect` that matches the name, if it is currently playing.",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "name": {
          "type": "string",
          "description": "The name of the `sound_effect` to stop.",
          "is_pointer": false,
          "is_const": true,
          "is_reference": true,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "suffix": "named",
        "group": "audio",
        "static": "audio"
      },
      "signatures": {
        "cpp": [
          "void stop_sound_effect(const string &name)"
        ],
        "rust": [
          "pub fn stop_sound_effect(name: &String)"
        ],
        "python": [
          "def stop_sound_effect_named(name):"
        ],
        "pascal": [
          "procedure StopSoundEffect(const name: String)"
        ],
        "csharp": [
          "public static void Audio.StopSoundEffect(string name);",
          "public static void SplashKit.StopSoundEffect(string name);"
        ]
      }
    },
    {
      "signature": "void stop_sound_effect(sound_effect effect);",
      "name": "stop_sound_effect",
      "method_name": "stop",
      "unique_global_name": "stop_sound_effect",
      "unique_method_name": "sound_effect.stop",
      "suffix_name": null,
      "description": "Stops the `sound_effect` if it is currently playing",
      "brief": null,
      "return": {
        "type": "void",
        "description": null,
        "is_pointer": false,
        "is_reference": false,
        "is_vector": false,
        "type_parameter": null
      },
      "parameters": {
        "effect": {
          "type": "sound_effect",
          "description": "The `sound_effect` to stop.",
          "is_pointer": false,
          "is_const": false,
          "is_reference": false,
          "is_array": false,
          "array_dimension_sizes": [],
          "is_vector": false,
          "type_parameter": null
        }
      },
      "attributes": {
        "class": "sound_effect",
        "method": "stop",
        "self": "effect",
        "group": "audio",
        "static": "audio"
      },
      "signatures": {
        "cpp": [
          "void stop_sound_effect(sound_effect effect)"
        ],
        "rust": [
          "pub fn stop_sound_effect(effect: sound_effect)"
        ],
        "python": [
          "def stop_sound_effect(effect):"
        ],
        "pascal": [
          "procedure StopSoundEffect(effect: SoundEffect)"
        ],
        "csharp": [
          "public void SoundEffect.StopSoundEffect();",
          "public static void SplashKit.StopSoundEffect(SoundEffect effect);"
        ]
      }
    }
  ]
}