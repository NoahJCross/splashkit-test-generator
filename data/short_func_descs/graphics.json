{
  "example": "#include \"window_manager.h\"\n#include \"graphics.h\"\n#include \"input.h\"\n#include \"color.h\"\n#include \"random.h\"\n#include \"text.h\"\n#include \"utils.h\"\n\n#include <iostream>\nusing namespace std;\nusing namespace splashkit_lib;\n\nvoid test_drawing_on_new_window()\n{\n bitmap user_image;\n\n user_image = create_bitmap (\"user_image\", 20, 20);\n save_bitmap(user_image, \"0\");\n clear_bitmap (user_image, COLOR_BRIGHT_GREEN);\n save_bitmap(user_image, \"1\");\n fill_rectangle_on_bitmap (user_image, COLOR_BLACK, 0, 0, 10, 10);\n save_bitmap(user_image, \"2\");\n\n window my_window = open_window (\"Black TL+BR\", 200, 200);\n clear_window (my_window, COLOR_WHITE);\n fill_rectangle_on_bitmap (user_image, COLOR_BLACK, 10, 10, 10, 10);\n save_bitmap(user_image, \"3\");\n\n draw_bitmap_on_window (my_window, user_image, 0, 0);\n save_bitmap(user_image, \"4\");\n refresh_window(my_window);\n \n bitmap user_image1;\n \n user_image1 = create_bitmap (\"user_image1\", 20, 20);\n clear_bitmap (user_image1, COLOR_BLACK);\n fill_rectangle_on_bitmap (user_image1, COLOR_BRIGHT_GREEN, 10, 0, 10, 10);\n fill_rectangle_on_bitmap (user_image1, COLOR_BRIGHT_GREEN, 0, 10, 10, 10);\n \n draw_bitmap_on_window (my_window, user_image1, 30, 0);\n save_bitmap(user_image, \"4\");\n refresh_window(my_window);\n \n delay (5000);\n\n close_window(my_window);\n free_bitmap(user_image);\n}\n\nvoid test_clipping(window w1)\n{\n clear_window(w1, COLOR_WHITE_SMOKE);\n draw_text(\"White Smoke Bottom Right\", COLOR_BLACK, 10, 280);\n set_clip(w1, rectangle_from(0, 0, 250, 250));\n fill_rectangle(string_to_color(\"#ff0000ff\"), 0, 0, 300, 300, option_draw_to(w1));\n draw_text(\"Testing Clipping\", COLOR_BLACK, 10, 10);\n draw_text(\"Red Top Left\", COLOR_BLACK, 10, 20);\n \n push_clip(rectangle_from(50, 50, 250, 250));\n fill_rectangle(string_to_color(\"#00ff00ff\"), 0, 0, 300, 300, option_draw_to(w1));\n \n push_clip(rectangle_from(145, 0, 10, 300));\n fill_rectangle(COLOR_GOLD, 0, 0, 300, 300, option_draw_to(w1));\n \n pop_clip();\n push_clip(rectangle_from(0, 145, 300, 10));\n fill_rectangle(COLOR_GOLD, 0, 0, 300, 300, option_draw_to(w1));\n \n reset_clip();\n \n refresh_screen();\n delay(3000);\n \n bitmap bmp = create_bitmap(\"bmp\", 100, 100);\n set_clip(bmp, rectangle_from(0, 0, 75, 75));\n fill_rectangle(COLOR_RED, 0, 0, 100, 100, option_draw_to(bmp));\n push_clip(bmp, rectangle_from(0, 0, 50, 50));\n fill_rectangle(COLOR_GREEN, 0, 0, 100, 100, option_draw_to(bmp));\n \n push_clip(bmp, rectangle_from(20, 0, 10, 100));\n fill_rectangle(COLOR_GOLD, 0, 0, 100, 100, option_draw_to(bmp));\n pop_clip(bmp);\n \n push_clip(bmp, rectangle_from(0, 20, 100, 10));\n fill_rectangle(COLOR_GOLD, 0, 0, 100, 100, option_draw_to(bmp));\n pop_clip(bmp);\n \n push_clip(bmp, rectangle_from(0, 0, 25, 25));\n fill_rectangle(COLOR_BLUE, 0, 0, 100, 100, option_draw_to(bmp));\n reset_clip(bmp);\n \n clear_window(w1, COLOR_SILVER);\n draw_text(\"B > G > R from top left of bmp\", COLOR_BLACK, 10, 10);\n draw_bitmap(bmp, 100, 100);\n save_bitmap(bmp, \"bmp\");\n refresh_screen();\n delay(3000);\n}\n\nvoid run_graphics_test()\n{\n cout << \"Checking the number of displays and their details\" << endl;\n cout << \"There are \" << number_of_displays() << \" displays\" << endl;\n cout << \"------------------------\" << endl;\n \n for (int i = 0; i < number_of_displays(); i++)\n {\n display d = display_details(i);\n cout << \"Display \" << i << endl;\n cout << \" name: \" << display_name(d) << endl;\n cout << \" @: \" << display_x(d) << \",\" << display_y(d) << endl;\n cout << \" s: \" << display_width(d) << \"x\" << display_height(d) << endl;\n cout << \"------------------------\" << endl;\n }\n \n test_drawing_on_new_window();\n \n window w1 = open_window(\"Testing Graphics\", 300, 300);\n \n test_clipping(w1);\n \n color in_clr = string_to_color(\"#ffeebbaa\");\n \n color clr;\n \n while ( ! window_close_requested(w1) )\n {\n process_events();\n \n for (int x = 0; x < window_width(w1); x++)\n {\n for (int y = 0; y < window_height(w1); y++)\n {\n clr = hsb_color(x / (window_width(w1) 1.0f), y / (window_height(w1) 1.0f), y / (window_height(w1) 1.0f));\n draw_pixel(clr, x, y);\n }\n }\n \n fill_rectangle(in_clr, 100, 100, 100, 100);\n \n clr = get_pixel(mouse_position());\n \n string clr_string = \"Color \" + color_to_string(clr);\n string r_string = \"Red \" + to_string(red_of(clr));\n string g_string = \"Green \" + to_string(green_of(clr));\n string b_string = \"Blue \" + to_string(blue_of(clr));\n string a_string = \"Alpha \" + to_string(alpha_of(clr));\n string h_string = \"Hue \" + to_string(hue_of(clr));\n string s_string = \"Sat \" + to_string(saturation_of(clr));\n string bri_string = \"Bri \" + to_string(brightness_of(clr));\n\n \n draw_text(clr_string, COLOR_BLACK, 20, 180);\n draw_text(r_string, COLOR_BLACK, 20, 190);\n draw_text(g_string, COLOR_BLACK, 20, 200);\n draw_text(b_string, COLOR_BLACK, 20, 210);\n draw_text(a_string, COLOR_BLACK, 20, 220);\n draw_text(h_string, COLOR_BLACK, 20, 240);\n draw_text(s_string, COLOR_BLACK, 20, 250);\n draw_text(bri_string, COLOR_BLACK, 20, 260);\n \n refresh_screen();\n }\n \n close_window(w1);\n}",
  "resources": {
    "fonts": {
      "hara": "hara.ttf",
      "leaguegothic": "LeagueGothic.otf",
      "kochi": "kochi-gothic-subst.ttf",
      "brawler": "https://github.com/google/fonts/raw/master/ofl/brawler/Brawler-Regular.ttf"
    }
  },
  "tests": [
    {
      "description": "Returns the center point of the circle.",
      "name": "center_point",
      "return_description": "The center point of the circle",
      "signature": "point_2d center_point(const circle &c);",
      "unique_global_name": "center_point"
    },
    {
      "description": "Returns a circle at the indicated point and radius.",
      "name": "circle_at",
      "return_description": "A circle at the indicatd point and radius",
      "signature": "circle circle_at(const point_2d &pt,double radius);",
      "unique_global_name": "circle_at"
    },
    {
      "description": "Returns a circle at the indicated point and radius.",
      "name": "circle_at",
      "return_description": "A circle at the indicatd point and radius",
      "signature": "circle circle_at(double x,double y,double radius);",
      "unique_global_name": "circle_at_from_points"
    },
    {
      "description": "Returns the circle radius.",
      "name": "circle_radius",
      "return_description": "The radius of the circle",
      "signature": "float circle_radius(const circle c);",
      "unique_global_name": "circle_radius"
    },
    {
      "description": "Detects if a circle intersects with a triangle.",
      "name": "circle_triangle_intersect",
      "return_description": "True if the circle and triangle intersect",
      "signature": "bool circle_triangle_intersect(const circle &c,const triangle &tri);",
      "unique_global_name": "circle_triangle_intersect"
    },
    {
      "description": "Detects if a circle intersects with a triangle. The closest point on the\ntriangle to the circle is assigned to p, even if the circle and triangle do not\nintersect. If the centre of the circle is inside the triangle,\nthe point assigned to p is the centre of the circle.",
      "name": "circle_triangle_intersect",
      "return_description": "True if the circle and triangle intersect",
      "signature": "bool circle_triangle_intersect(const circle &c,const triangle &tri,point_2d &p);",
      "unique_global_name": "circle_triangle_intersect_get_closest_point"
    },
    {
      "description": "Returns the circle x value.",
      "name": "circle_x",
      "return_description": "The x location of the center of the circle",
      "signature": "float circle_x(const circle &c);",
      "unique_global_name": "circle_x"
    },
    {
      "description": "Returns the circle y value.",
      "name": "circle_y",
      "return_description": "The y location of the center of the circle",
      "signature": "float circle_y(const circle &c);",
      "unique_global_name": "circle_y"
    },
    {
      "description": "Detects if two circles intersect. This can be used to detect collisions between\nbounding circles.",
      "name": "circles_intersect",
      "return_description": "True if the two circles do intersect",
      "signature": "bool circles_intersect(circle c1,circle c2);",
      "unique_global_name": "circles_intersect"
    },
    {
      "description": "Detects if two circles intersect. This can be used to detect collisions between\nbounding circles. The circle data is passed in as individual values.",
      "name": "circles_intersect",
      "return_description": "true when the two circles intersect",
      "signature": "bool circles_intersect(double c1_x,double c1_y,double c1_radius,double c2_x,double c2_y,double c2_radius);",
      "unique_global_name": "circles_intersect_using_values"
    },
    {
      "description": "The closest point on the circle to the given point.",
      "name": "closest_point_on_circle",
      "return_description": "The point on c that is closest to the from point",
      "signature": "point_2d closest_point_on_circle(const point_2d &from_pt,const circle &c);",
      "unique_global_name": "closest_point_on_circle"
    },
    {
      "description": "Returns the closest point on a line to a circle.",
      "name": "closest_point_on_line_from_circle",
      "return_description": "The point that is closest to `c` on `l`",
      "signature": "point_2d closest_point_on_line_from_circle(const circle &c,const line &l);",
      "unique_global_name": "closest_point_on_line_from_circle"
    },
    {
      "description": "Returns the closest point on a rectangle to a circle.",
      "name": "closest_point_on_rect_from_circle",
      "return_description": "The point that is closest to `c` on `rect`",
      "signature": "point_2d closest_point_on_rect_from_circle(const circle &c,const rectangle &rect);",
      "unique_global_name": "closest_point_on_rect_from_circle"
    },
    {
      "description": "Calculates the closest point on a triangle to a circle. If the circle and\ntriangle do not intersect, the closest point on the triangle to the circle\nis returned. If the circle and triangle do intersect, the center of the\ncircle is returned.",
      "name": "closest_point_on_triangle_from_circle",
      "return_description": "The closest point on the triangle to the circle",
      "signature": "point_2d closest_point_on_triangle_from_circle(const circle &c,const triangle &tri);",
      "unique_global_name": "closest_point_on_triangle_from_circle"
    },
    {
      "description": "The furthest point on the circle to the given point.",
      "name": "distant_point_on_circle",
      "return_description": "The point on c that is furthest from `pt`",
      "signature": "point_2d distant_point_on_circle(const point_2d &pt,const circle &c);",
      "unique_global_name": "distant_point_on_circle"
    },
    {
      "description": "Determines the opposite side of a circle given a collision point and a\nheading.",
      "name": "distant_point_on_circle_heading",
      "return_description": "True when the `opposite_pt` is calculated, false when\nthe point would not collide with the circle when\nheading as indicated.",
      "signature": "bool distant_point_on_circle_heading(const point_2d &pt,const circle &c,const vector_2d &heading,point_2d &opposite_pt);",
      "unique_global_name": "distant_point_on_circle_heading"
    },
    {
      "description": "Calculates the distance from a ray cast from a point to a given circle.",
      "name": "ray_circle_intersect_distance",
      "return_description": "-1 if the ray does not hit the circle, otherwise the\ndistance from the origin to the circle bounds.",
      "signature": "float ray_circle_intersect_distance(const point_2d &ray_origin,const vector_2d &ray_heading,const circle &c);",
      "unique_global_name": "ray_circle_intersect_distance"
    },
    {
      "description": "Returns the two tangent points on the circle given the indicated point.",
      "name": "tangent_points",
      "return_description": "True if `from_pt` is outside of the circle, and tangent\npoints are calculated",
      "signature": "bool tangent_points(const point_2d &from_pt,const circle &c,point_2d &p1,point_2d &p2);",
      "unique_global_name": "tangent_points"
    },
    {
      "description": "Calculates the two points on a circles radius that lie along the given\nvector. This represents the points on the circle when the vector is\nplaced at the circle's center point.",
      "name": "widest_points",
      "return_description": null,
      "signature": "void widest_points(const circle &c,const vector_2d &along,point_2d &pt1,point_2d &pt2);",
      "unique_global_name": "widest_points"
    },
    {
      "description": "Returns the cosine of the supplied angle (in degrees).",
      "name": "cosine",
      "return_description": "the cosine of the supplied angle (in degrees).",
      "signature": "float cosine(float degrees);",
      "unique_global_name": "cosine"
    },
    {
      "description": "Returns the sine of the supplied angle (in degrees).",
      "name": "sine",
      "return_description": "the sine of the supplied angle (in degrees).",
      "signature": "float sine(float degrees);",
      "unique_global_name": "sine"
    },
    {
      "description": "Returns the tangent of the supplied angle (in degrees).",
      "name": "tangent",
      "return_description": "the tangent of the supplied angle (in degrees).",
      "signature": "float tangent(float degrees);",
      "unique_global_name": "tangent"
    },
    {
      "description": "Gets the closest point on the line to a given point.",
      "name": "closest_point_on_line",
      "return_description": "The point on the line that is closest to `from_pt`",
      "signature": "point_2d closest_point_on_line(const point_2d from_pt,const line &l);",
      "unique_global_name": "closest_point_on_line"
    },
    {
      "description": "Get the point closest to `from pt` that is on one of the supplied lines.",
      "name": "closest_point_on_lines",
      "return_description": "The point on one of the lines that is the closest point\non these lines to the `from pt`.",
      "signature": "point_2d closest_point_on_lines(const point_2d from_pt,const vector<line> &lines,int &line_idx);",
      "unique_global_name": "closest_point_on_lines"
    },
    {
      "description": "Create a line from one point to another.",
      "name": "line_from",
      "return_description": "A line from the start to the end point",
      "signature": "line line_from(const point_2d &start,const point_2d &end_pt);",
      "unique_global_name": "line_from_point_to_point"
    },
    {
      "description": "Creates a line that starts at a point, and follows a given vector.",
      "name": "line_from",
      "return_description": "A line from the start to end point",
      "signature": "line line_from(const point_2d &start,const vector_2d &offset);",
      "unique_global_name": "line_from_start_with_offset"
    },
    {
      "description": "Gets a line that goes from the origin and ends at the end of the vector.",
      "name": "line_from",
      "return_description": "A line from the origin to the end point",
      "signature": "line line_from(const vector_2d &v);",
      "unique_global_name": "line_from_vector"
    },
    {
      "description": "Create a line from one point to another.",
      "name": "line_from",
      "return_description": "A line from the start to the end point",
      "signature": "line line_from(double x1,double y1,double x2,double y2);",
      "unique_global_name": "line_from"
    },
    {
      "description": "Returns the point at which two lines would intersect. This point may lie\npast the end of one or both lines.",
      "name": "line_intersection_point",
      "return_description": "[description]",
      "signature": "bool line_intersection_point(const line &line1,const line &line2,point_2d &pt);",
      "unique_global_name": "line_intersection_point"
    },
    {
      "description": "Returns true if the line intersects the circle.",
      "name": "line_intersects_circle",
      "return_description": "True if the line `l` intersects the circle `c`",
      "signature": "bool line_intersects_circle(const line &l,const circle &c);",
      "unique_global_name": "line_intersects_circle"
    },
    {
      "description": "Returns true if the line intersects any of the lines.",
      "name": "line_intersects_lines",
      "return_description": "True if `line` intersects any of the lines in `lines`",
      "signature": "bool line_intersects_lines(const line &l,const vector<line> &lines);",
      "unique_global_name": "line_intersects_lines"
    },
    {
      "description": "Returns true if the line intersects the rectangle.",
      "name": "line_intersects_rect",
      "return_description": "True if `l` intersects `rect`",
      "signature": "bool line_intersects_rect(const line &l,const rectangle &rect);",
      "unique_global_name": "line_intersects_rect"
    },
    {
      "description": "Returns the length of a line.",
      "name": "line_length",
      "return_description": "The length of the line",
      "signature": "float line_length(const line &l);",
      "unique_global_name": "line_length"
    },
    {
      "description": "Returns the squared length of the line. You can also get the\n`line_length`.",
      "name": "line_length_squared",
      "return_description": "The squared length of the line",
      "signature": "float line_length_squared(const line &l);",
      "unique_global_name": "line_length_squared"
    },
    {
      "description": "Returns the center point of the line.",
      "name": "line_mid_point",
      "return_description": "The point that is at the center of the line",
      "signature": "point_2d line_mid_point(const line &l);",
      "unique_global_name": "line_mid_point"
    },
    {
      "description": "The line normal (a perpendicular vector).",
      "name": "line_normal",
      "return_description": "The line's normal vector",
      "signature": "vector_2d line_normal(const line &l);",
      "unique_global_name": "line_normal"
    },
    {
      "description": "Returns a text description of the line.",
      "name": "line_to_string",
      "return_description": "A text description of the line",
      "signature": "string line_to_string(const line &ln);",
      "unique_global_name": "line_to_string"
    },
    {
      "description": "Returns an array of lines from a supplied rectangle.",
      "name": "lines_from",
      "return_description": "An array containing 4 lines",
      "signature": "vector<line> lines_from(const rectangle &rect);",
      "unique_global_name": "lines_from_rectangle"
    },
    {
      "description": "Returns an array of lines from the details in the triangle.",
      "name": "lines_from",
      "return_description": "The lines from the triangle",
      "signature": "vector<line> lines_from(const triangle &t);",
      "unique_global_name": "lines_from_triangle"
    },
    {
      "description": "Returns true if the two lines intersect.",
      "name": "lines_intersect",
      "return_description": "True if the two lines intersect (share a common point).",
      "signature": "bool lines_intersect(const line &l1,const line &l2);",
      "unique_global_name": "lines_intersect"
    },
    {
      "description": "Returns a point at the given location.",
      "name": "point_at",
      "return_description": "A point at the given location",
      "signature": "point_2d point_at(double x,double y);",
      "unique_global_name": "point_at"
    },
    {
      "description": "Returns a point representing the origin.",
      "name": "point_at_origin",
      "return_description": "A point with x and y set to 0",
      "signature": "point_2d point_at_origin();",
      "unique_global_name": "point_at_origin"
    },
    {
      "description": "Returns true if the point `pt` is in the circle `c`.",
      "name": "point_in_circle",
      "return_description": "True if the point is within the area of the circle",
      "signature": "bool point_in_circle(const point_2d &pt,const circle &c);",
      "unique_global_name": "point_in_circle"
    },
    {
      "description": "Return true if the point is in the circle.",
      "name": "point_in_circle",
      "return_description": "True when the point is in the circle, otherwise it returns false.",
      "signature": "bool point_in_circle(double ptx,double pty,double cx,double cy,double radius);",
      "unique_global_name": "point_in_circle_with_values"
    },
    {
      "description": "Tests if a point is in a quad.",
      "name": "point_in_quad",
      "return_description": "True if pt lies within the area of q.",
      "signature": "bool point_in_quad(const point_2d &pt,const quad &q);",
      "unique_global_name": "point_in_quad"
    },
    {
      "description": "Returns true if point `pt` is in the Rectangle `rect`.",
      "name": "point_in_rectangle",
      "return_description": "True if the point is within the rectangle",
      "signature": "bool point_in_rectangle(const point_2d &pt,const rectangle &rect);",
      "unique_global_name": "point_in_rectangle"
    },
    {
      "description": "Returns true if the point is within the bounds of a Rectangle.",
      "name": "point_in_rectangle",
      "return_description": "true when the point is in the rectangle, otherwise it returns false.",
      "signature": "bool point_in_rectangle(double ptx,double pty,double rect_x,double rect_y,double rect_width,double rect_height);",
      "unique_global_name": "point_in_rectangle_with_values"
    },
    {
      "description": "Returns true if the point `pt` is in the Triangle `tri`.",
      "name": "point_in_triangle",
      "return_description": "True if the point is within the triangle",
      "signature": "bool point_in_triangle(const point_2d &pt,const triangle &tri);",
      "unique_global_name": "point_in_triangle"
    },
    {
      "description": "Returns the distance from a point to a line.",
      "name": "point_line_distance",
      "return_description": "The distance from `pt` to `l`",
      "signature": "float point_line_distance(const point_2d &pt,const line &l);",
      "unique_global_name": "point_line_distance"
    },
    {
      "description": "Calculate the `point_2d` that is offset from the `start_point` by the\n`offset`",
      "name": "point_offset_by",
      "return_description": "A new point as a result of moving by the offset from\nthe starting point",
      "signature": "point_2d point_offset_by(const point_2d &start_point,const vector_2d &offset);",
      "unique_global_name": "point_offset_by"
    },
    {
      "description": "Returns the point offset from the origin by the provided vector.",
      "name": "point_offset_from_origin",
      "return_description": "A new point as a result of moving by the offset from\nthe starting point",
      "signature": "point_2d point_offset_from_origin(const vector_2d &offset);",
      "unique_global_name": "point_offset_from_origin"
    },
    {
      "description": "Returns true if point `pt` is on the line `l`.",
      "name": "point_on_line",
      "return_description": "True if the point is on the line",
      "signature": "bool point_on_line(const point_2d &pt,const line &l);",
      "unique_global_name": "point_on_line"
    },
    {
      "description": "Returns true when the point `pt` is on the line `l`. The\nproximity value is used to set the sensitivity -- higher values\neffectively make the line thicker.",
      "name": "point_on_line",
      "return_description": "True if the point is on the line",
      "signature": "bool point_on_line(const point_2d &pt,const line &l,float proximity);",
      "unique_global_name": "point_on_line_with_proximity"
    },
    {
      "description": "Returns the angle between two points in degrees.",
      "name": "point_point_angle",
      "return_description": "The angle (in degrees) of the line between the points",
      "signature": "float point_point_angle(const point_2d &pt1,const point_2d &pt2);",
      "unique_global_name": "point_point_angle"
    },
    {
      "description": "Returns the distance between two points.",
      "name": "point_point_distance",
      "return_description": "The distance between the two points",
      "signature": "float point_point_distance(const point_2d &pt1,const point_2d &pt2);",
      "unique_global_name": "point_point_distance"
    },
    {
      "description": "Get a text description of the `point_2d`.",
      "name": "point_to_string",
      "return_description": "A string representation of the point",
      "signature": "string point_to_string(const point_2d &pt);",
      "unique_global_name": "point_to_string"
    },
    {
      "description": "Returns a random point within the bounds of the bitmap.",
      "name": "random_bitmap_point",
      "return_description": "A point within the bounds of the bitmap",
      "signature": "point_2d random_bitmap_point(bitmap bmp);",
      "unique_global_name": "random_bitmap_point"
    },
    {
      "description": "Returns a random point on the current window.",
      "name": "random_screen_point",
      "return_description": "A point within the bounds of the current window",
      "signature": "point_2d random_screen_point();",
      "unique_global_name": "random_screen_point"
    },
    {
      "description": "Returns a random point on the provided window.",
      "name": "random_window_point",
      "return_description": "A point within the bounds of the window",
      "signature": "point_2d random_window_point(window wind);",
      "unique_global_name": "random_window_point"
    },
    {
      "description": "Returns True of `pt1` is at the same point as `pt2`. This checks at an\ninteger level, indicating the two points refer to the same pixel.",
      "name": "same_point",
      "return_description": "True if the two points are at the same location",
      "signature": "bool same_point(const point_2d &pt1,const point_2d &pt2);",
      "unique_global_name": "same_point"
    },
    {
      "description": "Returns a quad from the passed in points.",
      "name": "quad_from",
      "return_description": "A quad from the passed in points",
      "signature": "quad quad_from(const point_2d &p1,const point_2d &p2,const point_2d &p3,const point_2d &p4);",
      "unique_global_name": "quad_from_points"
    },
    {
      "description": "Returns a quad from the x-y points of a given recatangle",
      "name": "quad_from",
      "return_description": "A quad at the same location as the rectangle",
      "signature": "quad quad_from(const rectangle &rect);",
      "unique_global_name": "quad_from_rectangle"
    },
    {
      "description": "Returns a quad from the rectangle, then applies the transformation to\nthe quads points.",
      "name": "quad_from",
      "return_description": "A quad that represents the rectangle after the transformation.",
      "signature": "quad quad_from(const rectangle &rect,const matrix_2d &transform);",
      "unique_global_name": "quad_from_rectangle_with_transformation"
    },
    {
      "description": "Returns a quad for the passed in x & y points.",
      "name": "quad_from",
      "return_description": "A quad with the indicated points",
      "signature": "quad quad_from(double x_top_left,double y_top_left,double x_top_right,double y_top_right,double x_bottom_left,double y_bottom_left,double x_bottom_right,double y_bottom_right );",
      "unique_global_name": "quad_from"
    },
    {
      "description": "Returns true if two quads intersect.",
      "name": "quads_intersect",
      "return_description": "True if the two quads intersect.",
      "signature": "bool quads_intersect(const quad &q1,const quad &q2);",
      "unique_global_name": "quads_intersect"
    },
    {
      "description": "Change a point in a quad.",
      "name": "set_quad_point",
      "return_description": null,
      "signature": "void set_quad_point(quad &q,int idx,const point_2d &value);",
      "unique_global_name": "set_quad_point"
    },
    {
      "description": "Returns the two triangles that make up a quad in a vector.",
      "name": "triangles_from",
      "return_description": "A vector with the two triangles from the quad.",
      "signature": "vector<triangle> triangles_from(const quad &q);",
      "unique_global_name": "triangles_from"
    },
    {
      "description": "Return a rectangle that is inset an amount from a given rectangle.",
      "name": "inset_rectangle",
      "return_description": "A new rectangle created inset from `rect`",
      "signature": "rectangle inset_rectangle(const rectangle &rect,float inset_amount);",
      "unique_global_name": "inset_rectangle"
    },
    {
      "description": "Returns a rectangle that represents the intersection of two rectangles.",
      "name": "intersection",
      "return_description": "The intersection of rect1 and rect2.",
      "signature": "rectangle intersection(const rectangle &rect1,const rectangle &rect2);",
      "unique_global_name": "intersection"
    },
    {
      "description": "Returns a rectangle that surrounds a given circle",
      "name": "rectangle_around",
      "return_description": "A rectangle that will surround the circle",
      "signature": "rectangle rectangle_around(const circle &c);",
      "unique_global_name": "rectangle_around_circle"
    },
    {
      "description": "Returns a rectangle that surrounds a given line segment",
      "name": "rectangle_around",
      "return_description": "A rectangle that will surround the line",
      "signature": "rectangle rectangle_around(const line &l);",
      "unique_global_name": "rectangle_around_line"
    },
    {
      "description": "Returns a rectangle that surrounds a given quad.",
      "name": "rectangle_around",
      "return_description": "A rectangle that will surround the quad",
      "signature": "rectangle rectangle_around(const quad &q);",
      "unique_global_name": "rectangle_around_quad"
    },
    {
      "description": "Returns a rectangle that surrounds a given triangle",
      "name": "rectangle_around",
      "return_description": "A rectangle that will surround the triangle",
      "signature": "rectangle rectangle_around(const triangle &t);",
      "unique_global_name": "rectangle_around_triangle"
    },
    {
      "description": "The location of the bottom of the rectangle.",
      "name": "rectangle_bottom",
      "return_description": "The distance from the top of the screen to the bottom of\nthe rectangle.",
      "signature": "float rectangle_bottom(const rectangle &rect);",
      "unique_global_name": "rectangle_bottom"
    },
    {
      "description": "Returns the center point of a given rectangle",
      "name": "rectangle_center",
      "return_description": "The center point of the vector",
      "signature": "point_2d rectangle_center(const rectangle &rect);",
      "unique_global_name": "rectangle_center"
    },
    {
      "description": "Returns a rectangle at the specified point with a given width and height",
      "name": "rectangle_from",
      "return_description": "A rectangle with the specified dimensions and location",
      "signature": "rectangle rectangle_from(const point_2d pt,const double width,const double height);",
      "unique_global_name": "rectangle_from_point_and_size"
    },
    {
      "description": "Returns a rectangle with pt1 and pt2 defining the two distant edge points.",
      "name": "rectangle_from",
      "return_description": "A rectangle enclosing the two points.",
      "signature": "rectangle rectangle_from(const point_2d pt1,const point_2d pt2);",
      "unique_global_name": "rectangle_from_points"
    },
    {
      "description": "Returns a rectangle from a given x,y location with the specified width\nand height.",
      "name": "rectangle_from",
      "return_description": "A rectangle with the specified dimensions and location.",
      "signature": "rectangle rectangle_from(double x,double y,double width,double height);",
      "unique_global_name": "rectangle_from"
    },
    {
      "description": "The location of the left edge of the rectangle.",
      "name": "rectangle_left",
      "return_description": "The distance from the left of the screen to the left side of\nthe rectangle.",
      "signature": "float rectangle_left(const rectangle &rect);",
      "unique_global_name": "rectangle_left"
    },
    {
      "description": "Returns a rectangle that is moved by the provided vector.",
      "name": "rectangle_offset_by",
      "return_description": "A new rectangle that represents the original rectangle\nafter being moved by the offset vector.",
      "signature": "rectangle rectangle_offset_by(const rectangle &rect,const vector_2d &offset);",
      "unique_global_name": "rectangle_offset_by"
    },
    {
      "description": "The location of the right edge of the rectangle.",
      "name": "rectangle_right",
      "return_description": "The distance from the left of the screen to the right side\nof the rectangle.",
      "signature": "float rectangle_right(const rectangle &rect);",
      "unique_global_name": "rectangle_right"
    },
    {
      "description": "Get a text representation of the passed in rectangle.",
      "name": "rectangle_to_string",
      "return_description": "A string representation of the rectangle.",
      "signature": "string rectangle_to_string(const rectangle &rect);",
      "unique_global_name": "rectangle_to_string"
    },
    {
      "description": "The top of the rectangle.",
      "name": "rectangle_top",
      "return_description": "Its distance from the top of the screen.",
      "signature": "float rectangle_top(const rectangle &rect);",
      "unique_global_name": "rectangle_top"
    },
    {
      "description": "Returns true if the two rectangles intersect.",
      "name": "rectangles_intersect",
      "return_description": "True when rect1 and rect2 intersect.",
      "signature": "bool rectangles_intersect(const rectangle &rect1,const rectangle &rect2);",
      "unique_global_name": "rectangles_intersect"
    },
    {
      "description": "Return the barycenter of the triangle. This is one way of calculating the\ncenter point of a triangle.",
      "name": "triangle_barycenter",
      "return_description": "The point that is the barycenter of `tri`",
      "signature": "point_2d triangle_barycenter(const triangle &tri);",
      "unique_global_name": "triangle_barycenter"
    },
    {
      "description": "Generate a triangle from a set of points.",
      "name": "triangle_from",
      "return_description": "A triangle with the indicated points",
      "signature": "triangle triangle_from(const point_2d &p1,const point_2d &p2,const point_2d &p3);",
      "unique_global_name": "triangle_from"
    },
    {
      "description": "Generate a triangle from a set of points.",
      "name": "triangle_from",
      "return_description": "A triangle at the indicated points",
      "signature": "triangle triangle_from(double x1,double y1,double x2,double y2,double x3,double y3);",
      "unique_global_name": "triangle_from__from_coordinates"
    },
    {
      "description": "Returns true if the triangle intersects with the rectangle.",
      "name": "triangle_rectangle_intersect",
      "return_description": "True if the triangle and rect intersect",
      "signature": "bool triangle_rectangle_intersect(const triangle &tri,const rectangle &rect);",
      "unique_global_name": "triangle_rectangle_intersect"
    },
    {
      "description": "Returns a text description of the triangle.",
      "name": "triangle_to_string",
      "return_description": "A text description of the triangle.",
      "signature": "string triangle_to_string(const triangle &tri);",
      "unique_global_name": "triangle_to_string"
    },
    {
      "description": "Returns true if the two triangles intersect.",
      "name": "triangles_intersect",
      "return_description": "True if the two triangles intersect",
      "signature": "bool triangles_intersect(const triangle &t1,const triangle &t2);",
      "unique_global_name": "triangles_intersect"
    },
    {
      "description": "Draw a circle on the current window. The circle is centred on its x, y\ncoordinates, and has the provided radius.",
      "name": "draw_circle",
      "return_description": null,
      "signature": "void draw_circle(color clr,const circle &c);",
      "unique_global_name": "draw_circle_record"
    },
    {
      "description": "Draw a circle with the provided drawing options, which may include options related to\nthe drawing destination.",
      "name": "draw_circle",
      "return_description": null,
      "signature": "void draw_circle(color clr,const circle &c,drawing_options opts);",
      "unique_global_name": "draw_circle_record_with_options"
    },
    {
      "description": "Draw a circle onto the current window. The circle is centred on its x, y\ncoordinates, and has the provided radius.",
      "name": "draw_circle",
      "return_description": null,
      "signature": "void draw_circle(color clr,double x,double y,double radius);",
      "unique_global_name": "draw_circle"
    },
    {
      "description": "Draw a circle using the supplied drawing options. The circle is centred on its x, y\ncoordinates, and has the provided radius. This will use `drawing_options` to determine\nthe destination.",
      "name": "draw_circle",
      "return_description": null,
      "signature": "void draw_circle(color clr,double x,double y,double radius,drawing_options opts);",
      "unique_global_name": "draw_circle_with_options"
    },
    {
      "description": "Draw a circle onto the destination bitmap. The circle is centred on its x, y\ncoordinates, and has the provided radius.",
      "name": "draw_circle_on_bitmap",
      "return_description": null,
      "signature": "void draw_circle_on_bitmap(bitmap destination,color clr,double x,double y,double radius);",
      "unique_global_name": "draw_circle_on_bitmap"
    },
    {
      "description": "Draw a circle to the bitmap using the supplied drawing options. The circle is centred on its x, y\ncoordinates, and has the provided radius.",
      "name": "draw_circle_on_bitmap",
      "return_description": null,
      "signature": "void draw_circle_on_bitmap(bitmap destination,color clr,double x,double y,double radius,drawing_options opts);",
      "unique_global_name": "draw_circle_on_bitmap_with_options"
    },
    {
      "description": "Draw a circle onto the destination window. The circle is centred on its x, y\ncoordinates, and has the provided radius.",
      "name": "draw_circle_on_window",
      "return_description": null,
      "signature": "void draw_circle_on_window(window destination,color clr,double x,double y,double radius);",
      "unique_global_name": "draw_circle_on_window"
    },
    {
      "description": "Draw a circle to the window using the supplied drawing options. The circle is centred on its x, y\ncoordinates, and has the provided radius.",
      "name": "draw_circle_on_window",
      "return_description": null,
      "signature": "void draw_circle_on_window(window destination,color clr,double x,double y,double radius,drawing_options opts);",
      "unique_global_name": "draw_circle_on_window_with_options"
    },
    {
      "description": "Draw a circle on the current window. The circle is centred on its x, y\ncoordinates, and has the provided radius.",
      "name": "fill_circle",
      "return_description": null,
      "signature": "void fill_circle(color clr,const circle &c);",
      "unique_global_name": "fill_circle_record"
    },
    {
      "description": "Fill a circle with the provided drawing options, which may include options related to\nthe drawing destination.",
      "name": "fill_circle",
      "return_description": null,
      "signature": "void fill_circle(color clr,const circle &c,drawing_options opts);",
      "unique_global_name": "fill_circle_record_with_options"
    },
    {
      "description": "Fill a circle onto the current window. The circle is centred on its x, y\ncoordinates, and has the provided radius.",
      "name": "fill_circle",
      "return_description": null,
      "signature": "void fill_circle(color clr,double x,double y,double radius);",
      "unique_global_name": "fill_circle"
    },
    {
      "description": "Fill a circle using the supplied drawing options. The circle is centred on its x, y\ncoordinates, and has the provided radius. This will use `drawing_options` to determine\nthe destination.",
      "name": "fill_circle",
      "return_description": null,
      "signature": "void fill_circle(color clr,double x,double y,double radius,drawing_options opts);",
      "unique_global_name": "fill_circle_with_options"
    },
    {
      "description": "Fill a circle onto the destination bitmap. The circle is centred on its x, y\ncoordinates, and has the provided radius.",
      "name": "fill_circle_on_bitmap",
      "return_description": null,
      "signature": "void fill_circle_on_bitmap(bitmap destination,color clr,double x,double y,double radius);",
      "unique_global_name": "fill_circle_on_bitmap"
    },
    {
      "description": "Fill a circle to the bitmap using the supplied drawing options. The circle is centred on its x, y\ncoordinates, and has the provided radius.",
      "name": "fill_circle_on_bitmap",
      "return_description": null,
      "signature": "void fill_circle_on_bitmap(bitmap destination,color clr,double x,double y,double radius,drawing_options opts);",
      "unique_global_name": "fill_circle_on_bitmap_with_options"
    },
    {
      "description": "Fill a circle onto the destination window. The circle is centred on its x, y\ncoordinates, and has the provided radius.",
      "name": "fill_circle_on_window",
      "return_description": null,
      "signature": "void fill_circle_on_window(window destination,color clr,double x,double y,double radius);",
      "unique_global_name": "fill_circle_on_window"
    },
    {
      "description": "Fill a circle to the window using the supplied drawing options. The circle is centred on its x, y\ncoordinates, and has the provided radius.",
      "name": "fill_circle_on_window",
      "return_description": null,
      "signature": "void fill_circle_on_window(window destination,color clr,double x,double y,double radius,drawing_options opts);",
      "unique_global_name": "fill_circle_on_window_with_options"
    },
    {
      "description": "Returns the rectangle of the current clip area for the current window",
      "name": "current_clip",
      "return_description": "The current clipping rectangle for the current window",
      "signature": "rectangle current_clip();",
      "unique_global_name": "current_clip"
    },
    {
      "description": "Returns the rectangle of the current clip area for a bitmap",
      "name": "current_clip",
      "return_description": "The current clipping rectangle for the bitmap",
      "signature": "rectangle current_clip(bitmap bmp);",
      "unique_global_name": "current_clip_for_bitmap"
    },
    {
      "description": "Returns the rectangle of the current clip area for a window",
      "name": "current_clip",
      "return_description": "The current clipping rectangle for the window",
      "signature": "rectangle current_clip(window wnd);",
      "unique_global_name": "current_clip_for_window"
    },
    {
      "description": "Remove the last clipping rectangle pushed to the window. This\nwill then apply the previously pushed clipping rectangle.",
      "name": "pop_clip",
      "return_description": null,
      "signature": "void pop_clip(window wnd);",
      "unique_global_name": "pop_clip_for_window"
    },
    {
      "description": "Remove the last clipping rectangle pushed to the current window. This\nwill then apply the previously pushed clipping rectangle.",
      "name": "pop_clip",
      "return_description": null,
      "signature": "void pop_clip();",
      "unique_global_name": "pop_clip"
    },
    {
      "description": "Remove the last clipping rectangle pushed to the bitmap. This\nwill then apply the previously pushed clipping rectangle.",
      "name": "pop_clip",
      "return_description": null,
      "signature": "void pop_clip(bitmap bmp);",
      "unique_global_name": "pop_clip_for_bitmap"
    },
    {
      "description": "Add the clipping rectangle of a window and uses the intersect between\nthe new rectangle and previous clip.\n\nWhen a clipping rectangle is provided, drawing operations will only\naffect the area specified in the current clipping rectangle.",
      "name": "push_clip",
      "return_description": null,
      "signature": "void push_clip(window wnd,const rectangle &r);",
      "unique_global_name": "push_clip_for_window"
    },
    {
      "description": "Add the clipping rectangle of a bitmap and uses the intersect between\nthe new rectangle and previous clip.\n\nWhen a clipping rectangle is provided, drawing operations will only\naffect the area specified in the current clipping rectangle.",
      "name": "push_clip",
      "return_description": null,
      "signature": "void push_clip(bitmap bmp,const rectangle &r);",
      "unique_global_name": "push_clip_for_bitmap"
    },
    {
      "description": "Push a clip rectangle to the current window. The resulting clipping\nrectangle will be the intersection of the existing clipping rectangle\nwith the new rectangle provided in this call. This can be undone using\n`pop_clip`.\n\nWhen a clipping rectangle is provided, drawing operations will only\naffect the area specified in the current clipping rectangle.",
      "name": "push_clip",
      "return_description": null,
      "signature": "void push_clip(const rectangle &r);",
      "unique_global_name": "push_clip"
    },
    {
      "description": "Reset the clipping rectangle on a bitmap. This will clear all\nof the clipping rectangles pushed to the bitmap.",
      "name": "reset_clip",
      "return_description": null,
      "signature": "void reset_clip(bitmap bmp);",
      "unique_global_name": "reset_clip_for_bitmap"
    },
    {
      "description": "Reset the clipping rectangle of the current window. This will clear all\nof the clipping rectangles pushed to the current window.",
      "name": "reset_clip",
      "return_description": null,
      "signature": "void reset_clip();",
      "unique_global_name": "reset_clip"
    },
    {
      "description": "Reset the clipping rectangle on a window. This will clear all\nof the clipping rectangles pushed to the window.",
      "name": "reset_clip",
      "return_description": null,
      "signature": "void reset_clip(window wnd);",
      "unique_global_name": "reset_clip_for_window"
    },
    {
      "description": "Set the clip rectangle of the current window. This will clear any\nexisting clipping rectangles pushed to the current window, and use the\nsupplied rectangle for clipping.",
      "name": "set_clip",
      "return_description": null,
      "signature": "void set_clip(const rectangle &r);",
      "unique_global_name": "set_clip"
    },
    {
      "description": "Set the clip rectangle of the bitmap. This will clear any existing\nclipping rectangles pushed to the bitmap, and use the supplied rectangle\nfor clipping.",
      "name": "set_clip",
      "return_description": null,
      "signature": "void set_clip(bitmap bmp,const rectangle &r);",
      "unique_global_name": "set_clip_for_bitmap"
    },
    {
      "description": "Set the clip rectangle of the window. This will clear any existing\nclipping rectangles pushed to the window, and use the supplied rectangle\nfor clipping.",
      "name": "set_clip",
      "return_description": null,
      "signature": "void set_clip(window wnd,const rectangle &r);",
      "unique_global_name": "set_clip_for_window"
    },
    {
      "description": "Returns a `drawing_options` with default values.\nThis will draw to the current window, with default scale of 1, no\nrotation or offset, not flipped, drawing whole images, with default\ncamera mechanisms and line width.",
      "name": "option_defaults",
      "return_description": "A default drawing options.",
      "signature": "drawing_options option_defaults();",
      "unique_global_name": "option_defaults"
    },
    {
      "description": "Use this option to draw to a Bitmap. Pass dest the Bitmap you want to draw on.",
      "name": "option_draw_to",
      "return_description": "Drawing options that will draw onto a bitmap.",
      "signature": "drawing_options option_draw_to(bitmap dest);",
      "unique_global_name": "option_draw_to_bitmap"
    },
    {
      "description": "Use this option to draw to a Bitmap. Pass dest the Bitmap you want to draw on.\nPass opts the other options you want use.",
      "name": "option_draw_to",
      "return_description": "Drawing options that will draw onto a bitmap.",
      "signature": "drawing_options option_draw_to(bitmap dest,drawing_options opts);",
      "unique_global_name": "option_draw_to_bitmap_with_options"
    },
    {
      "description": "Use this option to draw to a specified Window. Pass dest the Window you want to draw on.",
      "name": "option_draw_to",
      "return_description": "A drawing option that will draw to the indicated window.",
      "signature": "drawing_options option_draw_to(window dest);",
      "unique_global_name": "option_draw_to_window"
    },
    {
      "description": "Use this option to draw to a Bitmap. Pass dest the Bitmap you want to draw on to.\nPass opts the other options you want use.",
      "name": "option_draw_to",
      "return_description": "A drawing option that will draw to the indicated window.",
      "signature": "drawing_options option_draw_to(window dest,drawing_options opts);",
      "unique_global_name": "option_draw_to_window_with_options"
    },
    {
      "description": "Use this option to flip an image along its X axis.",
      "name": "option_flip_x",
      "return_description": "Options that will flip bitmaps horizontally.",
      "signature": "drawing_options option_flip_x();",
      "unique_global_name": "option_flip_x"
    },
    {
      "description": "Use this option to flip an image along its X axis.",
      "name": "option_flip_x",
      "return_description": "Options that will flip bitmaps horizontally.",
      "signature": "drawing_options option_flip_x(drawing_options opts);",
      "unique_global_name": "option_flip_x_with_options"
    },
    {
      "description": "Use this option to flip the drawing of an image along both X and Y axis.",
      "name": "option_flip_xy",
      "return_description": "Options that flip bitmap drawing both vertically and\nhorizontally.",
      "signature": "drawing_options option_flip_xy();",
      "unique_global_name": "option_flip_xy"
    },
    {
      "description": "Use this option to flip the drawing of an image along both X and Y axis.",
      "name": "option_flip_xy",
      "return_description": "Options that flip bitmap drawing both vertically and\nhorizontally.",
      "signature": "drawing_options option_flip_xy(drawing_options opts);",
      "unique_global_name": "option_flip_xy_with_options"
    },
    {
      "description": "Use this option to flip the drawing of an image along its Y axis.",
      "name": "option_flip_y",
      "return_description": "Options that will flip bitmaps vertically.",
      "signature": "drawing_options option_flip_y();",
      "unique_global_name": "option_flip_y"
    },
    {
      "description": "Use this option to flip the drawing of an image along its Y axis.",
      "name": "option_flip_y",
      "return_description": "Options that will flip bitmaps vertically.",
      "signature": "drawing_options option_flip_y(drawing_options opts);",
      "unique_global_name": "option_flip_y_with_options"
    },
    {
      "description": "Use this option to change the width of line drawings.",
      "name": "option_line_width",
      "return_description": "Options to draw lines with the indicated width.",
      "signature": "drawing_options option_line_width(int width);",
      "unique_global_name": "option_line_width"
    },
    {
      "description": "Use this option to change the width of line drawings.",
      "name": "option_line_width",
      "return_description": "Options to draw lines with the indicated width.",
      "signature": "drawing_options option_line_width(int width,drawing_options opts);",
      "unique_global_name": "option_line_width_with_options"
    },
    {
      "description": "Use this option to draw only a part of a bitmap.",
      "name": "option_part_bmp",
      "return_description": "Options to draw parts of a bitmap.",
      "signature": "drawing_options option_part_bmp(double x,double y,double w,double h);",
      "unique_global_name": "option_part_bmp"
    },
    {
      "description": "Use this option to draw only a part of a bitmap.",
      "name": "option_part_bmp",
      "return_description": "Options to draw parts of a bitmap.",
      "signature": "drawing_options option_part_bmp(double x,double y,double w,double h,drawing_options opts);",
      "unique_global_name": "option_part_bmp_with_options"
    },
    {
      "description": "Use this option to draw only part of a bitmap.",
      "name": "option_part_bmp",
      "return_description": "Options to draw parts of a bitmap.",
      "signature": "drawing_options option_part_bmp(rectangle part);",
      "unique_global_name": "option_part_bmp_from_rectangle"
    },
    {
      "description": "Use this option to draw only part of a bitmap.",
      "name": "option_part_bmp",
      "return_description": "Options to draw parts of a bitmap.",
      "signature": "drawing_options option_part_bmp(rectangle part,drawing_options opts);",
      "unique_global_name": "option_part_bmp_from_rectangle_with_options"
    },
    {
      "description": "Use this option to rotate a bitmap around its centre point.",
      "name": "option_rotate_bmp",
      "return_description": "Options that will rotate bitmaps around its center point.",
      "signature": "drawing_options option_rotate_bmp(double angle);",
      "unique_global_name": "option_rotate_bmp"
    },
    {
      "description": "Use this option to rotate the drawing of a bitmap. This allows you to set the\nanchor point and rotate around that by a number of degrees.\nPass opts the other options you want use.",
      "name": "option_rotate_bmp",
      "return_description": "Options that will rotate bitmaps around an anchor point.",
      "signature": "drawing_options option_rotate_bmp(double angle,double anchor_x,double anchor_y);",
      "unique_global_name": "option_rotate_bmp_with_anchor"
    },
    {
      "description": "Use this option to rotate the drawing of a bitmap. This allows you to set the\nanchor point and rotate around that by a number of degrees.\nPass opts the other options you want use.",
      "name": "option_rotate_bmp",
      "return_description": "Options that will rotate bitmaps around an anchor point.",
      "signature": "drawing_options option_rotate_bmp(double angle,double anchor_x,double anchor_y,drawing_options opts);",
      "unique_global_name": "option_rotate_bmp_with_anchor_and_options"
    },
    {
      "description": "Use this option to rotate a bitmap around its centre point.",
      "name": "option_rotate_bmp",
      "return_description": "Options that will rotate bitmaps around its center point.",
      "signature": "drawing_options option_rotate_bmp(double angle,drawing_options opts);",
      "unique_global_name": "option_rotate_bmp_with_options"
    },
    {
      "description": "Use this option to scale the drawing of bitmaps. You can scale x and y separately.",
      "name": "option_scale_bmp",
      "return_description": "Options that will scale bitmaps along the x,y axis.",
      "signature": "drawing_options option_scale_bmp(double scale_x,double scale_y);",
      "unique_global_name": "option_scale_bmp"
    },
    {
      "description": "Use this option to scale the drawing of bitmaps. You can scale x and y separately.\nPass opts the other options you want use.",
      "name": "option_scale_bmp",
      "return_description": "Options that will scale bitmaps along the x,y axis.",
      "signature": "drawing_options option_scale_bmp(double scale_x,double scale_y,drawing_options opts);",
      "unique_global_name": "option_scale_bmp_with_options"
    },
    {
      "description": "Use this option to draw to the screen, ignoring the positon of the\ncamera.",
      "name": "option_to_screen",
      "return_description": "Options that will draw to the surface without camera effects.",
      "signature": "drawing_options option_to_screen();",
      "unique_global_name": "option_to_screen"
    },
    {
      "description": "Use this option to draw to the screen, ignoring the positon of the\ncamera.",
      "name": "option_to_screen",
      "return_description": "Options that will draw to the surface without camera effects.",
      "signature": "drawing_options option_to_screen(drawing_options opts);",
      "unique_global_name": "option_to_screen_with_options"
    },
    {
      "description": "Use this option to draw in World coordinates -- these are affected by\nthe movement of the camera.",
      "name": "option_to_world",
      "return_description": "Options that will draw with camera effects.",
      "signature": "drawing_options option_to_world();",
      "unique_global_name": "option_to_world"
    },
    {
      "description": "Use this option to draw in World coordinates -- these are affected by\nthe movement of the camera.",
      "name": "option_to_world",
      "return_description": "Options that will draw with camera effects.",
      "signature": "drawing_options option_to_world(drawing_options opts);",
      "unique_global_name": "option_to_world_with_options"
    },
    {
      "description": "Use details from the animation to select an appropriate cell from the\nbitmaps being drawn.",
      "name": "option_with_animation",
      "return_description": "A drawing option that will draw the current cell from the\nanimation.",
      "signature": "drawing_options option_with_animation(animation anim);",
      "unique_global_name": "option_with_animation"
    },
    {
      "description": "Use details from the animation to select an appropriate cell from the\nbitmaps being drawn. This extends the passed in drawing options with\nthe animation details.",
      "name": "option_with_animation",
      "return_description": "A drawing option that will draw the current cell from the\nanimation.",
      "signature": "drawing_options option_with_animation(animation anim,drawing_options opts);",
      "unique_global_name": "option_with_animation_with_options"
    },
    {
      "description": "When drawing the bitmap this will only draw the cell. To use this the bitmap\nneeds to have been provided with its cell details (see `bitmap_set_cell_details`).\nThis option overrides the animation or part drawing options.",
      "name": "option_with_bitmap_cell",
      "return_description": "A drawing option that will draw the selected cell.",
      "signature": "drawing_options option_with_bitmap_cell(int cell);",
      "unique_global_name": "option_with_bitmap_cell"
    },
    {
      "description": "When drawing the bitmap this will only draw the cell. To use this the bitmap\nneeds to have been provided with its cell details (see `bitmap_set_cell_details`).\nThis option overrides the animation or part drawing options. This extends\nthe passed in drawing options with the cell details.",
      "name": "option_with_bitmap_cell",
      "return_description": "A drawing option that will draw the selected cell.",
      "signature": "drawing_options option_with_bitmap_cell(int cell,drawing_options opts);",
      "unique_global_name": "option_with_bitmap_cell_with_options"
    },
    {
      "description": "Draws an ellipse using the provided location, and size.",
      "name": "draw_ellipse",
      "return_description": null,
      "signature": "void draw_ellipse(color clr,const rectangle rect);",
      "unique_global_name": "draw_ellipse_within_rectangle"
    },
    {
      "description": "Draws an ellipse using the provided location, size, and drawing options.\n\nAt this stage ellipse drawing is not affected by line width from the\ndrawing options.",
      "name": "draw_ellipse",
      "return_description": null,
      "signature": "void draw_ellipse(color clr,const rectangle rect,drawing_options opts);",
      "unique_global_name": "draw_ellipse_within_rectangle_with_options"
    },
    {
      "description": "Draws an ellipse using the provided location, and size.",
      "name": "draw_ellipse",
      "return_description": null,
      "signature": "void draw_ellipse(color clr,double x,double y,double width,double height);",
      "unique_global_name": "draw_ellipse"
    },
    {
      "description": "Draws an ellipse using the provided location, size, and drawing options.\n\nAt this stage ellipse drawing is not affected by line width from the\ndrawing options.",
      "name": "draw_ellipse",
      "return_description": null,
      "signature": "void draw_ellipse(color clr,double x,double y,double width,double height,drawing_options opts);",
      "unique_global_name": "draw_ellipse_with_options"
    },
    {
      "description": "Draws an ellipse on the given bitmap, using the provided location, and size.",
      "name": "draw_ellipse_on_bitmap",
      "return_description": null,
      "signature": "void draw_ellipse_on_bitmap(bitmap destination,color clr,const rectangle rect);",
      "unique_global_name": "draw_ellipse_on_bitmap_within_rectangle"
    },
    {
      "description": "Draws an ellipse on the given bitmap, using the provided location, size, and drawing options.\n\nAt this stage ellipse drawing is not affected by line width from the\ndrawing options.",
      "name": "draw_ellipse_on_bitmap",
      "return_description": null,
      "signature": "void draw_ellipse_on_bitmap(bitmap destination,color clr,const rectangle rect,drawing_options opts);",
      "unique_global_name": "draw_ellipse_on_bitmap_within_rectangle_with_options"
    },
    {
      "description": "Draws an ellipse on the given bitmap, using the provided location, and size.",
      "name": "draw_ellipse_on_bitmap",
      "return_description": null,
      "signature": "void draw_ellipse_on_bitmap(bitmap destination,color clr,double x,double y,double width,double height);",
      "unique_global_name": "draw_ellipse_on_bitmap"
    },
    {
      "description": "Draws an ellipse to the bitmap, using the provided location, size, and drawing options.\n\nAt this stage ellipse drawing is not affected by line width from the\ndrawing options.",
      "name": "draw_ellipse_on_bitmap",
      "return_description": null,
      "signature": "void draw_ellipse_on_bitmap(bitmap destination,color clr,double x,double y,double width,double height,drawing_options opts);",
      "unique_global_name": "draw_ellipse_on_bitmap_with_options"
    },
    {
      "description": "Draws an ellipse on the given window, using the provided location, and size.",
      "name": "draw_ellipse_on_window",
      "return_description": null,
      "signature": "void draw_ellipse_on_window(window destination,color clr,const rectangle rect);",
      "unique_global_name": "draw_ellipse_on_window_within_rectangle"
    },
    {
      "description": "Draws an ellipse on the given window, using the provided location, size, and drawing options.\n\nAt this stage ellipse drawing is not affected by line width from the\ndrawing options.",
      "name": "draw_ellipse_on_window",
      "return_description": null,
      "signature": "void draw_ellipse_on_window(window destination,color clr,const rectangle rect,drawing_options opts);",
      "unique_global_name": "draw_ellipse_on_window_within_rectangle_with_options"
    },
    {
      "description": "Draws an ellipse on the given window, using the provided location, and size.",
      "name": "draw_ellipse_on_window",
      "return_description": null,
      "signature": "void draw_ellipse_on_window(window destination,color clr,double x,double y,double width,double height);",
      "unique_global_name": "draw_ellipse_on_window"
    },
    {
      "description": "Draws an ellipse to the window, using the provided location, size, and drawing options.\n\nAt this stage ellipse drawing is not affected by line width from the\ndrawing options.",
      "name": "draw_ellipse_on_window",
      "return_description": null,
      "signature": "void draw_ellipse_on_window(window destination,color clr,double x,double y,double width,double height,drawing_options opts);",
      "unique_global_name": "draw_ellipse_on_window_with_options"
    },
    {
      "description": "Fill an ellipse using the provided location, and size.",
      "name": "fill_ellipse",
      "return_description": null,
      "signature": "void fill_ellipse(color clr,const rectangle rect);",
      "unique_global_name": "fill_ellipse_within_rectangle"
    },
    {
      "description": "Fills an ellipse using the provided location, size, and drawing options.\n\nAt this stage ellipse drawing is not affected by line width from the\ndrawing options.",
      "name": "fill_ellipse",
      "return_description": null,
      "signature": "void fill_ellipse(color clr,const rectangle rect,drawing_options opts);",
      "unique_global_name": "fill_ellipse_within_rectangle_with_options"
    },
    {
      "description": "Fills an ellipse using the provided location, and size.",
      "name": "fill_ellipse",
      "return_description": null,
      "signature": "void fill_ellipse(color clr,double x,double y,double width,double height);",
      "unique_global_name": "fill_ellipse"
    },
    {
      "description": "Fills an ellipse using the provided location, size, and drawing options.",
      "name": "fill_ellipse",
      "return_description": null,
      "signature": "void fill_ellipse(color clr,double x,double y,double width,double height,drawing_options opts);",
      "unique_global_name": "fill_ellipse_with_options"
    },
    {
      "description": "Fill an ellipse on the given bitmap, using the provided location, and size.",
      "name": "fill_ellipse_on_bitmap",
      "return_description": null,
      "signature": "void fill_ellipse_on_bitmap(bitmap destination,color clr,const rectangle rect);",
      "unique_global_name": "fill_ellipse_on_bitmap_within_rectangle"
    },
    {
      "description": "Fills an ellipse on the given bitmap, using the provided location, size, and drawing options.\n\nAt this stage ellipse drawing is not affected by line width from the\ndrawing options.",
      "name": "fill_ellipse_on_bitmap",
      "return_description": null,
      "signature": "void fill_ellipse_on_bitmap(bitmap destination,color clr,const rectangle rect,drawing_options opts);",
      "unique_global_name": "fill_ellipse_on_bitmap_within_rectangle_with_options"
    },
    {
      "description": "Fills an ellipse on the given bitmap, using the provided location, and size.",
      "name": "fill_ellipse_on_bitmap",
      "return_description": null,
      "signature": "void fill_ellipse_on_bitmap(bitmap destination,color clr,double x,double y,double width,double height);",
      "unique_global_name": "fill_ellipse_on_bitmap"
    },
    {
      "description": "Fills an ellipse on the given bitmap, using the provided location, size, and drawing options.",
      "name": "fill_ellipse_on_bitmap",
      "return_description": null,
      "signature": "void fill_ellipse_on_bitmap(bitmap destination,color clr,double x,double y,double width,double height,drawing_options opts);",
      "unique_global_name": "fill_ellipse_on_bitmap_with_options"
    },
    {
      "description": "Fill an ellipse on the given window, using the provided location, and size.",
      "name": "fill_ellipse_on_window",
      "return_description": null,
      "signature": "void fill_ellipse_on_window(window destination,color clr,const rectangle rect);",
      "unique_global_name": "fill_ellipse_on_window_within_rectangle"
    },
    {
      "description": "Fills an ellipse on the given window, using the provided location, size, and drawing options.\n\nAt this stage ellipse drawing is not affected by line width from the\ndrawing options.",
      "name": "fill_ellipse_on_window",
      "return_description": null,
      "signature": "void fill_ellipse_on_window(window destination,color clr,const rectangle rect,drawing_options opts);",
      "unique_global_name": "fill_ellipse_on_window_within_rectangle_with_options"
    },
    {
      "description": "Fills an ellipse on the given window, using the provided location, and size.",
      "name": "fill_ellipse_on_window",
      "return_description": null,
      "signature": "void fill_ellipse_on_window(window destination,color clr,double x,double y,double width,double height);",
      "unique_global_name": "fill_ellipse_on_window"
    },
    {
      "description": "Fills an ellipse on the given window, using the provided location, size, and drawing options.",
      "name": "fill_ellipse_on_window",
      "return_description": null,
      "signature": "void fill_ellipse_on_window(window destination,color clr,double x,double y,double width,double height,drawing_options opts);",
      "unique_global_name": "fill_ellipse_on_window_with_options"
    },
    {
      "description": "Clears the current screen to color white.",
      "name": "clear_screen",
      "return_description": null,
      "signature": "void clear_screen();",
      "unique_global_name": "clear_screen_to_white"
    },
    {
      "description": null,
      "name": "clear_screen",
      "return_description": null,
      "signature": "void clear_screen(color clr);",
      "unique_global_name": "clear_screen"
    },
    {
      "description": "Returns the details about one of the displays attached to the computer.",
      "name": "display_details",
      "return_description": "The details of this display",
      "signature": "display display_details(unsigned int index);",
      "unique_global_name": "display_details"
    },
    {
      "description": "Return the height of the display in pixels, read from the system details.",
      "name": "display_height",
      "return_description": "The height of the display",
      "signature": "int display_height(display disp);",
      "unique_global_name": "display_height"
    },
    {
      "description": "Return the name of the display, read from the system details.",
      "name": "display_name",
      "return_description": "The name of the display",
      "signature": "string display_name(display disp);",
      "unique_global_name": "display_name"
    },
    {
      "description": "Return the width of the display in pixels, read from the system details.",
      "name": "display_width",
      "return_description": "The width of the display",
      "signature": "int display_width(display disp);",
      "unique_global_name": "display_width"
    },
    {
      "description": "Return a relative x location for the display in pixels, read from the\nsystem details. This can be used to work out the arrangement of displays.",
      "name": "display_x",
      "return_description": "The x location of the display",
      "signature": "int display_x(display disp);",
      "unique_global_name": "display_x"
    },
    {
      "description": "Return a relative y location for the display in pixels, read from the\nsystem details. This can be used to work out the arrangement of displays.",
      "name": "display_y",
      "return_description": "The y location of the display",
      "signature": "int display_y(display disp);",
      "unique_global_name": "display_y"
    },
    {
      "description": "Returns the number of physical displays attached to the computer.",
      "name": "number_of_displays",
      "return_description": "The number of displays attached to the computer",
      "signature": "int number_of_displays();",
      "unique_global_name": "number_of_displays"
    },
    {
      "description": null,
      "name": "refresh_screen",
      "return_description": null,
      "signature": "void refresh_screen();",
      "unique_global_name": "refresh_screen"
    },
    {
      "description": "Refreshes all open windows with a target FPS (frames per second). This will\ndelay a period of time that will approximately meet the targeted frames per\nsecond.",
      "name": "refresh_screen",
      "return_description": null,
      "signature": "void refresh_screen(unsigned int target_fps);",
      "unique_global_name": "refresh_screen_with_target_fps"
    },
    {
      "description": "Save the bitmap to the user's desktop.",
      "name": "save_bitmap",
      "return_description": null,
      "signature": "void save_bitmap(bitmap bmp,const string &basename);",
      "unique_global_name": "save_bitmap"
    },
    {
      "description": "Returns the height of the current window.",
      "name": "screen_height",
      "return_description": "The height of the current window.",
      "signature": "int screen_height();",
      "unique_global_name": "screen_height"
    },
    {
      "description": "Returns the width of the current window.",
      "name": "screen_width",
      "return_description": "The width of the current window.",
      "signature": "int screen_width();",
      "unique_global_name": "screen_width"
    },
    {
      "description": "Saves a screenshot of the current window to a bitmap file. The file will\nbe saved onto the user's desktop.",
      "name": "take_screenshot",
      "return_description": null,
      "signature": "void take_screenshot(const string &basename);",
      "unique_global_name": "take_screenshot"
    },
    {
      "description": "Saves a screenshot of the current window to a bitmap file. The file will\nbe saved onto the user's desktop.",
      "name": "take_screenshot",
      "return_description": null,
      "signature": "void take_screenshot(window wind,const string &basename);",
      "unique_global_name": "take_screenshot_of_window"
    },
    {
      "description": "Returns a circle that will encompass the entire bitamp.",
      "name": "bitmap_bounding_circle",
      "return_description": "A circle that surrounds the bitmap.",
      "signature": "circle bitmap_bounding_circle(bitmap bmp,const point_2d &pt);",
      "unique_global_name": "bitmap_bounding_circle"
    },
    {
      "description": "Returns a rectangle that is the same size as a bitmap (the whole bitmap).",
      "name": "bitmap_bounding_rectangle",
      "return_description": "A rectangle with the same size as the bitmap.",
      "signature": "rectangle bitmap_bounding_rectangle(bitmap bmp);",
      "unique_global_name": "bitmap_bounding_rectangle"
    },
    {
      "description": "Returns a rectangle that is the same size as the bitmap and is located at\nthe indicated position.",
      "name": "bitmap_bounding_rectangle",
      "return_description": "A rectangle with the same size as the bitmap, at the\nindicated location.",
      "signature": "rectangle bitmap_bounding_rectangle(bitmap bmp,double x,double y);",
      "unique_global_name": "bitmap_bounding_rectangle_at_location"
    },
    {
      "description": "This returns a point that represents the center of a cell from this\nbitmap in local space.",
      "name": "bitmap_cell_center",
      "return_description": "A point in the center of a cell for this bitmap.",
      "signature": "point_2d bitmap_cell_center(bitmap bmp);",
      "unique_global_name": "bitmap_cell_center"
    },
    {
      "description": "Returns a circle that will encompass the bitmap cell if it were drawn\nat the indicated point.",
      "name": "bitmap_cell_circle",
      "return_description": "A circle that will encompass the bitmap cell.",
      "signature": "circle bitmap_cell_circle(bitmap bmp,double x,double y);",
      "unique_global_name": "bitmap_cell_circle"
    },
    {
      "description": "Returns a circle that will encompass the bitmap cell if it were drawn\nat the indicated point.",
      "name": "bitmap_cell_circle",
      "return_description": "A circle that will encompass the bitmap cell.",
      "signature": "circle bitmap_cell_circle(bitmap bmp,const point_2d pt);",
      "unique_global_name": "bitmap_cell_circle_at_point"
    },
    {
      "description": "Returns a circle that will encompass the bitmap cell if it were drawn\nat the indicated point, with the provided scale.",
      "name": "bitmap_cell_circle",
      "return_description": "A circle that will encompass the bitmap cell.",
      "signature": "circle bitmap_cell_circle(bitmap bmp,const point_2d pt,double scale);",
      "unique_global_name": "bitmap_cell_circle_at_point_with_scale"
    },
    {
      "description": "Returns the number of cell columns in the bitmap.\nThis is setup using `bitmap_set_cell_details`",
      "name": "bitmap_cell_columns",
      "return_description": "The number of cell columns",
      "signature": "int bitmap_cell_columns(bitmap bmp);",
      "unique_global_name": "bitmap_cell_columns"
    },
    {
      "description": "Returns the number of cells within the bitmap.",
      "name": "bitmap_cell_count",
      "return_description": "The number of individual cells within the bitmap.",
      "signature": "int bitmap_cell_count(bitmap bmp);",
      "unique_global_name": "bitmap_cell_count"
    },
    {
      "description": "Returns the height of each cell in this bitmap.",
      "name": "bitmap_cell_height",
      "return_description": "The height of each cells in bmp",
      "signature": "int bitmap_cell_height(bitmap bmp);",
      "unique_global_name": "bitmap_cell_height"
    },
    {
      "description": "Returns a vector that represents the movement needed to get to a given\ncell within a bitmap.",
      "name": "bitmap_cell_offset",
      "return_description": "The offset needed to get to the cell from the top left of the bitmap.",
      "signature": "vector_2d bitmap_cell_offset(bitmap src,int cell);",
      "unique_global_name": "bitmap_cell_offset"
    },
    {
      "description": "Returns a rectangle that will encompass a cell of the bitmap.",
      "name": "bitmap_cell_rectangle",
      "return_description": "A rectangle with width and height from the bitmap's cell details.",
      "signature": "rectangle bitmap_cell_rectangle(bitmap src);",
      "unique_global_name": "bitmap_cell_rectangle"
    },
    {
      "description": "Returns a rectangle that will encompass the bitmap cell if it were drawn\nat the indicated point.",
      "name": "bitmap_cell_rectangle",
      "return_description": "A rectangle at pt, with width and height from the bitmap's cell details.",
      "signature": "rectangle bitmap_cell_rectangle(bitmap src,const point_2d &pt);",
      "unique_global_name": "bitmap_cell_rectangle_at_point"
    },
    {
      "description": "Returns the number of rows of cells in the bitmap. These details are set in\n`bitmap_set_cell_details`.",
      "name": "bitmap_cell_rows",
      "return_description": "The number of rows of cells in the bitmap.",
      "signature": "int bitmap_cell_rows(bitmap bmp);",
      "unique_global_name": "bitmap_cell_rows"
    },
    {
      "description": "Returns the width of each cell in this bitmap.",
      "name": "bitmap_cell_width",
      "return_description": "The width of each cells in bmp",
      "signature": "int bitmap_cell_width(bitmap bmp);",
      "unique_global_name": "bitmap_cell_width"
    },
    {
      "description": "This returns a point that represents the center of the bitmap in local\nspace.",
      "name": "bitmap_center",
      "return_description": "A point in the center of the bitmap.",
      "signature": "point_2d bitmap_center(bitmap bmp);",
      "unique_global_name": "bitmap_center"
    },
    {
      "description": "Returns the filename from which the bitmap was loaded. This will be an empty\nstring for created bitmaps.",
      "name": "bitmap_filename",
      "return_description": "The file name of the bitmap.",
      "signature": "string bitmap_filename(bitmap bmp);",
      "unique_global_name": "bitmap_filename"
    },
    {
      "description": "Returns the total height of the bitmap. If the bitmap contains cells, you ca\nget the height of a cell using `bitmap_cell_height`.",
      "name": "bitmap_height",
      "return_description": "The height of the bitmap.",
      "signature": "int bitmap_height(bitmap bmp);",
      "unique_global_name": "bitmap_height"
    },
    {
      "description": "Returns the total height of the bitmap. If the bitmap contains cells, you ca\nget the height of a cell using `bitmap_cell_height`.",
      "name": "bitmap_height",
      "return_description": "The height of the bitmap.",
      "signature": "int bitmap_height(string name);",
      "unique_global_name": "bitmap_height_of_bitmap_named"
    },
    {
      "description": "Returns the name of the bitmap was loaded. This is the name you can use to\naccess this bitmap.",
      "name": "bitmap_name",
      "return_description": "The name of the bitmap.",
      "signature": "string bitmap_name(bitmap bmp);",
      "unique_global_name": "bitmap_name"
    },
    {
      "description": "Returns the `bitmap` that has been loaded with the specified name,\nsee `load_bitmap`. This will attempt to load the bitmap if it has not\nbeen loaded.",
      "name": "bitmap_named",
      "return_description": "The bitmap with the name specified, which may refer to nothing\nif the bitmap has not been loaded.",
      "signature": "bitmap bitmap_named(string name);",
      "unique_global_name": "bitmap_named"
    },
    {
      "description": "Returns a rectangle that can be used to access the part of a bitmap\nrelated to an individual cell.",
      "name": "bitmap_rectangle_of_cell",
      "return_description": "The area of the cell within the bitmap",
      "signature": "rectangle bitmap_rectangle_of_cell(bitmap src,int cell);",
      "unique_global_name": "bitmap_rectangle_of_cell"
    },
    {
      "description": "Initialise the bitmap cell details. This allows parts of the bitmap to be\ndrawn as individual cells.",
      "name": "bitmap_set_cell_details",
      "return_description": null,
      "signature": "void bitmap_set_cell_details(bitmap bmp,int width,int height,int columns,int rows,int count);",
      "unique_global_name": "bitmap_set_cell_details"
    },
    {
      "description": "Lets you test if bitmap value is valid. This will return true when it is a valid bitmap.",
      "name": "bitmap_valid",
      "return_description": "true when the bitmap is valid.",
      "signature": "bool bitmap_valid(bitmap bmp);",
      "unique_global_name": "bitmap_valid"
    },
    {
      "description": "Returns the width of the bitmap.",
      "name": "bitmap_width",
      "return_description": "The width of the bitmap",
      "signature": "int bitmap_width(bitmap bmp);",
      "unique_global_name": "bitmap_width"
    },
    {
      "description": "Returns the width of the bitmap.",
      "name": "bitmap_width",
      "return_description": "The width of the bitmap",
      "signature": "int bitmap_width(string name);",
      "unique_global_name": "bitmap_width_of_bitmap_named"
    },
    {
      "description": "Clear the bitmap to the indicated color. This will ensure the entire\nsurface of the bitmap is set to that color.",
      "name": "clear_bitmap",
      "return_description": null,
      "signature": "void clear_bitmap(bitmap bmp,color clr);",
      "unique_global_name": "clear_bitmap"
    },
    {
      "description": "Clear the bitmap to the indicated color. This will ensure the entire\nsurface of the bitmap is set to that color.",
      "name": "clear_bitmap",
      "return_description": null,
      "signature": "void clear_bitmap(string name,color clr);",
      "unique_global_name": "clear_bitmap_named"
    },
    {
      "description": "Creates a new bitmap that you can draw to. Initially the bitmap will\nbe transparent.",
      "name": "create_bitmap",
      "return_description": "A new transparent bitmap",
      "signature": "bitmap create_bitmap(string name,int width,int height);",
      "unique_global_name": "create_bitmap"
    },
    {
      "description": "Draws the bitmap supplied into `bmp` to the current window.\nat `x` and `y`.",
      "name": "draw_bitmap",
      "return_description": null,
      "signature": "void draw_bitmap(bitmap bmp,double x,double y);",
      "unique_global_name": "draw_bitmap"
    },
    {
      "description": "Draws the bitmap supplied into `bmp` to the current window.\nwith extra drawing options supplied in `opts` at `x` and `y`.",
      "name": "draw_bitmap",
      "return_description": null,
      "signature": "void draw_bitmap(bitmap bmp,double x,double y,drawing_options opts);",
      "unique_global_name": "draw_bitmap_with_options"
    },
    {
      "description": "Searches and draws a bitmap with name `name` to the current window.\nwith extra drawing options supplied in `opts` at `x` and `y`.",
      "name": "draw_bitmap",
      "return_description": null,
      "signature": "void draw_bitmap(string name,double x,double y);",
      "unique_global_name": "draw_bitmap_named"
    },
    {
      "description": "Searches and draws a bitmap with name `name` to the current window.\nwith extra drawing options supplied in `opts` at `x` and `y`.",
      "name": "draw_bitmap",
      "return_description": null,
      "signature": "void draw_bitmap(string name,double x,double y,drawing_options opts);",
      "unique_global_name": "draw_bitmap_named_with_options"
    },
    {
      "description": "Draws the bitmap supplied into `bmp` to the given bitmap.\nat `x` and `y`.",
      "name": "draw_bitmap_on_bitmap",
      "return_description": null,
      "signature": "void draw_bitmap_on_bitmap(bitmap destination,bitmap bmp,double x,double y);",
      "unique_global_name": "draw_bitmap_on_bitmap_on_bitmap"
    },
    {
      "description": "Draws the bitmap supplied into `bmp` to the given bitmap.\nwith extra drawing options supplied in `opts` at `x` and `y`.",
      "name": "draw_bitmap_on_bitmap",
      "return_description": null,
      "signature": "void draw_bitmap_on_bitmap(bitmap destination,bitmap bmp,double x,double y,drawing_options opts);",
      "unique_global_name": "draw_bitmap_on_bitmap_on_bitmap_with_options"
    },
    {
      "description": "Draws the bitmap supplied into `bmp` to the given window.\nat `x` and `y`.",
      "name": "draw_bitmap_on_window",
      "return_description": null,
      "signature": "void draw_bitmap_on_window(window destination,bitmap bmp,double x,double y);",
      "unique_global_name": "draw_bitmap_on_window"
    },
    {
      "description": "Draws the bitmap supplied into `bmp` to the given window.\nwith extra drawing options supplied in `opts` at `x` and `y`.",
      "name": "draw_bitmap_on_window",
      "return_description": null,
      "signature": "void draw_bitmap_on_window(window destination,bitmap bmp,double x,double y,drawing_options opts);",
      "unique_global_name": "draw_bitmap_on_window_with_options"
    },
    {
      "description": "Free all of the loaded bitmap resources.",
      "name": "free_all_bitmaps",
      "return_description": null,
      "signature": "void free_all_bitmaps();",
      "unique_global_name": "free_all_bitmaps"
    },
    {
      "description": "Frees the bitmap resource.",
      "name": "free_bitmap",
      "return_description": null,
      "signature": "void free_bitmap(bitmap to_delete);",
      "unique_global_name": "free_bitmap"
    },
    {
      "description": "Determines if SplashKit has a bitmap loaded for the supplied name.\nThis checks against all bitmaps loaded.",
      "name": "has_bitmap",
      "return_description": "True if SplashKit has a bitmap with that name",
      "signature": "bool has_bitmap(string name);",
      "unique_global_name": "has_bitmap"
    },
    {
      "description": "Loads and returns a bitmap. The supplied `filename` is used to\nlocate the Bitmap to load. The supplied `name` indicates the\nname to use to refer to this Bitmap in SplashKit. The `bitmap` can then\nbe retrieved by passing this `name` to the `bitmap_named` function.",
      "name": "load_bitmap",
      "return_description": "The loaded bitmap",
      "signature": "bitmap load_bitmap(string name,string filename);",
      "unique_global_name": "load_bitmap"
    },
    {
      "description": "Check if the bitmap has a pixel drawn at the indicated point.",
      "name": "pixel_drawn_at_point",
      "return_description": "True if the pixel at that point in the bitmap is drawn.",
      "signature": "bool pixel_drawn_at_point(bitmap bmp,const point_2d &pt);",
      "unique_global_name": "pixel_drawn_at_point_pt"
    },
    {
      "description": "Check if the bitmap has a pixel drawn at the indicated point.",
      "name": "pixel_drawn_at_point",
      "return_description": "True if the pixel at that point in the bitmap is drawn.",
      "signature": "bool pixel_drawn_at_point(bitmap bmp,double x,double y);",
      "unique_global_name": "pixel_drawn_at_point"
    },
    {
      "description": "Check if the bitmap has a pixel drawn at the indicated point in the cell.",
      "name": "pixel_drawn_at_point",
      "return_description": "True if the pixel at that point in the bitmap's cell is\ndrawn.",
      "signature": "bool pixel_drawn_at_point(bitmap bmp,int cell,const point_2d &pt);",
      "unique_global_name": "pixel_drawn_at_point_in_cell_pt"
    },
    {
      "description": "Check if the bitmap has a pixel drawn at the indicated point in the cell.",
      "name": "pixel_drawn_at_point",
      "return_description": "True if the pixel at that point in the bitmap's cell is\ndrawn.",
      "signature": "bool pixel_drawn_at_point(bitmap bmp,int cell,double x,double y);",
      "unique_global_name": "pixel_drawn_at_point_in_cell"
    },
    {
      "description": "Sets up the collision mask for a bitmap. This enables collision detection between\nthis bitmap and other bitmaps or shapes.\n\nThis is automatically called when a bitmap is loaded, and only needs to be \ncalled on bitmaps created using `create_bitmap`, and when a bitmap is\nchanged by drawing onto the bitmap.",
      "name": "setup_collision_mask",
      "return_description": null,
      "signature": "void setup_collision_mask(bitmap bmp);",
      "unique_global_name": "setup_collision_mask"
    },
    {
      "description": "Draws a line onto the current window.",
      "name": "draw_line",
      "return_description": null,
      "signature": "void draw_line(color clr,const line &l);",
      "unique_global_name": "draw_line_record"
    },
    {
      "description": "Draws a line.",
      "name": "draw_line",
      "return_description": null,
      "signature": "void draw_line(color clr,const line &l,drawing_options opts);",
      "unique_global_name": "draw_line_record_with_options"
    },
    {
      "description": "Draw a line from one point to another on the current window.",
      "name": "draw_line",
      "return_description": null,
      "signature": "void draw_line(color clr,const point_2d &from_pt,const point_2d &to_pt);",
      "unique_global_name": "draw_line_point_to_point"
    },
    {
      "description": "Draw a line from one point to another on the current window.",
      "name": "draw_line",
      "return_description": null,
      "signature": "void draw_line(color clr,const point_2d &from_pt,const point_2d &to_pt,const drawing_options &opts);",
      "unique_global_name": "draw_line_point_to_point_with_options"
    },
    {
      "description": "Draw a line from one point to another on the current window.",
      "name": "draw_line",
      "return_description": null,
      "signature": "void draw_line(color clr,double x1,double y1,double x2,double y2);",
      "unique_global_name": "draw_line"
    },
    {
      "description": "Draw a line from one point to another",
      "name": "draw_line",
      "return_description": null,
      "signature": "void draw_line(color clr,double x1,double y1,double x2,double y2,const drawing_options &opts);",
      "unique_global_name": "draw_line_with_options"
    },
    {
      "description": "Draws a line onto the given bitmap.",
      "name": "draw_line_on_bitmap",
      "return_description": null,
      "signature": "void draw_line_on_bitmap(bitmap destination,color clr,const line &l);",
      "unique_global_name": "draw_line_on_bitmap_record"
    },
    {
      "description": "Draws a line on the given bitmap.",
      "name": "draw_line_on_bitmap",
      "return_description": null,
      "signature": "void draw_line_on_bitmap(bitmap destination,color clr,const line &l,drawing_options opts);",
      "unique_global_name": "draw_line_on_bitmap_record_with_options"
    },
    {
      "description": "Draw a line from one point to another on the given bitmap.",
      "name": "draw_line_on_bitmap",
      "return_description": null,
      "signature": "void draw_line_on_bitmap(bitmap destination,color clr,const point_2d &from_pt,const point_2d &to_pt);",
      "unique_global_name": "draw_line_on_bitmap_point_to_point"
    },
    {
      "description": "Draw a line from one point to another on the given bitmap.",
      "name": "draw_line_on_bitmap",
      "return_description": null,
      "signature": "void draw_line_on_bitmap(bitmap destination,color clr,const point_2d &from_pt,const point_2d &to_pt,const drawing_options &opts);",
      "unique_global_name": "draw_line_on_bitmap_point_to_point_with_options"
    },
    {
      "description": "Draw a line from one point to another on the given bitmap.",
      "name": "draw_line_on_bitmap",
      "return_description": null,
      "signature": "void draw_line_on_bitmap(bitmap destination,color clr,double x1,double y1,double x2,double y2);",
      "unique_global_name": "draw_line_on_bitmap"
    },
    {
      "description": "Draw a line from one point to another",
      "name": "draw_line_on_bitmap",
      "return_description": null,
      "signature": "void draw_line_on_bitmap(bitmap destination,color clr,double x1,double y1,double x2,double y2,const drawing_options &opts);",
      "unique_global_name": "draw_line_on_bitmap_with_options"
    },
    {
      "description": "Draws a line onto the given window.",
      "name": "draw_line_on_window",
      "return_description": null,
      "signature": "void draw_line_on_window(window destination,color clr,const line &l);",
      "unique_global_name": "draw_line_on_window_record"
    },
    {
      "description": "Draws a line on the given window.",
      "name": "draw_line_on_window",
      "return_description": null,
      "signature": "void draw_line_on_window(window destination,color clr,const line &l,drawing_options opts);",
      "unique_global_name": "draw_line_on_window_record_with_options"
    },
    {
      "description": "Draw a line from one point to another on the given window.",
      "name": "draw_line_on_window",
      "return_description": null,
      "signature": "void draw_line_on_window(window destination,color clr,const point_2d &from_pt,const point_2d &to_pt);",
      "unique_global_name": "draw_line_on_window_point_to_point"
    },
    {
      "description": "Draw a line from one point to another on the given window.",
      "name": "draw_line_on_window",
      "return_description": null,
      "signature": "void draw_line_on_window(window destination,color clr,const point_2d &from_pt,const point_2d &to_pt,const drawing_options &opts);",
      "unique_global_name": "draw_line_on_window_point_to_point_with_options"
    },
    {
      "description": "Draw a line from one point to another on the given window.",
      "name": "draw_line_on_window",
      "return_description": null,
      "signature": "void draw_line_on_window(window destination,color clr,double x1,double y1,double x2,double y2);",
      "unique_global_name": "draw_line_on_window"
    },
    {
      "description": "Draw a line from one point to another",
      "name": "draw_line_on_window",
      "return_description": null,
      "signature": "void draw_line_on_window(window destination,color clr,double x1,double y1,double x2,double y2,const drawing_options &opts);",
      "unique_global_name": "draw_line_on_window_with_options"
    },
    {
      "description": "Draws an individual pixel to the current window.",
      "name": "draw_pixel",
      "return_description": null,
      "signature": "void draw_pixel(color clr,const point_2d &pt);",
      "unique_global_name": "draw_pixel_at_point"
    },
    {
      "description": "Draws an individual pixel with the supplied options.",
      "name": "draw_pixel",
      "return_description": null,
      "signature": "void draw_pixel(color clr,const point_2d &pt,drawing_options opts);",
      "unique_global_name": "draw_pixel_at_point_with_options"
    },
    {
      "description": "Draws an individual pixel to the current window.",
      "name": "draw_pixel",
      "return_description": null,
      "signature": "void draw_pixel(color clr,double x,double y);",
      "unique_global_name": "draw_pixel"
    },
    {
      "description": "Draws an individual pixel with the supplied options.",
      "name": "draw_pixel",
      "return_description": null,
      "signature": "void draw_pixel(color clr,double x,double y,drawing_options opts);",
      "unique_global_name": "draw_pixel_with_options"
    },
    {
      "description": "Draws an individual pixel to the given bitmap.",
      "name": "draw_pixel_on_bitmap",
      "return_description": null,
      "signature": "void draw_pixel_on_bitmap(bitmap destination,color clr,const point_2d &pt);",
      "unique_global_name": "draw_pixel_on_bitmap_at_point"
    },
    {
      "description": "Draws an individual pixel to the given bitmap with the given drawing options.",
      "name": "draw_pixel_on_bitmap",
      "return_description": null,
      "signature": "void draw_pixel_on_bitmap(bitmap destination,color clr,const point_2d &pt,drawing_options opts);",
      "unique_global_name": "draw_pixel_on_bitmap_at_point_with_options"
    },
    {
      "description": "Draws an individual pixel to the given bitmap.",
      "name": "draw_pixel_on_bitmap",
      "return_description": null,
      "signature": "void draw_pixel_on_bitmap(bitmap destination,color clr,double x,double y);",
      "unique_global_name": "draw_pixel_on_bitmap"
    },
    {
      "description": "Draws an individual pixel to the given bitmap with the given drawing options.",
      "name": "draw_pixel_on_bitmap",
      "return_description": null,
      "signature": "void draw_pixel_on_bitmap(bitmap destination,color clr,double x,double y,drawing_options opts);",
      "unique_global_name": "draw_pixel_on_bitmap_with_options"
    },
    {
      "description": "Draws an individual pixel to the given window.",
      "name": "draw_pixel_on_window",
      "return_description": null,
      "signature": "void draw_pixel_on_window(window destination,color clr,const point_2d &pt);",
      "unique_global_name": "draw_pixel_on_window_at_point"
    },
    {
      "description": "Draws an individual pixel to the given window with the given drawing options.",
      "name": "draw_pixel_on_window",
      "return_description": null,
      "signature": "void draw_pixel_on_window(window destination,color clr,const point_2d &pt,drawing_options opts);",
      "unique_global_name": "draw_pixel_on_window_at_point_with_options"
    },
    {
      "description": "Draws an individual pixel to the given window.",
      "name": "draw_pixel_on_window",
      "return_description": null,
      "signature": "void draw_pixel_on_window(window destination,color clr,double x,double y);",
      "unique_global_name": "draw_pixel_on_window"
    },
    {
      "description": "Draws an individual pixel to the given window with the given drawing options.",
      "name": "draw_pixel_on_window",
      "return_description": null,
      "signature": "void draw_pixel_on_window(window destination,color clr,double x,double y,drawing_options opts);",
      "unique_global_name": "draw_pixel_on_window_with_options"
    },
    {
      "description": "Returns the color of the pixel at the location on the supplied\nbitmap.",
      "name": "get_pixel",
      "return_description": "The color of the pixel at the supplied location",
      "signature": "color get_pixel(bitmap bmp,const point_2d &pt);",
      "unique_global_name": "get_pixel_from_bitmap_at_point"
    },
    {
      "description": "Returns the color of the pixel at the x,y location on the supplied\nbitmap.",
      "name": "get_pixel",
      "return_description": "The color of the pixel at the supplied location",
      "signature": "color get_pixel(bitmap bmp,double x,double y);",
      "unique_global_name": "get_pixel_from_bitmap"
    },
    {
      "description": "Returns the color of the pixel at the x,y location on the current\nwindow.",
      "name": "get_pixel",
      "return_description": "The color of the pixel at the supplied location",
      "signature": "color get_pixel(const point_2d &pt);",
      "unique_global_name": "get_pixel_at_point"
    },
    {
      "description": "Returns the color of the pixel at the x,y location on the current\nwindow.",
      "name": "get_pixel",
      "return_description": "The color of the pixel at the supplied location",
      "signature": "color get_pixel(double x,double y);",
      "unique_global_name": "get_pixel"
    },
    {
      "description": "Returns the color of the pixel at the location on the supplied\nwindow.",
      "name": "get_pixel",
      "return_description": "The color of the pixel at the supplied location",
      "signature": "color get_pixel(window wnd,const point_2d &pt);",
      "unique_global_name": "get_pixel_from_window_at_point"
    },
    {
      "description": "Returns the color of the pixel at the x,y location on the supplied\nwindow.",
      "name": "get_pixel",
      "return_description": "The color of the pixel at the supplied location",
      "signature": "color get_pixel(window wnd,double x,double y);",
      "unique_global_name": "get_pixel_from_window"
    },
    {
      "description": "Returns the color of the pixel at the x,y location on the given\nwindow.",
      "name": "get_pixel_from_window",
      "return_description": "The color of the pixel at the supplied location",
      "signature": "color get_pixel_from_window(window destination,const point_2d &pt);",
      "unique_global_name": "get_pixel_from_window_at_point_from_window"
    },
    {
      "description": "Returns the color of the pixel at the x,y location on the given\nwindow.",
      "name": "get_pixel_from_window",
      "return_description": "The color of the pixel at the supplied location",
      "signature": "color get_pixel_from_window(window destination,double x,double y);",
      "unique_global_name": "get_pixel_from_window_from_window"
    },
    {
      "description": "Draw a quad to the current window.",
      "name": "draw_quad",
      "return_description": null,
      "signature": "void draw_quad(color clr,const quad &q);",
      "unique_global_name": "draw_quad"
    },
    {
      "description": "Draw a quad using the supplied drawing options.",
      "name": "draw_quad",
      "return_description": null,
      "signature": "void draw_quad(color clr,const quad &q,const drawing_options &opts);",
      "unique_global_name": "draw_quad_with_options"
    },
    {
      "description": "Draw a quad on the supplied bitmap to the current bitmap.",
      "name": "draw_quad_on_bitmap",
      "return_description": null,
      "signature": "void draw_quad_on_bitmap(bitmap destination,color clr,const quad &q);",
      "unique_global_name": "draw_quad_on_bitmap"
    },
    {
      "description": "Draw a quad on the supplied bitmap using the supplied drawing options.",
      "name": "draw_quad_on_bitmap",
      "return_description": null,
      "signature": "void draw_quad_on_bitmap(bitmap destination,color clr,const quad &q,const drawing_options &opts);",
      "unique_global_name": "draw_quad_on_bitmap_with_options"
    },
    {
      "description": "Draw a quad on the supplied window to the current window.",
      "name": "draw_quad_on_window",
      "return_description": null,
      "signature": "void draw_quad_on_window(window destination,color clr,const quad &q);",
      "unique_global_name": "draw_quad_on_window"
    },
    {
      "description": "Draw a quad on the supplied window using the supplied drawing options.",
      "name": "draw_quad_on_window",
      "return_description": null,
      "signature": "void draw_quad_on_window(window destination,color clr,const quad &q,const drawing_options &opts);",
      "unique_global_name": "draw_quad_on_window_with_options"
    },
    {
      "description": "Draw a rectangle onto the current window.",
      "name": "draw_rectangle",
      "return_description": null,
      "signature": "void draw_rectangle(color clr,const rectangle &rect);",
      "unique_global_name": "draw_rectangle_record"
    },
    {
      "description": "Draw a rectangle using the supplied drawing options.",
      "name": "draw_rectangle",
      "return_description": null,
      "signature": "void draw_rectangle(color clr,const rectangle &rect,const drawing_options &opts);",
      "unique_global_name": "draw_rectangle_record_with_options"
    },
    {
      "description": "Draw a rectangle to the current window.",
      "name": "draw_rectangle",
      "return_description": null,
      "signature": "void draw_rectangle(color clr,double x,double y,double width,double height);",
      "unique_global_name": "draw_rectangle"
    },
    {
      "description": "Draw a rectangle using the supplied drawing options.",
      "name": "draw_rectangle",
      "return_description": null,
      "signature": "void draw_rectangle(color clr,double x,double y,double width,double height,const drawing_options &opts);",
      "unique_global_name": "draw_rectangle_with_options"
    },
    {
      "description": "Draw a rectangle to the bitmap using the supplied rect. The rectangle is centred on its x, y\ncoordinates, and has the provided width and height.",
      "name": "draw_rectangle_on_bitmap",
      "return_description": null,
      "signature": "void draw_rectangle_on_bitmap(bitmap destination,color clr,const rectangle &rect);",
      "unique_global_name": "draw_rectangle_on_bitmap_record"
    },
    {
      "description": "Draw a rectangle to the bitmap using the supplied rect and drawing options. The rectangle is centred on its x, y\ncoordinates, and has the provided width and height.",
      "name": "draw_rectangle_on_bitmap",
      "return_description": null,
      "signature": "void draw_rectangle_on_bitmap(bitmap destination,color clr,const rectangle &rect,const drawing_options &opts);",
      "unique_global_name": "draw_rectangle_on_bitmap_record_with_options"
    },
    {
      "description": "Draw a rectangle to the bitmap using. The rectangle is centred on its x, y\ncoordinates, and has the provided width and height.",
      "name": "draw_rectangle_on_bitmap",
      "return_description": null,
      "signature": "void draw_rectangle_on_bitmap(bitmap destination,color clr,double x,double y,double width,double height);",
      "unique_global_name": "draw_rectangle_on_bitmap"
    },
    {
      "description": "Draw a rectangle to the bitmap using the supplied drawing options. The rectangle is centred on its x, y\ncoordinates, and has the provided width and height.",
      "name": "draw_rectangle_on_bitmap",
      "return_description": null,
      "signature": "void draw_rectangle_on_bitmap(bitmap destination,color clr,double x,double y,double width,double height,drawing_options opts);",
      "unique_global_name": "draw_rectangle_on_bitmap_with_options"
    },
    {
      "description": "Draw a rectangle to the window using the supplied rect. The rectangle is centred on its x, y\ncoordinates, and has the provided width and height.",
      "name": "draw_rectangle_on_window",
      "return_description": null,
      "signature": "void draw_rectangle_on_window(window destination,color clr,const rectangle &rect);",
      "unique_global_name": "draw_rectangle_on_window_record"
    },
    {
      "description": "Draw a rectangle to the window using the supplied rect and drawing options. The rectangle is centred on its x, y\ncoordinates, and has the provided width and height.",
      "name": "draw_rectangle_on_window",
      "return_description": null,
      "signature": "void draw_rectangle_on_window(window destination,color clr,const rectangle &rect,const drawing_options &opts);",
      "unique_global_name": "draw_rectangle_on_window_record_with_options"
    },
    {
      "description": "Draw a rectangle to the window using. The rectangle is centred on its x, y\ncoordinates, and has the provided width and height.",
      "name": "draw_rectangle_on_window",
      "return_description": null,
      "signature": "void draw_rectangle_on_window(window destination,color clr,double x,double y,double width,double height);",
      "unique_global_name": "draw_rectangle_on_window"
    },
    {
      "description": "Draw a rectangle to the window using the supplied drawing options. The rectangle is centred on its x, y\ncoordinates, and has the provided width and height.",
      "name": "draw_rectangle_on_window",
      "return_description": null,
      "signature": "void draw_rectangle_on_window(window destination,color clr,double x,double y,double width,double height,drawing_options opts);",
      "unique_global_name": "draw_rectangle_on_window_with_options"
    },
    {
      "description": "Fill a quad on the current window.",
      "name": "fill_quad",
      "return_description": null,
      "signature": "void fill_quad(color clr,const quad &q);",
      "unique_global_name": "fill_quad"
    },
    {
      "description": "Fill a quad using the supplied drawing options.",
      "name": "fill_quad",
      "return_description": null,
      "signature": "void fill_quad(color clr,const quad &q,const drawing_options &opts);",
      "unique_global_name": "fill_quad_with_options"
    },
    {
      "description": "Fill a quad on the supplied bitmap on the current bitmap.",
      "name": "fill_quad_on_bitmap",
      "return_description": null,
      "signature": "void fill_quad_on_bitmap(bitmap destination,color clr,const quad &q);",
      "unique_global_name": "fill_quad_on_bitmap"
    },
    {
      "description": "Fill a quad on the supplied bitmap using the supplied drawing options.",
      "name": "fill_quad_on_bitmap",
      "return_description": null,
      "signature": "void fill_quad_on_bitmap(bitmap destination,color clr,const quad &q,const drawing_options &opts);",
      "unique_global_name": "fill_quad_on_bitmap_with_options"
    },
    {
      "description": "Fill a quad on the supplied window on the current window.",
      "name": "fill_quad_on_window",
      "return_description": null,
      "signature": "void fill_quad_on_window(window destination,color clr,const quad &q);",
      "unique_global_name": "fill_quad_on_window"
    },
    {
      "description": "Fill a quad on the supplied window using the supplied drawing options.",
      "name": "fill_quad_on_window",
      "return_description": null,
      "signature": "void fill_quad_on_window(window destination,color clr,const quad &q,const drawing_options &opts);",
      "unique_global_name": "fill_quad_on_window_with_options"
    },
    {
      "description": "Fill a rectangle onto the current window.",
      "name": "fill_rectangle",
      "return_description": null,
      "signature": "void fill_rectangle(color clr,const rectangle &rect);",
      "unique_global_name": "fill_rectangle_record"
    },
    {
      "description": "Fills a rectangle using the supplied drawing options.",
      "name": "fill_rectangle",
      "return_description": null,
      "signature": "void fill_rectangle(color clr,const rectangle &rect,const drawing_options &opts);",
      "unique_global_name": "fill_rectangle_record_with_options"
    },
    {
      "description": "Fills a rectangle to the current window.",
      "name": "fill_rectangle",
      "return_description": null,
      "signature": "void fill_rectangle(color clr,double x,double y,double width,double height);",
      "unique_global_name": "fill_rectangle"
    },
    {
      "description": "Fills a rectangle using the supplied drawing options.",
      "name": "fill_rectangle",
      "return_description": null,
      "signature": "void fill_rectangle(color clr,double x,double y,double width,double height,const drawing_options &opts);",
      "unique_global_name": "fill_rectangle_with_options"
    },
    {
      "description": "Fill a rectangle on the supplied bitmap onto the current bitmap.",
      "name": "fill_rectangle_on_bitmap",
      "return_description": null,
      "signature": "void fill_rectangle_on_bitmap(bitmap destination,color clr,const rectangle &rect);",
      "unique_global_name": "fill_rectangle_on_bitmap_record"
    },
    {
      "description": "Fills a rectangle on the supplied bitmap using the supplied drawing options.",
      "name": "fill_rectangle_on_bitmap",
      "return_description": null,
      "signature": "void fill_rectangle_on_bitmap(bitmap destination,color clr,const rectangle &rect,const drawing_options &opts);",
      "unique_global_name": "fill_rectangle_on_bitmap_record_with_options"
    },
    {
      "description": "Fills a rectangle on the supplied bitmap to the current bitmap.",
      "name": "fill_rectangle_on_bitmap",
      "return_description": null,
      "signature": "void fill_rectangle_on_bitmap(bitmap destination,color clr,double x,double y,double width,double height);",
      "unique_global_name": "fill_rectangle_on_bitmap"
    },
    {
      "description": "Fills a rectangle on the supplied bitmap, using the supplied drawing options.",
      "name": "fill_rectangle_on_bitmap",
      "return_description": null,
      "signature": "void fill_rectangle_on_bitmap(bitmap destination,color clr,double x,double y,double width,double height,const drawing_options &opts);",
      "unique_global_name": "fill_rectangle_on_bitmap_with_options"
    },
    {
      "description": "Fill a rectangle on the supplied window onto the current window.",
      "name": "fill_rectangle_on_window",
      "return_description": null,
      "signature": "void fill_rectangle_on_window(window destination,color clr,const rectangle &rect);",
      "unique_global_name": "fill_rectangle_on_window_record"
    },
    {
      "description": "Fills a rectangle on the supplied window using the supplied drawing options.",
      "name": "fill_rectangle_on_window",
      "return_description": null,
      "signature": "void fill_rectangle_on_window(window destination,color clr,const rectangle &rect,const drawing_options &opts);",
      "unique_global_name": "fill_rectangle_on_window_record_with_options"
    },
    {
      "description": "Fills a rectangle on the supplied window to the current window.",
      "name": "fill_rectangle_on_window",
      "return_description": null,
      "signature": "void fill_rectangle_on_window(window destination,color clr,double x,double y,double width,double height);",
      "unique_global_name": "fill_rectangle_on_window"
    },
    {
      "description": "Fills a rectangle on the supplied window, using the supplied drawing options.",
      "name": "fill_rectangle_on_window",
      "return_description": null,
      "signature": "void fill_rectangle_on_window(window destination,color clr,double x,double y,double width,double height,const drawing_options &opts);",
      "unique_global_name": "fill_rectangle_on_window_with_options"
    },
    {
      "description": null,
      "name": "draw_text",
      "return_description": null,
      "signature": "void draw_text(const string &text,const color &clr,const string &fnt,int font_size,double x,double y);",
      "unique_global_name": "draw_text_font_as_string"
    },
    {
      "description": null,
      "name": "draw_text",
      "return_description": null,
      "signature": "void draw_text(const string &text,const color &clr,const string &fnt,int font_size,double x,double y,const drawing_options &opts);",
      "unique_global_name": "draw_text_with_options_font_as_string"
    },
    {
      "description": null,
      "name": "draw_text",
      "return_description": null,
      "signature": "void draw_text(const string &text,const color &clr,double x,double y);",
      "unique_global_name": "draw_text_no_font_no_size"
    },
    {
      "description": null,
      "name": "draw_text",
      "return_description": null,
      "signature": "void draw_text(const string &text,const color &clr,double x,double y,const drawing_options &opts);",
      "unique_global_name": "draw_text_no_font_no_size_with_options"
    },
    {
      "description": null,
      "name": "draw_text",
      "return_description": null,
      "signature": "void draw_text(const string &text,const color &clr,font fnt,int font_size,double x,double y);",
      "unique_global_name": "draw_text"
    },
    {
      "description": null,
      "name": "draw_text",
      "return_description": null,
      "signature": "void draw_text(const string &text,const color &clr,font fnt,int font_size,double x,double y,const drawing_options &opts);",
      "unique_global_name": "draw_text_with_options"
    },
    {
      "description": null,
      "name": "draw_text_on_bitmap",
      "return_description": null,
      "signature": "void draw_text_on_bitmap(bitmap bmp,const string &text,const color &clr,const string &fnt,int font_size,double x,double y);",
      "unique_global_name": "draw_text_on_bitmap_font_as_string"
    },
    {
      "description": null,
      "name": "draw_text_on_bitmap",
      "return_description": null,
      "signature": "void draw_text_on_bitmap(bitmap bmp,const string &text,const color &clr,const string &fnt,int font_size,double x,double y,const drawing_options &opts);",
      "unique_global_name": "draw_text_on_bitmap_with_options_font_as_string"
    },
    {
      "description": null,
      "name": "draw_text_on_bitmap",
      "return_description": null,
      "signature": "void draw_text_on_bitmap(bitmap bmp,const string &text,const color &clr,double x,double y);",
      "unique_global_name": "draw_text_on_bitmap_no_font_no_size"
    },
    {
      "description": null,
      "name": "draw_text_on_bitmap",
      "return_description": null,
      "signature": "void draw_text_on_bitmap(bitmap bmp,const string &text,const color &clr,double x,double y,const drawing_options &opts);",
      "unique_global_name": "draw_text_on_bitmap_no_font_no_size_with_options"
    },
    {
      "description": null,
      "name": "draw_text_on_bitmap",
      "return_description": null,
      "signature": "void draw_text_on_bitmap(bitmap bmp,const string &text,const color &clr,font fnt,int font_size,double x,double y);",
      "unique_global_name": "draw_text_on_bitmap"
    },
    {
      "description": null,
      "name": "draw_text_on_bitmap",
      "return_description": null,
      "signature": "void draw_text_on_bitmap(bitmap bmp,const string &text,const color &clr,font fnt,int font_size,double x,double y,const drawing_options &opts);",
      "unique_global_name": "draw_text_on_bitmap_with_options"
    },
    {
      "description": null,
      "name": "draw_text_on_window",
      "return_description": null,
      "signature": "void draw_text_on_window(window wnd,const string &text,const color &clr,const string &fnt,int font_size,double x,double y);",
      "unique_global_name": "draw_text_on_window_font_as_string"
    },
    {
      "description": null,
      "name": "draw_text_on_window",
      "return_description": null,
      "signature": "void draw_text_on_window(window wnd,const string &text,const color &clr,const string &fnt,int font_size,double x,double y,const drawing_options &opts);",
      "unique_global_name": "draw_text_on_window_with_options_font_as_string"
    },
    {
      "description": null,
      "name": "draw_text_on_window",
      "return_description": null,
      "signature": "void draw_text_on_window(window wnd,const string &text,const color &clr,double x,double y);",
      "unique_global_name": "draw_text_on_window_no_font_no_size"
    },
    {
      "description": null,
      "name": "draw_text_on_window",
      "return_description": null,
      "signature": "void draw_text_on_window(window wnd,const string &text,const color &clr,double x,double y,const drawing_options &opts);",
      "unique_global_name": "draw_text_on_window_no_font_no_size_with_options"
    },
    {
      "description": null,
      "name": "draw_text_on_window",
      "return_description": null,
      "signature": "void draw_text_on_window(window wnd,const string &text,const color &clr,font fnt,int font_size,double x,double y);",
      "unique_global_name": "draw_text_on_window"
    },
    {
      "description": null,
      "name": "draw_text_on_window",
      "return_description": null,
      "signature": "void draw_text_on_window(window wnd,const string &text,const color &clr,font fnt,int font_size,double x,double y,const drawing_options &opts);",
      "unique_global_name": "draw_text_on_window_with_options"
    },
    {
      "description": null,
      "name": "font_has_size",
      "return_description": "Returns true if there is a font with the supplied name that has the supplied size.",
      "signature": "bool font_has_size(const string &name,int font_size);",
      "unique_global_name": "font_has_size_name_as_string"
    },
    {
      "description": null,
      "name": "font_has_size",
      "return_description": "Returns true if the supplied `font` has the supplied size.",
      "signature": "bool font_has_size(font fnt,int font_size);",
      "unique_global_name": "font_has_size"
    },
    {
      "description": null,
      "name": "font_load_size",
      "return_description": null,
      "signature": "void font_load_size(const string &name,int font_size);",
      "unique_global_name": "font_load_size_name_as_string"
    },
    {
      "description": null,
      "name": "font_load_size",
      "return_description": null,
      "signature": "void font_load_size(font fnt,int font_size);",
      "unique_global_name": "font_load_size"
    },
    {
      "description": null,
      "name": "font_named",
      "return_description": "Returns the font that has the supplied name.",
      "signature": "font font_named(string name);",
      "unique_global_name": "font_named"
    },
    {
      "description": null,
      "name": "free_all_fonts",
      "return_description": null,
      "signature": "void free_all_fonts();",
      "unique_global_name": "free_all_fonts"
    },
    {
      "description": null,
      "name": "free_font",
      "return_description": null,
      "signature": "void free_font(font fnt);",
      "unique_global_name": "free_font"
    },
    {
      "description": null,
      "name": "get_font_style",
      "return_description": "Returns the current `font_style` for the `font`.",
      "signature": "font_style get_font_style(const string &name);",
      "unique_global_name": "get_font_style_name_as_string"
    },
    {
      "description": null,
      "name": "get_font_style",
      "return_description": "Returns the current `font_style` for the `font`.",
      "signature": "font_style get_font_style(font fnt);",
      "unique_global_name": "get_font_style"
    },
    {
      "description": "Searches for and (if found) returns a default system font. Otherwise defaults to the in-built font.",
      "name": "get_system_font",
      "return_description": "Returns the `font` found, or the in-built font if not",
      "signature": "font get_system_font();",
      "unique_global_name": "get_system_font"
    },
    {
      "description": null,
      "name": "has_font",
      "return_description": "Returns true if the specified `font` is loaded.",
      "signature": "bool has_font(font fnt);",
      "unique_global_name": "has_font"
    },
    {
      "description": null,
      "name": "has_font",
      "return_description": "Returns whether there is a loaded font with the supplied name.",
      "signature": "bool has_font(string name);",
      "unique_global_name": "has_font_name_as_string"
    },
    {
      "description": null,
      "name": "load_font",
      "return_description": "Returns a new `font` object.",
      "signature": "font load_font(const string &name,const string &filename);",
      "unique_global_name": "load_font"
    },
    {
      "description": null,
      "name": "set_font_style",
      "return_description": null,
      "signature": "void set_font_style(const string &name,font_style style);",
      "unique_global_name": "set_font_style_name_as_string"
    },
    {
      "description": null,
      "name": "set_font_style",
      "return_description": null,
      "signature": "void set_font_style(font fnt,font_style style);",
      "unique_global_name": "set_font_style"
    },
    {
      "description": null,
      "name": "text_height",
      "return_description": "Returns the height of the text as an integer.",
      "signature": "int text_height(const string &text,const string& fnt,int font_size);",
      "unique_global_name": "text_height_font_named"
    },
    {
      "description": null,
      "name": "text_height",
      "return_description": "Returns the height of the text as an integer.",
      "signature": "int text_height(const string &text,font fnt,int font_size);",
      "unique_global_name": "text_height"
    },
    {
      "description": null,
      "name": "text_width",
      "return_description": "Returns the width of the text as an integer.",
      "signature": "int text_width(const string &text,const string& fnt,int font_size);",
      "unique_global_name": "text_width_font_named"
    },
    {
      "description": null,
      "name": "text_width",
      "return_description": "Returns the width of the text as an integer.",
      "signature": "int text_width(const string &text,font fnt,int font_size);",
      "unique_global_name": "text_width"
    },
    {
      "description": "Draw a triangle onto the current window.",
      "name": "draw_triangle",
      "return_description": null,
      "signature": "void draw_triangle(color clr,const triangle &tri);",
      "unique_global_name": "draw_triangle_record"
    },
    {
      "description": "Draw a triangle using the supplied drawing options.",
      "name": "draw_triangle",
      "return_description": null,
      "signature": "void draw_triangle(color clr,const triangle &tri,drawing_options opts);",
      "unique_global_name": "draw_triangle_record_with_options"
    },
    {
      "description": "Draw a triangle to the current window.",
      "name": "draw_triangle",
      "return_description": null,
      "signature": "void draw_triangle(color clr,double x1,double y1,double x2,double y2,double x3,double y3);",
      "unique_global_name": "draw_triangle"
    },
    {
      "description": "Draw a triangle using the supplied drawing options.",
      "name": "draw_triangle",
      "return_description": null,
      "signature": "void draw_triangle(color clr,double x1,double y1,double x2,double y2,double x3,double y3,drawing_options opts);",
      "unique_global_name": "draw_triangle_with_options"
    },
    {
      "description": "Draw a triangle on a given bitmap, using the supplied drawing options.",
      "name": "draw_triangle_on_bitmap",
      "return_description": null,
      "signature": "void draw_triangle_on_bitmap(bitmap destination,color clr,const triangle &tri);",
      "unique_global_name": "draw_triangle_on_bitmap_record"
    },
    {
      "description": "Draw a triangle on a given bitmap, using the supplied drawing options.",
      "name": "draw_triangle_on_bitmap",
      "return_description": null,
      "signature": "void draw_triangle_on_bitmap(bitmap destination,color clr,const triangle &tri,drawing_options opts);",
      "unique_global_name": "draw_triangle_on_bitmap_record_with_options"
    },
    {
      "description": "Draw a triangle to the given bitmap.",
      "name": "draw_triangle_on_bitmap",
      "return_description": null,
      "signature": "void draw_triangle_on_bitmap(bitmap destination,color clr,double x1,double y1,double x2,double y2,double x3,double y3);",
      "unique_global_name": "draw_triangle_on_bitmap"
    },
    {
      "description": "Draw a triangle to the given bitmap, using the supplied drawing options.",
      "name": "draw_triangle_on_bitmap",
      "return_description": null,
      "signature": "void draw_triangle_on_bitmap(bitmap destination,color clr,double x1,double y1,double x2,double y2,double x3,double y3,drawing_options opts);",
      "unique_global_name": "draw_triangle_on_bitmap_with_options"
    },
    {
      "description": "Draw a triangle on a given window, using the supplied drawing options.",
      "name": "draw_triangle_on_window",
      "return_description": null,
      "signature": "void draw_triangle_on_window(window destination,color clr,const triangle &tri);",
      "unique_global_name": "draw_triangle_on_window_record"
    },
    {
      "description": "Draw a triangle on a given window, using the supplied drawing options.",
      "name": "draw_triangle_on_window",
      "return_description": null,
      "signature": "void draw_triangle_on_window(window destination,color clr,const triangle &tri,drawing_options opts);",
      "unique_global_name": "draw_triangle_on_window_record_with_options"
    },
    {
      "description": "Draw a triangle to the given window.",
      "name": "draw_triangle_on_window",
      "return_description": null,
      "signature": "void draw_triangle_on_window(window destination,color clr,double x1,double y1,double x2,double y2,double x3,double y3);",
      "unique_global_name": "draw_triangle_on_window"
    },
    {
      "description": "Draw a triangle to the given window, using the supplied drawing options.",
      "name": "draw_triangle_on_window",
      "return_description": null,
      "signature": "void draw_triangle_on_window(window destination,color clr,double x1,double y1,double x2,double y2,double x3,double y3,drawing_options opts);",
      "unique_global_name": "draw_triangle_on_window_with_options"
    },
    {
      "description": "Draw a triangle onto the current window.",
      "name": "fill_triangle",
      "return_description": null,
      "signature": "void fill_triangle(color clr,const triangle &tri);",
      "unique_global_name": "fill_triangle_record"
    },
    {
      "description": "Fill a triangle using the supplied drawing options.",
      "name": "fill_triangle",
      "return_description": null,
      "signature": "void fill_triangle(color clr,const triangle &tri,drawing_options opts);",
      "unique_global_name": "fill_triangle_record_with_options"
    },
    {
      "description": "Fills a triangle on the current window.",
      "name": "fill_triangle",
      "return_description": null,
      "signature": "void fill_triangle(color clr,double x1,double y1,double x2,double y2,double x3,double y3);",
      "unique_global_name": "fill_triangle"
    },
    {
      "description": "Fills a triangle using the supplied drawing options.",
      "name": "fill_triangle",
      "return_description": null,
      "signature": "void fill_triangle(color clr,double x1,double y1,double x2,double y2,double x3,double y3,drawing_options opts);",
      "unique_global_name": "fill_triangle_with_options"
    },
    {
      "description": "Fill a triangle on a given bitmap",
      "name": "fill_triangle_on_bitmap",
      "return_description": null,
      "signature": "void fill_triangle_on_bitmap(bitmap destination,color clr,const triangle &tri);",
      "unique_global_name": "fill_triangle_on_bitmap_record"
    },
    {
      "description": "Fill a triangle on a given bitmap, using given drawing options",
      "name": "fill_triangle_on_bitmap",
      "return_description": null,
      "signature": "void fill_triangle_on_bitmap(bitmap destination,color clr,const triangle &tri,drawing_options opts);",
      "unique_global_name": "fill_triangle_on_bitmap_record_with_options"
    },
    {
      "description": "Fill a triangle on a given bitmap",
      "name": "fill_triangle_on_bitmap",
      "return_description": null,
      "signature": "void fill_triangle_on_bitmap(bitmap destination,color clr,double x1,double y1,double x2,double y2,double x3,double y3);",
      "unique_global_name": "fill_triangle_on_bitmap"
    },
    {
      "description": "Fill a triangle on a given bitmap, using the supplied drawing options.",
      "name": "fill_triangle_on_bitmap",
      "return_description": null,
      "signature": "void fill_triangle_on_bitmap(bitmap destination,color clr,double x1,double y1,double x2,double y2,double x3,double y3,drawing_options opts);",
      "unique_global_name": "fill_triangle_on_bitmap_with_options"
    },
    {
      "description": "Fill a triangle on a given window",
      "name": "fill_triangle_on_window",
      "return_description": null,
      "signature": "void fill_triangle_on_window(window destination,color clr,const triangle &tri);",
      "unique_global_name": "fill_triangle_on_window_record"
    },
    {
      "description": "Fill a triangle on a given window, using given drawing options",
      "name": "fill_triangle_on_window",
      "return_description": null,
      "signature": "void fill_triangle_on_window(window destination,color clr,const triangle &tri,drawing_options opts);",
      "unique_global_name": "fill_triangle_on_window_record_with_options"
    },
    {
      "description": "Fill a triangle on a given window",
      "name": "fill_triangle_on_window",
      "return_description": null,
      "signature": "void fill_triangle_on_window(window destination,color clr,double x1,double y1,double x2,double y2,double x3,double y3);",
      "unique_global_name": "fill_triangle_on_window"
    },
    {
      "description": "Fill a triangle on a given window, using the supplied drawing options.",
      "name": "fill_triangle_on_window",
      "return_description": null,
      "signature": "void fill_triangle_on_window(window destination,color clr,double x1,double y1,double x2,double y2,double x3,double y3,drawing_options opts);",
      "unique_global_name": "fill_triangle_on_window_with_options"
    }
  ]
}
