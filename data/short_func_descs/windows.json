{
  "resources": {
    "fonts": {
      "dialog": "hara.ttf",
      "hara": "hara.ttf"
    },
    "images": {
      "light": "on_med.png",
      "blah": "http://www.swinburne.edu.au/cwis/php_pages/webapps/marketing/promotiles-v3/assets/img/RgakQ.jpg"
    }
  },
  "example": "//\n//  test_windows.cpp\n//  splashkit\n//\n//  Created by Andrew Cain on 15/07/2016.\n//  Copyright Â© 2016 Andrew Cain. All rights reserved.\n//\n\n#include \"window_manager.h\"\n#include \"input.h\"\n#include \"images.h\"\n#include \"graphics.h\"\n#include \"utils.h\"\n#include \"text.h\"\n#include \"web_client.h\"\n#include \"utils.h\"\n\n#include <iostream>\nusing namespace std;\nusing namespace splashkit_lib;\n\nvoid run_windows_tests()\n{\n    window w1 = open_window(\"Hello World\", 800, 600);\n    \n    display_dialog(\"Tests\", \"About to run window tests...\", load_font(\"dialog\", \"hara.ttf\"), 14);\n    \n    font fnt = load_font(\"hara\", \"hara.ttf\");\n    bitmap light = load_bitmap(\"light\", \"on_med.png\");\n    \n    window_set_icon(w1, light);\n    \n    bitmap test = download_bitmap(\"blah\", \"http://www.swinburne.edu.au/cwis/php_pages/webapps/marketing/promotiles-v3/assets/img/RgakQ.jpg\", 80);\n    \n    cout << \"Expecting bad bitmap pointer error: \" << endl;\n    draw_bitmap(\"fred\", 75, 100);\n    \n    while ( ! quit_requested() )\n    {\n        process_events();\n        \n        draw_circle(COLOR_RED, 10, 10, 10);\n        fill_circle(COLOR_GREEN, 50, 10, 10);\n        \n        draw_bitmap(test, 0, 0);\n        draw_bitmap(light, 10, 100);\n        draw_bitmap(\"light\", 75, 100);\n        \n        draw_text(\"Hello World\", COLOR_BLUE, fnt, 64, 200, 100);\n        \n        refresh_screen();\n    }\n    \n    free_bitmap(light);\n    close_window(window_named(\"Hello World\"));\n    \n    delay(500);\n}",
  "tests": [
    {
      "description": "clears a window to the specified color given in `clr`",
      "name": "clear_window",
      "return_description": null,
      "signature": "void clear_window(window wind,color clr);",
      "unique_global_name": "clear_window"
    },
    {
      "description": "Releases all of the windows which have been loaded.",
      "name": "close_all_windows",
      "return_description": null,
      "signature": "void close_all_windows();",
      "unique_global_name": "close_all_windows"
    },
    {
      "description": "Closes and frees the current window.",
      "name": "close_current_window",
      "return_description": null,
      "signature": "void close_current_window();",
      "unique_global_name": "close_current_window"
    },
    {
      "description": "Closes and frees the graphics window identified by `name`.",
      "name": "close_window",
      "return_description": null,
      "signature": "void close_window(const string &name);",
      "unique_global_name": "close_window_named"
    },
    {
      "description": "Closes and frees the graphics window supplied in `wind`.",
      "name": "close_window",
      "return_description": null,
      "signature": "void close_window(window wind);",
      "unique_global_name": "close_window"
    },
    {
      "description": "Returns the window that you are currently interacting with. This will be\nthe default window for drawing options, and events.",
      "name": "current_window",
      "return_description": "The current window",
      "signature": "window current_window();",
      "unique_global_name": "current_window"
    },
    {
      "description": "Indicate if the current window has a border.",
      "name": "current_window_has_border",
      "return_description": "True if the window has a border",
      "signature": "bool current_window_has_border();",
      "unique_global_name": "current_window_has_border"
    },
    {
      "description": "Returns the height of the current window.",
      "name": "current_window_height",
      "return_description": "The height of the current window",
      "signature": "int current_window_height();",
      "unique_global_name": "current_window_height"
    },
    {
      "description": "Is the current window currently fullscreen?",
      "name": "current_window_is_fullscreen",
      "return_description": "True when the window is fullscreen",
      "signature": "bool current_window_is_fullscreen();",
      "unique_global_name": "current_window_is_fullscreen"
    },
    {
      "description": "The location of the current window.",
      "name": "current_window_position",
      "return_description": "Its location on the displays",
      "signature": "point_2d current_window_position();",
      "unique_global_name": "current_window_position"
    },
    {
      "description": "Toggle the current window border.",
      "name": "current_window_toggle_border",
      "return_description": null,
      "signature": "void current_window_toggle_border();",
      "unique_global_name": "current_window_toggle_border"
    },
    {
      "description": "Toggle the fullscreen property of the current window",
      "name": "current_window_toggle_fullscreen",
      "return_description": null,
      "signature": "void current_window_toggle_fullscreen();",
      "unique_global_name": "current_window_toggle_fullscreen"
    },
    {
      "description": "Returns the width of the current window.",
      "name": "current_window_width",
      "return_description": "The width of the current window",
      "signature": "int current_window_width();",
      "unique_global_name": "current_window_width"
    },
    {
      "description": "The x location of the current window on the displays.",
      "name": "current_window_x",
      "return_description": "Its location on the displays",
      "signature": "int current_window_x();",
      "unique_global_name": "current_window_x"
    },
    {
      "description": "The y location of the current window on the displays.",
      "name": "current_window_y",
      "return_description": "Its location on the displays",
      "signature": "int current_window_y();",
      "unique_global_name": "current_window_y"
    },
    {
      "description": "Determines if SplashKit has a window loaded with the supplied name.\nThis checks against all windows loaded, those loaded without a name\nare assigned the filename as a default. If this returns `false`, you may\nwant to use `load_window` to load in a specific window and give\nit the desired name.",
      "name": "has_window",
      "return_description": "Returns `true` if there is a window with the given `caption`\nwhich has has been loaded.",
      "signature": "bool has_window(string caption);",
      "unique_global_name": "has_window"
    },
    {
      "description": "Check if the requested window is the current window.",
      "name": "is_current_window",
      "return_description": "true if the window is the current window",
      "signature": "bool is_current_window(window wind);",
      "unique_global_name": "is_current_window"
    },
    {
      "description": "Move the current window to the new location on the displays.",
      "name": "move_current_window_to",
      "return_description": null,
      "signature": "void move_current_window_to(int x,int y);",
      "unique_global_name": "move_current_window_to"
    },
    {
      "description": "Move the window to the new location on the displays.",
      "name": "move_window_to",
      "return_description": null,
      "signature": "void move_window_to(const string &name,int x,int y);",
      "unique_global_name": "move_window_to_named"
    },
    {
      "description": "Move the window to the new location on the displays.",
      "name": "move_window_to",
      "return_description": null,
      "signature": "void move_window_to(window wind,int x,int y);",
      "unique_global_name": "move_window_to"
    },
    {
      "description": "Opens a new graphics window. The supplied `caption` is used to\nname and identify the window. The supplied `width` and `height` indicate\nthe size of the window. The window can be retrieved by passing `caption`\nto the `window_named` function.",
      "name": "open_window",
      "return_description": "A new window",
      "signature": "window open_window(string caption,int width,int height);",
      "unique_global_name": "open_window"
    },
    {
      "description": "Refreshes the window `wind`.",
      "name": "refresh_window",
      "return_description": null,
      "signature": "void refresh_window(window wind);",
      "unique_global_name": "refresh_window"
    },
    {
      "description": "Refreshes the window `wind`.",
      "name": "refresh_window",
      "return_description": null,
      "signature": "void refresh_window(window wind,unsigned int target_fps);",
      "unique_global_name": "refresh_window_with_target_fps"
    },
    {
      "description": "Change the size of the current window.",
      "name": "resize_current_window",
      "return_description": null,
      "signature": "void resize_current_window(int width,int height);",
      "unique_global_name": "resize_current_window"
    },
    {
      "description": "Change the size of the window.",
      "name": "resize_window",
      "return_description": null,
      "signature": "void resize_window(window wnd,int width,int height);",
      "unique_global_name": "resize_window"
    },
    {
      "description": "Set the current window to the window with the supplied caption.",
      "name": "set_current_window",
      "return_description": null,
      "signature": "void set_current_window(const string &name);",
      "unique_global_name": "set_current_window_named"
    },
    {
      "description": "Change the current window. Use this so that you can draw to different\nwindows by default.",
      "name": "set_current_window",
      "return_description": null,
      "signature": "void set_current_window(window wind);",
      "unique_global_name": "set_current_window"
    },
    {
      "description": "The caption of the window.",
      "name": "window_caption",
      "return_description": "The window's caption.",
      "signature": "string window_caption(window wind);",
      "unique_global_name": "window_caption"
    },
    {
      "description": "Checks all opened windows in the current program\nto determin if a window with the name `name` is\ncurrently open, and will close a window if one is found.",
      "name": "window_close_requested",
      "return_description": "Returns `true` if the window has been asked to close.",
      "signature": "bool window_close_requested(const string &name);",
      "unique_global_name": "window_close_requested_named"
    },
    {
      "description": "Closes the window given in `wind`",
      "name": "window_close_requested",
      "return_description": "Returns `true` if the window is closed,\n`false` if there is an error.",
      "signature": "bool window_close_requested(window wind);",
      "unique_global_name": "window_close_requested"
    },
    {
      "description": "Indicate if the window has a border.",
      "name": "window_has_border",
      "return_description": "True if the window has a border",
      "signature": "bool window_has_border(const string &name);",
      "unique_global_name": "window_has_border_named"
    },
    {
      "description": "Indicate if the window has a border.",
      "name": "window_has_border",
      "return_description": "True if the window has a border",
      "signature": "bool window_has_border(window wnd);",
      "unique_global_name": "window_has_border"
    },
    {
      "description": "Indicates if the window has focus.",
      "name": "window_has_focus",
      "return_description": "True if the window has the user's focus",
      "signature": "bool window_has_focus(window wind);",
      "unique_global_name": "window_has_focus"
    },
    {
      "description": "Returns the height of the window with the indicated name in pixels.",
      "name": "window_height",
      "return_description": "The height of the window",
      "signature": "int window_height(const string &name);",
      "unique_global_name": "window_height_named"
    },
    {
      "description": "Returns the height of the window in pixels.",
      "name": "window_height",
      "return_description": "The height of the window",
      "signature": "int window_height(window wind);",
      "unique_global_name": "window_height"
    },
    {
      "description": "Is the window currently fullscreen?",
      "name": "window_is_fullscreen",
      "return_description": "True when the window is fullscreen",
      "signature": "bool window_is_fullscreen(const string &name);",
      "unique_global_name": "window_is_fullscreen_named"
    },
    {
      "description": "Is the window currently fullscreen?",
      "name": "window_is_fullscreen",
      "return_description": "True when the window is fullscreen",
      "signature": "bool window_is_fullscreen(window wnd);",
      "unique_global_name": "window_is_fullscreen"
    },
    {
      "description": "Returns an opened `window` with the given name `caption`, if a window with\nname `caption` is found.",
      "name": "window_named",
      "return_description": "Returns a `window` with the name specified by `caption`",
      "signature": "window window_named(string caption);",
      "unique_global_name": "window_named"
    },
    {
      "description": "The location of the window.",
      "name": "window_position",
      "return_description": "Its location on the displays",
      "signature": "point_2d window_position(const string &name);",
      "unique_global_name": "window_position_named"
    },
    {
      "description": "The location of the window.",
      "name": "window_position",
      "return_description": "Its location on the displays",
      "signature": "point_2d window_position(window wnd);",
      "unique_global_name": "window_position"
    },
    {
      "description": "Sets the icon of the current window.",
      "name": "window_set_icon",
      "return_description": null,
      "signature": "void window_set_icon(window wind,bitmap bmp);",
      "unique_global_name": "window_set_icon"
    },
    {
      "description": "Toggle the window border.",
      "name": "window_toggle_border",
      "return_description": null,
      "signature": "void window_toggle_border(const string &name);",
      "unique_global_name": "window_toggle_border_named"
    },
    {
      "description": "Toggle the window border.",
      "name": "window_toggle_border",
      "return_description": null,
      "signature": "void window_toggle_border(window wnd);",
      "unique_global_name": "window_toggle_border"
    },
    {
      "description": "Toggle the fullscreen property of the window",
      "name": "window_toggle_fullscreen",
      "return_description": null,
      "signature": "void window_toggle_fullscreen(const string &name);",
      "unique_global_name": "window_toggle_fullscreen_named"
    },
    {
      "description": "Toggle the fullscreen property of the window",
      "name": "window_toggle_fullscreen",
      "return_description": null,
      "signature": "void window_toggle_fullscreen(window wnd);",
      "unique_global_name": "window_toggle_fullscreen"
    },
    {
      "description": "Returns the width of the window with the indicated name in pixels.",
      "name": "window_width",
      "return_description": "The width of the window",
      "signature": "int window_width(const string &name);",
      "unique_global_name": "window_width_named"
    },
    {
      "description": "Returns the width of the window in pixels.",
      "name": "window_width",
      "return_description": "The width of the window",
      "signature": "int window_width(window wind);",
      "unique_global_name": "window_width"
    },
    {
      "description": "Returns the window that the user currently has selected. This may be\ndifferent to the current window.",
      "name": "window_with_focus",
      "return_description": "The window the user has selected",
      "signature": "window window_with_focus();",
      "unique_global_name": "window_with_focus"
    },
    {
      "description": "The x location of the window on the displays.",
      "name": "window_x",
      "return_description": "Its location on the displays",
      "signature": "int window_x(const string &name);",
      "unique_global_name": "window_x_named"
    },
    {
      "description": "The x location of the window on the displays.",
      "name": "window_x",
      "return_description": "Its location on the displays",
      "signature": "int window_x(window wnd);",
      "unique_global_name": "window_x"
    },
    {
      "description": "The y location of the window on the displays.",
      "name": "window_y",
      "return_description": "Its location on the displays",
      "signature": "int window_y(const string &name);",
      "unique_global_name": "window_y_named"
    },
    {
      "description": "The y location of the window on the displays.",
      "name": "window_y",
      "return_description": "Its location on the displays",
      "signature": "int window_y(window wnd);",
      "unique_global_name": "window_y"
    }
  ]
}
