{
  "example": "//\n//  test_bundles.cpp\n//  splashkit\n//\n//  Created by Andrew Cain on 29/08/2016.\n//  Copyright Â© 2016 Andrew Cain. All rights reserved.\n//\n\n#include \"bundles.h\"\n#include \"resources.h\"\n\n#include \"window_manager.h\"\n#include \"audio.h\"\n#include \"images.h\"\n#include \"timers.h\"\n#include \"text.h\"\n\n#include <iostream>\nusing namespace std;\nusing namespace splashkit_lib;\n\nvoid free_notification(void *resource)\n{\n    cout << \"Freeing: \" << hex << resource << dec << endl;\n}\n\nvoid run_bundle_test()\n{\n    register_free_notifier(&free_notification);\n\n    cout << \"Before loading:\" << endl;\n    \n    cout << \"  Animation:   \" << has_animation_script(\"WalkingScript\") << endl;\n    cout << \"  Bitmap:      \" << has_bitmap(\"FrogBmp\") << endl;\n    cout << \"  Font:        \" << has_font(\"hara\") << endl;\n    cout << \"  Sound:       \" << has_sound_effect(\"error\") << endl;\n    cout << \"  Music:       \" << has_music(\"background\") << endl;\n    cout << \"  Timer:       \" << has_timer(\"my timer\") << endl;\n    cout << \"  Bundle:      \" << has_resource_bundle(\"blah\") << endl;\n    cout << \"  Ufo:         \" << has_bitmap(\"ufo\") << endl;\n    cout << \"  Bundle test: \" << has_resource_bundle(\"test\") << endl;\n    \n    load_resource_bundle(\"test\", \"test.txt\");\n\n    cout << \"After loading:\" << endl;\n    \n    cout << \"  Animation:   \" << has_animation_script(\"WalkingScript\") << endl;\n    cout << \"  Bitmap:      \" << has_bitmap(\"FrogBmp\") << endl;\n    cout << \"  Font:        \" << has_font(\"hara\") << endl;\n    cout << \"  Sound:       \" << has_sound_effect(\"error\") << endl;\n    cout << \"  Music:       \" << has_music(\"background\") << endl;\n    cout << \"  Timer:       \" << has_timer(\"my timer\") << endl;\n    cout << \"  Bundle:      \" << has_resource_bundle(\"blah\") << endl;\n    cout << \"  Ufo:         \" << has_bitmap(\"ufo\") << endl;\n    cout << \"  Bundle test: \" << has_resource_bundle(\"test\") << endl;\n\n    free_resource_bundle(\"test\");\n    \n    cout << \"After freeing:\" << endl;\n    \n    cout << \"  Animation:   \" << has_animation_script(\"WalkingScript\") << endl;\n    cout << \"  Bitmap:      \" << has_bitmap(\"FrogBmp\") << endl;\n    cout << \"  Font:        \" << has_font(\"hara\") << endl;\n    cout << \"  Sound:       \" << has_sound_effect(\"error\") << endl;\n    cout << \"  Music:       \" << has_music(\"background\") << endl;\n    cout << \"  Timer:       \" << has_timer(\"my timer\") << endl;\n    cout << \"  Bundle:      \" << has_resource_bundle(\"blah\") << endl;\n    cout << \"  Ufo:         \" << has_bitmap(\"ufo\") << endl;\n    cout << \"  Bundle test: \" << has_resource_bundle(\"test\") << endl;\n    \n}",
  "tests": [
    {
      "description": "When you are finished with the resources in a bundle, you can free them all\nby calling this procedure. It will free the resource bundle and all of the\nassociated resources.",
      "name": "free_resource_bundle",
      "return_description": null,
      "signature": "void free_resource_bundle(const string name);",
      "unique_global_name": "free_resource_bundle"
    },
    {
      "description": "Returns true when the named resource bundle has already been loaded.",
      "name": "has_resource_bundle",
      "return_description": "True when the bundle is already loaded.",
      "signature": "bool has_resource_bundle(const string &name);",
      "unique_global_name": "has_resource_bundle"
    },
    {
      "description": "Loads all of the resources in the resource bundle. The resource bundle is a\ntext file that describes the resources you want to load. These rescources\nare then loaded when you call this procedure, and can all be released when\nyou call `release_resource_bundle`.\n\nSave the resource bundle text files into your projects `Resources` in the\n`bundles` folder. Use the following as the format for each of the\nresources.\n\nStart a line with a `//` to have it ignored when the bundle is loaded. This\ncan be used to add comments to your bundle.\n\n\n-  To load an **animation** use the format:\n\n```\nANIM,name,filename\n```\n\nFor example, the following will load an animation named \"WalkingScript\" that\nloads the animation from \"kermit.txt\" in your games animation `Resources`.\n\n```\nANIM,WalkingScript,kermit.txt\n```\n\n-  To load a **bitmap** use the format: \n\n```\nBMP,name,filename\n```\n\nFor example, the following will load a bitmap named \"Logo\" using the\n\"Logo.png\" file.\n\n```\nBITMAP,Logo,logo.png\n```\n\n-  To load a **bitmap** that has a number of cells, you can extend the\nbitmap format with the cell details. This has the format:\n\n```\nBMP,name,filename,cell-width,cell-height,columns,rows,count\n```\n\nThe following will setup the \"Player\" bitmap to have cells that are 75\npixels wide, and 42 pixels height. There are 4 columns in 1 row, giving\na total of 4 cells.\n\n```\nBITMAP,Player,player.png,75,42,4,1,4\n```\n\n-  To load a font use FONT,name,filename. For example, the following loads a\nfont named \"GameFont\" that represents the \"demolition.otf\".\n\n```\nFONT,GameFont,demolition.otf\n```\n\n-  To load music, use MUSIC,name,filename. The following loads \"GameMusic\"\nfor the \"magical_night.ogg\" file.\n\n```\nMUSIC,GameMusic,magical_night.ogg\n```\n\n-  To load a sound effect, use SOUND,name,filename. For example the following\nloads \"error\" from the \"error.wav\" file.\n\n```\nSOUND,error,error.wav\n```\n\n-  To create a timer use TIMER,name. The following creates a timer named as\n\"my timer\".\n\n```\nTIMER,my timer\n```\n\n-  You can also load another resource bundle using BUNDLE,name,filename.\nThe following loads \"another bundle\" from the \"another.txt\" file.\n\n```\nBUNDLE,another bundle,another.txt\n```",
      "name": "load_resource_bundle",
      "return_description": null,
      "signature": "void load_resource_bundle(const string &name,const string &filename);",
      "unique_global_name": "load_resource_bundle"
    }
  ]
}
