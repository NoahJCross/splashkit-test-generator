{
  "example": "#include <vector>\n\n#include \"catch.hpp\"\n\n#include \"types.h\"\n#include \"json.h\"\n#include \"color.h\"\n\nusing namespace splashkit_lib;\n\njson create_person()\n{\n json person = create_json();\n\n json_set_string(person, \"firstName\", \"John\");\n json_set_string(person, \"lastName\", \"Smith\");\n\n json addresses = create_json();\n json_set_string(addresses, \"streetAddress\", \"21 2nd Street\");\n json_set_string(addresses, \"city\", \"New York\");\n json_set_string(addresses, \"state\", \"NY\");\n json_set_number(addresses, \"postalCode\", 10021);\n\n json_set_object(person, \"addresses\", addresses);\n\n vector<string> numbers = {\"212 555-1234\", \"646 555-4567\"};\n json_set_array(person, \"phoneNumbers\", numbers);\n\n json_set_bool(person, \"pensioner\", true);\n\n return person;\n}\n\nTEST_CASE(\"json can be created and read\", \"[json]\")\n{\n json person = create_person();\n\n SECTION(\"can read strings from json\")\n {\n REQUIRE(json_read_string(person, \"firstName\") == \"John\");\n REQUIRE(json_read_string(person, \"lastName\") == \"Smith\");\n }\n\n SECTION(\"can read from nested json objects\")\n {\n json addresses = json_read_object(person, \"addresses\");\n\n REQUIRE(json_read_string(addresses, \"streetAddress\") == \"21 2nd Street\");\n REQUIRE(json_read_string(addresses, \"city\") == \"New York\");\n REQUIRE(json_read_string(addresses, \"state\") == \"NY\");\n REQUIRE(json_read_number_as_int(addresses, \"postalCode\") == 10021);\n\n vector<string> validation_numbers { \"212 555-1234\", \"646 555-4567\" };\n vector<string> numbers;\n json_read_array(person, \"phoneNumbers\", numbers);\n\n REQUIRE(validation_numbers.size() == numbers.size());\n\n for (int i = 0; i < validation_numbers.size(); ++i)\n {\n REQUIRE(validation_numbers[i] == numbers[i]);\n }\n\n REQUIRE(json_read_bool(person, \"pensioner\") == true);\n }\n\n SECTION(\"json can be converted to other forms\")\n {\n SECTION(\"json can be written to/from string\")\n {\n string json_string = json_to_string(person);\n json j = json_from_string(json_string);\n\n REQUIRE(json_read_string(j, \"firstName\") == \"John\");\n }\n\n SECTION(\"json can be written to/from file\")\n {\n string filename = \"person.json\";\n json_to_file(person, filename);\n json j = json_from_file(filename);\n\n REQUIRE(json_read_string(j, \"firstName\") == \"John\");\n }\n }\n\n SECTION(\"can check if key exists in json\")\n {\n REQUIRE(json_has_key(person, \"firstName\"));\n REQUIRE(json_has_key(person, \"addresses\"));\n json addresses = json_read_object(person, \"addresses\");\n REQUIRE(json_has_key(addresses, \"postalCode\"));\n\n SECTION(\"json_has_key will not search nested objects\")\n {\n REQUIRE(json_has_key(person, \"postalCode\") == false);\n }\n\n REQUIRE(json_count_keys(person) == 5);\n }\n\n SECTION(\"can convert colors to/from json in hex form\")\n {\n color clr = COLOR_BRIGHT_GREEN;\n json j = json_from_color(clr);\n\n REQUIRE(json_has_key(j, \"color\"));\n REQUIRE(\"#00ff00ff\" == json_read_string(j, \"color\"));\n\n color deserialized_clr = json_to_color(j);\n\n REQUIRE(\"#00ff00ff\" == color_to_string(deserialized_clr));\n }\n\n free_json(person);\n free_all_json();\n}",
  "tests": [
    {
      "description": "The empty `json` object returned can be filled with data and read by the\nfunctions and procedures prefixed with `json_add_` and `json_read_`",
      "name": "create_json",
      "return_description": "Returns an empty `json` object.",
      "signature": "json create_json();",
      "unique_global_name": "create_json"
    },
    {
      "description": "`string json_string` must be valid JSON.\nThe `json` object returned can be filled with data and read by the functions\nand procedures prefixed with `json_add_` and `json_read_`",
      "name": "create_json",
      "return_description": "Returns a `json` object filled with data from the parameter `string`.",
      "signature": "json create_json(string json_string);",
      "unique_global_name": "create_json_from_string"
    },
    {
      "description": "Releases all of the `json` objects which have been loaded.",
      "name": "free_all_json",
      "return_description": null,
      "signature": "void free_all_json();",
      "unique_global_name": "free_all_json"
    },
    {
      "description": "Frees the SplashKit resources associated with the `json` object.",
      "name": "free_json",
      "return_description": null,
      "signature": "void free_json(json j);",
      "unique_global_name": "free_json"
    },
    {
      "description": "Returns the count of keys in the top-level `json` object.",
      "name": "json_count_keys",
      "return_description": "The count of keys in the top-level `json` object.",
      "signature": "int json_count_keys(json j);",
      "unique_global_name": "json_count_keys"
    },
    {
      "description": "Converts a `color` to a `json` object.",
      "name": "json_from_color",
      "return_description": "The `color` serialized into a `json` object.",
      "signature": "json json_from_color(color clr);",
      "unique_global_name": "json_from_color"
    },
    {
      "description": "Reads a `json` object from a JSON string stored in `Resources/json/filename`\nand loads the data into the returned `json` object.",
      "name": "json_from_file",
      "return_description": "Returns the `json` object loaded from the JSON file in `filename`.",
      "signature": "json json_from_file(const string& filename);",
      "unique_global_name": "json_from_file"
    },
    {
      "description": "Reads a `json` object from a `string` in the JSON format.",
      "name": "json_from_string",
      "return_description": "Returns a `json` object loaded with data from `string j_string`.",
      "signature": "json json_from_string(const string &j_string);",
      "unique_global_name": "json_from_string"
    },
    {
      "description": "Checks if the `json` object contains the given `string` key.",
      "name": "json_has_key",
      "return_description": "Returns `true` if the `json j` object contains a key for `string` key.",
      "signature": "bool json_has_key(json j,string key);",
      "unique_global_name": "json_has_key"
    },
    {
      "description": "Reads an array of `double` values from the `json` object for\nthe given `string` key.",
      "name": "json_read_array",
      "return_description": null,
      "signature": "void json_read_array(json j,string key,vector<double> &out_result);",
      "unique_global_name": "json_read_array_of_double"
    },
    {
      "description": "Reads an array of `json` object values from the `json` object for\nthe given `string` key.",
      "name": "json_read_array",
      "return_description": null,
      "signature": "void json_read_array(json j,string key,vector<json> &out_result);",
      "unique_global_name": "json_read_array_of_json"
    },
    {
      "description": "Reads an array of `string` values from the `json` object for\nthe given `string` key.",
      "name": "json_read_array",
      "return_description": null,
      "signature": "void json_read_array(json j,string key,vector<string> &out_result);",
      "unique_global_name": "json_read_array_of_string"
    },
    {
      "description": "Reads an array of `bool` values from the `json` object for\nthe given `string` key.",
      "name": "json_read_array",
      "return_description": null,
      "signature": "void json_read_array(json j,string key,vector<bool> &out_result);",
      "unique_global_name": "json_read_array_of_bool"
    },
    {
      "description": "Reads a `bool` value from the `json` object for the given `string` key.",
      "name": "json_read_bool",
      "return_description": "Returns the `bool` value stored at the `string` key.",
      "signature": "bool json_read_bool(json j,string key);",
      "unique_global_name": "json_read_bool"
    },
    {
      "description": "Reads a `float` value from the `json` object for the given `string` key.",
      "name": "json_read_number",
      "return_description": "Returns the `float` value stored at the `string` key.",
      "signature": "float json_read_number(json j,string key);",
      "unique_global_name": "json_read_number"
    },
    {
      "description": "Reads a `double` value from the `json` object for the given `string` key.",
      "name": "json_read_number_as_double",
      "return_description": "Returns the `double` value stored at the `string` key.",
      "signature": "double json_read_number_as_double(json j,string key);",
      "unique_global_name": "json_read_number_as_double"
    },
    {
      "description": "Reads a `integer` value from the `json` object for the given `string` key.",
      "name": "json_read_number_as_int",
      "return_description": "Returns the `integer` value stored at the `string` key.",
      "signature": "int json_read_number_as_int(json j,string key);",
      "unique_global_name": "json_read_number_as_int"
    },
    {
      "description": "Reads a `json` object value from the `json` object for the given `string` key.",
      "name": "json_read_object",
      "return_description": "Returns the `json` object value stored at the `string` key.",
      "signature": "json json_read_object(json j,string key);",
      "unique_global_name": "json_read_object"
    },
    {
      "description": "Reads a `string` value from the `json` object for the given `string` key.",
      "name": "json_read_string",
      "return_description": "Returns the `string` value stored at the `string` key.",
      "signature": "string json_read_string(json j,string key);",
      "unique_global_name": "json_read_string"
    },
    {
      "description": "Adds an array of `string` values to the `json` object for\nthe given `string` key.",
      "name": "json_set_array",
      "return_description": null,
      "signature": "void json_set_array(json j,string key,vector<string> value);",
      "unique_global_name": "json_set_array_of_string"
    },
    {
      "description": "Adds an array of `double` values to the `json` object for\nthe given `string` key.",
      "name": "json_set_array",
      "return_description": null,
      "signature": "void json_set_array(json j,string key,vector<double> value);",
      "unique_global_name": "json_set_array_of_double"
    },
    {
      "description": "Adds an array of `bool` values to the `json` object for\nthe given `string` key.",
      "name": "json_set_array",
      "return_description": null,
      "signature": "void json_set_array(json j,string key,vector<bool> value);",
      "unique_global_name": "json_set_array_of_bool"
    },
    {
      "description": "Adds an array of `json` object values to the `json` object for\nthe given `string` key.",
      "name": "json_set_array",
      "return_description": null,
      "signature": "void json_set_array(json j,string key,vector<json> value);",
      "unique_global_name": "json_set_array_of_json"
    },
    {
      "description": "Adds a `bool` value to the `json` object for the given `string` key.",
      "name": "json_set_bool",
      "return_description": null,
      "signature": "void json_set_bool(json j,string key,bool value);",
      "unique_global_name": "json_set_bool"
    },
    {
      "description": "Adds an `int` value to the `json` object for the given `string` key.",
      "name": "json_set_number",
      "return_description": null,
      "signature": "void json_set_number(json j,string key,int value);",
      "unique_global_name": "json_set_number_integer"
    },
    {
      "description": "Adds a `double` value to the `json` object for the given `string` key.",
      "name": "json_set_number",
      "return_description": null,
      "signature": "void json_set_number(json j,string key,double value);",
      "unique_global_name": "json_set_number_double"
    },
    {
      "description": "Adds a `float` value to the `json` object for the given `string` key.",
      "name": "json_set_number",
      "return_description": null,
      "signature": "void json_set_number(json j,string key,float value);",
      "unique_global_name": "json_set_number_float"
    },
    {
      "description": "Adds a `json` object to the `json` object for the given `string` key.",
      "name": "json_set_object",
      "return_description": null,
      "signature": "void json_set_object(json j,string key,json obj);",
      "unique_global_name": "json_set_object"
    },
    {
      "description": "Adds a `string` value to the `json` object for the given `string` key.",
      "name": "json_set_string",
      "return_description": null,
      "signature": "void json_set_string(json j,string key,string value);",
      "unique_global_name": "json_set_string"
    },
    {
      "description": "Converts a `json` object to a `color` object.",
      "name": "json_to_color",
      "return_description": "The `color` deserialized from the `json` object.",
      "signature": "color json_to_color(json j);",
      "unique_global_name": "json_to_color"
    },
    {
      "description": "Writes the `json` object to a JSON string stored in `Resources/json/filename`.",
      "name": "json_to_file",
      "return_description": null,
      "signature": "void json_to_file(json j,const string& filename);",
      "unique_global_name": "json_to_file"
    },
    {
      "description": "Converts and returns the `json` object as a `string`.",
      "name": "json_to_string",
      "return_description": "Returns the `json` object as a `string`.",
      "signature": "string json_to_string(json j);",
      "unique_global_name": "json_to_string"
    }
  ]
}
