{
  "example": "#include \"window_manager.h\"\n#include \"sprites.h\"\n#include \"graphics.h\"\n#include \"camera.h\"\n#include \"input.h\"\n\nusing namespace splashkit_lib;\n\nvoid run_camera_test()\n{\n    window w1 = open_window(\"Camera Test\", 600, 600);\n\n    load_bitmap(\"ufo\", \"ufo.png\");\n    sprite s = create_sprite(\"ufo\");\n\n    sprite_set_position(s, screen_center());\n\n    sprite_set_anchor_point(s, bitmap_cell_center(sprite_layer(s, 0)));\n\n    bool follow = true;\n\n    while ( ! window_close_requested(w1) )\n    {\n        process_events();\n\n        if ( key_down( LEFT_KEY) ) sprite_set_dx(s, -1);\n        else if ( key_down( RIGHT_KEY) ) sprite_set_dx(s, 1);\n        else sprite_set_dx(s, 0);\n\n        if ( key_down( UP_KEY) ) sprite_set_dy(s, -1);\n        else if ( key_down( DOWN_KEY) ) sprite_set_dy(s, 1);\n        else sprite_set_dy(s, 0);\n\n        if ( key_typed(F_KEY) )\n        {\n            follow = not follow;\n        }\n\n        update_sprite(s);\n\n        if ( follow )\n        {\n            center_camera_on(s, 0, 0);\n        }\n        else\n        {\n            set_camera_x(0);\n            set_camera_y(0);\n        }\n\n        clear_screen(COLOR_WHITE);\n\n        fill_rectangle(COLOR_RED, 0, 0, 10, 10);\n        draw_rectangle(COLOR_RED, 0, screen_height() - 10, 10, 10);\n        fill_circle(COLOR_GREEN, screen_width() - 10, 10, 10);\n        draw_circle(COLOR_GREEN, screen_width() - 10, screen_height() - 10, 10);\n\n        draw_triangle(COLOR_AQUA, screen_width() / 2, 0, 0, screen_height(), screen_width(), screen_height());\n\n        draw_sprite(s);\n        refresh_screen();\n    }\n\n    close_window(w1);\n}",
  "tests": [
    {
      "description": "Returns the position of the camera in game coordinates. This will be the\ncoordinate of the upper left corner of the screen.",
      "name": "camera_position",
      "return_description": "The position of the camera as a point_2d.",
      "signature": "point_2d camera_position();",
      "unique_global_name": "camera_position"
    },
    {
      "description": "Returns the x location of the camera in game coordinates. This represents\nthe left most x value shown on the screen, with the right of the screen\nbeing at camera x + screen width.",
      "name": "camera_x",
      "return_description": "The x location of the camera in game coordinates.",
      "signature": "double camera_x();",
      "unique_global_name": "camera_x"
    },
    {
      "description": "Returns the y location of the camera in game coordinates. This represents\nthe stop most y value shown on the screen, with bottom of screen being\nat camera y + screen height.",
      "name": "camera_y",
      "return_description": "The y location of the camera in game coordinates.",
      "signature": "double camera_y();",
      "unique_global_name": "camera_y"
    },
    {
      "description": "Set the camera view to be centered over the specific sprite. The offset\nvector allows you to move the sprite from the direct center of the screen.",
      "name": "center_camera_on",
      "return_description": null,
      "signature": "void center_camera_on(sprite s,const vector_2d &offset);",
      "unique_global_name": "center_camera_on_vector"
    },
    {
      "description": "Set the camera view to be centered over the specific sprite. The offset\nvector allows you to move the sprite from the direct center of the screen.",
      "name": "center_camera_on",
      "return_description": null,
      "signature": "void center_camera_on(sprite s,double offset_x,double offset_y);",
      "unique_global_name": "center_camera_on"
    },
    {
      "description": "Move the camera (offset its world x and y values) using the specified\nvector. For example, if you move the camera by the same speed vector of\na sprite the camera will \"track\" (be locked on to) the sprite as it moves.",
      "name": "move_camera_by",
      "return_description": null,
      "signature": "void move_camera_by(const vector_2d &offset);",
      "unique_global_name": "move_camera_by_vector"
    },
    {
      "description": "Move the camera (offset its world x and y values) using the specified\ndx (change in x) and dy (change in x) values.",
      "name": "move_camera_by",
      "return_description": null,
      "signature": "void move_camera_by(double dx,double dy);",
      "unique_global_name": "move_camera_by"
    },
    {
      "description": "Move the camera view (screen top left) to a specified point in the world.\nThis will be the new top left corner of the screen.",
      "name": "move_camera_to",
      "return_description": null,
      "signature": "void move_camera_to(const point_2d &pt);",
      "unique_global_name": "move_camera_to_point"
    },
    {
      "description": "Move the camera view to a world location specified by the x and y values.\nThis will be the new top left corner of the screen.",
      "name": "move_camera_to",
      "return_description": null,
      "signature": "void move_camera_to(double x,double y);",
      "unique_global_name": "move_camera_to"
    },
    {
      "description": "Tests if the point is in the window.",
      "name": "point_in_window",
      "return_description": "True if the point is on the screen.",
      "signature": "bool point_in_window(window wind,const point_2d &pt);",
      "unique_global_name": "point_in_window"
    },
    {
      "description": "Tests if the point is on the screen.",
      "name": "point_on_screen",
      "return_description": "True if the point is on the screen.",
      "signature": "bool point_on_screen(const point_2d &pt);",
      "unique_global_name": "point_on_screen"
    },
    {
      "description": "Tests if the rectangle is within the bounds of the window.",
      "name": "rect_in_window",
      "return_description": "True if any part of the rectangle is in the window.",
      "signature": "bool rect_in_window(window wind,const rectangle &rect);",
      "unique_global_name": "rect_in_window"
    },
    {
      "description": "Tests if the rectangle is on the screen.",
      "name": "rect_on_screen",
      "return_description": "True if any part of the rectangle is on the screen.",
      "signature": "bool rect_on_screen(const rectangle &rect);",
      "unique_global_name": "rect_on_screen"
    },
    {
      "description": "Returns the center of the screen in world coordinates.",
      "name": "screen_center",
      "return_description": "The center of the screen in world coordinates.",
      "signature": "point_2d screen_center();",
      "unique_global_name": "screen_center"
    },
    {
      "description": "Returns a rectangle that represents the dimensions of the window.",
      "name": "screen_rectangle",
      "return_description": "A rectangle representing the dimensions of the current window.",
      "signature": "rectangle screen_rectangle();",
      "unique_global_name": "screen_rectangle"
    },
    {
      "description": "Change the position of the camera to a specified world coordinate. This\nwill then be the new top left most position of the screen within the world.",
      "name": "set_camera_position",
      "return_description": null,
      "signature": "void set_camera_position(point_2d pos);",
      "unique_global_name": "set_camera_position"
    },
    {
      "description": "Change the X position of the camera to a specified world coordinate. This\nwill then be the new left most position of the screen within the world.",
      "name": "set_camera_x",
      "return_description": null,
      "signature": "void set_camera_x(double x);",
      "unique_global_name": "set_camera_x"
    },
    {
      "description": "Change the Y position of the camera to a specified world coordinate. This\nwill then be the new top most position of the screen within the world.",
      "name": "set_camera_y",
      "return_description": null,
      "signature": "void set_camera_y(double y);",
      "unique_global_name": "set_camera_y"
    },
    {
      "description": "Convert the passed in world coordinates to screen coordinates.",
      "name": "to_screen",
      "return_description": "A point that represents pt in screen coordinates.",
      "signature": "point_2d to_screen(const point_2d &pt);",
      "unique_global_name": "to_screen_point"
    },
    {
      "description": "Convert the rectangle in world coordinates to screen coordinates.",
      "name": "to_screen",
      "return_description": "A rectangle that represents rect in screen coordinates.",
      "signature": "rectangle to_screen(const rectangle &rect);",
      "unique_global_name": "to_screen_rectangle"
    },
    {
      "description": "Translate a world x value to the current screen x value which is based on\nthe camera position.",
      "name": "to_screen_x",
      "return_description": "The x location of the world coordinate on the screen.",
      "signature": "double to_screen_x(double world_x);",
      "unique_global_name": "to_screen_x"
    },
    {
      "description": "Translate a world y value to the current screen y value set by the camera.",
      "name": "to_screen_y",
      "return_description": "The y location of the world coordinate on the screen.",
      "signature": "double to_screen_y(double world_y);",
      "unique_global_name": "to_screen_y"
    },
    {
      "description": "Converts the passed in point from screen coordinates to world coordinates.",
      "name": "to_world",
      "return_description": "The same point in world coordinates.",
      "signature": "point_2d to_world(const point_2d &pt);",
      "unique_global_name": "to_world"
    },
    {
      "description": "Translate a screen x value (based on the camera) to a world x value",
      "name": "to_world_x",
      "return_description": "The x location of the screen coordinate in the world.",
      "signature": "double to_world_x(double screen_x);",
      "unique_global_name": "to_world_x"
    },
    {
      "description": "Translate a screen y value (based on the camera) to a world y value",
      "name": "to_world_y",
      "return_description": "The y location of the screen coordinate in the world.",
      "signature": "double to_world_y(double screen_y);",
      "unique_global_name": "to_world_y"
    },
    {
      "description": "Returns a vector that can transform points from world to screen coordinates.",
      "name": "vector_world_to_screen",
      "return_description": "A vector representing the distance and direction points need\nto move to map from world to screen coordinates.",
      "signature": "vector_2d vector_world_to_screen();",
      "unique_global_name": "vector_world_to_screen"
    },
    {
      "description": "Returns a rectangle that represents the dimensions of the window based\non the camera.",
      "name": "window_area",
      "return_description": "A rectangle representing the dimensions of the current window.",
      "signature": "rectangle window_area(window wind);",
      "unique_global_name": "window_area"
    }
  ]
}
