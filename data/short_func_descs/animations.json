{
  "resources": {
    "animation_script": "kermit.txt",
    "sprite": "frog.png"
  },
  "example": "//\n//  test_animation.cpp\n//  splashkit\n//\n//  Created by Andrew Cain on 12/08/2016.\n//  Copyright Â© 2016 Andrew Cain. All rights reserved.\n//\n\n#include \"animations.h\"\n#include \"images.h\"\n#include \"graphics.h\"\n#include \"window_manager.h\"\n#include \"utils.h\"\n#include \"audio.h\"\n#include \"input.h\"\n\n#include <vector>\n#include <iostream>\nusing namespace std;\nusing namespace splashkit_lib;\n\nvoid run_animation_test()\n{\n    vector<string> sequence = { \"Walkfront\", \"WalkLeft\", \"WalkRight\", \"WALKBACK\", \"dance\" };\n    \n    cout << \"Script should not be loaded: \" << has_animation_script(\"kermit\");\n    \n    animation_script kermit = load_animation_script(\"kermit\", \"kermit.txt\");\n    \n    cout << \"Script should be loaded: \" << has_animation_script(\"kermit\");\n    \n    animation anim = create_animation(kermit, \"MoonWalkBack\");\n    \n    open_window(\"Test Animation\", 600, 600);\n    \n    bitmap frog = load_bitmap(\"frog\", \"frog.png\");\n    bitmap_set_cell_details(frog, 73, 105, 4, 4, 16);\n    \n    auto it = sequence.begin();\n    \n    while( not quit_requested() )\n    {\n        process_events();\n        \n        clear_screen(COLOR_WHITE);\n        \n        draw_bitmap(frog, 100, 100, option_with_animation(anim));\n        \n        update_animation(anim);\n        \n        if ( animation_ended(anim) )\n        {\n            if ( it == sequence.end() ) break;\n            \n            assign_animation(anim, kermit, *it);\n            \n            it++;\n        }\n        \n        refresh_screen();\n        \n        if (quit_requested() ) break;\n    }\n    \n    free_animation_script(kermit);\n    free_bitmap(frog);\n    close_window(window_named(\"Test Animation\"));\n}",
  "tests": [
    {
      "description": "Returns the number of `animation`s within an `animation_script`.",
      "name": "animation_count",
      "return_description": "Returns an `int` equal to the total number of animations in the script.",
      "signature": "int animation_count(animation_script script);",
      "unique_global_name": "animation_count"
    },
    {
      "description": "Returns the current cell (the part of the image or sprite) of this\nanimation. This can be used to animate an image or sprite.",
      "name": "animation_current_cell",
      "return_description": "Returns the current cell of the animation passed to the method.",
      "signature": "int animation_current_cell(animation anim);",
      "unique_global_name": "animation_current_cell"
    },
    {
      "description": "Returns the `vector_2d` assigned to the current frame in the animation.",
      "name": "animation_current_vector",
      "return_description": "Returns the `vector_2d` assigned to the current frame in the animation.",
      "signature": "vector_2d animation_current_vector(animation anim);",
      "unique_global_name": "animation_current_vector"
    },
    {
      "description": "Checks if an `animation` has ended.",
      "name": "animation_ended",
      "return_description": "Returns a `bool` denoting whether the `animation` has ended.",
      "signature": "bool animation_ended(animation anim);",
      "unique_global_name": "animation_ended"
    },
    {
      "description": "Returns true if the `animation` entered a new frame on its last update.\nThis can be used to trigger actions on frames within an animation.",
      "name": "animation_entered_frame",
      "return_description": "Returns a `bool` denoting whether the `animation` has ended.",
      "signature": "bool animation_entered_frame(animation anim);",
      "unique_global_name": "animation_entered_frame"
    },
    {
      "description": "Returns the amount of time spent in the current frame. When this\nexceeds the frames duration the animation moves to the next frame.",
      "name": "animation_frame_time",
      "return_description": "Returns the amount of time spent in the current frame as a `float`.",
      "signature": "float animation_frame_time(animation anim);",
      "unique_global_name": "animation_frame_time"
    },
    {
      "description": "Searches an `animation_script` for an `animation` and returns its\nindex.",
      "name": "animation_index",
      "return_description": "Returns the index of the `animation` in the `animation_script`",
      "signature": "int animation_index(animation_script script,const string &name);",
      "unique_global_name": "animation_index"
    },
    {
      "description": "Searches an `animation_script` for an animation and returns its name.",
      "name": "animation_name",
      "return_description": "Returns the name of the `animation` in the `animation_script`.",
      "signature": "string animation_name(animation temp);",
      "unique_global_name": "animation_name"
    },
    {
      "description": "Retuns the name of an `animation_script`.",
      "name": "animation_script_name",
      "return_description": "Returns a `string` that is the name of the animation script passed to the method.",
      "signature": "string animation_script_name(animation_script script);",
      "unique_global_name": "animation_script_name"
    },
    {
      "description": "Loads and returns a `animation_script`. The supplied filename is\nused to locate the `animation_script` to load. The supplied name\nindicates the name to use to refer to this in SplashKit. The\n`animation_script` can then be retrieved by passing this name to\nthe animation_script_named method.",
      "name": "animation_script_named",
      "return_description": "Returns the newly loaded `animation_script`.",
      "signature": "animation_script animation_script_named(const string &name);",
      "unique_global_name": "animation_script_named"
    },
    {
      "description": "Setup an `animation` to follow the script from an indicated name.\nThis will switch the animation to use the supplied script.\nIt locates the name of the animation with the animation script and\nsets the `anim` to start at that point in the script.",
      "name": "assign_animation",
      "return_description": null,
      "signature": "void assign_animation(animation anim,animation_script script,const string &name);",
      "unique_global_name": "assign_animation_with_script"
    },
    {
      "description": "Assigns an `animation` to an `animation_script`. This may play a\nsound effect if the animation is set to play a sound effect on its\nfirst frame.",
      "name": "assign_animation",
      "return_description": null,
      "signature": "void assign_animation(animation anim,animation_script script,const string &name,bool with_sound);",
      "unique_global_name": "assign_animation_with_script_and_sound"
    },
    {
      "description": "Assigns an `animation` to an `animation_script`.",
      "name": "assign_animation",
      "return_description": null,
      "signature": "void assign_animation(animation anim,animation_script script,int idx);",
      "unique_global_name": "assign_animation_index_with_script"
    },
    {
      "description": "Assigns an `animation` to an `animation_script`. This may play a\nsound effect if the animation is set to play a sound effect on its\nfirst frame.",
      "name": "assign_animation",
      "return_description": null,
      "signature": "void assign_animation(animation anim,animation_script script,int idx,bool with_sound);",
      "unique_global_name": "assign_animation_index_with_script_and_sound"
    },
    {
      "description": "Assigns an `animation` to an `animation_script`.",
      "name": "assign_animation",
      "return_description": null,
      "signature": "void assign_animation(animation anim,const string &script_name,const string &name);",
      "unique_global_name": "assign_animation_with_script_named"
    },
    {
      "description": "Assigns an `animation` to an `animation_script`. This may play a\nsound effect if the animation is set to play a sound effect on its\nfirst frame.",
      "name": "assign_animation",
      "return_description": null,
      "signature": "void assign_animation(animation anim,const string &script_name,const string &name,bool with_sound);",
      "unique_global_name": "assign_animation_with_script_named_and_sound"
    },
    {
      "description": "Setup an `animation` to follow the script from an indicated index.\nThis uses the index from the current animation script and\nsets the supplied animation to start at that point in the script.",
      "name": "assign_animation",
      "return_description": null,
      "signature": "void assign_animation(animation anim,int idx);",
      "unique_global_name": "assign_animation_index"
    },
    {
      "description": "Setup an `animation` to follow the script from an indicated index.\nThis uses the index from the current animation script and\nsets the supplied animation to start at that point in the script.",
      "name": "assign_animation",
      "return_description": null,
      "signature": "void assign_animation(animation anim,int idx,bool with_sound);",
      "unique_global_name": "assign_animation_index_with_sound"
    },
    {
      "description": "Setup an `animation` to follow the script from an indicated name.\nThis locates the name of the animation from the current animation script and\nsets the supplied animation to start at that point in the script.",
      "name": "assign_animation",
      "return_description": null,
      "signature": "void assign_animation(animation anim,string name);",
      "unique_global_name": "assign_animation"
    },
    {
      "description": "Setup an `animation` to follow the script from an indicated name.\nThis locates the name of the animation from the current animation script and\nsets the supplied animation to start at that point in the script.",
      "name": "assign_animation",
      "return_description": null,
      "signature": "void assign_animation(animation anim,string name,bool with_sound);",
      "unique_global_name": "assign_animation_with_sound"
    },
    {
      "description": "Creates an animation from an `animation_script`. This may play a\nsound effect if the animation is set to play a sound effect on its\nfirst frame.",
      "name": "create_animation",
      "return_description": "Returns the newly created `animation_script`.",
      "signature": "animation create_animation(animation_script script,int idx,bool with_sound);",
      "unique_global_name": "create_animation_from_index_with_sound"
    },
    {
      "description": "Creates an animation from an `animation_script`.",
      "name": "create_animation",
      "return_description": "Returns the newly created `animation`",
      "signature": "animation create_animation(animation_script script,const string &name);",
      "unique_global_name": "create_animation"
    },
    {
      "description": "Creates an animation from a `animation_script`. This may play a\nsound effect if the animation is set to play a sound effect on\nits first frame.",
      "name": "create_animation",
      "return_description": "Returns the newly created `animation`.",
      "signature": "animation create_animation(animation_script script,const string &name,bool with_sound);",
      "unique_global_name": "create_animation_with_sound"
    },
    {
      "description": "Creates an animation from an `animation_script`'s name. This may\nplay a sound effect if the animation is set to play a sound effect\non its first frame.",
      "name": "create_animation",
      "return_description": "Returns the newly created `animation`",
      "signature": "animation create_animation(const string &script_name,const string &name);",
      "unique_global_name": "create_animation_from_script_named"
    },
    {
      "description": "Creates an animation from an `animation_script`'s name. This may\nplay a sound effect if the animation is set to play a sound effect\non its first frame.",
      "name": "create_animation",
      "return_description": "Returns the newly created `animation`",
      "signature": "animation create_animation(const string &script_name,const string &name,bool with_sound);",
      "unique_global_name": "create_animation_from_script_named_with_sound"
    },
    {
      "description": "Frees all loaded `animation_script`s.",
      "name": "free_all_animation_scripts",
      "return_description": null,
      "signature": "void free_all_animation_scripts();",
      "unique_global_name": "free_all_animation_scripts"
    },
    {
      "description": "Disposes of the resources used in the animation.",
      "name": "free_animation",
      "return_description": null,
      "signature": "void free_animation(animation ani);",
      "unique_global_name": "free_animation"
    },
    {
      "description": "Frees loaded animation frames data. Use this when you will no\nlonger be using the animation for any purpose, including within\nsprite.",
      "name": "free_animation_script",
      "return_description": null,
      "signature": "void free_animation_script(animation_script script_to_free);",
      "unique_global_name": "free_animation_script"
    },
    {
      "description": "Frees loaded `animation_script` data. Use this when you will no\nlonger be using the animation for any purpose, including within\nsprite.",
      "name": "free_animation_script",
      "return_description": null,
      "signature": "void free_animation_script(const string &name);",
      "unique_global_name": "free_animation_script_with_name"
    },
    {
      "description": "Returns whether an `animation_script` has been loaded with the\ngiven name.",
      "name": "has_animation_named",
      "return_description": "Returns a `bool` that denotes whether the `animation_script` has been loaded.",
      "signature": "bool has_animation_named(animation_script script,const string &name);",
      "unique_global_name": "has_animation_named"
    },
    {
      "description": "Determines if SplashKit has animation frames loaded for the\nsupplied name. This checks against all loaded animation frames,\nthose loaded without a name are assigned the filename as a default.",
      "name": "has_animation_script",
      "return_description": "Returns the `bool` that denotes if the animation has the `animation_script`",
      "signature": "bool has_animation_script(const string &name);",
      "unique_global_name": "has_animation_script"
    },
    {
      "description": "Load animation details from an animation frames file.",
      "name": "load_animation_script",
      "return_description": "Returns the newly loaded `animation_script`.",
      "signature": "animation_script load_animation_script(const string &name,const string &filename);",
      "unique_global_name": "load_animation_script"
    },
    {
      "description": "Restarts an `animation`.",
      "name": "restart_animation",
      "return_description": null,
      "signature": "void restart_animation(animation anim);",
      "unique_global_name": "restart_animation"
    },
    {
      "description": "Restarts an `animation`. This may play a sound effect if the first\nframe triggers a sound.",
      "name": "restart_animation",
      "return_description": null,
      "signature": "void restart_animation(animation anim,bool with_sound);",
      "unique_global_name": "restart_animation_with_sound"
    },
    {
      "description": "Updates the animation, updating the time spent and possibly moving to\na new frame in the animation. This may play a sound effect if the new\nframe triggers a sound.",
      "name": "update_animation",
      "return_description": null,
      "signature": "void update_animation(animation anim,float pct,bool with_sound);",
      "unique_global_name": "update_animation_percent_with_sound"
    },
    {
      "description": "Updates the animation, updating the time spent and possibly moving to\na new frame in the animation. This may play a sound effect if the new\nframe triggers a sound.",
      "name": "update_animation",
      "return_description": null,
      "signature": "void update_animation(animation anim);",
      "unique_global_name": "update_animation"
    },
    {
      "description": "Updates the animation, updating the time spent and possibly moving to\na new frame in the animation. This may play a sound effect if the new\nframe triggers a sound.",
      "name": "update_animation",
      "return_description": null,
      "signature": "void update_animation(animation anim,float pct);",
      "unique_global_name": "update_animation_percent"
    }
  ]
}
