{
  "example": "/***********************************************\n* XQuestCode || Aditya Parmar\n* Code with Creativity \n* ðŸš€ Â© 2024 Aditya Parmar. All Rights Reserved.\n***********************************************/\n#include <iostream>\n#include \"raspi_gpio.h\"\nusing namespace std;\nusing namespace splashkit_lib;\n\n// Function to run GPIO tests\nvoid run_gpio_tests()\n{\n    // Initialize the GPIO\n    cout << \"Initializing GPIO\" << endl;\n    raspi_init();\n\n    // Set GPIO pin 11 as an output\n    cout << \"Setting GPIO pin 11 as an output\" << endl;\n    raspi_set_mode(PIN_11, GPIO_OUTPUT);\n\n    // Read the initial value of GPIO pin 11\n    int defaultValue = raspi_read(PIN_11);\n    cout << \"Value of Pin 11: \" << defaultValue << endl;\n\n    // Write HIGH to GPIO pin 11\n    cout << \"Writing HIGH to GPIO pin 11\" << endl;\n    raspi_write(PIN_11, GPIO_HIGH);\n\n    // Read the value of GPIO pin 11\n    int value = raspi_read(PIN_11);\n    cout << \"GPIO 11 value: \" << value << endl;\n\n    // Write HIGH to GPIO pin 17\n    cout << \"Writing HIGH to GPIO pin 17\" << endl;\n    raspi_write(PIN_17, GPIO_HIGH);\n\n    // Write HIGH to Ground PIN\n    cout << \"Writing HIGH to Ground PIN\" << endl;\n    raspi_write(PIN_6, GPIO_HIGH);\n\n    // Clean up the GPIO\n    raspi_cleanup();\n}",
  "tests": [
    {
      "description": "Checks if the system has GPIO capabilities.",
      "name": "has_gpio",
      "return_description": "true if the system has GPIO capabilities, false otherwise.",
      "signature": "bool has_gpio();",
      "unique_global_name": "has_gpio"
    },
    {
      "description": "This function should be called when you are finished using the GPIO library. It sets all pin modes to INPUT and values to LOW.",
      "name": "raspi_cleanup",
      "return_description": null,
      "signature": "void raspi_cleanup();",
      "unique_global_name": "raspi_cleanup"
    },
    {
      "description": "This function retrieves the mode of the specified pin.",
      "name": "raspi_get_mode",
      "return_description": "The mode of the pin.",
      "signature": "pin_modes raspi_get_mode(pins pin);",
      "unique_global_name": "raspi_get_mode"
    },
    {
      "description": "This function initializes the GPIO library for use. It should be called before any other GPIO functions.",
      "name": "raspi_init",
      "return_description": null,
      "signature": "void raspi_init();",
      "unique_global_name": "raspi_init"
    },
    {
      "description": "This function reads the value from the specified pin.",
      "name": "raspi_read",
      "return_description": "The value read from the pin.",
      "signature": "pin_values raspi_read(pins pin);",
      "unique_global_name": "raspi_read"
    },
    {
      "description": "This function sets the mode of the specified pin to the specified mode.",
      "name": "raspi_set_mode",
      "return_description": null,
      "signature": "void raspi_set_mode(pins pin,pin_modes mode);",
      "unique_global_name": "raspi_set_mode"
    },
    {
      "description": "This function sets the pull-up/down mode for the specified pin.",
      "name": "raspi_set_pull_up_down",
      "return_description": null,
      "signature": "void raspi_set_pull_up_down(pins pin,pull_up_down pud);",
      "unique_global_name": "raspi_set_pull_up_down"
    },
    {
      "description": "This function sets the PWM duty cycle for the specified pin.",
      "name": "raspi_set_pwm_dutycycle",
      "return_description": null,
      "signature": "void raspi_set_pwm_dutycycle(pins pin,int dutycycle);",
      "unique_global_name": "raspi_set_pwm_dutycycle"
    },
    {
      "description": "This function sets the PWM frequency for the specified pin.",
      "name": "raspi_set_pwm_frequency",
      "return_description": null,
      "signature": "void raspi_set_pwm_frequency(pins pin,int frequency);",
      "unique_global_name": "raspi_set_pwm_frequency"
    },
    {
      "description": "This function sets the PWM range for the specified pin.",
      "name": "raspi_set_pwm_range",
      "return_description": null,
      "signature": "void raspi_set_pwm_range(pins pin,int range);",
      "unique_global_name": "raspi_set_pwm_range"
    },
    {
      "description": "This function writes the specified value to the specified pin.",
      "name": "raspi_write",
      "return_description": null,
      "signature": "void raspi_write(pins pin,pin_values value);",
      "unique_global_name": "raspi_write"
    }
  ]
}
