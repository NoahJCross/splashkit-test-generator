{
  "example": "//\n//  test_timers.cpp\n//  splashkit\n//\n//  Created by Andrew Cain on 12/08/2016.\n//  Copyright Â© 2016 Andrew Cain. All rights reserved.\n//\n\n#include \"window_manager.h\"\n#include \"text.h\"\n#include \"color.h\"\n#include \"input.h\"\n#include \"timers.h\"\n#include \"graphics.h\"\n\nusing namespace splashkit_lib;\nusing namespace std;\n\nvoid run_timer_test()\n{\n    open_window(\"Timer Test\", 400, 400);\n    \n    timer t1 = create_timer(\"timer 1\");\n    create_timer(\"timer 2\");\n    \n    start_timer(t1);\n    start_timer(\"Timer 2\");\n    \n    int last = 0;\n    \n    while( timer_ticks(t1) < 7000)\n    {\n        clear_screen(COLOR_WHITE);\n        if (timer_ticks(t1) / 1000 > last)\n        {\n            last++;\n            if ( timer_paused(\"timer 2\") )\n                resume_timer(\"timer 2\");\n            else\n                pause_timer(\"timer 2\");\n        }\n        \n        draw_text(\"Timer 1: \" + to_string(timer_ticks(t1)), COLOR_NAVY, 40, 30, option_defaults());\n        draw_text(\"Timer 2: \" + to_string(timer_ticks(\"timer 2\")), COLOR_NAVY, 40, 80, option_defaults());\n        \n        refresh_screen();\n        process_events();\n        if (quit_requested()) break;\n    }\n    \n    close_window(\"Timer Test\");\n    free_all_timers();\n}",
  "tests": [
    {
      "description": "Create and return a new Timer. The timer will not be started, and will have\nan initial 'ticks' of 0.",
      "name": "create_timer",
      "return_description": "A new timer.",
      "signature": "timer create_timer(string name);",
      "unique_global_name": "create_timer"
    },
    {
      "description": "Free all of timers that have been created.",
      "name": "free_all_timers",
      "return_description": null,
      "signature": "void free_all_timers();",
      "unique_global_name": "free_all_timers"
    },
    {
      "description": "Free the memory used to store this timer.",
      "name": "free_timer",
      "return_description": null,
      "signature": "void free_timer(timer to_free);",
      "unique_global_name": "free_timer"
    },
    {
      "description": "Checks if SplashKit has a timer with the indicated name.",
      "name": "has_timer",
      "return_description": "True if SplashKit has created a timer with that name.",
      "signature": "bool has_timer(string name);",
      "unique_global_name": "has_timer__named"
    },
    {
      "description": "Pause the timer, getting ticks from a paused timer\nwill continue to return the same time.",
      "name": "pause_timer",
      "return_description": null,
      "signature": "void pause_timer(string name);",
      "unique_global_name": "pause_timer__named"
    },
    {
      "description": "Pause the timer, getting ticks from a paused timer\nwill continue to return the same time.",
      "name": "pause_timer",
      "return_description": null,
      "signature": "void pause_timer(timer to_pause);",
      "unique_global_name": "pause_timer"
    },
    {
      "description": "Resets the named timer",
      "name": "reset_timer",
      "return_description": null,
      "signature": "void reset_timer(string name);",
      "unique_global_name": "reset_timer__named"
    },
    {
      "description": "Resets the time of a given timer",
      "name": "reset_timer",
      "return_description": null,
      "signature": "void reset_timer(timer tmr);",
      "unique_global_name": "reset_timer"
    },
    {
      "description": "Resumes the named timer.",
      "name": "resume_timer",
      "return_description": null,
      "signature": "void resume_timer(string name);",
      "unique_global_name": "resume_timer__named"
    },
    {
      "description": "Resumes a paused timer.",
      "name": "resume_timer",
      "return_description": null,
      "signature": "void resume_timer(timer to_resume);",
      "unique_global_name": "resume_timer"
    },
    {
      "description": "Start a timer. The timer will then start recording the time that has passed.\nYou can check how long has past since the timer was started using the\n`timer_ticks` function.",
      "name": "start_timer",
      "return_description": null,
      "signature": "void start_timer(string name);",
      "unique_global_name": "start_timer__named"
    },
    {
      "description": "Start a timer. The timer will then start recording the time that has passed.\nYou can check how long has past since the timer was started using the\n`timer_ticks` function.",
      "name": "start_timer",
      "return_description": null,
      "signature": "void start_timer(timer to_start);",
      "unique_global_name": "start_timer"
    },
    {
      "description": "Stop the timer. The time is reset to 0 and you must\nrecall start to begin the timer ticking again.",
      "name": "stop_timer",
      "return_description": null,
      "signature": "void stop_timer(string name);",
      "unique_global_name": "stop_timer__named"
    },
    {
      "description": "Stop the timer. The time is reset to 0 and you must\nrecall start to begin the timer ticking again.",
      "name": "stop_timer",
      "return_description": null,
      "signature": "void stop_timer(timer to_stop);",
      "unique_global_name": "stop_timer"
    },
    {
      "description": "Get the timer created with the indicated name.",
      "name": "timer_named",
      "return_description": "Returns the timer fetched from SplashKit",
      "signature": "timer timer_named(string name);",
      "unique_global_name": "timer_named"
    },
    {
      "description": "Indicates if the timer is paused.",
      "name": "timer_paused",
      "return_description": "True if the timer is paused",
      "signature": "bool timer_paused(string name);",
      "unique_global_name": "timer_paused__named"
    },
    {
      "description": "Indicates if the timer is paused.",
      "name": "timer_paused",
      "return_description": "True if the timer is paused",
      "signature": "bool timer_paused(timer to_get);",
      "unique_global_name": "timer_paused"
    },
    {
      "description": "Indicates if the timer is started.",
      "name": "timer_started",
      "return_description": "True if the timer has been started",
      "signature": "bool timer_started(string name);",
      "unique_global_name": "timer_started__named"
    },
    {
      "description": "Indicates if the timer is started.",
      "name": "timer_started",
      "return_description": "True if the timer has been started",
      "signature": "bool timer_started(timer to_get);",
      "unique_global_name": "timer_started"
    },
    {
      "description": "Gets the number of ticks (milliseconds) that have passed since the timer\nwas started/reset. When paused the timer's ticks will not advance until\nthe timer is once again resumed.",
      "name": "timer_ticks",
      "return_description": "The number of milliseconds that have passed since the\ntimer was created (excluding the time the timer was\npaused)",
      "signature": "unsigned int timer_ticks(string name);",
      "unique_global_name": "timer_ticks__named"
    },
    {
      "description": "Gets the number of ticks (milliseconds) that have passed since the timer\nwas started/reset. When paused the timer's ticks will not advance until\nthe timer is once again resumed.",
      "name": "timer_ticks",
      "return_description": "The number of milliseconds that have passed since the\ntimer was created (excluding the time the timer was\npaused)",
      "signature": "unsigned int timer_ticks(timer to_get);",
      "unique_global_name": "timer_ticks"
    }
  ]
}
